<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>---- &lt;i class=&quot;fa fa-heart&quot;&gt;&lt;/i&gt; &lt;i class=&quot;fa fa-skull&quot;&gt;&lt;/i&gt; &lt;i class=&quot;fa fa-robot&quot;&gt;&lt;/i&gt;  ----</title>
    <url>/WestRoute.github.io/2021/09/01/top/</url>
    <content><![CDATA[<div style="text-align: center;color:#808080;">
      <i class="fas fa-crow"></i>
  <span id="sitetime"></span>

<script language=javascript>
    function siteTime(){
        window.setTimeout("siteTime()", 1000);
        var seconds = 1000;
        var minutes = seconds * 60;
        var hours = minutes * 60;
        var days = hours * 24;
        var years = days * 365;
        var today = new Date();
        var todayYear = today.getFullYear();
        var todayMonth = today.getMonth()+1;
        var todayDate = today.getDate();
        var todayHour = today.getHours();
        var todayMinute = today.getMinutes();
        var todaySecond = today.getSeconds();
        /* 
        Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳)
        year - 作为date对象的年份，为4位年份值
        month - 0-11之间的整数，做为date对象的月份
        day - 1-31之间的整数，做为date对象的天数
        hours - 0(午夜24点)-23之间的整数，做为date对象的小时数
        minutes - 0-59之间的整数，做为date对象的分钟数
        seconds - 0-59之间的整数，做为date对象的秒数
        microseconds - 0-999之间的整数，做为date对象的毫秒数
        */
        var t1 = Date.UTC(2021,09,1,00,00,00); //北京时间2018-2-13 00:00:00
        var t2 = Date.UTC(todayYear,todayMonth,todayDate,todayHour,todayMinute,todaySecond);
        var diff = t2-t1;
        var diffYears = Math.floor(diff/years);
        var diffDays = Math.floor((diff/days)-diffYears*365);
        var diffHours = Math.floor((diff-(diffYears*365+diffDays)*days)/hours);
        var diffMinutes = Math.floor((diff-(diffYears*365+diffDays)*days-diffHours*hours)/minutes);
        var diffSeconds = Math.floor((diff-(diffYears*365+diffDays)*days-diffHours*hours-diffMinutes*minutes)/seconds);

        document.getElementById("sitetime").innerHTML=" 已运行"+/*diffYears+" 年 "+*/diffDays+" 天 "+diffHours+" 小时 "+diffMinutes+" 分钟 "+diffSeconds+" 秒";
    }
    siteTime();
</script>
</div>

<br>

<div style="text-align: center;"><font size="4";color="#808080";>已看：1263/3000 | 已读： 169/500</font></div>
<br>
<div  style="text-align: center;">
   电影进度
  <div class="progress-bar" >
                    <div class="progress-film">
                    </div>
                </div>
                <br>
    阅读进度
  <div class="progress-bar">
                    <div class="progress-book">
                    </div>
                </div>
                <br>

<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
  </entry>
  <entry>
    <title>c++11newfunction</title>
    <url>/WestRoute.github.io/2021/12/19/c++11newfunction/</url>
    <content><![CDATA[<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><ol>
<li><p> 缩窄<br>char c1 {66}；</p>
</li>
<li><p>std::initializer_list用于函数参数<br>#include <initializer_list></p>
</li>
</ol>
<span id="more"></span>

<h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><ol>
<li>auto用于简写声明</li>
<li>int n;<br>double x;<br>decltype(x*n) q;</li>
<li>模板别名using=<br>using itType = std::vector<a href="std::string">std::string</a>::iterator;<br>也可以用于模板具体化，但decltype不能<br>template<typename T> using arr12 = std::&lt;T,12&gt;</li>
<li>nullptr</li>
</ol>
<h4 id="智能指针unique-ptr-shared-ptr，weak-ptr"><a href="#智能指针unique-ptr-shared-ptr，weak-ptr" class="headerlink" title="智能指针unique_ptr,shared_ptr，weak_ptr"></a>智能指针unique_ptr,shared_ptr，weak_ptr</h4><h4 id="作用域内枚举"><a href="#作用域内枚举" class="headerlink" title="作用域内枚举"></a>作用域内枚举</h4><p>enum class New1{never,sometimes,often,always};<br>enum struct New2{never,lever,server};</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>C++PrimerPlus</category>
      </categories>
  </entry>
  <entry>
    <title>ping</title>
    <url>/WestRoute.github.io/2021/12/17/ping/</url>
    <content><![CDATA[<h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="built_in">import</span> pings</span><br><span class="line"></span><br><span class="line"><span class="attr">p</span> = pings.Ping(<span class="attr">quiet=False)</span></span><br><span class="line"><span class="attr">res</span> = p.ping(<span class="string">&quot;google.com&quot;</span>)  <span class="comment"># googleを監視</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="用python实现发送原生ping包"><a href="#用python实现发送原生ping包" class="headerlink" title="用python实现发送原生ping包"></a>用python实现发送原生ping包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    A pure python ping implementation using raw socket.</span></span><br><span class="line"><span class="string">    Note that ICMP messages can only be sent from processes running as root.</span></span><br><span class="line"><span class="string">    Derived from ping.c distributed in Linux&#x27;s netkit. That code is</span></span><br><span class="line"><span class="string">    copyright (c) 1989 by The Regents of the University of California.</span></span><br><span class="line"><span class="string">    That code is in turn derived from code written by Mike Muuss of the</span></span><br><span class="line"><span class="string">    US Army Ballistic Research Laboratory in December, 1983 and</span></span><br><span class="line"><span class="string">    placed in the public domain. They have my thanks.</span></span><br><span class="line"><span class="string">    Bugs are naturally mine. I&#x27;d be glad to hear about them. There are</span></span><br><span class="line"><span class="string">    certainly word - size dependenceies here.</span></span><br><span class="line"><span class="string">    Copyright (c) Matthew Dixon Cowles, &lt;http://www.visi.com/~mdc/&gt;.</span></span><br><span class="line"><span class="string">    Distributable under the terms of the GNU General Public License</span></span><br><span class="line"><span class="string">    version 2. Provided with no warranties of any sort.</span></span><br><span class="line"><span class="string">    Original Version from Matthew Dixon Cowles:</span></span><br><span class="line"><span class="string">      -&gt; ftp://ftp.visi.com/users/mdc/ping.py</span></span><br><span class="line"><span class="string">    Rewrite by Jens Diemer:</span></span><br><span class="line"><span class="string">      -&gt; http://www.python-forum.de/post-69122.html#69122</span></span><br><span class="line"><span class="string">    Revision history</span></span><br><span class="line"><span class="string">    ~~~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="string">    March 11, 2010</span></span><br><span class="line"><span class="string">    changes by Samuel Stauffer:</span></span><br><span class="line"><span class="string">    - replaced time.clock with default_timer which is set to</span></span><br><span class="line"><span class="string">      time.clock on windows and time.time on other systems.</span></span><br><span class="line"><span class="string">    May 30, 2007</span></span><br><span class="line"><span class="string">    little rewrite by Jens Diemer:</span></span><br><span class="line"><span class="string">     -  change socket asterisk import to a normal import</span></span><br><span class="line"><span class="string">     -  replace time.time() with time.clock()</span></span><br><span class="line"><span class="string">     -  delete &quot;return None&quot; (or change to &quot;return&quot; only)</span></span><br><span class="line"><span class="string">     -  in checksum() rename &quot;str&quot; to &quot;source_string&quot;</span></span><br><span class="line"><span class="string">    November 22, 1997</span></span><br><span class="line"><span class="string">    Initial hack. Doesn&#x27;t do much, but rather than try to guess</span></span><br><span class="line"><span class="string">    what features I (or others) will want in the future, I&#x27;ve only</span></span><br><span class="line"><span class="string">    put in what I need now.</span></span><br><span class="line"><span class="string">    December 16, 1997</span></span><br><span class="line"><span class="string">    For some reason, the checksum bytes are in the wrong order when</span></span><br><span class="line"><span class="string">    this is run under Solaris 2.X for SPARC but it works right under</span></span><br><span class="line"><span class="string">    Linux x86. Since I don&#x27;t know just what&#x27;s wrong, I&#x27;ll swap the</span></span><br><span class="line"><span class="string">    bytes always and then do an htons().</span></span><br><span class="line"><span class="string">    December 4, 2000</span></span><br><span class="line"><span class="string">    Changed the struct.pack() calls to pack the checksum and ID as</span></span><br><span class="line"><span class="string">    unsigned. My thanks to Jerome Poincheval for the fix.</span></span><br><span class="line"><span class="string">    Januari 27, 2015</span></span><br><span class="line"><span class="string">    Changed receive response to not accept ICMP request messages.</span></span><br><span class="line"><span class="string">    It was possible to receive the very request that was sent.</span></span><br><span class="line"><span class="string">    Last commit info:</span></span><br><span class="line"><span class="string">    ~~~~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="string">    $LastChangedDate: $</span></span><br><span class="line"><span class="string">    $Rev: $</span></span><br><span class="line"><span class="string">    $Author: $</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> os, sys, socket, struct, select, time</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> sys.platform == <span class="string">&quot;win32&quot;</span>:</span><br><span class="line">    <span class="comment"># On Windows, the best timer is time.clock()</span></span><br><span class="line">    default_timer = time.clock</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># On most other platforms the best timer is time.time()</span></span><br><span class="line">    default_timer = time.time</span><br><span class="line"> </span><br><span class="line"><span class="comment">#From /usr/include/linux/icmp.h; your milage may vary.</span></span><br><span class="line">ICMP_ECHO_REQUEST = <span class="number">8</span> <span class="comment"># Seems to be the same on Solaris.</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checksum</span>(<span class="params">source_string</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    I&#x27;m not too confident that this is right but testing seems</span></span><br><span class="line"><span class="string">    to suggest that it gives the same answers as in_cksum in ping.c</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    countTo = (<span class="built_in">len</span>(source_string)/<span class="number">2</span>)*<span class="number">2</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> count&lt;countTo:</span><br><span class="line">        thisVal = <span class="built_in">ord</span>(source_string[count + <span class="number">1</span>])*<span class="number">256</span> + <span class="built_in">ord</span>(source_string[count])</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + thisVal</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> &amp; <span class="number">0xffffffff</span> <span class="comment"># Necessary?</span></span><br><span class="line">        count = count + <span class="number">2</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> countTo&lt;<span class="built_in">len</span>(source_string):</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + <span class="built_in">ord</span>(source_string[<span class="built_in">len</span>(source_string) - <span class="number">1</span>])</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> &amp; <span class="number">0xffffffff</span> <span class="comment"># Necessary?</span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">sum</span> = (<span class="built_in">sum</span> &gt;&gt; <span class="number">16</span>)  +  (<span class="built_in">sum</span> &amp; <span class="number">0xffff</span>)</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + (<span class="built_in">sum</span> &gt;&gt; <span class="number">16</span>)</span><br><span class="line">    answer = ~<span class="built_in">sum</span></span><br><span class="line">    answer = answer &amp; <span class="number">0xffff</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">#Swap bytes. Bugger me if I know why.</span></span><br><span class="line">    answer = answer &gt;&gt; <span class="number">8</span> | (answer &lt;&lt; <span class="number">8</span> &amp; <span class="number">0xff00</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">receive_one_ping</span>(<span class="params">my_socket, ID, timeout</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    receive the ping from the socket.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    timeLeft = timeout</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        startedSelect = default_timer()</span><br><span class="line">        whatReady = select.select([my_socket], [], [], timeLeft)</span><br><span class="line">        howLongInSelect = (default_timer() - startedSelect)</span><br><span class="line">        <span class="keyword">if</span> whatReady[<span class="number">0</span>] == []: <span class="comment"># Timeout</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">        timeReceived = default_timer()</span><br><span class="line">        recPacket, addr = my_socket.recvfrom(<span class="number">1024</span>)</span><br><span class="line">        icmpHeader = recPacket[<span class="number">20</span>:<span class="number">28</span>]</span><br><span class="line">        <span class="built_in">type</span>, code, checksum, packetID, sequence = struct.unpack(</span><br><span class="line">            <span class="string">&quot;bbHHh&quot;</span>, icmpHeader</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#Filters out the echo request itself. </span></span><br><span class="line">        <span class="comment">#This can be tested by pinging 127.0.0.1 </span></span><br><span class="line">        <span class="comment">#You&#x27;ll see your own request</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span> != <span class="number">8</span> <span class="keyword">and</span> packetID == ID:</span><br><span class="line">            bytesInDouble = struct.calcsize(<span class="string">&quot;d&quot;</span>)</span><br><span class="line">            timeSent = struct.unpack(<span class="string">&quot;d&quot;</span>, recPacket[<span class="number">28</span>:<span class="number">28</span> + bytesInDouble])[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">return</span> timeReceived - timeSent</span><br><span class="line"> </span><br><span class="line">        timeLeft = timeLeft - howLongInSelect</span><br><span class="line">        <span class="keyword">if</span> timeLeft &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_one_ping</span>(<span class="params">my_socket, dest_addr, ID</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Send one ping to the given &gt;dest_addr&lt;.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    dest_addr  =  socket.gethostbyname(dest_addr)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#Header is type (8), code (8), checksum (16), id (16), sequence (16)</span></span><br><span class="line">    my_checksum = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">#Make a dummy heder with a 0 checksum.</span></span><br><span class="line">    header = struct.pack(<span class="string">&quot;bbHHh&quot;</span>, ICMP_ECHO_REQUEST, <span class="number">0</span>, my_checksum, ID, <span class="number">1</span>)</span><br><span class="line">    bytesInDouble = struct.calcsize(<span class="string">&quot;d&quot;</span>)</span><br><span class="line">    data = (<span class="number">192</span> - bytesInDouble) * <span class="string">&quot;Q&quot;</span></span><br><span class="line">    data = struct.pack(<span class="string">&quot;d&quot;</span>, default_timer()) + data</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#Calculate the checksum on the data and the dummy header.</span></span><br><span class="line">    my_checksum = checksum(header + data)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#Now that we have the right checksum, we put that in. It&#x27;s just easier</span></span><br><span class="line">    <span class="comment">#to make up a new header than to stuff it into the dummy.</span></span><br><span class="line">    header = struct.pack(</span><br><span class="line">        <span class="string">&quot;bbHHh&quot;</span>, ICMP_ECHO_REQUEST, <span class="number">0</span>, socket.htons(my_checksum), ID, <span class="number">1</span></span><br><span class="line">    )</span><br><span class="line">    packet = header + data</span><br><span class="line">    my_socket.sendto(packet, (dest_addr, <span class="number">1</span>)) <span class="comment"># Don&#x27;t know about the 1</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_one</span>(<span class="params">dest_addr, timeout</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Returns either the delay (in seconds) or none on timeout.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    icmp = socket.getprotobyname(<span class="string">&quot;icmp&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        my_socket = socket.socket(socket.AF_INET, socket.SOCK_RAW, icmp)</span><br><span class="line">    <span class="keyword">except</span> socket.error, (errno, msg):</span><br><span class="line">        <span class="keyword">if</span> errno == <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># Operation not permitted</span></span><br><span class="line">            msg = msg + (</span><br><span class="line">                <span class="string">&quot; - Note that ICMP messages can only be sent from processes&quot;</span></span><br><span class="line">                <span class="string">&quot; running as root.&quot;</span></span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">raise</span> socket.error(msg)</span><br><span class="line">        <span class="keyword">raise</span> <span class="comment"># raise the original error</span></span><br><span class="line"> </span><br><span class="line">    my_ID = os.getpid() &amp; <span class="number">0xFFFF</span></span><br><span class="line"> </span><br><span class="line">    send_one_ping(my_socket, dest_addr, my_ID)</span><br><span class="line">    delay = receive_one_ping(my_socket, my_ID, timeout)</span><br><span class="line"> </span><br><span class="line">    my_socket.close()</span><br><span class="line">    <span class="keyword">return</span> delay</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verbose_ping</span>(<span class="params">dest_addr, timeout = <span class="number">2</span>, count = <span class="number">4</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Send &gt;count&lt; ping to &gt;dest_addr&lt; with the given &gt;timeout&lt; and display</span></span><br><span class="line"><span class="string">    the result.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(count):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;ping %s...&quot;</span> % dest_addr,</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            delay  =  do_one(dest_addr, timeout)</span><br><span class="line">        <span class="keyword">except</span> socket.gaierror, e:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;failed. (socket error: &#x27;%s&#x27;)&quot;</span> % e[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> delay  ==  <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;failed. (timeout within %ssec.)&quot;</span> % timeout</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            delay  =  delay * <span class="number">1000</span></span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;get ping in %0.4fms&quot;</span> % delay</span><br><span class="line">    <span class="built_in">print</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    verbose_ping(<span class="string">&quot;heise.de&quot;</span>)</span><br><span class="line">    verbose_ping(<span class="string">&quot;google.com&quot;</span>)</span><br><span class="line">    verbose_ping(<span class="string">&quot;192.168.90.126&quot;</span>)</span><br><span class="line">    verbose_ping(<span class="string">&quot;192.168.1.1&quot;</span>)</span><br></pre></td></tr></table></figure>


<h3 id="ICMP协议编程实践：实现ping命令-Python语言"><a href="#ICMP协议编程实践：实现ping命令-Python语言" class="headerlink" title="ICMP协议编程实践：实现ping命令(Python语言)"></a>ICMP协议编程实践：实现ping命令(Python语言)</h3><p>转载自<a herf="https://network.fasionchan.com/zh_CN/latest/practices/ping-by-icmp-py.html">ICMP协议编程实践：实现ping命令(Python语言)</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- encoding=utf8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">FileName:   ping.py</span></span><br><span class="line"><span class="string">Author:     Fasion Chan</span></span><br><span class="line"><span class="string">@contact:   fasionchan@gmail.com</span></span><br><span class="line"><span class="string">@version:   $Id$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Description:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Changelog:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_checksum</span>(<span class="params">icmp</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(icmp) % <span class="number">2</span>:</span><br><span class="line">        icmp += <span class="string">b&#x27;\00&#x27;</span></span><br><span class="line"></span><br><span class="line">    checksum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(icmp)//<span class="number">2</span>):</span><br><span class="line">        word, = struct.unpack(<span class="string">&#x27;!H&#x27;</span>, icmp[<span class="number">2</span>*i:<span class="number">2</span>*i+<span class="number">2</span>])</span><br><span class="line">        checksum += word</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        carry = checksum &gt;&gt; <span class="number">16</span></span><br><span class="line">        <span class="keyword">if</span> carry:</span><br><span class="line">            checksum = (checksum &amp; <span class="number">0xffff</span>) + carry</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    checksum = ~checksum &amp; <span class="number">0xffff</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&#x27;!H&#x27;</span>, checksum)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_checksum</span>(<span class="params">icmp</span>):</span></span><br><span class="line">    highs = icmp[<span class="number">0</span>::<span class="number">2</span>]</span><br><span class="line">    lows = icmp[<span class="number">1</span>::<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    checksum = ((<span class="built_in">sum</span>(highs) &lt;&lt; <span class="number">8</span>) + <span class="built_in">sum</span>(lows))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        carry = checksum &gt;&gt; <span class="number">16</span></span><br><span class="line">        <span class="keyword">if</span> carry:</span><br><span class="line">            checksum = (checksum &amp; <span class="number">0xffff</span>) + carry</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    checksum = ~checksum &amp; <span class="number">0xffff</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&#x27;!H&#x27;</span>, checksum)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pack_icmp_echo_request</span>(<span class="params">ident, seq, payload</span>):</span></span><br><span class="line">    pseudo = struct.pack(</span><br><span class="line">        <span class="string">&#x27;!BBHHH&#x27;</span>,</span><br><span class="line">        <span class="number">8</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        ident,</span><br><span class="line">        seq,</span><br><span class="line">    ) + payload</span><br><span class="line">    checksum = calculate_checksum(pseudo)</span><br><span class="line">    <span class="keyword">return</span> pseudo[:<span class="number">2</span>] + checksum + pseudo[<span class="number">4</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unpack_icmp_echo_reply</span>(<span class="params">icmp</span>):</span></span><br><span class="line">    _<span class="built_in">type</span>, code, _, ident, seq, = struct.unpack(</span><br><span class="line">        <span class="string">&#x27;!BBHHH&#x27;</span>,</span><br><span class="line">        icmp[:<span class="number">8</span>]</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> _<span class="built_in">type</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> code != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    payload = icmp[<span class="number">8</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ident, seq, payload</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_routine</span>(<span class="params">sock, addr, ident, magic, stop</span>):</span></span><br><span class="line">    <span class="comment"># first sequence no</span></span><br><span class="line">    seq = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> stop:</span><br><span class="line">        <span class="comment">#currrent time</span></span><br><span class="line">        sending_ts = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#packet current time to payload</span></span><br><span class="line">        <span class="comment">#in order to calculate round trip time from reply</span></span><br><span class="line">        payload = struct.pack(<span class="string">&#x27;!d&#x27;</span>, sending_ts) + magic</span><br><span class="line"></span><br><span class="line">        <span class="comment">#pack icmp packet</span></span><br><span class="line">        icmp = pack_icmp_echo_request(ident, seq, payload)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#send it</span></span><br><span class="line">        sock.sendto(icmp, <span class="number">0</span>, (addr, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        seq += <span class="number">1</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recv_routine</span>(<span class="params">sock, ident, magic</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment">#wait for another icmp packet</span></span><br><span class="line">        ip, (src_addr, _) = sock.recvfrom(<span class="number">1500</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#unpack it</span></span><br><span class="line">        result = unpack_icmp_echo_reply(ip[<span class="number">20</span>:])</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#print info</span></span><br><span class="line">        _ident, seq, payload = result</span><br><span class="line">        <span class="keyword">if</span> _ident != ident:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        sending_ts, = struct.unpack(<span class="string">&#x27;!d&#x27;</span>, payload[:<span class="number">8</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s seq=%d %5.2fms&#x27;</span> % (</span><br><span class="line">            src_addr,</span><br><span class="line">            seq,</span><br><span class="line">            (time.time()-sending_ts) * <span class="number">1000</span>,</span><br><span class="line">        ))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ping</span>(<span class="params">addr</span>):</span></span><br><span class="line">    <span class="comment">#create socket for sending and receiving icmp packet</span></span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_ICMP)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#id field</span></span><br><span class="line">    ident = os.getpid()</span><br><span class="line">    <span class="comment">#magic string to pad</span></span><br><span class="line">    magic = <span class="string">b&#x27;1234567890&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#sender thread stop flag</span></span><br><span class="line">    <span class="comment">#append anything to stop</span></span><br><span class="line">    sender_stop = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">#start sender thread</span></span><br><span class="line">    <span class="comment">#call send_routine function to send icmp forever</span></span><br><span class="line">    args = (sock, addr, ident, magic, sender_stop,)</span><br><span class="line">    sender = threading.Thread(target=send_routine, args=args)</span><br><span class="line">    sender.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#receive icmp reply forever</span></span><br><span class="line">        recv_routine(sock, ident, magic)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#tell sender thread to stop</span></span><br><span class="line">    sender_stop.append(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#clean sender thread</span></span><br><span class="line">    sender.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ping(sys.argv[<span class="number">1</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>网络通讯</category>
        <category>A-Top-Down-Approach</category>
      </categories>
  </entry>
  <entry>
    <title>openCV02</title>
    <url>/WestRoute.github.io/2021/12/16/openCV02/</url>
    <content><![CDATA[<h4 id="人脸识别"><a href="#人脸识别" class="headerlink" title="人脸识别"></a>人脸识别</h4><span id="more"></span>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">import</span> cv<span class="number">2</span></span><br><span class="line"><span class="attribute">import</span> aicommon.initAI()</span><br><span class="line"></span><br><span class="line"><span class="attribute">cap</span>=cv<span class="number">2</span>.VideoCapture(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="attribute">if</span> cap.isOpened() is True:</span><br><span class="line">      <span class="attribute">while</span> True:</span><br><span class="line">            <span class="attribute">ret</span>, frame =cap.read()</span><br><span class="line"></span><br><span class="line">            <span class="attribute">face</span>= cascade.detectMultiScale(frame)</span><br><span class="line"></span><br><span class="line">            <span class="attribute">if</span> len(face) &gt; <span class="number">0</span>:</span><br><span class="line">                  <span class="attribute">for</span> x,y,w,h in face:</span><br><span class="line">                        <span class="attribute">cv2</span>.rectangele(frame,(x,y),(x+w,y+h),(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),thickness=<span class="number">2</span>)</span><br><span class="line">                  <span class="attribute">cv2</span>.imshow(&#x27;camera&#x27;,frame)</span><br><span class="line">            <span class="attribute">if</span> cv<span class="number">2</span>.waitKey(<span class="number">1</span>)==<span class="number">27</span>:</span><br><span class="line">                  <span class="attribute">break</span></span><br><span class="line"><span class="attribute">cap</span>.release()</span><br><span class="line"><span class="attribute">cv2</span>.destoryAllWindows()</span><br><span class="line">                  </span><br></pre></td></tr></table></figure>

<h4 id="圆的识别"><a href="#圆的识别" class="headerlink" title="圆的识别"></a>圆的识别</h4><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>openCV</category>
      </categories>
  </entry>
  <entry>
    <title>c++10 file operator</title>
    <url>/WestRoute.github.io/2021/12/16/c++10stream/</url>
    <content><![CDATA[<h3 id="流和缓冲区"><a href="#流和缓冲区" class="headerlink" title="流和缓冲区"></a>流和缓冲区</h3><p>C++把输入和输出看作字节流，程序从字节流抽取字节<br>| 数据类型     | 描述                                                                       |<br>|———-|————————————————————————–|<br>| ofstream | 该数据类型表示输出文件流，用于创建文件并向文件写入信息。                                             |<br>| ifstream | 该数据类型表示输入文件流，用于从文件读取信息。                                                  |<br>| fstream  | 该数据类型通常表示文件流，且同时具有 ofstream 和 ifstream 两种功能，这意味着它可以创建文件，向文件写入信息，从文件读取信息。 |</p>
<span id="more"></span>

<p>iostream自动创建8个流对象</p>
<ol>
<li>cin标准输入流</li>
<li>cout标准输出流</li>
<li>cerr标准错误流，显示错误消息，直接发送，不会被缓冲</li>
<li>clog标准错误流，被缓冲</li>
<li>对象代表流</li>
</ol>
<h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><p>输出到文件</p>
<h4 id="重载-lt-lt"><a href="#重载-lt-lt" class="headerlink" title="重载&lt;&lt;"></a>重载&lt;&lt;</h4><p>C:左位移<br>C++：插入运算符<br>cout&lt;&lt;“putlock”返回的是cout对象，因此可以通过插入来连接输出<br>&lt;&lt;用来显示字符，put，write用来显示字符串<br>cout.put(‘W’);<br>cout.put(‘W’).put(‘W’);</p>
<h4 id="刷新输出缓冲区"><a href="#刷新输出缓冲区" class="headerlink" title="刷新输出缓冲区"></a>刷新输出缓冲区</h4><ol>
<li><p>修改显示计数系统</p>
<details><summary>manip.cpp (可点开查看)</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// manip.cpp -- using format manipulators </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span> </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Enter an integer: &quot;</span>;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;n n*n\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; n &lt;&lt; <span class="string">&quot;	&quot;</span> &lt;&lt; n * n &lt;&lt; <span class="string">&quot; (decimal)\n&quot;</span>;</span><br><span class="line">	<span class="comment">// set to hex mode </span></span><br><span class="line">	cout &lt;&lt; hex;</span><br><span class="line">	cout &lt;&lt; n &lt;&lt; <span class="string">&quot;	&quot;</span>;</span><br><span class="line">	cout &lt;&lt; n * n &lt;&lt; <span class="string">&quot; (hexadecimal)\n&quot;</span>;</span><br><span class="line">	<span class="comment">// set to octal mode</span></span><br><span class="line">	cout &lt;&lt; oct &lt;&lt; n &lt;&lt; <span class="string">&quot;	&quot;</span> &lt;&lt; n * n &lt;&lt; <span class="string">&quot; (octal)\n&quot;</span>;</span><br><span class="line">	<span class="comment">// alternative way to call a manipulator dec &lt; cout);</span></span><br><span class="line">	cout &lt;&lt; n &lt;&lt; <span class="string">&quot;	&quot;</span> &lt;&lt; n * n &lt;&lt; <span class="string">&quot; (decimal)\n&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<br></li>
<li><p>调整字段宽度</p>
<details><summary>width.cpp(可点开查看)</summary>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// width.cpp -- using the width method </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> std::cout;</span><br><span class="line">	<span class="keyword">int</span> w = cout.<span class="built_in">width</span>(<span class="number">30</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;default field width = &quot;</span> &lt;&lt; w &lt;&lt; <span class="string">&quot;:\n&quot;</span>;</span><br><span class="line">	cout.<span class="built_in">width</span>(<span class="number">5</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;N&quot;</span> &lt;&lt; <span class="string">&quot;:&quot;</span>;</span><br><span class="line">	cout.<span class="built_in">width</span>(<span class="number">8</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;N * N&quot;</span> &lt;&lt; <span class="string">&quot;:\n&quot;</span>;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i *= <span class="number">10</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout.<span class="built_in">width</span>(<span class="number">5</span>);</span><br><span class="line">		cout &lt;&lt; i &lt;&lt; <span class="string">&quot;:&quot;</span>;</span><br><span class="line">		cout.<span class="built_in">width</span>(<span class="number">8</span>);</span><br><span class="line">		cout &lt;&lt; i * i &lt;&lt; <span class="string">&quot;:\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details><br></li>
<li><p>填充字符</p>
<details><summary>fill.cpp(可点开查看)</summary>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fill.cpp -- changing fill character for fields </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> std::cout;</span><br><span class="line">	cout.<span class="built_in">fill</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">char</span> * staff[<span class="number">2</span>] = &#123; <span class="string">&quot;Waldo Whipsnade&quot;</span>, <span class="string">&quot;Wilmarie Wooper&quot;</span> &#125;;</span><br><span class="line">	<span class="keyword">long</span> bonus[<span class="number">2</span>] = &#123; <span class="number">900</span>, <span class="number">1350</span> &#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; staff[i] &lt;&lt; <span class="string">&quot;: $&quot;</span>;</span><br><span class="line">		cout.<span class="built_in">width</span>(<span class="number">7</span>);</span><br><span class="line">		cout &lt;&lt; bonus[i] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details><br></li>
<li><p>设置浮点数</p>
<details><summary>precise.cpp(可点开查看)</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//precise.cpp -- setting the precision</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> std::cout;</span><br><span class="line">	<span class="keyword">float</span> pricel = <span class="number">20.40</span>;</span><br><span class="line">	<span class="keyword">float</span> price2 = <span class="number">1.9</span> + <span class="number">8.0</span> / <span class="number">9.0</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;V&#x27;Furry Friends\&quot; is S&quot;</span> &lt;&lt; pricel &lt;&lt; <span class="string">&quot;!\n &quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\&quot;Fiery Fiends\&quot; is $&quot;</span> &lt;&lt; price2 &lt;&lt; <span class="string">&quot;!\n&quot;</span>;</span><br><span class="line">	cout.<span class="built_in">precision</span>(<span class="number">2</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\&quot;Furry Friends\&quot; is $&quot;</span> &lt;&lt; pricel &lt;&lt; <span class="string">&quot;!\n &quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\&quot;Fiery Fiends\&quot; is $&quot;</span> &lt;&lt; price2 &lt;&lt; <span class="string">&quot;!\n&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details><br></li>
<li><p>setf</p>
<details><summary>setf.cpp(可点开查看)</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//setf.cpp -- using setf() to control formatting</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">	<span class="keyword">int</span> temperature = <span class="number">63</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Today&#x27;s water temperature:&quot;</span>;</span><br><span class="line">		cout.<span class="built_in">setf</span>(ios_base::showpos);	<span class="comment">// show plus sign</span></span><br><span class="line">	cout &lt;&lt; temperature &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;For our programming friends, that&#x27;s\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; std::hex &lt;&lt; temperature &lt;&lt; endl; <span class="comment">// use hex</span></span><br><span class="line">	cout.<span class="built_in">setf</span>(ios_base::uppercase);	<span class="comment">// use uppercase in hex</span></span><br><span class="line">	cout.<span class="built_in">setf</span>(ios_base::showbase);	<span class="comment">// use OX prefix for hex</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;or\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; temperature &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;How &quot;</span> &lt;&lt; <span class="literal">true</span> &lt;&lt; <span class="string">&quot;! oops -- How &quot;</span>;</span><br><span class="line">	cout.<span class="built_in">setf</span>(ios_base::boolalpha);</span><br><span class="line">	cout &lt;&lt; <span class="literal">true</span> &lt;&lt; <span class="string">&quot;!\n&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details><br>
<details><summary>setf2.cpp(可点开查看)</summary>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// setf2.cpp -- using setf() with 2 arguments to control formatting </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">	<span class="comment">// use left justification, show the plus sign, show trailing</span></span><br><span class="line">	<span class="comment">// zeros, with a precision of 3 </span></span><br><span class="line">	cout.<span class="built_in">setf</span>(ios_base::left, ios_base::adjustfield);</span><br><span class="line">	cout.<span class="built_in">setf</span>(ios_base::showpos); </span><br><span class="line">cout.<span class="built_in">setf</span>(ios_base::showpoint); </span><br><span class="line">cout.<span class="built_in">precision</span>(<span class="number">3</span>);</span><br><span class="line">	<span class="comment">// use e-notation and save old format setting</span></span><br><span class="line">ios_base::fmtflags old = cout.<span class="built_in">setf</span>(ios_base::scientific, ios_base::floatfield);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Left Justification:\n&quot;</span>;</span><br><span class="line"><span class="keyword">long</span> n;</span><br><span class="line"><span class="keyword">for</span> (n = <span class="number">1</span>; n &lt;= <span class="number">41</span>; n += <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">	cout.<span class="built_in">width</span>(<span class="number">4</span>);</span><br><span class="line">	cout &lt;&lt; n &lt;&lt; <span class="string">&quot;|&quot;</span>;</span><br><span class="line">	cout.<span class="built_in">width</span>(<span class="number">12</span>);</span><br><span class="line">	cout &lt;&lt; <span class="built_in">sqrt</span>(<span class="built_in"><span class="keyword">double</span></span>(n)) &lt;&lt; <span class="string">&quot;|\n&quot;</span>;</span><br><span class="line">	<span class="comment">// change to internal justification</span></span><br><span class="line">	cout.<span class="built_in">setf</span>(ios_base::internal, ios_base::adjustfield);</span><br><span class="line">	<span class="comment">// restore default floating-point display style </span></span><br><span class="line">	cout.<span class="built_in">setf</span>(old, ios_base::floatfield);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Internal Justification:\n&quot;</span>; <span class="keyword">for</span> (n = <span class="number">1</span>; n &lt;= <span class="number">41</span>; n += <span class="number">10</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout.<span class="built_in">width</span>(<span class="number">4</span>); cout &lt;&lt; n &lt;&lt; cout.<span class="built_in">width</span>(<span class="number">12</span>);</span><br><span class="line">		cout &lt;&lt; <span class="built_in">sqrt</span>(<span class="built_in"><span class="keyword">double</span></span>(n)) &lt;&lt; <span class="string">&quot;|\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// use right justification, fixed notation</span></span><br><span class="line">	cout.<span class="built_in">setf</span>(ios_base::right, ios_base::adjustfield);</span><br><span class="line">	cout.<span class="built_in">setf</span>(ios_base::fixed, ios_base::floatfield);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Right Justification:\n&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (n = <span class="number">1</span>; n &lt;= <span class="number">41</span>; n += <span class="number">10</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout.<span class="built_in">width</span>(<span class="number">4</span>);</span><br><span class="line">		cout &lt;&lt; n &lt;&lt; <span class="string">&quot; |&quot;</span>;</span><br><span class="line">		cout.<span class="built_in">width</span>(<span class="number">12</span>);</span><br><span class="line">		cout &lt;&lt; <span class="built_in">sqrt</span>(<span class="built_in"><span class="keyword">double</span></span>(n)) &lt;&lt; <span class="string">&quot;|\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details><br></li>
<li><p>标准控制符</p>
<img src="/WestRoute.github.io/images/charactercontrol.png"></li>
<li><p>头文件iomanip<br>setrecision()设置精度<br>setfill()设置填充字符<br>setw()设置字段宽度</p>
</li>
</ol>
<h3 id="使用cin进行输入"><a href="#使用cin进行输入" class="headerlink" title="使用cin进行输入"></a>使用cin进行输入</h3><h4 id="流状态-iostate"><a href="#流状态-iostate" class="headerlink" title="流状态(iostate)"></a>流状态(iostate)</h4><p>eofbit() 如果达到文件尾，设置为1<br>badfit() 如果流被破坏，则设置为1<br>failbit()<br>goodbit() 表示0<br>good()<br>eof() 如果eofbit被设置，则返回true<br>bad() 如果badbit被设置，则返回true<br>fail() 如果badbit 或 fail比他 被设置，则返回true<br>exception() 返回一个掩码，指出那些标记异常被引发<br>exception(isostate ex)<br>设置状态<br>clear(iostate s)<br>setstate(iostate s)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// cinexcp.cpp -- having cin throw an exception </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">	<span class="comment">// have failbit cause an exception to be thrown</span></span><br><span class="line">	cin.<span class="built_in">exceptions</span>(ios_base::failbit);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Enter numbers: &quot;</span>;</span><br><span class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> input;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (cin &gt;&gt; input)</span><br><span class="line">		&#123;</span><br><span class="line">			sum += input;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in"><span class="keyword">catch</span></span> (ios_base::failure &amp; bf)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; bf.<span class="built_in">what</span>() &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;0! the horror!\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Last value entered = &quot;</span> &lt;&lt; input &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Sum = &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="其他istream方法"><a href="#其他istream方法" class="headerlink" title="其他istream方法"></a>其他istream方法</h4><p>get(char&amp;)get(void)提供不跳过空格的但字符输入功能<br>get(char&amp;,int,char)和getline(char&amp;,int,char)在默认情况下读取整行而不是一个单词<br>char line[50];<br>cin.get(line,50);将在第49位或空格停止输入。<br>get()将分界字符留在输入队列中，getline()不保留</p>
<details><summary>setf2.cpp(可点开查看)</summary>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// get_fun.cpp -- using get() and getline()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Limit = <span class="number">255</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> std::cout;</span><br><span class="line">	<span class="keyword">using</span> std::cin;</span><br><span class="line">	<span class="keyword">using</span> std::endl;</span><br><span class="line">	<span class="keyword">char</span> input[Limit];</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Enter a string for getlineO processing:\n&quot;</span>;</span><br><span class="line">	cin.<span class="built_in">getline</span>(input, Limit, <span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Here is your input:\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; input &lt;&lt; <span class="string">&quot;\nDone with phase 1\n&quot;</span>;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">char</span> ch;</span><br><span class="line">	cin.<span class="built_in">get</span>(ch);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;The next input character is &quot;</span> &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">if</span> (ch != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">		cin.<span class="built_in">ignore</span>(Limit, <span class="string">&#x27;\n&#x27;</span>);	<span class="comment">// discard rest of line</span></span><br><span class="line"> </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Enter a string for get() processing:\n&quot;</span>;</span><br><span class="line">	cin.<span class="built_in">get</span>(input, Limit, <span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Here is your input:\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; input &lt;&lt; <span class="string">&quot;\nDone with phase 2\n&quot;</span>;</span><br><span class="line">	cin.<span class="built_in">get</span>(ch);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;The next input character is &quot;</span> &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details><br>
read()读取指定字节，并将它们储存到指定位置上
peek()返回输入中的下一个字节，但不抽取输入流
gcount()
putback()

<h3 id="文件输入和输出"><a href="#文件输入和输出" class="headerlink" title="文件输入和输出"></a>文件输入和输出</h3><p>输出:</p>
<ol>
<li>创建一个ofstream对象来管理输出流</li>
<li>将该对象与特定的文件关联起来</li>
<li>使用count的方式使用该对象，唯一的区别是输出将进入文件，而不是屏幕<br>输入也一样</li>
</ol>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//fileio.cpp -- saving to a file</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span> <span class="comment">// not needed for many systems </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">	string filename;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Enter name for new file: &quot;</span>;</span><br><span class="line">	cin &gt;&gt; filename;</span><br><span class="line">	<span class="comment">// create output stream object for new file and call it fout </span></span><br><span class="line">	<span class="function">ofstream <span class="title">fout</span><span class="params">(filename.c_str())</span></span>;</span><br><span class="line">	fout &lt;&lt; <span class="string">&quot;For your eyes only!\n&quot;</span>;	<span class="comment">// write to file</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Enter your secret number: &quot;</span>;<span class="comment">// write to screen</span></span><br><span class="line">	<span class="keyword">float</span> secret; cin &gt;&gt; secret;</span><br><span class="line">	fout &lt;&lt; <span class="string">&quot;Your secret number is &quot;</span> &lt;&lt; secret &lt;&lt; endl;</span><br><span class="line">	fout.<span class="built_in">close</span>();	<span class="comment">// close file</span></span><br><span class="line">	<span class="comment">// create input stream object for new file and call it fin </span></span><br><span class="line">	<span class="function">ifstream <span class="title">fin</span><span class="params">(filename.c_str())</span></span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Here are the contents of &quot;</span> &lt;&lt; filename &lt;&lt; <span class="string">&quot;:\n&quot;</span>; <span class="keyword">char</span> ch;</span><br><span class="line">	<span class="keyword">while</span> (fin.<span class="built_in">get</span>(ch))	<span class="comment">// read character from file and</span></span><br><span class="line">		cout &lt;&lt; ch;	<span class="comment">// write it to screen</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Done\n&quot;</span>;</span><br><span class="line">	fin.<span class="built_in">close</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>试图打开一个不存在的文件进行输入时，将设置failbit位<br>fin.open(argv[file]);<br>if(fin.fail()){<br>    ….<br>}<br>也可以这样做<br>fin.open(argv[file]);<br>if(!fin){<br>    ….<br>}<br>也可以<br>if(!fin.is_open()){<br>    ….<br>}<br>打开多个文件<br>fin.open(“one.txt”);<br>fin.close();<br>fin.clear();<br>fin.open(“two.txt”);<br><br><br>argc是命令行参数个数，是数组</p>
<table>
<thead>
<tr>
<th>模式标志</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>ios::app</td>
<td>追加模式。所有写入都追加到文件末尾。</td>
</tr>
<tr>
<td>ios::ate</td>
<td>文件打开后定位到文件末尾。</td>
</tr>
<tr>
<td>ios::in</td>
<td>打开文件用于读取。</td>
</tr>
<tr>
<td>ios::out</td>
<td>打开文件用于写入。</td>
</tr>
<tr>
<td>ios::trunc</td>
<td>如果该文件已经存在，其内容将在打开文件之前被截断，即把文件长度设为 0。</td>
</tr>
</tbody></table>
<p>二进制输入<br>二进制文件更精准更简洁，但可移植性较差<br>read()和write()支持二进制<br>ofstream fout(“planets.dat”,ios_base::out|ios_base::app|ios_base::binary);<br>fout.write((char*) &amp;pl,sizeof pl);</p>
<h4 id="随机存取"><a href="#随机存取" class="headerlink" title="随机存取"></a>随机存取</h4><p>文件读取整个文件后，并设置eofbit元素，禁止对文件进一步读写。使用clear()方法重置流状态，并打开eofbit后，程序便可以再次访问该文件，else处理其他原因引起的停止读取的情况。<br>seekg()和seekp()函数提供对文件的随机存取<br>tellg()和tellp()方法报告当前的文件位置</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// random.cpp -- random access to a binary file</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span> <span class="comment">// not required by most systems </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span>	<span class="comment">// for exit()</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LIM = <span class="number">20</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">planet</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">char</span> name[LIM];<span class="comment">// name of planet </span></span><br><span class="line">	<span class="keyword">double</span> population;<span class="comment">// its population</span></span><br><span class="line">	<span class="keyword">double</span> g;<span class="comment">// its acceleration of gravity</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * file = <span class="string">&quot;planets.dat&quot;</span>;	<span class="comment">// ASSUMED TO EXIST (binary.cpp example)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">eatline</span><span class="params">()</span> </span>&#123; <span class="keyword">while</span> (std::cin.<span class="built_in">get</span>() != <span class="string">&#x27;\n&#x27;</span>) <span class="keyword">continue</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">	planet pl;</span><br><span class="line">	cout &lt;&lt; fixed;</span><br><span class="line">	<span class="comment">// show initial contents</span></span><br><span class="line">	fstream finout;	<span class="comment">// read and write streams</span></span><br><span class="line">	finout.<span class="built_in">open</span>(file, ios_base::in | ios_base::out | ios_base::binary);</span><br><span class="line">	<span class="comment">//<span class="doctag">NOTE:</span> Some Unix systems require omitting - ios::binary </span></span><br><span class="line">	<span class="keyword">int</span> ct = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (finout.<span class="built_in">is_open</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		finout.<span class="built_in">seekg</span>(<span class="number">0</span>);<span class="comment">// go to beginning</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Here are tRe current contents of the  &quot;</span> &lt;&lt; file &lt;&lt; <span class="string">&quot; file: \n&quot;</span>;</span><br><span class="line">		<span class="keyword">while</span> (finout.<span class="built_in">read</span>((<span class="keyword">char</span> *)&amp;pl, <span class="keyword">sizeof</span> pl))</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; ct++ &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; <span class="built_in">setw</span>(LIM) &lt;&lt; pl.name &lt;&lt; <span class="string">&quot;: &quot;</span></span><br><span class="line">				&lt;&lt; <span class="built_in">setprecision</span>(<span class="number">0</span>) &lt;&lt; <span class="built_in">setw</span>(<span class="number">-12</span>) &lt;&lt; pl.population</span><br><span class="line">				&lt;&lt; <span class="built_in">setprecision</span>(<span class="number">2</span>) &lt;&lt; <span class="built_in">setw</span>(<span class="number">6</span>) &lt;&lt; pl.g &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (finout.<span class="built_in">eof</span>())</span><br><span class="line">			finout.<span class="built_in">clear</span>(); <span class="comment">// clear eof flag</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			cerr &lt;&lt; <span class="string">&quot;Error in reading &quot;</span> &lt;&lt; file &lt;&lt; <span class="string">&quot;.\n&quot;</span>;</span><br><span class="line">			<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cerr &lt;&lt; file &lt;&lt; <span class="string">&quot; could not be opened -- bye.\n&quot;</span>;</span><br><span class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// &quot;&quot;&quot;change a record&quot;&quot;&quot;</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Enter the record number you wish to change: &quot;</span>;</span><br><span class="line">	<span class="keyword">long</span> rec;</span><br><span class="line">	cin &gt;&gt; rec;</span><br><span class="line">	<span class="built_in">eatline</span>();	<span class="comment">// get rid of newline</span></span><br><span class="line">	<span class="keyword">if</span> (rec &lt; <span class="number">0</span> || rec &gt;= ct)</span><br><span class="line">	&#123;</span><br><span class="line">		cerr &lt;&lt; <span class="string">&quot;Invalid record number -- bye\n&quot;</span>;</span><br><span class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">	&#125;</span><br><span class="line">	streampos place = rec * <span class="keyword">sizeof</span> pl; <span class="comment">// convert to streampos type</span></span><br><span class="line">	finout.<span class="built_in">seekg</span>(place);	<span class="comment">// random access</span></span><br><span class="line">	<span class="keyword">if</span> (finout.<span class="built_in">fail</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		cerr &lt;&lt; <span class="string">&quot;Error on attempted seek\n&quot;</span>;</span><br><span class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	finout.<span class="built_in">read</span>((<span class="keyword">char</span> *)&amp;pl, <span class="keyword">sizeof</span> pl);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Your selection:\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; rec &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; <span class="built_in">setw</span>(LIM) &lt;&lt; pl.name &lt;&lt; <span class="string">&quot;: &quot;</span></span><br><span class="line">		&lt;&lt; <span class="built_in">setprecision</span>(<span class="number">0</span>) &lt;&lt; <span class="built_in">setw</span>(<span class="number">12</span>) &lt;&lt; pl.population</span><br><span class="line">		&lt;&lt; <span class="built_in">setprecision</span>(<span class="number">2</span>) &lt;&lt; <span class="built_in">setw</span>(<span class="number">6</span>) &lt;&lt; pl.g &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// clear eof flag</span></span><br><span class="line">	<span class="keyword">if</span> (finout.<span class="built_in">eof</span>())</span><br><span class="line">		finout.<span class="built_in">clear</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Enter planet name: &quot;</span>;</span><br><span class="line">	cin.<span class="built_in">get</span>(pl.name, LIM);</span><br><span class="line">	<span class="built_in">eatline</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Enter planetary population: &quot;</span>;</span><br><span class="line">	cin &gt;&gt; pl.population;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Enter planet&#x27;s acceleration of gravity: &quot;</span>;</span><br><span class="line">	cin &gt;&gt; pl.g;</span><br><span class="line">	finout.<span class="built_in">seekp</span>(place);	<span class="comment">// go back</span></span><br><span class="line">	finout.<span class="built_in">write</span>((<span class="keyword">char</span> *)&amp;pl, <span class="keyword">sizeof</span> pl) &lt;&lt; flush;</span><br><span class="line">	<span class="keyword">if</span> (finout.<span class="built_in">fail</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		cerr &lt;&lt; <span class="string">&quot;Error on attempted write\n&quot;</span>;</span><br><span class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// show revised file ct = 0;</span></span><br><span class="line">	finout.<span class="built_in">seekg</span>(<span class="number">0</span>);	<span class="comment">// go to beginning of file</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Here are the new contents of the &quot;</span> &lt;&lt; file &lt;&lt; <span class="string">&quot;file:\n&quot;</span>;</span><br><span class="line">	<span class="keyword">while</span> (finout.<span class="built_in">read</span>((<span class="keyword">char</span> *)&amp;pl, <span class="keyword">sizeof</span> pl))</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; ct++ &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; <span class="built_in">setw</span>(LIM) &lt;&lt; pl.name &lt;&lt; <span class="string">&quot;: &quot;</span></span><br><span class="line">			&lt;&lt; <span class="built_in">setprecision</span>(<span class="number">0</span>) &lt;&lt; <span class="built_in">setw</span>(<span class="number">12</span>) &lt;&lt; pl.population</span><br><span class="line">			&lt;&lt; <span class="built_in">setprecision</span>(<span class="number">2</span>) &lt;&lt; <span class="built_in">setw</span>(<span class="number">6</span>) &lt;&lt; pl.g &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	finout.<span class="built_in">close</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Done.\n&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="内核格式化"><a href="#内核格式化" class="headerlink" title="内核格式化"></a>内核格式化</h3><p>iostream族支持程序与终端之间的I/O<br>fstream族使用相同的接口提供程序和文件之间的I/O<br>sstream族使用相同的接口提供程序和string对象之间的I/O</p>
<p>读取string对象中的格式化信息或将格式化信息写入string对象中被称为内核格式化(incore formatting)<br><br></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// strin.cpp -- formatted reading from a char array </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span> </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">	string lit = <span class="string">&quot;t was a dark and stormy day, and the full moon glowed brilliantly. &quot;</span>;</span><br><span class="line">	<span class="function">istringstream <span class="title">instr</span><span class="params">(lit)</span></span>; <span class="comment">// use buf for input </span></span><br><span class="line">	string <span class="keyword">word</span>;</span><br><span class="line">	<span class="keyword">while</span> (instr &gt;&gt; <span class="keyword">word</span>)<span class="comment">// read a word a time</span></span><br><span class="line">		cout &lt;&lt; <span class="keyword">word</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>C++PrimerPlus</category>
      </categories>
  </entry>
  <entry>
    <title>電子部品</title>
    <url>/WestRoute.github.io/2021/12/12/ec01/</url>
    <content><![CDATA[<script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML">
</script>
<script type="text/x-mathjax-config">
 MathJax.Hub.Config({
 tex2jax: {
 inlineMath: [['$', '$'] ],
 displayMath: [ ['$$','$$'], ["\\[","\\]"] ]
 }
 });
</script>
<h4 id="インダクタ-キャパシタ"><a href="#インダクタ-キャパシタ" class="headerlink" title="インダクタ/キャパシタ"></a>インダクタ/キャパシタ</h4><p>インダクタのインピーダンス: (コイル)<br>$$ X_{L} = j\omega L $$<br>キャパシタのインピーダンス: (コンデンサー)<br>$$ X_{C} = \frac{1}{j\omega C} $$</p>
<span id="more"></span>
<blockquote><p>インダクタの用途と使用例<br>以上でご紹介した特性を用いて、インダクタはどのような用途で使われ、どのような役割を担っているのでしょうか。<br>大まかに分けると、三つの用途が挙げられます。</p>
<p><strong>電源回路用(パワーインダクタ、チョークコイル)</strong></p>
<p>私たちのお家に設置されているコンセントから出てくるのは交流電流です。しかしながら多くの電子回路は直流電流で駆動します。<br>その直流は、ノイズが少ないほど精密機器をスムーズに動かしてくれますね。</p>
<p>インダクタは、交流電流は通しづらく、直流電流は通しやすい、という性質がありました。<br>また、高周波であればあるほど誘導リアクタンス(抵抗のようなもの)は高くなる、という特性もありますね。</p>
<p>つまり、電源用回路(平滑回路に用いられることが多い)にインダクタを入れることによって、より直流に近い電流を次の回路に流せる。<br>かつ高周波を阻止し、余計なノイズを除去することが可能となります。</p>
<p>こういった電源回路用のインダクタをパワーインダクタ、あるいはチョークコイルと呼びます。<br>パワーインダクタにはチップ型の小型軽量なものから、大電流下での使用ができる大型のものまでと、ラインナップは様々です。</p>
<p><strong>高周波回路用(トロイダル・コアなど)</strong></p>
<p>これは、電源回路用同様、精密機器を正確に動作させるために、高周波を通さない特性を活かすインダクタの使用例です。</p>
<p>携帯電話や無線LANといった通信回路は超高周波数帯域で、通常のインダクタだと回路内の周囲の環境に影響されて本来の性能を発揮できません。<br>電波障害の原因になってしまいます。</p>
<p>そこで使用されるのが、円環状の強磁性体に巻き線を巻いたトロイダル・コアと呼ばれるインダクタです。<br>トロイダル・コイルとも呼ばれます。</p>
<p>トロイダル(Toroidal)は「ドーナツ状の」という意味を持つように、ドーナツのように真ん中が空洞となった形状が特徴的です。<br>芯に強磁性体が入っていると、一方の先端から磁力線が飛び出してもう一方の端に繋がってしまい、漏れ磁束(磁場が外側に漏れてしまうこと)が出ます。<br>これは、周囲の電子部品に影響を与えたり、影響を受けたりする、ということ。</p>
<p>ドーナツ状のトロイダル・コアを使うことによって磁場の多くが芯の中に閉じ込められ、漏れ磁束を抑えることができ、インダクタンスが高効率かつ安定して発生できます。<br>ちなみにこれもアンペールの法則によるものです。</p>
<p>トロイダル・コアのインダクタンスは芯の材質や金属線の巻き数、芯となる強磁性体の断面積などによって変わります。仕様書を確認しましょう。</p>
<p><strong>電源変圧用(トランス)</strong></p>
<p>海外旅行には必須の変圧器。英語でTransformerのため、トランスとも呼ばれていますね。</p>
<p>この仕組みはインダクタの利用にあります。<br>変圧器は、一つの強磁性体に導線を二つ以上巻き付けた構造となっています。<br>この時、入力側のインダクタを一次、出力側を二次と表します。</p>
<p>一次インダクタに交流電流が流れると電磁誘導作用によって磁場が発生しますが、レンツの法則によって磁束の中にある二次インダクタに電流が流れます。</p>
<p>つまり、二次側で出力電圧が発生する、ということ。<br>この電圧を調整するには、一次と二次で導線の巻き数の比で決定します。<br>一次側のインダクタの巻き数に対し、二次側の巻き数が小さいほど出力電圧は小さくなります。</p>
<p>なお、インダクタに磁場は交流でないと発生しないため、直流電圧を変換することはできません。</p>
<p>三分類でご紹介しましたが、もちろんインダクタの役割はまだまだたくさん。<br>後述しますが近年では製品開発が進み、より高い効率でより使いやすいインダクタが市場を賑わせています。</p>
<footer><strong>https://contents.zaikostore.com/semiconductor/3367/</strong></footer></blockquote>

<h4 id="整流ダイオード"><a href="#整流ダイオード" class="headerlink" title="整流ダイオード"></a>整流ダイオード</h4><p>ダイオードの構造において、P型半導体の端子を「<strong>アノード</strong>」、N型半導体の端子を「<strong>カソード</strong>」と呼びます。この2つの端子の間では、アノードからカソードの方向への電流しか流れないという働きがあり、このことを「整流作用」と呼びます。</p>
<p>整流の主な目的は交流を直流に変換することですが、高電圧、高電流という特徴があります。</p>
<h4 id="トランジスタ"><a href="#トランジスタ" class="headerlink" title="トランジスタ"></a>トランジスタ</h4><p>最も一般的なタイプはバイポーラトランジスタです。NPNバージョンとPNPバージョンもあります。</p>
<h4 id="水晶発振器"><a href="#水晶発振器" class="headerlink" title="水晶発振器"></a>水晶発振器</h4><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>硬件</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络编程作业 02</title>
    <url>/WestRoute.github.io/2021/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%BD%9C%E4%B8%9A02/</url>
    <content><![CDATA[<p>参考来自：<a href="https://github.com/jzplp/Computer-Network-A-Top-Down-Approach-Answer">Computer Network A Top-Down Approach Practice Answer-github</a></p>
<h2 id="chapter3"><a href="#chapter3" class="headerlink" title="chapter3"></a>chapter3</h2><p>RTT （Round Trip Time）<br>GBN协议：发送报文段9次，ACK8次<br>SR协议：发送报文段6次，ACK5次<br>TCP协议：发送报文段6次，ACK5次</p>
<span id="more"></span>
<p>复习：<br><strong>因特网协议栈中的5个层次</strong><br>应用层：提供了一些网络应用程序和应用层协议。<br>运输层：在应用程序端点之间传输运输层报文。主要有TCP和UDP两种协议。<br>网络层：负责将分组从一台主机移动到另一台主机。<br>链路层：沿着路经将数据报传递给下一层结点。<br>物理层：将整个帧从一个网络元素移动到邻近的网络元素。</p>
<table>
<thead>
<tr>
<th>OSI 7</th>
<th>TCP/IP</th>
</tr>
</thead>
<tbody><tr>
<td>应用层</td>
<td>应用层</td>
</tr>
<tr>
<td>表示层</td>
<td>-</td>
</tr>
<tr>
<td>会话层</td>
<td>-</td>
</tr>
<tr>
<td>运输层</td>
<td>运输层</td>
</tr>
<tr>
<td>网络层</td>
<td>网际层IP</td>
</tr>
<tr>
<td>数据连接层</td>
<td>网络连接层</td>
</tr>
<tr>
<td>物理层</td>
<td>-</td>
</tr>
</tbody></table>
<h3 id="关于nmap的小实验"><a href="#关于nmap的小实验" class="headerlink" title="关于nmap的小实验"></a>关于nmap的小实验</h3><p>1.windows没有nmap工具，需要手动下载：<a href="https://nmap.org/">https://nmap.org/</a><br>2.检测目标主机某端口的TCP是否开放</p>
<p>无法到达指定的端口，可能是由于防火墙</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -sT -p<span class="number">80</span> <span class="number">192.168.2.220</span></span><br><span class="line"><span class="attribute">Starting</span> Nmap <span class="number">7</span>.<span class="number">80</span> ( https://nmap.org ) at <span class="number">2019</span>-<span class="number">12</span>-<span class="number">07</span> <span class="number">14</span>:<span class="number">48</span> ?D<span class="number">1</span>ú±ê×?ê±??</span><br><span class="line"><span class="attribute">Nmap</span> scan report for MI<span class="number">9</span>-jzphone.lan (<span class="number">192.168.2.220</span>)</span><br><span class="line"><span class="attribute">Host</span> is up (<span class="number">0</span>.<span class="number">074</span>s latency).</span><br><span class="line"></span><br><span class="line"><span class="attribute">PORT</span>   STATE    SERVICE</span><br><span class="line"><span class="attribute">80</span>/tcp filtered http</span><br><span class="line"><span class="attribute">MAC</span> Address: A<span class="number">8</span>:<span class="number">9</span>C:ED:A<span class="number">7</span>:D<span class="number">9</span>:EC (Xiaomi Communications)</span><br><span class="line"></span><br><span class="line"><span class="attribute">Nmap</span> done: <span class="number">1</span> IP address (<span class="number">1</span> host up) scanned in <span class="number">2</span>.<span class="number">33</span> seconds</span><br></pre></td></tr></table></figure>
<p>端口打开</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -sT -p<span class="number">80</span> <span class="number">192.168.2.1</span></span><br><span class="line"><span class="attribute">Starting</span> Nmap <span class="number">7</span>.<span class="number">80</span> ( https://nmap.org ) at <span class="number">2019</span>-<span class="number">12</span>-<span class="number">07</span> <span class="number">14</span>:<span class="number">51</span> ?D<span class="number">1</span>ú±ê×?ê±??</span><br><span class="line"><span class="attribute">Nmap</span> scan report for phicomm.me (<span class="number">192.168.2.1</span>)</span><br><span class="line"><span class="attribute">Host</span> is up (<span class="number">0</span>.<span class="number">0024</span>s latency).</span><br><span class="line"></span><br><span class="line"><span class="attribute">PORT</span>   STATE SERVICE</span><br><span class="line"><span class="attribute">80</span>/tcp open  http</span><br><span class="line"><span class="attribute">MAC</span> Address: <span class="number">68</span>:DB:<span class="number">54</span>:CC:<span class="number">6</span>B:BE (Phicomm (Shanghai))</span><br><span class="line"></span><br><span class="line"><span class="attribute">Nmap</span> done: <span class="number">1</span> IP address (<span class="number">1</span> host up) scanned in <span class="number">1</span>.<span class="number">47</span> seconds</span><br></pre></td></tr></table></figure>

<p>端口关闭</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -sT -p<span class="number">80</span> <span class="number">192.168.2.239</span></span><br><span class="line"><span class="attribute">Starting</span> Nmap <span class="number">7</span>.<span class="number">80</span> ( https://nmap.org ) at <span class="number">2019</span>-<span class="number">12</span>-<span class="number">07</span> <span class="number">14</span>:<span class="number">56</span> ?D<span class="number">1</span>ú±ê×?ê±??</span><br><span class="line"><span class="attribute">Nmap</span> scan report for LAPTOP-<span class="number">3</span>CP<span class="number">7</span>H<span class="number">0</span>GM.lan (<span class="number">192.168.2.239</span>)</span><br><span class="line"><span class="attribute">Host</span> is up (<span class="number">1</span>.<span class="number">0</span>s latency).</span><br><span class="line"></span><br><span class="line"><span class="attribute">PORT</span>   STATE  SERVICE</span><br><span class="line"><span class="attribute">80</span>/tcp closed http</span><br><span class="line"></span><br><span class="line"><span class="attribute">Nmap</span> done: <span class="number">1</span> IP address (<span class="number">1</span> host up) scanned in <span class="number">3</span>.<span class="number">38</span> seconds</span><br></pre></td></tr></table></figure>

<h2 id="chapter4"><a href="#chapter4" class="headerlink" title="chapter4"></a>chapter4</h2><h3 id="ICMP-ping"><a href="#ICMP-ping" class="headerlink" title="ICMP ping"></a>ICMP ping</h3><blockquote><p>Ping是一个网络应用程序，用于测试某个主机在IP网络中是否可访问。它也用于测试计算机的网卡或测试网络延迟。它通过向目标主机发送ICMP“回显”包并监听ICMP“回显”应答来工作。“回显”有时称为”pong”。ping程序测量往返时间，记录数据包丢失，并输出接收到的回显包的统计摘要（往返时间的最小值、最大值和平均值，以及在某些版本中的平均值的标准差）。 您的任务是用python开发自己的Ping程序。您的程序将使用ICMP，但为了保持简单，将不完全遵循RFC 1739中的正式规范。请注意，您只需要编写程序的客户端，因为服务器端所需的功能几乎内置于所有操作系统中。 您的Ping程序能将ping请求发送到指定的主机，间隔大约一秒钟。每个消息包含一个带有时间戳的数据包。每个数据包发送完后，程序最多等待一秒，用于接收响应。如果一秒后服务器没有响应，那么客户端应假设ping数据包或pong数据包在网络中丢失（或者服务器已关闭）。</p>
</blockquote>
<details><summary>代理服务器的Python代码框架(可点开查看)</summary>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">from socket <span class="built_in">import</span> *</span><br><span class="line"><span class="built_in">import</span> os</span><br><span class="line"><span class="built_in">import</span> sys</span><br><span class="line"><span class="built_in">import</span> struct</span><br><span class="line"><span class="built_in">import</span> time</span><br><span class="line"><span class="built_in">import</span> select</span><br><span class="line"><span class="built_in">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="attr">ICMP_ECHO_REQUEST</span> = <span class="number">8</span></span><br><span class="line"></span><br><span class="line">def checksum(str):</span><br><span class="line">    <span class="attr">csum</span> = <span class="number">0</span></span><br><span class="line">    <span class="attr">countTo</span> = (len(str) / <span class="number">2</span>) * <span class="number">2</span></span><br><span class="line">    <span class="attr">count</span> = <span class="number">0</span></span><br><span class="line">    while count &lt; countTo:</span><br><span class="line">        <span class="attr">thisVal</span> = ord(str[count+<span class="number">1</span>]) * <span class="number">256</span> + ord(str[count])</span><br><span class="line">        <span class="attr">csum</span> = csum + thisVal</span><br><span class="line">        <span class="attr">csum</span> = csum &amp; <span class="number">0</span>xffffffffL</span><br><span class="line">        <span class="attr">count</span> = count + <span class="number">2</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> countTo &lt; len(str):</span><br><span class="line">        <span class="attr">csum</span> = csum + ord(str[len(str) - <span class="number">1</span>])</span><br><span class="line">        <span class="attr">csum</span> = csum &amp; <span class="number">0</span>xffffffffL</span><br><span class="line"></span><br><span class="line">    <span class="attr">csum</span> = (csum &gt;&gt; <span class="number">16</span>) + (csum &amp; <span class="number">0</span>xffff)</span><br><span class="line">    <span class="attr">csum</span> = csum + (csum &gt;&gt; <span class="number">16</span>)</span><br><span class="line">    <span class="attr">answer</span> = ~csum</span><br><span class="line">    <span class="attr">answer</span> = answer &amp; <span class="number">0</span>xffff</span><br><span class="line">    <span class="attr">answer</span> = answer &gt;&gt; <span class="number">8</span> | (answer &lt;&lt; <span class="number">8</span> &amp; <span class="number">0</span>xff00)</span><br><span class="line">    return answer</span><br><span class="line"></span><br><span class="line">def receiveOnePing(mySocket, ID, timeout, destAddr):</span><br><span class="line">    <span class="attr">timeLeft</span> = timeout</span><br><span class="line"></span><br><span class="line">    while <span class="number">1</span>:</span><br><span class="line">        <span class="attr">startedSelect</span> = time.time()</span><br><span class="line">        <span class="attr">whatReady</span> = select.select([mySocket], [], [], timeLeft)</span><br><span class="line">        <span class="attr">howLongInSelect</span> = (time.time() - startedSelect)</span><br><span class="line">        <span class="keyword">if</span> whatReady[<span class="number">0</span>] == []: <span class="comment"># Timeout</span></span><br><span class="line">            return <span class="string">&quot;Request timed out.&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">timeReceived</span> = time.time()</span><br><span class="line">        recPacket, <span class="attr">addr</span> = mySocket.recvfrom(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#Fill in start</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#Fetch the ICMP header from the IP packet</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#Fill in end</span></span><br><span class="line">        </span><br><span class="line">        <span class="attr">timeLeft</span> = timeLeft - howLongInSelect</span><br><span class="line">        <span class="keyword">if</span> timeLeft &lt;= <span class="number">0</span>:</span><br><span class="line">        	return <span class="string">&quot;Request timed out.&quot;</span></span><br><span class="line"></span><br><span class="line">def sendOnePing(mySocket, destAddr, ID):</span><br><span class="line">    <span class="comment"># Header is type (8), code (8), checksum (16), id (16), sequence (16)</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">myChecksum</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment"># Make a dummy header with a 0 checksum.</span></span><br><span class="line">    <span class="comment"># struct -- Interpret strings as packed binary data</span></span><br><span class="line">    <span class="attr">header</span> = struct.pack(<span class="string">&quot;bbHHh&quot;</span>, ICMP_ECHO_REQUEST, <span class="number">0</span>, myChecksum, ID, <span class="number">1</span>)</span><br><span class="line">    <span class="attr">data</span> = struct.pack(<span class="string">&quot;d&quot;</span>, time.time())</span><br><span class="line">    <span class="comment"># Calculate the checksum on the data and the dummy header.</span></span><br><span class="line">    <span class="attr">myChecksum</span> = checksum(header + data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get the right checksum, and put in the header</span></span><br><span class="line">    <span class="keyword">if</span> sys.<span class="attr">platform</span> == &#x27;darwin&#x27;:</span><br><span class="line">        <span class="attr">myChecksum</span> = socket.htons(myChecksum) &amp; <span class="number">0</span>xffff</span><br><span class="line">        <span class="comment">#Convert 16-bit integers from host to network byte order.</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="attr">myChecksum</span> = socket.htons(myChecksum)</span><br><span class="line">    </span><br><span class="line">    <span class="attr">header</span> = struct.pack(<span class="string">&quot;bbHHh&quot;</span>, ICMP_ECHO_REQUEST, <span class="number">0</span>, myChecksum, ID, <span class="number">1</span>)</span><br><span class="line">    <span class="attr">packet</span> = header + data</span><br><span class="line">    </span><br><span class="line">    mySocket.sendto(packet, (destAddr, <span class="number">1</span>)) <span class="comment"># AF_INET address must be tuple, not str</span></span><br><span class="line">    <span class="comment">#Both LISTS and TUPLES consist of a number of objects</span></span><br><span class="line">    <span class="comment">#which can be referenced by their position number within the object</span></span><br><span class="line"></span><br><span class="line">def doOnePing(destAddr, timeout):</span><br><span class="line">    <span class="attr">icmp</span> = socket.getprotobyname(<span class="string">&quot;icmp&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#SOCK_RAW is a powerful socket type. For more details see: http://sock-raw.org/papers/sock_raw</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#Fill in start</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#Create Socket here</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#Fill in end</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">myID</span> = os.getpid() &amp; <span class="number">0</span>xFFFF <span class="comment">#Return the current process i</span></span><br><span class="line">    sendOnePing(mySocket, destAddr, myID)</span><br><span class="line">    <span class="attr">delay</span> = receiveOnePing(mySocket, myID, timeout, destAddr)</span><br><span class="line"></span><br><span class="line">    mySocket.close()</span><br><span class="line">    return delay</span><br><span class="line"></span><br><span class="line">def ping(host, <span class="attr">timeout=1):</span></span><br><span class="line">    <span class="comment">#timeout=1 means: If one second goes by without a reply from the server,</span></span><br><span class="line">    <span class="comment">#the client assumes that either the client’s ping or the server’s pong is lost</span></span><br><span class="line">    <span class="attr">dest</span> = socket.gethostbyname(host)</span><br><span class="line">    print <span class="string">&quot;Pinging &quot;</span> + dest + <span class="string">&quot; using Python:&quot;</span></span><br><span class="line">    print <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment">#Send ping requests to a server separated by approximately one second</span></span><br><span class="line">    while <span class="number">1</span> :</span><br><span class="line">        <span class="attr">delay</span> = doOnePing(dest, timeout)</span><br><span class="line">        print delay</span><br><span class="line">        time.sleep(<span class="number">1</span>)<span class="comment"># one second</span></span><br><span class="line">    return delay</span><br><span class="line"></span><br><span class="line">ping(<span class="string">&quot;www.poly.edu&quot;</span>)</span><br></pre></td></tr></table></figure>
</details>

<p>1.在“receiveOnePing”方法中，你需要获得ICMP_ECHO_REPLY结构并取出您需要的信息，如校验和、序列号、生存时间（TTL）等。在尝试完成“receiveOnePing”方法之前先研究“sendOnePing”方法。<br>2.您不必关心校验和，因为它已经在代码中给出了。<br>3.这个作业要求使用原始的sockets。在某些操作系统中，您可能需要管理员/root权限才能运行你的Ping程序。<br>4.有关ICMP的更多信息，请参见此编程练习的结尾部分。<br>5.首先，通过发送数据包到本地主机来测试你的客户端，主机地址：127.0.0.1。然后，你应该看看你的Ping程序如何通过在不同大洲的pinging服务器在网络中工作。<br><br></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对代码进行了少部分改动</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">import</span> socket</span><br><span class="line"><span class="built_in">import</span> os</span><br><span class="line"><span class="built_in">import</span> sys</span><br><span class="line"><span class="built_in">import</span> struct</span><br><span class="line"><span class="built_in">import</span> time</span><br><span class="line"><span class="built_in">import</span> select</span><br><span class="line"><span class="built_in">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="attr">ICMP_ECHO_REQUEST</span> = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def checksum(strCheck):</span><br><span class="line">    <span class="attr">csum</span> = <span class="number">0</span></span><br><span class="line">    <span class="attr">countTo</span> = (len(strCheck) / <span class="number">2</span>) * <span class="number">2</span></span><br><span class="line">    <span class="attr">count</span> = <span class="number">0</span></span><br><span class="line">    while count &lt; countTo:</span><br><span class="line">        <span class="attr">thisVal</span> = strCheck[count + <span class="number">1</span>] * <span class="number">256</span> + strCheck[count]</span><br><span class="line">        <span class="attr">csum</span> = csum + thisVal</span><br><span class="line">        <span class="attr">csum</span> = csum &amp; <span class="number">0</span>xffffffff</span><br><span class="line">        <span class="attr">count</span> = count + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> countTo &lt; len(strCheck):</span><br><span class="line">        <span class="attr">csum</span> = csum + strCheck[len(strCheck) - <span class="number">1</span>]</span><br><span class="line">        <span class="attr">csum</span> = csum &amp; <span class="number">0</span>xffffffff</span><br><span class="line"></span><br><span class="line">    <span class="attr">csum</span> = (csum &gt;&gt; <span class="number">16</span>) + (csum &amp; <span class="number">0</span>xffff)</span><br><span class="line">    <span class="attr">csum</span> = csum + (csum &gt;&gt; <span class="number">16</span>)</span><br><span class="line">    <span class="attr">answer</span> = ~csum</span><br><span class="line">    <span class="attr">answer</span> = answer &amp; <span class="number">0</span>xffff</span><br><span class="line">    <span class="attr">answer</span> = answer &gt;&gt; <span class="number">8</span> | (answer &lt;&lt; <span class="number">8</span> &amp; <span class="number">0</span>xff00)</span><br><span class="line">    return answer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def receiveOnePing(mySocket, ID, timeout, destAddr):</span><br><span class="line">    <span class="attr">timeLeft</span> = timeout</span><br><span class="line"></span><br><span class="line">    while <span class="number">1</span>:</span><br><span class="line">        <span class="attr">startedSelect</span> = time.time()</span><br><span class="line">        <span class="attr">whatReady</span> = select.select([mySocket], [], [], timeLeft)</span><br><span class="line">        <span class="attr">howLongInSelect</span> = (time.time() - startedSelect)</span><br><span class="line">        <span class="keyword">if</span> whatReady[<span class="number">0</span>] == []:  <span class="comment"># Timeout</span></span><br><span class="line">            return <span class="string">&quot;Request timed out.&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">timeReceived</span> = time.time()</span><br><span class="line">        recPacket, <span class="attr">addr</span> = mySocket.recvfrom(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">        <span class="attr">header</span> = recPacket[<span class="number">20</span>:<span class="number">28</span>]</span><br><span class="line">        header_type, header_code, header_checksum, header_packet_ID, <span class="attr">header_sequence</span> = struct.unpack(<span class="string">&quot;bbHHh&quot;</span>, header)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(header_type != <span class="number">0</span> <span class="literal">or</span> header_code != <span class="number">0</span> <span class="literal">or</span> header_packet_ID != ID <span class="literal">or</span> header_sequence != <span class="number">1</span>):</span><br><span class="line">            return <span class="string">&quot;Receive error.&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">timeLeft</span> = timeLeft - howLongInSelect</span><br><span class="line">        <span class="keyword">if</span> timeLeft &lt;= <span class="number">0</span>:</span><br><span class="line">            return <span class="string">&quot;Request timed out.&quot;</span></span><br><span class="line">        return timeLeft</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def sendOnePing(mySocket, destAddr, ID):</span><br><span class="line">    <span class="comment"># Header is type (8), code (8), checksum (16), id (16), sequence (16)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">myChecksum</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment"># Make a dummy header with a 0 checksum.</span></span><br><span class="line">    <span class="comment"># 创建一个带有0校验和的伪头。</span></span><br><span class="line">    <span class="comment"># struct -- Interpret strings as packed binary data</span></span><br><span class="line">    <span class="comment"># struct-将字符串解释为打包的二进制数据</span></span><br><span class="line">    <span class="attr">header</span> = struct.pack(<span class="string">&quot;bbHHh&quot;</span>, ICMP_ECHO_REQUEST, <span class="number">0</span>, myChecksum, ID, <span class="number">1</span>)</span><br><span class="line">    <span class="attr">data</span> = struct.pack(<span class="string">&quot;d&quot;</span>, time.time())</span><br><span class="line">    <span class="comment"># Calculate the checksum on the data and the dummy header.</span></span><br><span class="line">    <span class="comment"># 计算数据和虚拟头的校验和。</span></span><br><span class="line">    <span class="attr">myChecksum</span> = checksum(header + data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get the right checksum, and put in the header</span></span><br><span class="line">    <span class="keyword">if</span> sys.<span class="attr">platform</span> == &#x27;darwin&#x27;:</span><br><span class="line">        <span class="attr">myChecksum</span> = socket.htons(myChecksum) &amp; <span class="number">0</span>xffff</span><br><span class="line">        <span class="comment"># Convert 16-bit integers from host to network byte order.</span></span><br><span class="line">        <span class="comment"># 将主机的16位整数转换为网络字节顺序。</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="attr">myChecksum</span> = socket.htons(myChecksum)</span><br><span class="line"></span><br><span class="line">    <span class="attr">header</span> = struct.pack(<span class="string">&quot;bbHHh&quot;</span>, ICMP_ECHO_REQUEST, <span class="number">0</span>, myChecksum, ID, <span class="number">1</span>)</span><br><span class="line">    <span class="attr">packet</span> = header + data</span><br><span class="line"></span><br><span class="line">    mySocket.sendto(packet, (destAddr, <span class="number">1</span>))  <span class="comment"># AF_INET address must be tuple, not str</span></span><br><span class="line">    <span class="comment"># Both LISTS and TUPLES consist of a number of objects</span></span><br><span class="line">    <span class="comment"># which can be referenced by their position number within the object</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def doOnePing(destAddr, timeout):</span><br><span class="line">    <span class="attr">icmp</span> = socket.getprotobyname(<span class="string">&quot;icmp&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="attr">mySocket</span> = socket.socket(socket.AF_INET, socket.SOCK_RAW, icmp)</span><br><span class="line"></span><br><span class="line">    <span class="attr">myID</span> = os.getpid() &amp; <span class="number">0</span>xFFFF  <span class="comment"># Return the current process i</span></span><br><span class="line">    sendOnePing(mySocket, destAddr, myID)</span><br><span class="line">    <span class="attr">delay</span> = receiveOnePing(mySocket, myID, timeout, destAddr)</span><br><span class="line"></span><br><span class="line">    mySocket.close()</span><br><span class="line">    return delay</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def ping(host, <span class="attr">timeout=1):</span></span><br><span class="line">    <span class="comment"># timeout=1 means: If one second goes by without a reply from the server,</span></span><br><span class="line">    <span class="comment"># the client assumes that either the client’s ping or the server’s pong is lost</span></span><br><span class="line">    <span class="comment"># timeout = 1 表示：如果一秒钟没有收到服务器的答复，则客户端会认为客户端的ping或服务器的pong丢失了</span></span><br><span class="line">    <span class="attr">dest</span> = socket.gethostbyname(host)</span><br><span class="line">    print(<span class="string">&quot;Pinging &quot;</span> + dest + <span class="string">&quot; using Python:&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="comment"># Send ping requests to a server separated by approximately one second</span></span><br><span class="line">    <span class="comment"># 将ping请求发送到间隔约一秒钟的服务器</span></span><br><span class="line">    while <span class="number">1</span>:</span><br><span class="line">        <span class="attr">delay</span> = doOnePing(dest, timeout)</span><br><span class="line">        print(<span class="number">1</span> - delay)</span><br><span class="line">        time.sleep(<span class="number">1</span>)  <span class="comment"># one second</span></span><br><span class="line"></span><br><span class="line">ping(<span class="string">&quot;baidu.com&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>可选练习</strong><br>1.目前，程序计算每个包的往返时间，并逐个打印出来。修改此命令以符合标准ping程序的工作方式。你需要在所有ping完成后，报告最小，最大和平均RTT，以及数据包丢失率（百分比）。</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对代码进行了少部分改动</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">import</span> socket</span><br><span class="line"><span class="built_in">import</span> os</span><br><span class="line"><span class="built_in">import</span> sys</span><br><span class="line"><span class="built_in">import</span> struct</span><br><span class="line"><span class="built_in">import</span> time</span><br><span class="line"><span class="built_in">import</span> select</span><br><span class="line"><span class="built_in">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="attr">ICMP_ECHO_REQUEST</span> = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def checksum(strCheck):</span><br><span class="line">    <span class="attr">csum</span> = <span class="number">0</span></span><br><span class="line">    <span class="attr">countTo</span> = (len(strCheck) / <span class="number">2</span>) * <span class="number">2</span></span><br><span class="line">    <span class="attr">count</span> = <span class="number">0</span></span><br><span class="line">    while count &lt; countTo:</span><br><span class="line">        <span class="attr">thisVal</span> = strCheck[count + <span class="number">1</span>] * <span class="number">256</span> + strCheck[count]</span><br><span class="line">        <span class="attr">csum</span> = csum + thisVal</span><br><span class="line">        <span class="attr">csum</span> = csum &amp; <span class="number">0</span>xffffffff</span><br><span class="line">        <span class="attr">count</span> = count + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> countTo &lt; len(strCheck):</span><br><span class="line">        <span class="attr">csum</span> = csum + strCheck[len(strCheck) - <span class="number">1</span>]</span><br><span class="line">        <span class="attr">csum</span> = csum &amp; <span class="number">0</span>xffffffff</span><br><span class="line"></span><br><span class="line">    <span class="attr">csum</span> = (csum &gt;&gt; <span class="number">16</span>) + (csum &amp; <span class="number">0</span>xffff)</span><br><span class="line">    <span class="attr">csum</span> = csum + (csum &gt;&gt; <span class="number">16</span>)</span><br><span class="line">    <span class="attr">answer</span> = ~csum</span><br><span class="line">    <span class="attr">answer</span> = answer &amp; <span class="number">0</span>xffff</span><br><span class="line">    <span class="attr">answer</span> = answer &gt;&gt; <span class="number">8</span> | (answer &lt;&lt; <span class="number">8</span> &amp; <span class="number">0</span>xff00)</span><br><span class="line">    return answer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def receiveOnePing(mySocket, ID, timeout, destAddr):</span><br><span class="line">    <span class="attr">timeLeft</span> = timeout</span><br><span class="line"></span><br><span class="line">    while <span class="number">1</span>:</span><br><span class="line">        <span class="attr">startedSelect</span> = time.time()</span><br><span class="line">        <span class="attr">whatReady</span> = select.select([mySocket], [], [], timeLeft)</span><br><span class="line">        <span class="attr">howLongInSelect</span> = (time.time() - startedSelect)</span><br><span class="line">        <span class="keyword">if</span> whatReady[<span class="number">0</span>] == []:  <span class="comment"># Timeout</span></span><br><span class="line">            return <span class="string">&quot;Request timed out.&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">timeReceived</span> = time.time()</span><br><span class="line">        recPacket, <span class="attr">addr</span> = mySocket.recvfrom(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">        <span class="attr">header</span> = recPacket[<span class="number">20</span>:<span class="number">28</span>]</span><br><span class="line">        header_type, header_code, header_checksum, header_packet_ID, <span class="attr">header_sequence</span> = struct.unpack(<span class="string">&quot;bbHHh&quot;</span>, header)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(header_type != <span class="number">0</span> <span class="literal">or</span> header_code != <span class="number">0</span> <span class="literal">or</span> header_packet_ID != ID <span class="literal">or</span> header_sequence != <span class="number">1</span>):</span><br><span class="line">            return <span class="string">&quot;Receive error.&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">timeLeft</span> = timeLeft - howLongInSelect</span><br><span class="line">        <span class="keyword">if</span> timeLeft &lt;= <span class="number">0</span>:</span><br><span class="line">            return <span class="string">&quot;Request timed out.&quot;</span></span><br><span class="line">        return <span class="number">1</span> - timeLeft</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def sendOnePing(mySocket, destAddr, ID):</span><br><span class="line">    <span class="comment"># Header is type (8), code (8), checksum (16), id (16), sequence (16)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">myChecksum</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment"># Make a dummy header with a 0 checksum.</span></span><br><span class="line">    <span class="comment"># 创建一个带有0校验和的伪头。</span></span><br><span class="line">    <span class="comment"># struct -- Interpret strings as packed binary data</span></span><br><span class="line">    <span class="comment"># struct-将字符串解释为打包的二进制数据</span></span><br><span class="line">    <span class="attr">header</span> = struct.pack(<span class="string">&quot;bbHHh&quot;</span>, ICMP_ECHO_REQUEST, <span class="number">0</span>, myChecksum, ID, <span class="number">1</span>)</span><br><span class="line">    <span class="attr">data</span> = struct.pack(<span class="string">&quot;d&quot;</span>, time.time())</span><br><span class="line">    <span class="comment"># Calculate the checksum on the data and the dummy header.</span></span><br><span class="line">    <span class="comment"># 计算数据和虚拟头的校验和。</span></span><br><span class="line">    <span class="attr">myChecksum</span> = checksum(header + data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get the right checksum, and put in the header</span></span><br><span class="line">    <span class="keyword">if</span> sys.<span class="attr">platform</span> == &#x27;darwin&#x27;:</span><br><span class="line">        <span class="attr">myChecksum</span> = socket.htons(myChecksum) &amp; <span class="number">0</span>xffff</span><br><span class="line">        <span class="comment"># Convert 16-bit integers from host to network byte order.</span></span><br><span class="line">        <span class="comment"># 将主机的16位整数转换为网络字节顺序。</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="attr">myChecksum</span> = socket.htons(myChecksum)</span><br><span class="line"></span><br><span class="line">    <span class="attr">header</span> = struct.pack(<span class="string">&quot;bbHHh&quot;</span>, ICMP_ECHO_REQUEST, <span class="number">0</span>, myChecksum, ID, <span class="number">1</span>)</span><br><span class="line">    <span class="attr">packet</span> = header + data</span><br><span class="line"></span><br><span class="line">    mySocket.sendto(packet, (destAddr, <span class="number">1</span>))  <span class="comment"># AF_INET address must be tuple, not str</span></span><br><span class="line">    <span class="comment"># Both LISTS and TUPLES consist of a number of objects</span></span><br><span class="line">    <span class="comment"># which can be referenced by their position number within the object</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def doOnePing(destAddr, timeout):</span><br><span class="line">    <span class="attr">icmp</span> = socket.getprotobyname(<span class="string">&quot;icmp&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="attr">mySocket</span> = socket.socket(socket.AF_INET, socket.SOCK_RAW, icmp)</span><br><span class="line"></span><br><span class="line">    <span class="attr">myID</span> = os.getpid() &amp; <span class="number">0</span>xFFFF  <span class="comment"># Return the current process i</span></span><br><span class="line">    sendOnePing(mySocket, destAddr, myID)</span><br><span class="line">    <span class="attr">delay</span> = receiveOnePing(mySocket, myID, timeout, destAddr)</span><br><span class="line"></span><br><span class="line">    mySocket.close()</span><br><span class="line">    return delay</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def ping(host, <span class="attr">timeout=1):</span></span><br><span class="line">    <span class="comment"># timeout=1 means: If one second goes by without a reply from the server,</span></span><br><span class="line">    <span class="comment"># the client assumes that either the client’s ping or the server’s pong is lost</span></span><br><span class="line">    <span class="comment"># timeout = 1 表示：如果一秒钟没有收到服务器的答复，则客户端会认为客户端的ping或服务器的pong丢失了</span></span><br><span class="line">    <span class="attr">dest</span> = socket.gethostbyname(host)</span><br><span class="line">    print(<span class="string">&quot;正在 Ping&quot;</span>, host, <span class="string">&quot;[&quot;</span>, dest, <span class="string">&quot;] :&quot;</span>)</span><br><span class="line">    <span class="comment"># Send ping requests to a server separated by approximately one second</span></span><br><span class="line">    <span class="comment"># 将ping请求发送到间隔约一秒钟的服务器</span></span><br><span class="line">    <span class="attr">num</span> = <span class="number">4</span></span><br><span class="line">    <span class="attr">lost</span> = <span class="number">0</span></span><br><span class="line">    <span class="attr">delayList</span> = []</span><br><span class="line">    for i <span class="keyword">in</span> range(num):</span><br><span class="line">        <span class="attr">delay</span> = doOnePing(dest, timeout)</span><br><span class="line">        <span class="keyword">if</span>(type(delay) == str):</span><br><span class="line">            print(delay)</span><br><span class="line">            <span class="attr">lost</span> = lost + <span class="number">1</span></span><br><span class="line">            continue</span><br><span class="line">        <span class="attr">delay</span> = int(delay * <span class="number">1000</span>)</span><br><span class="line">        delayList.append(delay)</span><br><span class="line">        print(<span class="string">&quot;来自&quot;</span>, dest, <span class="string">&quot;的回复: 时间=&quot;</span>, delay, <span class="string">&quot;ms&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)  <span class="comment"># one second</span></span><br><span class="line">    print(dest, <span class="string">&quot;的 Ping 统计信息:&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;\t数据包: 已发送 =&quot;</span>, num, <span class="string">&quot;，已接收 =&quot;</span>, num - lost, <span class="string">&quot;，丢失 =&quot;</span>, lost, <span class="string">&quot;(&quot;</span>, lost/num * <span class="number">100</span>, <span class="string">&quot;% 丢失)&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(delayList):</span><br><span class="line">        print(<span class="string">&quot;往返行程的估计时间(以毫秒为单位):&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;\t最短 =&quot;</span>, min(delayList), <span class="string">&quot;ms，最长 =&quot;</span>, max(delayList), <span class="string">&quot;ms，平均 =&quot;</span>, sum(delayList)/len(delayList), <span class="string">&quot;ms&quot;</span>)</span><br><span class="line"></span><br><span class="line">ping(<span class="string">&quot;qq.com&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>2.你的程序只能检测ICMP超时。修改Ping程序，解析ICMP响应错误代码，并向用户显示相应的错误结果。ICMP响应错误码示例有0：目标网络无法到达可达，1：目标主机无法到达。</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对代码进行了少部分改动</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">import</span> socket</span><br><span class="line"><span class="built_in">import</span> os</span><br><span class="line"><span class="built_in">import</span> sys</span><br><span class="line"><span class="built_in">import</span> struct</span><br><span class="line"><span class="built_in">import</span> time</span><br><span class="line"><span class="built_in">import</span> select</span><br><span class="line"><span class="built_in">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="attr">ICMP_ECHO_REQUEST</span> = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def checksum(strCheck):</span><br><span class="line">    <span class="attr">csum</span> = <span class="number">0</span></span><br><span class="line">    <span class="attr">countTo</span> = (len(strCheck) / <span class="number">2</span>) * <span class="number">2</span></span><br><span class="line">    <span class="attr">count</span> = <span class="number">0</span></span><br><span class="line">    while count &lt; countTo:</span><br><span class="line">        <span class="attr">thisVal</span> = strCheck[count + <span class="number">1</span>] * <span class="number">256</span> + strCheck[count]</span><br><span class="line">        <span class="attr">csum</span> = csum + thisVal</span><br><span class="line">        <span class="attr">csum</span> = csum &amp; <span class="number">0</span>xffffffff</span><br><span class="line">        <span class="attr">count</span> = count + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> countTo &lt; len(strCheck):</span><br><span class="line">        <span class="attr">csum</span> = csum + strCheck[len(strCheck) - <span class="number">1</span>]</span><br><span class="line">        <span class="attr">csum</span> = csum &amp; <span class="number">0</span>xffffffff</span><br><span class="line"></span><br><span class="line">    <span class="attr">csum</span> = (csum &gt;&gt; <span class="number">16</span>) + (csum &amp; <span class="number">0</span>xffff)</span><br><span class="line">    <span class="attr">csum</span> = csum + (csum &gt;&gt; <span class="number">16</span>)</span><br><span class="line">    <span class="attr">answer</span> = ~csum</span><br><span class="line">    <span class="attr">answer</span> = answer &amp; <span class="number">0</span>xffff</span><br><span class="line">    <span class="attr">answer</span> = answer &gt;&gt; <span class="number">8</span> | (answer &lt;&lt; <span class="number">8</span> &amp; <span class="number">0</span>xff00)</span><br><span class="line">    return answer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def receiveOnePing(mySocket, ID, timeout, destAddr):</span><br><span class="line">    <span class="attr">timeLeft</span> = timeout</span><br><span class="line"></span><br><span class="line">    while <span class="number">1</span>:</span><br><span class="line">        <span class="attr">startedSelect</span> = time.time()</span><br><span class="line">        <span class="attr">whatReady</span> = select.select([mySocket], [], [], timeLeft)</span><br><span class="line">        <span class="attr">howLongInSelect</span> = (time.time() - startedSelect)</span><br><span class="line">        <span class="keyword">if</span> whatReady[<span class="number">0</span>] == []:  <span class="comment"># Timeout</span></span><br><span class="line">            return <span class="string">&quot;Request timed out.&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">timeReceived</span> = time.time()</span><br><span class="line">        recPacket, <span class="attr">addr</span> = mySocket.recvfrom(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">        <span class="attr">header</span> = recPacket[<span class="number">20</span>:<span class="number">28</span>]</span><br><span class="line">        header_type, header_code, header_checksum, header_packet_ID, <span class="attr">header_sequence</span> = struct.unpack(<span class="string">&quot;bbHHh&quot;</span>, header)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(header_type != <span class="number">0</span> <span class="literal">or</span> header_code != <span class="number">0</span> <span class="literal">or</span> header_packet_ID != ID <span class="literal">or</span> header_sequence != <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span>(<span class="attr">header_type</span> == <span class="number">3</span> <span class="literal">and</span> <span class="attr">header_code</span> == <span class="number">0</span>):</span><br><span class="line">                return <span class="string">&quot;目的网络不可达&quot;</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="attr">header_type</span> == <span class="number">3</span> <span class="literal">and</span> <span class="attr">header_code</span> == <span class="number">1</span>):</span><br><span class="line">                return <span class="string">&quot;目的主机不可达&quot;</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="attr">header_type</span> == <span class="number">3</span> <span class="literal">and</span> <span class="attr">header_code</span> == <span class="number">2</span>):</span><br><span class="line">                return <span class="string">&quot;目的协议不可达&quot;</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="attr">header_type</span> == <span class="number">3</span> <span class="literal">and</span> <span class="attr">header_code</span> == <span class="number">3</span>):</span><br><span class="line">                return <span class="string">&quot;目的端口不可达&quot;</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="attr">header_type</span> == <span class="number">3</span> <span class="literal">and</span> <span class="attr">header_code</span> == <span class="number">6</span>):</span><br><span class="line">                return <span class="string">&quot;目的网络未知&quot;</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="attr">header_type</span> == <span class="number">3</span> <span class="literal">and</span> <span class="attr">header_code</span> == <span class="number">7</span>):</span><br><span class="line">                return <span class="string">&quot;目的主机未知&quot;</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="attr">header_type</span> == <span class="number">4</span> <span class="literal">and</span> <span class="attr">header_code</span> == <span class="number">0</span>):</span><br><span class="line">                return <span class="string">&quot;源抑制&quot;</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="attr">header_type</span> == <span class="number">12</span> <span class="literal">and</span> <span class="attr">header_code</span> == <span class="number">0</span>):</span><br><span class="line">                return <span class="string">&quot;IP首部损坏&quot;</span></span><br><span class="line">            return <span class="string">&quot;Request error.&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">timeLeft</span> = timeLeft - howLongInSelect</span><br><span class="line">        <span class="keyword">if</span> timeLeft &lt;= <span class="number">0</span>:</span><br><span class="line">            return <span class="string">&quot;Request timed out.&quot;</span></span><br><span class="line">        return <span class="number">1</span> - timeLeft</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def sendOnePing(mySocket, destAddr, ID):</span><br><span class="line">    <span class="comment"># Header is type (8), code (8), checksum (16), id (16), sequence (16)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">myChecksum</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment"># Make a dummy header with a 0 checksum.</span></span><br><span class="line">    <span class="comment"># 创建一个带有0校验和的伪头。</span></span><br><span class="line">    <span class="comment"># struct -- Interpret strings as packed binary data</span></span><br><span class="line">    <span class="comment"># struct-将字符串解释为打包的二进制数据</span></span><br><span class="line">    <span class="attr">header</span> = struct.pack(<span class="string">&quot;bbHHh&quot;</span>, ICMP_ECHO_REQUEST, <span class="number">0</span>, myChecksum, ID, <span class="number">1</span>)</span><br><span class="line">    <span class="attr">data</span> = struct.pack(<span class="string">&quot;d&quot;</span>, time.time())</span><br><span class="line">    <span class="comment"># Calculate the checksum on the data and the dummy header.</span></span><br><span class="line">    <span class="comment"># 计算数据和虚拟头的校验和。</span></span><br><span class="line">    <span class="attr">myChecksum</span> = checksum(header + data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get the right checksum, and put in the header</span></span><br><span class="line">    <span class="keyword">if</span> sys.<span class="attr">platform</span> == &#x27;darwin&#x27;:</span><br><span class="line">        <span class="attr">myChecksum</span> = socket.htons(myChecksum) &amp; <span class="number">0</span>xffff</span><br><span class="line">        <span class="comment"># Convert 16-bit integers from host to network byte order.</span></span><br><span class="line">        <span class="comment"># 将主机的16位整数转换为网络字节顺序。</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="attr">myChecksum</span> = socket.htons(myChecksum)</span><br><span class="line"></span><br><span class="line">    <span class="attr">header</span> = struct.pack(<span class="string">&quot;bbHHh&quot;</span>, ICMP_ECHO_REQUEST, <span class="number">0</span>, myChecksum, ID, <span class="number">1</span>)</span><br><span class="line">    <span class="attr">packet</span> = header + data</span><br><span class="line"></span><br><span class="line">    mySocket.sendto(packet, (destAddr, <span class="number">1</span>))  <span class="comment"># AF_INET address must be tuple, not str</span></span><br><span class="line">    <span class="comment"># Both LISTS and TUPLES consist of a number of objects</span></span><br><span class="line">    <span class="comment"># which can be referenced by their position number within the object</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def doOnePing(destAddr, timeout):</span><br><span class="line">    <span class="attr">icmp</span> = socket.getprotobyname(<span class="string">&quot;icmp&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="attr">mySocket</span> = socket.socket(socket.AF_INET, socket.SOCK_RAW, icmp)</span><br><span class="line"></span><br><span class="line">    <span class="attr">myID</span> = os.getpid() &amp; <span class="number">0</span>xFFFF  <span class="comment"># Return the current process i</span></span><br><span class="line">    sendOnePing(mySocket, destAddr, myID)</span><br><span class="line">    <span class="attr">delay</span> = receiveOnePing(mySocket, myID, timeout, destAddr)</span><br><span class="line"></span><br><span class="line">    mySocket.close()</span><br><span class="line">    return delay</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def ping(host, <span class="attr">timeout=1):</span></span><br><span class="line">    <span class="comment"># timeout=1 means: If one second goes by without a reply from the server,</span></span><br><span class="line">    <span class="comment"># the client assumes that either the client’s ping or the server’s pong is lost</span></span><br><span class="line">    <span class="comment"># timeout = 1 表示：如果一秒钟没有收到服务器的答复，则客户端会认为客户端的ping或服务器的pong丢失了</span></span><br><span class="line">    <span class="attr">dest</span> = socket.gethostbyname(host)</span><br><span class="line">    print(<span class="string">&quot;正在 Ping&quot;</span>, host, <span class="string">&quot;[&quot;</span>, dest, <span class="string">&quot;] :&quot;</span>)</span><br><span class="line">    <span class="comment"># Send ping requests to a server separated by approximately one second</span></span><br><span class="line">    <span class="comment"># 将ping请求发送到间隔约一秒钟的服务器</span></span><br><span class="line">    <span class="attr">num</span> = <span class="number">4</span></span><br><span class="line">    <span class="attr">lost</span> = <span class="number">0</span></span><br><span class="line">    <span class="attr">delayList</span> = []</span><br><span class="line">    for i <span class="keyword">in</span> range(num):</span><br><span class="line">        <span class="attr">delay</span> = doOnePing(dest, timeout)</span><br><span class="line">        <span class="keyword">if</span>(type(delay) == str):</span><br><span class="line">            print(delay)</span><br><span class="line">            <span class="attr">lost</span> = lost + <span class="number">1</span></span><br><span class="line">            continue</span><br><span class="line">        <span class="attr">delay</span> = int(delay * <span class="number">1000</span>)</span><br><span class="line">        delayList.append(delay)</span><br><span class="line">        print(<span class="string">&quot;来自&quot;</span>, dest, <span class="string">&quot;的回复: 时间=&quot;</span>, delay, <span class="string">&quot;ms&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)  <span class="comment"># one second</span></span><br><span class="line">    print(dest, <span class="string">&quot;的 Ping 统计信息:&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;\t数据包: 已发送 =&quot;</span>, num, <span class="string">&quot;，已接收 =&quot;</span>, num - lost, <span class="string">&quot;，丢失 =&quot;</span>, lost, <span class="string">&quot;(&quot;</span>, lost/num * <span class="number">100</span>, <span class="string">&quot;% 丢失)&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(delayList):</span><br><span class="line">        print(<span class="string">&quot;往返行程的估计时间(以毫秒为单位):&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;\t最短 =&quot;</span>, min(delayList), <span class="string">&quot;ms，最长 =&quot;</span>, max(delayList), <span class="string">&quot;ms，平均 =&quot;</span>, sum(delayList)/len(delayList), <span class="string">&quot;ms&quot;</span>)</span><br><span class="line"></span><br><span class="line">ping(<span class="string">&quot;www.12306.cn&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><br><br><br>因特网控制报文协议（ICMP）<br>ICMP Header</p>
<p>ICMP报头从IP报头的第160位开始（使用IP选项除外）。<br><img src="/WestRoute.github.io/images/icmp.png"><br>Type - ICMP 类型。<br>Code - 给定ICMP类型的子类型。<br>Checksum - 用ICMP头和ICMP数据计算出来的错误校验和，计算时将本字段值作为0输入。<br>ID - ID值，应在回显的情况下返回。<br>Sequence - 序列值，应在回显的情况下返回。<br>Echo Request</p>
<p>回显请求是一个ICMP消息，其数据将在回显（”pong”）中接收回来。主机必须响应所有回显请求，并在回显响应中包含从请求消息中接收到的所有数据。</p>
<ol>
<li><p>Type必须置为8。</p>
</li>
<li><p>Code必须置为0。</p>
</li>
<li><p>客户机可以使用ID值和Sequence值来匹配响应和请求。实际上，大多数Linux系统都为每一个ping进程使用唯一ID值，Sequence值在该进程中是不断递增的。Windows使用一个固定ID值，该标识符在Windows版本之间变化，并且只在启动时重置Sequence值。</p>
</li>
<li><p>接收到的回显响应必须完全包含回显请求中的数据。<br>Echo Reply 回显响应是用于响应回显请求而生成的ICMP消息，所有主机和路由器都必须实现该功能。</p>
</li>
<li><p>Type和Code必须置为0。</p>
</li>
<li><p>ID值和Sequence值用于让客户端匹配回显请求和回显响应。</p>
</li>
<li><p>回显响应必须完全包含接收到的回显请求中的数据。</p>
</li>
</ol>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>网络通讯</category>
        <category>A-Top-Down-Approach</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络编程作业 01</title>
    <url>/WestRoute.github.io/2021/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%BD%9C%E4%B8%9A01/</url>
    <content><![CDATA[<p>参考来自：<a href="https://github.com/jzplp/Computer-Network-A-Top-Down-Approach-Answer">Computer Network A Top-Down Approach Practice Answer-github</a></p>
<span id="more"></span>
<h2 id="chapter01"><a href="#chapter01" class="headerlink" title="chapter01"></a>chapter01</h2><p><strong>因特网协议栈中的5个层次</strong><br>应用层：提供了一些网络应用程序和应用层协议。<br>运输层：在应用程序端点之间传输运输层报文。主要有TCP和UDP两种协议。<br>网络层：负责将分组从一台主机移动到另一台主机。<br>链路层：沿着路经将数据报传递给下一层结点。<br>物理层：将整个帧从一个网络元素移动到邻近的网络元素。</p>
<table>
<thead>
<tr>
<th>OSI</th>
<th>TCP/IP</th>
</tr>
</thead>
<tbody><tr>
<td>应用层</td>
<td>应用层</td>
</tr>
<tr>
<td>表示层</td>
<td>-</td>
</tr>
<tr>
<td>会话层</td>
<td>-</td>
</tr>
<tr>
<td>运输层</td>
<td>运输层</td>
</tr>
<tr>
<td>网络层</td>
<td>网际层IP</td>
</tr>
<tr>
<td>数据连接层</td>
<td>网络连接层</td>
</tr>
<tr>
<td>物理层</td>
<td>-</td>
</tr>
</tbody></table>
<br>

<p><strong>R12. 与分组交换网络相比，电路交换网络有哪些优点？在电路交换网络中，TDM比FDM有哪些优点？</strong></p>
<p>答案：<br>电路交换网络适合实时服务。交付质量高。<br>TDM比FDM的优点如下：（来源于网络）</p>
<ol>
<li>当发生拥塞等网络问题时，TDM中的数据丢失可能只会是一部分，而FDM中就可能是大部分或全部。</li>
<li>TDM适合数字信号传输，而FDM适合模拟信号传输，因为现在通信网络多是传输数字信号，所以TDM比FDM好。</li>
<li>因为频分复用连接建立后，当中途没有数据传输时，他所占有的频段带宽不能被其他连接使用，故可能存在空置，而在时分复用的统计时分模式下，连接建立后，当某个连接暂时不用传输数据时可以少分时间片或者不分，即其时隙的分配时“按需分配”，这样就让出了相应的传输时间给其他连接。<br></li>
</ol>
<p><strong>R16. 考虑从某源主机跨越一条固定路由向某目的主机发送一分组。列出端到端时延组成部分。这些时延中的哪些是固定的，哪些是变化的？</strong></p>
<p>答案：<br>端到端时延组成部分有：结点处理时延，排队时延，传输时延，传播时延。<br>时延中固定的部分有：传输时延 传播时延<br>时延中变化的部分有：结点处理时延 排队时延<br><br><br>怎么查看自己电脑的IP地址：ipconfig/all<br><br><br></p>
<h2 id="chapter-02"><a href="#chapter-02" class="headerlink" title="chapter 02"></a>chapter 02</h2><h3 id="套接字编程作业1：Web服务器"><a href="#套接字编程作业1：Web服务器" class="headerlink" title="套接字编程作业1：Web服务器"></a>套接字编程作业1：Web服务器</h3><p>开发一个处理一个HTTP请求的Web服务器。</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment">#import socket module</span></span><br><span class="line"><span class="built_in">from</span> <span class="built_in">socket</span> import *</span><br><span class="line">serverSocket = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM)</span><br><span class="line"><span class="comment">#Prepare a sever socket</span></span><br><span class="line">serverPort = <span class="number">80</span></span><br><span class="line">serverSocket.bind((<span class="string">&quot;&quot;</span>, serverPort))</span><br><span class="line">serverSocket.listen(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    <span class="comment">#Establish the connection</span></span><br><span class="line">    print(<span class="string">&#x27;Ready to serve...&#x27;</span>)</span><br><span class="line">    connectionSocket, addr = serverSocket.accept()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        message = connectionSocket.recv(<span class="number">1024</span>)</span><br><span class="line">        filename = message.<span class="built_in">split</span>()[<span class="number">1</span>]</span><br><span class="line">        f = <span class="built_in">open</span>(filename[<span class="number">1</span>:])</span><br><span class="line">        outputdata = f.<span class="built_in">read</span>()</span><br><span class="line">        f.<span class="built_in">close</span>()</span><br><span class="line">        <span class="comment">#Send one HTTP header line into socket</span></span><br><span class="line">        outputdata = <span class="string">&#x27;HTTP/1.1 200 OK\r\n\r\n&#x27;</span> + outputdata</span><br><span class="line">        <span class="comment">#Send the content of the requested file to the client</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="built_in">len</span>(outputdata)):</span><br><span class="line">            connectionSocket.<span class="built_in">send</span>(outputdata[i].encode())</span><br><span class="line">        connectionSocket.<span class="built_in">close</span>()</span><br><span class="line">        print(<span class="string">&quot;OK!&quot;</span>)</span><br><span class="line">    except IOError:</span><br><span class="line">        <span class="comment">#Send response message for file not found</span></span><br><span class="line">        outputdata = <span class="string">&#x27;HTTP/1.1 404 Not Found\r\n\r\n&#x27;</span></span><br><span class="line">        <span class="comment">#Close client socket</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="built_in">len</span>(outputdata)):</span><br><span class="line">            connectionSocket.<span class="built_in">send</span>(outputdata[i].encode())</span><br><span class="line">        connectionSocket.<span class="built_in">close</span>()</span><br><span class="line">serverSocket.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure>
<p><br><br></p>
<p><strong>可选练习</strong><br>目前，这个Web服务器一次只处理一个HTTP请求。请实现一个能够同时处理多个请求的多线程服务器。使用线程，首先创建一个主线程，在固定端口监听客户端请求。当从客户端收到TCP连接请求时，它将通过另一个端口建立TCP连接，并在另外的单独线程中为客户端请求提供服务。这样在每个请求/响应对的独立线程中将有一个独立的TCP连接。<br><br><br><br>不使用浏览器，编写自己的HTTP客户端来测试你的服务器。您的客户端将使用一个TCP连接用于连接到服务器，向服务器发送HTTP请求，并将服务器响应显示出来。您可以假定发送的HTTP请求将使用GET方法。 客户端应使用命令行参数指定服务器IP地址或主机名，服务器正在监听的端口，以及被请求对象在服务器上的路径。以下是运行客户端的输入命令格式。<br><br></p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="title">client</span>.py server_host server_<span class="keyword">port</span> filename</span><br></pre></td></tr></table></figure>

<p>Answer:</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment">#import socket module</span></span><br><span class="line"><span class="built_in">from</span> <span class="built_in">socket</span> import *</span><br><span class="line">import threading</span><br><span class="line">def webProcess(connectionSocket):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        message = connectionSocket.recv(<span class="number">1024</span>)</span><br><span class="line">        filename = message.<span class="built_in">split</span>()[<span class="number">1</span>]</span><br><span class="line">        f = <span class="built_in">open</span>(filename[<span class="number">1</span>:], <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">        outputdata = f.<span class="built_in">read</span>()</span><br><span class="line">        outputdata = outputdata.decode()</span><br><span class="line">        f.<span class="built_in">close</span>()</span><br><span class="line">        <span class="comment">#Send one HTTP header line into socket</span></span><br><span class="line">        outputdata = <span class="string">&#x27;HTTP/1.1 200 OK\r\n\r\n&#x27;</span> + outputdata</span><br><span class="line">        <span class="comment">#Send the content of the requested file to the client</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="built_in">len</span>(outputdata)):</span><br><span class="line">            connectionSocket.<span class="built_in">send</span>(outputdata[i].encode())</span><br><span class="line">        connectionSocket.<span class="built_in">close</span>()</span><br><span class="line">        print(<span class="string">&quot;OK!&quot;</span>)</span><br><span class="line">    except IOError:</span><br><span class="line">        <span class="comment">#Send response message for file not found</span></span><br><span class="line">        outputdata = <span class="string">&#x27;HTTP/1.1 404 Not Found\r\n\r\n&#x27;</span></span><br><span class="line">        <span class="comment">#Close client socket</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="built_in">len</span>(outputdata)):</span><br><span class="line">            connectionSocket.<span class="built_in">send</span>(outputdata[i].encode())</span><br><span class="line">        connectionSocket.<span class="built_in">close</span>()</span><br><span class="line"></span><br><span class="line">serverSocket = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM)</span><br><span class="line"><span class="comment">#Prepare a sever socket</span></span><br><span class="line">serverPort = <span class="number">80</span></span><br><span class="line">serverSocket.bind((<span class="string">&quot;&quot;</span>, serverPort))</span><br><span class="line">serverSocket.listen(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    <span class="comment">#Establish the connection</span></span><br><span class="line">    print(<span class="string">&#x27;Ready to serve...&#x27;</span>)</span><br><span class="line">    connectionSocket, addr = serverSocket.accept()</span><br><span class="line">    thread = threading.Thread(target = webProcess, args = (connectionSocket, ))</span><br><span class="line">    thread.<span class="built_in">start</span>()</span><br><span class="line">serverSocket.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure>
<h3 id="套接字编程作业2：UDPping程序"><a href="#套接字编程作业2：UDPping程序" class="headerlink" title="套接字编程作业2：UDPping程序"></a>套接字编程作业2：UDPping程序</h3><p>客户端向服务器发送10次ping。因为UDP是不可靠的协议，所以从客户端发送到服务器的数据包可能在网络中丢失。因此，客户端不能无限期地等待ping消息的回复。客户等待服务器回答的时间至多为一秒，如果在一秒内没有收到回复，您的客户端程序应该假定数据包在网络传输期间丢失。<br><br>您需要查找Python文档，以了解如何在数据报套接字上设置超时值。</p>
<p>具体来说，您的客户端程序应该<br>1.使用UDP发送ping消息（注意：不同于TCP，您不需要首先建立连接，因为UDP是无连接协议。）<br>2.从服务器输出响应消息<br>3.如果从服务器受到响应，则计算并输出每个数据包的往返时延（RTT）（以秒为单位），<br>4.否则输出“请求超时”<br>在开发过程中，您应该先在计算机上运行UDPPingerServer.py，并通过向localhost（或127.0.0.1）发送数据包来测试客户端。调试完成代码后，您应该能看到ping服务器和ping客户端在不同机器上通过网络进行通信。<br><br></p>
<p><strong>其他阅读链接：</strong><a href="/WestRoute.github.io/2021/12/17/ping/" title="ping">ping</a><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#UDPPingerClient.py</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">serverName = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">serverPort = <span class="number">12000</span></span><br><span class="line">clientSocket = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    time1 = time.time()</span><br><span class="line">    outputdata = <span class="string">&#x27;Ping &#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>(time1)</span><br><span class="line">    <span class="comment"># 设置超时 单位秒</span></span><br><span class="line">    clientSocket.settimeout(<span class="number">1</span>)</span><br><span class="line">    clientSocket.sendto(outputdata.encode(), (serverName, serverPort))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        modifiedMessage, serverAddress = clientSocket.recvfrom(<span class="number">2048</span>)</span><br><span class="line">        timeDiff = time.time() - time1</span><br><span class="line">        <span class="built_in">print</span>(modifiedMessage.decode() + <span class="string">&quot; RTT: &quot;</span> + <span class="built_in">str</span>(timeDiff))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;lost &quot;</span> + <span class="built_in">str</span>(i))</span><br></pre></td></tr></table></figure>
<p><strong>可选练习</strong><br><br><br>1.目前，程序计算每个数据包的往返时间（RTT），并单独打印出来。请按照标准ping程序的模式修改。您需要在客户端每次ping后显示最小，最大和平均RTT。另外，还需计算丢包率（百分比）。<br><br></p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="meta">#UDPPingerClient.py</span></span><br><span class="line"><span class="keyword">from</span> socket import *</span><br><span class="line">import <span class="built_in">time</span></span><br><span class="line"><span class="built_in">serverName</span> = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">serverPort = <span class="number">12000</span></span><br><span class="line">clientSocket = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    time1 = <span class="built_in">time</span>.<span class="built_in">time</span>()</span><br><span class="line">    outputdata = <span class="string">&#x27;Heartbeat &#x27;</span> + <span class="built_in">str</span>(time1)</span><br><span class="line">    clientSocket.sendto(outputdata.encode(), (<span class="built_in">serverName</span>, serverPort))</span><br><span class="line">    <span class="built_in">time</span>.<span class="built_in">sleep</span>(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<br>
2.UDP Ping的另一个类似的应用是UDP Heartbeat。<br><br>心跳可用于检查应用程序是否已启动并运行，并报告单向丢包。客户端在UDP数据包中将一个序列号和当前时间戳发送给正在监听客户端心跳的服务器。服务器收到数据包后，计算时差，报告丢包（若发生）。如果心跳数据包在指定的一段时间内丢失，我们可以假设客户端应用程序已经停止。实现UDP Heartbeat（客户端和服务器端）。<br><br>您需要修改给定的UDPPingerServer.py和您自己的UDP ping客户端。
<br><br>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment">#改为Python3格式</span></span><br><span class="line"><span class="comment">#UDPPingerServer.py</span></span><br><span class="line"><span class="comment">#We will need the following module to generate randomized lost packets</span></span><br><span class="line">import <span class="built_in">time</span></span><br><span class="line"><span class="built_in">from</span> <span class="built_in">socket</span> import *</span><br><span class="line"></span><br><span class="line"><span class="comment">#Create a UDP socket</span></span><br><span class="line"><span class="comment">#Notice the use of SOCK_DGRAM for UDP packets</span></span><br><span class="line">serverSocket = <span class="built_in">socket</span>(AF_INET, SOCK_DGRAM)</span><br><span class="line"><span class="comment">#Assign IP address and port number to socket</span></span><br><span class="line">serverSocket.bind((<span class="string">&#x27;&#x27;</span>, <span class="number">12000</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    message, address = serverSocket.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    message = message.decode()</span><br><span class="line">    message = message.<span class="built_in">split</span>()[<span class="number">1</span>]</span><br><span class="line">    timeDiff = <span class="built_in">time</span>.<span class="built_in">time</span>() - float(message)</span><br><span class="line">    print(<span class="string">&quot;receive RTT:&quot;</span>, timeDiff)</span><br></pre></td></tr></table></figure>

<h3 id="套接字编程作业3：邮件客户端"><a href="#套接字编程作业3：邮件客户端" class="headerlink" title="套接字编程作业3：邮件客户端"></a>套接字编程作业3：邮件客户端</h3><p>您的任务是开发一个简单的邮件客户端，将邮件发送给任意收件人。您的客户端将需要连接到邮件服务器，使用SMTP协议与邮件服务器进行对话，并向邮件服务器发送电子邮件。 Python提供了一个名为smtplib的模块，它内置了使用SMTP协议发送邮件的方法。但是我们不会在本实验中使用此模块，因为它隐藏了SMTP和套接字编程的细节。<br><br><br><br>为了限制垃圾邮件，一些邮件服务器不接受来源随意的TCP连接。对于下面所述的实验，您可能需要尝试连接到您的大学邮件服务器和流行的Webmail服务器（如AOL邮件服务器）。您也可以尝试从您的家和您的大学校园进行连接。<br><br></p>
<details><summary>邮件客户端的Python代码框架(可点开查看)</summary>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">from <span class="keyword">socket</span> import *</span><br><span class="line">msg = <span class="string">&quot;\r\n I love computer networks!&quot;</span></span><br><span class="line">endmsg = <span class="string">&quot;\r\n.\r\n&quot;</span></span><br><span class="line"><span class="comment"># Choose a mail server (e.g. Google mail server) and call it mailserver </span></span><br><span class="line">mailserver = <span class="comment">#Fill in start   #Fill in end</span></span><br><span class="line"><span class="comment"># Create socket called clientSocket and establish a TCP connection with mailserver</span></span><br><span class="line"><span class="comment">#Fill in start</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Fill in end</span></span><br><span class="line"><span class="keyword">recv</span> = clientSocket.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="keyword">recv</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] != <span class="string">&#x27;220&#x27;</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&#x27;220 reply not received from server.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send HELO command and print server response.</span></span><br><span class="line">heloCommand = <span class="string">&#x27;HELO Alice\r\n&#x27;</span></span><br><span class="line">clientSocket.send(heloCommand)</span><br><span class="line">recv1 = clientSocket.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">print</span> recv1</span><br><span class="line"><span class="keyword">if</span> recv1[:<span class="number">3</span>] != <span class="string">&#x27;250&#x27;</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&#x27;250 reply not received from server.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send MAIL FROM command and print server response.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send RCPT TO command and print server response.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send DATA command and print server response.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send message data.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Message ends with a single period.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send QUIT command and get server response.</span></span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>
</details>
<br>答案
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#改为Python3格式</span></span><br><span class="line">from <span class="keyword">socket</span> import *</span><br><span class="line">import base64</span><br><span class="line"><span class="comment"># Choose a mail server (e.g. Google mail server) and call it mailserver</span></span><br><span class="line">mailserver = <span class="string">&quot;smtp.163.com&quot;</span></span><br><span class="line">mailUser = <span class="string">&#x27;jz163wy&#x27;</span></span><br><span class="line">mailFromAddress = <span class="string">&#x27;jz163wy@163.com&#x27;</span></span><br><span class="line">mailPassWord = <span class="string">&#x27;******&#x27;</span></span><br><span class="line">mailToAddress = <span class="string">&#x27;ecnujz@qq.com&#x27;</span></span><br><span class="line"></span><br><span class="line">msg = <span class="string">&#x27;FROM: &#x27;</span> + mailFromAddress + <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">msg += <span class="string">&#x27;TO: &#x27;</span> + mailToAddress +  <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">msg += <span class="string">&#x27;Subject: &#x27;</span> + <span class="string">&#x27;test&#x27;</span> +  <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">msg += <span class="string">&quot;\r\n I love computer networks!&quot;</span></span><br><span class="line">endmsg = <span class="string">&quot;\r\n.\r\n&quot;</span></span><br><span class="line"><span class="comment">#Create socket called clientSocket and establish a TCP connection with mailserver</span></span><br><span class="line">clientSocket = <span class="keyword">socket</span>(AF_INET, SOCK_STREAM)</span><br><span class="line">clientSocket.connect((mailserver, <span class="number">25</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">recv</span> = clientSocket.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">recv</span> = recv.decode()</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] != <span class="string">&#x27;220&#x27;</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&#x27;220 reply not received from server.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Send HELO command and print server response.</span></span><br><span class="line">heloCommand = <span class="string">&#x27;HELO mailserver\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocket.send(heloCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;250&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#登录过程</span></span><br><span class="line">loginCommand = <span class="string">&#x27;auth login\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocket.send(loginCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;334&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#邮箱账户经过base64编码</span></span><br><span class="line">userCommand = base64.b64encode(mailUser.encode()) + b<span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocket.send(userCommand)</span><br><span class="line">    <span class="keyword">recv</span> = clientSocket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;334&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#邮箱密码经过base64编码 这里不展示密码了</span></span><br><span class="line">passCommand = base64.b64encode(mailPassWord.encode()) + b<span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocket.send(passCommand)</span><br><span class="line">    <span class="keyword">recv</span> = clientSocket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;235&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send MAIL FROM command and print server response.</span></span><br><span class="line">MFCommand = <span class="string">&#x27;MAIL FROM: &lt;&#x27;</span>+ mailFromAddress + <span class="string">&#x27;&gt;\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocket.send(MFCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;250&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send RCPT TO command and print server response.</span></span><br><span class="line">RTCommand = <span class="string">&#x27;RCPT TO: &lt;&#x27;</span>+ mailToAddress + <span class="string">&#x27;&gt;\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocket.send(RTCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;250&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send DATA command and print server response.</span></span><br><span class="line">DATACommand = <span class="string">&#x27;DATA\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocket.send(DATACommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;354&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send message data.</span></span><br><span class="line">clientSocket.send(msg.encode())</span><br><span class="line"></span><br><span class="line"><span class="comment">#Message ends with a single period.</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocket.send(endmsg.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;250&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send QUIT command and get server response.</span></span><br><span class="line">QUITCommand = <span class="string">&#x27;QUIT\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocket.send(QUITCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;221&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<br>

<p><strong>可选练习</strong><br>1.类似Google邮件的服务器（如地址：smtp.gmail.com，端口：587））要求您的客户端在发送MAIL FROM命令之前，需要为了身份验证和安全原因添加传输层安全（TLS）或安全套接字层（SSL）。将TLS / SSL命令添加到现有的命令中，并使用上述地址和端口为Google邮件服务器实现客户端。<br><br><br></p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#改为Python3格式</span></span><br><span class="line">from <span class="keyword">socket</span> import *</span><br><span class="line">import base64</span><br><span class="line">import ssl</span><br><span class="line"></span><br><span class="line"><span class="comment">#Choose a mail server (e.g. Google mail server) and call it mailserver</span></span><br><span class="line">mailserver = <span class="string">&quot;smtp.163.com&quot;</span></span><br><span class="line">mailUser = <span class="string">&#x27;jz163wy&#x27;</span></span><br><span class="line">mailFromAddress = <span class="string">&#x27;jz163wy@163.com&#x27;</span></span><br><span class="line">mailPassWord = <span class="string">&#x27;******&#x27;</span></span><br><span class="line">mailToAddress = <span class="string">&#x27;ecnujz@qq.com&#x27;</span></span><br><span class="line"></span><br><span class="line">msg = <span class="string">&#x27;FROM: &#x27;</span> + mailFromAddress + <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">msg += <span class="string">&#x27;TO: &#x27;</span> + mailToAddress +  <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">msg += <span class="string">&#x27;Subject: &#x27;</span> + <span class="string">&#x27;test&#x27;</span> +  <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">msg += <span class="string">&quot;\r\n I love computer networks!&quot;</span></span><br><span class="line">endmsg = <span class="string">&quot;\r\n.\r\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Create socket called clientSocket and establish a TCP connection with mailserver</span></span><br><span class="line">context = ssl.create_default_context()</span><br><span class="line">clientSocket = <span class="keyword">socket</span>(AF_INET, SOCK_STREAM)</span><br><span class="line">clientSocket.connect((mailserver, <span class="number">465</span>))</span><br><span class="line">clientSocketSSL = context.wrap_socket(clientSocket, server_hostname=mailserver)</span><br><span class="line"></span><br><span class="line"><span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">recv</span> = recv.decode()</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] != <span class="string">&#x27;220&#x27;</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&#x27;220 reply not received from server.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Send HELO command and print server response.</span></span><br><span class="line">heloCommand = <span class="string">&#x27;HELO mailserver\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(heloCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;250&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#登录过程</span></span><br><span class="line">loginCommand = <span class="string">&#x27;auth login\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(loginCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;334&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#邮箱账户经过base64编码</span></span><br><span class="line">userCommand = base64.b64encode(mailUser.encode()) + b<span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(userCommand)</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;334&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#邮箱密码经过base64编码 这里不展示密码了</span></span><br><span class="line">passCommand = base64.b64encode(mailPassWord.encode()) + b<span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(passCommand)</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;235&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send MAIL FROM command and print server response.</span></span><br><span class="line">MFCommand = <span class="string">&#x27;MAIL FROM: &lt;&#x27;</span>+ mailFromAddress + <span class="string">&#x27;&gt;\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(MFCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;250&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send RCPT TO command and print server response.</span></span><br><span class="line">RTCommand = <span class="string">&#x27;RCPT TO: &lt;&#x27;</span>+ mailToAddress + <span class="string">&#x27;&gt;\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(RTCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;250&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send DATA command and print server response.</span></span><br><span class="line">DATACommand = <span class="string">&#x27;DATA\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(DATACommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;354&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send message data.</span></span><br><span class="line">clientSocketSSL.send(msg.encode())</span><br><span class="line"></span><br><span class="line"><span class="comment">#Message ends with a single period.</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(endmsg.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;250&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send QUIT command and get server response.</span></span><br><span class="line">QUITCommand = <span class="string">&#x27;QUIT\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(QUITCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;221&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">clientSocketSSL.close()</span><br></pre></td></tr></table></figure>
<br>
2.您当前的SMTP邮件客户端只能在电子邮件正文中发送文本消息。修改您的客户端，使其可以发送包含文本和图像的电子邮件。
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#改为Python3格式</span></span><br><span class="line">from <span class="keyword">socket</span> import *</span><br><span class="line">import base64</span><br><span class="line">import ssl</span><br><span class="line"></span><br><span class="line"><span class="comment">#Choose a mail server (e.g. Google mail server) and call it mailserver</span></span><br><span class="line">mailserver = <span class="string">&quot;smtp.163.com&quot;</span></span><br><span class="line">mailUser = <span class="string">&#x27;jz163wy&#x27;</span></span><br><span class="line">mailFromAddress = <span class="string">&#x27;jz163wy@163.com&#x27;</span></span><br><span class="line">mailPassWord = <span class="string">&#x27;******&#x27;</span></span><br><span class="line">mailToAddress = <span class="string">&#x27;ecnujz@qq.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#transfer image and html</span></span><br><span class="line">with <span class="keyword">open</span>(<span class="string">&quot;timg.jpg&quot;</span>,<span class="string">&quot;rb&quot;</span>) as f:</span><br><span class="line">    image_data = base64.b64encode(f.read())</span><br><span class="line">with <span class="keyword">open</span>(<span class="string">&quot;hello.html&quot;</span>,<span class="string">&quot;rb&quot;</span>) as f:</span><br><span class="line">    html_data = base64.b64encode(f.read())</span><br><span class="line"></span><br><span class="line"><span class="comment">#构造邮件正文</span></span><br><span class="line">msg = <span class="string">&#x27;FROM: &#x27;</span> + mailFromAddress + <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">msg += <span class="string">&#x27;TO: &#x27;</span> + mailToAddress +  <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">msg += <span class="string">&#x27;Subject: &#x27;</span> + <span class="string">&#x27;text and picture&#x27;</span> +  <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">msg += <span class="string">&#x27;Content-Type:multipart/related; boundary=&quot;----=_NextPart_000_0012345JZ&quot;\r\n&#x27;</span></span><br><span class="line">msg += <span class="string">&#x27;MIME-Version: 1.0\r\n&#x27;</span></span><br><span class="line">msg += <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">msg = msg.encode()</span><br><span class="line">msg += <span class="string">&#x27;------=_NextPart_000_0012345JZ\r\n&#x27;</span>.encode()</span><br><span class="line">msg += <span class="string">&#x27;Content-Type: text/html; charset=UTF-8\r\n&#x27;</span>.encode()</span><br><span class="line">msg += <span class="string">&#x27;Content-Transfer-Encoding: base64\r\n&#x27;</span>.encode()</span><br><span class="line">msg += <span class="string">&#x27;\r\n&#x27;</span>.encode()</span><br><span class="line">msg += html_data</span><br><span class="line">msg += <span class="string">&#x27;\r\n&#x27;</span>.encode()</span><br><span class="line">msg += <span class="string">&#x27;\r\n&#x27;</span>.encode()</span><br><span class="line">msg += <span class="string">&#x27;------=_NextPart_000_0012345JZ\r\n&#x27;</span>.encode()</span><br><span class="line">msg += <span class="string">&#x27;Content-Type: image/jpeg; name=&quot;timg.jpg&quot;\r\n&#x27;</span>.encode()</span><br><span class="line">msg += <span class="string">&#x27;Content-Transfer-Encoding: base64\r\n&#x27;</span>.encode()</span><br><span class="line">msg += <span class="string">&#x27;Content-ID: JZJZJZJZJZJZJZJZ&#x27;</span>.encode()</span><br><span class="line">msg += <span class="string">&#x27;\r\n&#x27;</span>.encode()</span><br><span class="line">msg += image_data + <span class="string">&quot;\r\n&quot;</span>.encode()</span><br><span class="line">msg += <span class="string">&#x27;\r\n&#x27;</span>.encode()</span><br><span class="line">msg += <span class="string">&#x27;------=_NextPart_000_0012345JZ--\r\n&#x27;</span>.encode()</span><br><span class="line">endmsg = <span class="string">&quot;\r\n.\r\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Create socket called clientSocket and establish a TCP connection with mailserver</span></span><br><span class="line">context = ssl.create_default_context()</span><br><span class="line">clientSocket = <span class="keyword">socket</span>(AF_INET, SOCK_STREAM)</span><br><span class="line">clientSocket.connect((mailserver, <span class="number">465</span>))</span><br><span class="line">clientSocketSSL = context.wrap_socket(clientSocket, server_hostname=mailserver)</span><br><span class="line"></span><br><span class="line"><span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">recv</span> = recv.decode()</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] != <span class="string">&#x27;220&#x27;</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&#x27;220 reply not received from server.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Send HELO command and print server response.</span></span><br><span class="line">heloCommand = <span class="string">&#x27;HELO mailserver\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(heloCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;250&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#登录过程</span></span><br><span class="line">loginCommand = <span class="string">&#x27;auth login\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(loginCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;334&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#邮箱账户经过base64编码</span></span><br><span class="line">userCommand = base64.b64encode(mailUser.encode()) + b<span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(userCommand)</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;334&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#邮箱密码经过base64编码 这里不展示密码了</span></span><br><span class="line">passCommand = base64.b64encode(mailPassWord.encode()) + b<span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(passCommand)</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;235&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send MAIL FROM command and print server response.</span></span><br><span class="line">MFCommand = <span class="string">&#x27;MAIL FROM: &lt;&#x27;</span>+ mailFromAddress + <span class="string">&#x27;&gt;\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(MFCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;250&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send RCPT TO command and print server response.</span></span><br><span class="line">RTCommand = <span class="string">&#x27;RCPT TO: &lt;&#x27;</span>+ mailToAddress + <span class="string">&#x27;&gt;\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(RTCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;250&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send DATA command and print server response.</span></span><br><span class="line">DATACommand = <span class="string">&#x27;DATA\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(DATACommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;354&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send message data.</span></span><br><span class="line">clientSocketSSL.send(msg)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Message ends with a single period.</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(endmsg.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;250&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send QUIT command and get server response.</span></span><br><span class="line">QUITCommand = <span class="string">&#x27;QUIT\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(QUITCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;221&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">clientSocketSSL.close()</span><br></pre></td></tr></table></figure> 
<br>

<h3 id="套接字编程作业4：多线程Web代理服务器"><a href="#套接字编程作业4：多线程Web代理服务器" class="headerlink" title="套接字编程作业4：多线程Web代理服务器"></a>套接字编程作业4：多线程Web代理服务器</h3><p>客户端通过代理服务器请求对象。代理服务器将客户端的请求转发到Web服务器。然后，Web服务器将生成响应消息并将其传递给代理服务器，代理服务器又将其发送给客户端。</p>
<h4 id="运行代理服务器"><a href="#运行代理服务器" class="headerlink" title="运行代理服务器"></a>运行代理服务器</h4><p>使用命令行模式运行您的代理服务器程序，然后从您的浏览器发送一个网页请求，将IP地址和端口号指向代理服务器。 例如：<a href="http://localhost:8888/www.google.com">http://localhost:8888/www.google.com</a> 为了在独立的计算机上使用浏览器和代理服务器， 因此，在运行代理服务器时，您需要将“localhost”更换为代理服务器的所在机器的IP地址。您还需要将“8888”替换您在代理服务程序中使用的端口号。</p>
<h4 id="配置浏览器"><a href="#配置浏览器" class="headerlink" title="配置浏览器"></a>配置浏览器</h4><p>您还可以直接配置您的Web浏览器以使用您的代理服务。 具体取决于您的浏览器。在Internet Explorer中，您可以在 工具 &gt; Internet选项 &gt; 连接选项卡 &gt; LAN设置 中设置代理。 在Netscape（包括衍生浏览器，如Mozilla）中，您可以在 工具 &gt; 选项 &gt; 高级选项 &gt; 网络选项 &gt; 连接设置 中设置代理。 在这两种情况下你都需要给出代理服务器的地址和端口号。你首先要毫无问题地在同一台计算机上运行代理服务器和浏览器。这种方式下，使用代理服务器获取网页就只需提供页面的URL。 例如 <a href="http://www.google.com/">http://www.google.com</a><br><br><br></p>
<details><summary>代理服务器的Python代码框架(可点开查看)</summary>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt;= <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Usage : &quot;python ProxyServer.py server_ip&quot;\n[server_ip : It is the IP Address Of Proxy Server&#x27;</span></span><br><span class="line">	sys.exit(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># Create a server socket, bind it to a port and start listening</span></span><br><span class="line">tcpSerSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"><span class="comment"># Fill in start.</span></span><br><span class="line"><span class="comment"># Fill in end.</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">	<span class="comment"># Strat receiving data from the client</span></span><br><span class="line">	<span class="built_in">print</span> <span class="string">&#x27;Ready to serve...&#x27;</span></span><br><span class="line">	tcpCliSock, addr = tcpSerSock.accept()</span><br><span class="line">	<span class="built_in">print</span> <span class="string">&#x27;Received a connection from:&#x27;</span>, addr</span><br><span class="line">	message = <span class="comment"># Fill in start. # Fill in end.</span></span><br><span class="line">	<span class="built_in">print</span> message</span><br><span class="line">	<span class="comment"># Extract the filename from the given message</span></span><br><span class="line">	<span class="built_in">print</span> message.split()[<span class="number">1</span>]</span><br><span class="line">	filename = message.split()[<span class="number">1</span>].partition(<span class="string">&quot;/&quot;</span>)[<span class="number">2</span>]</span><br><span class="line">	<span class="built_in">print</span> filename</span><br><span class="line">	fileExist = <span class="string">&quot;false&quot;</span></span><br><span class="line">	filetouse = <span class="string">&quot;/&quot;</span> + filename</span><br><span class="line">	<span class="built_in">print</span> filetouse</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		<span class="comment"># Check wether the file exist in the cache</span></span><br><span class="line">		f = <span class="built_in">open</span>(filetouse[<span class="number">1</span>:], <span class="string">&quot;r&quot;</span>)</span><br><span class="line">		outputdata = f.readlines()</span><br><span class="line">		fileExist = <span class="string">&quot;true&quot;</span></span><br><span class="line">		<span class="comment"># ProxyServer finds a cache hit and generates a response message</span></span><br><span class="line">		tcpCliSock.send(<span class="string">&quot;HTTP/1.0 200 OK\r\n&quot;</span>)</span><br><span class="line">		tcpCliSock.send(<span class="string">&quot;Content-Type:text/html\r\n&quot;</span>)</span><br><span class="line">		<span class="comment"># Fill in start.</span></span><br><span class="line">		<span class="comment"># Fill in end.</span></span><br><span class="line">			<span class="built_in">print</span> <span class="string">&#x27;Read from cache&#x27;</span></span><br><span class="line">	<span class="comment"># Error handling for file not found in cache</span></span><br><span class="line">	<span class="keyword">except</span> IOError:</span><br><span class="line">		<span class="keyword">if</span> fileExist == <span class="string">&quot;false&quot;</span>:</span><br><span class="line">			<span class="comment"># Create a socket on the proxyserver</span></span><br><span class="line">			c = <span class="comment"># Fill in start. # Fill in end.</span></span><br><span class="line">			hostn = filename.replace(<span class="string">&quot;www.&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">1</span>) </span><br><span class="line">			<span class="built_in">print</span> hostn</span><br><span class="line">			<span class="keyword">try</span>:</span><br><span class="line">				<span class="comment"># Connect to the socket to port 80</span></span><br><span class="line">				<span class="comment"># Fill in start.</span></span><br><span class="line">				<span class="comment"># Fill in end.</span></span><br><span class="line">				<span class="comment"># Create a temporary file on this socket and ask port 80</span></span><br><span class="line">				<span class="keyword">for</span> the file requested by the client</span><br><span class="line">				fileobj = c.makefile(<span class="string">&#x27;r&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">				fileobj.write(<span class="string">&quot;GET &quot;</span>+<span class="string">&quot;http://&quot;</span> + filename + <span class="string">&quot; HTTP/1.0\n\n&quot;</span>)</span><br><span class="line">				<span class="comment"># Read the response into buffer</span></span><br><span class="line">				<span class="comment"># Fill in start.</span></span><br><span class="line">				<span class="comment"># Fill in end.</span></span><br><span class="line">				<span class="comment"># Create a new file in the cache for the requested file.</span></span><br><span class="line">				<span class="comment"># Also send the response in the buffer to client socket and the corresponding file in the cache</span></span><br><span class="line">				tmpFile = <span class="built_in">open</span>(<span class="string">&quot;./&quot;</span> + filename,<span class="string">&quot;wb&quot;</span>)</span><br><span class="line">				<span class="comment"># Fill in start.</span></span><br><span class="line">				<span class="comment"># Fill in end.</span></span><br><span class="line">			<span class="keyword">except</span>:</span><br><span class="line">				<span class="built_in">print</span> <span class="string">&quot;Illegal request&quot;</span></span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="comment"># HTTP response message for file not found</span></span><br><span class="line">			<span class="comment"># Fill in start.</span></span><br><span class="line">			<span class="comment"># Fill in end.</span></span><br><span class="line">	<span class="comment"># Close the client and the server sockets</span></span><br><span class="line">	tcpCliSock.close()</span><br><span class="line"><span class="comment"># Fill in start.</span></span><br><span class="line"><span class="comment"># Fill in end.</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>
</details>
<br><br>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#改为Python3格式</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt;= <span class="number">1</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;Usage : &quot;python ProxyServer.py server_ip&quot;\n[server_ip : It is the IP Address Of Proxy Server&#x27;</span>)</span><br><span class="line">	sys.exit(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#Create a server socket, bind it to a port and start listening</span></span><br><span class="line">tcpSerSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">tcpSerPort = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">tcpSerSock.bind((<span class="string">&quot;&quot;</span>, tcpSerPort))</span><br><span class="line"><span class="built_in">print</span>(tcpSerPort)</span><br><span class="line">tcpSerSock.listen(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">	<span class="comment"># Strat receiving data from the client</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;Ready to serve...&#x27;</span>)</span><br><span class="line">	tcpCliSock, addr = tcpSerSock.accept()</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;Received a connection from:&#x27;</span>, addr)</span><br><span class="line">	message = tcpCliSock.recv(<span class="number">1024</span>)</span><br><span class="line">	message = message.decode()</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;message:&quot;</span>, message)</span><br><span class="line">	<span class="keyword">if</span>(message == <span class="string">&#x27;&#x27;</span>):</span><br><span class="line">		<span class="keyword">continue</span></span><br><span class="line">	<span class="comment"># Extract the filename from the given message</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;message.split()[1]:&quot;</span>, message.split()[<span class="number">1</span>])</span><br><span class="line">	filename = message.split()[<span class="number">1</span>].partition(<span class="string">&quot;/&quot;</span>)[<span class="number">2</span>]</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;filename:&quot;</span>, filename)</span><br><span class="line">	fileExist = <span class="string">&quot;false&quot;</span></span><br><span class="line">	filetouse = <span class="string">&quot;/&quot;</span> + filename</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;filetouse:&quot;</span>, filetouse)</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		<span class="comment"># Check wether the file exist in the cache</span></span><br><span class="line">		f = <span class="built_in">open</span>(<span class="string">&quot;WEB/&quot;</span> + filetouse[<span class="number">1</span>:], <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">		outputdata = f.read()</span><br><span class="line">		f.close()</span><br><span class="line">		fileExist = <span class="string">&quot;true&quot;</span></span><br><span class="line">		<span class="comment">#ProxyServer finds a cache hit and generates a response message</span></span><br><span class="line">		tcpCliSock.send(<span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span>.encode())</span><br><span class="line">		tcpCliSock.send(<span class="string">&quot;Content-Type:text/html\r\n\r\n&quot;</span>.encode())</span><br><span class="line">		tcpCliSock.send(outputdata)</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;Read from cache&#x27;</span>)</span><br><span class="line">	<span class="comment">#Error handling for file not found in cache</span></span><br><span class="line">	<span class="keyword">except</span> IOError:</span><br><span class="line">		<span class="keyword">if</span> fileExist == <span class="string">&quot;false&quot;</span>:</span><br><span class="line">			<span class="comment">#Create a socket on the proxyserver</span></span><br><span class="line">			c = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">			hostn = filename.replace(<span class="string">&quot;www.&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">1</span>)</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;hostn:&quot;</span>, hostn)</span><br><span class="line">			<span class="keyword">try</span>:</span><br><span class="line">				<span class="comment">#Connect to the socket to port 80</span></span><br><span class="line">				serverName = hostn.partition(<span class="string">&quot;/&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">				serverPort = <span class="number">80</span></span><br><span class="line">				<span class="built_in">print</span>((serverName, serverPort))</span><br><span class="line">				c.connect((serverName, serverPort))</span><br><span class="line">				askFile = <span class="string">&#x27;&#x27;</span>.join(filename.partition(<span class="string">&#x27;/&#x27;</span>)[<span class="number">1</span>:])</span><br><span class="line">				<span class="built_in">print</span>(<span class="string">&quot;askFile:&quot;</span>, askFile)</span><br><span class="line">				<span class="comment">#Create a temporary file on this socket and ask port 80</span></span><br><span class="line">				<span class="comment">#for the file requested by the client</span></span><br><span class="line">				fileobj = c.makefile(<span class="string">&#x27;rwb&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">				fileobj.write(<span class="string">&quot;GET &quot;</span>.encode() + askFile.encode() + <span class="string">&quot; HTTP/1.0\r\nHost: &quot;</span>.encode() + serverName.encode() + <span class="string">&quot;\r\n\r\n&quot;</span>.encode())</span><br><span class="line">				<span class="comment">#Read the response into buffer</span></span><br><span class="line">				serverResponse = fileobj.read()</span><br><span class="line">				<span class="comment">#Create a new file in the cache for the requested file.</span></span><br><span class="line">				<span class="comment">#Also send the response in the buffer to client socket and the corresponding file in the cache</span></span><br><span class="line">				filename = <span class="string">&quot;WEB/&quot;</span> + filename</span><br><span class="line">				filesplit = filename.split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">				<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(filesplit) - <span class="number">1</span>):</span><br><span class="line">					<span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;/&quot;</span>.join(filesplit[<span class="number">0</span>:i+<span class="number">1</span>])):</span><br><span class="line">						os.makedirs(<span class="string">&quot;/&quot;</span>.join(filesplit[<span class="number">0</span>:i+<span class="number">1</span>]))</span><br><span class="line">				tmpFile = <span class="built_in">open</span>(filename, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">				<span class="built_in">print</span>(serverResponse)</span><br><span class="line">				serverResponse = serverResponse.split(<span class="string">b&#x27;\r\n\r\n&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">				<span class="built_in">print</span>(serverResponse)</span><br><span class="line">				tmpFile.write(serverResponse)</span><br><span class="line">				tmpFile.close()</span><br><span class="line">				tcpCliSock.send(<span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span>.encode())</span><br><span class="line">				tcpCliSock.send(<span class="string">&quot;Content-Type:text/html\r\n\r\n&quot;</span>.encode())</span><br><span class="line">				tcpCliSock.send(serverResponse)</span><br><span class="line">			<span class="keyword">except</span>:</span><br><span class="line">				<span class="built_in">print</span>(<span class="string">&quot;Illegal request&quot;</span>)</span><br><span class="line">			c.close()</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="comment">#HTTP response message for file not found</span></span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;NET ERROR&quot;</span>)</span><br><span class="line">	<span class="comment">#Close the client and the server sockets</span></span><br><span class="line">	tcpCliSock.close()</span><br><span class="line">tcpSerSock.close()</span><br></pre></td></tr></table></figure>
<br><br>
**可选练习**
1.目前代理服务器不能处理错误。这可能会导致一些问题，当客户端请求一个不可用的对象时，由于“404 Not Found”响应通常没有响应正文，而代理服务器会假设有正文并尝试读取它。当前代理服务器只支持HTTP GET方法。通过添加请求体来增加对POST的支持。
<br>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#改为Python3格式</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt;= <span class="number">1</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;Usage : &quot;python ProxyServer.py server_ip&quot;\n[server_ip : It is the IP Address Of Proxy Server&#x27;</span>)</span><br><span class="line">	sys.exit(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#Create a server socket, bind it to a port and start listening</span></span><br><span class="line">tcpSerSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">tcpSerPort = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">tcpSerSock.bind((<span class="string">&quot;&quot;</span>, tcpSerPort))</span><br><span class="line"><span class="built_in">print</span>(tcpSerPort)</span><br><span class="line">tcpSerSock.listen(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">	<span class="comment"># Strat receiving data from the client</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;Ready to serve...&#x27;</span>)</span><br><span class="line">	tcpCliSock, addr = tcpSerSock.accept()</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;Received a connection from:&#x27;</span>, addr)</span><br><span class="line">	message = tcpCliSock.recv(<span class="number">1024</span>)</span><br><span class="line">	message = message.decode()</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;message:&quot;</span>, message)</span><br><span class="line">	<span class="keyword">if</span>(message == <span class="string">&#x27;&#x27;</span>):</span><br><span class="line">		<span class="keyword">continue</span></span><br><span class="line">	<span class="comment"># Extract the filename from the given message</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;message.split()[1]:&quot;</span>, message.split()[<span class="number">1</span>])</span><br><span class="line">	filename = message.split()[<span class="number">1</span>].partition(<span class="string">&quot;/&quot;</span>)[<span class="number">2</span>]</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;filename:&quot;</span>, filename)</span><br><span class="line">	fileExist = <span class="string">&quot;false&quot;</span></span><br><span class="line">	filetouse = <span class="string">&quot;/&quot;</span> + filename</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;filetouse:&quot;</span>, filetouse)</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		<span class="comment"># Check wether the file exist in the cache</span></span><br><span class="line">		f = <span class="built_in">open</span>(<span class="string">&quot;WEB/&quot;</span> + filetouse[<span class="number">1</span>:], <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">		outputdata = f.read()</span><br><span class="line">		f.close()</span><br><span class="line">		fileExist = <span class="string">&quot;true&quot;</span></span><br><span class="line">		<span class="comment">#ProxyServer finds a cache hit and generates a response message</span></span><br><span class="line">		tcpCliSock.send(<span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span>.encode())</span><br><span class="line">		tcpCliSock.send(<span class="string">&quot;Content-Type:text/html\r\n\r\n&quot;</span>.encode())</span><br><span class="line">		tcpCliSock.send(outputdata)</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;Read from cache&#x27;</span>)</span><br><span class="line">	<span class="comment">#Error handling for file not found in cache</span></span><br><span class="line">	<span class="keyword">except</span> IOError:</span><br><span class="line">		<span class="keyword">if</span> fileExist == <span class="string">&quot;false&quot;</span>:</span><br><span class="line">			<span class="comment">#Create a socket on the proxyserver</span></span><br><span class="line">			c = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">			hostn = filename.replace(<span class="string">&quot;www.&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">1</span>)</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;hostn:&quot;</span>, hostn)</span><br><span class="line">			<span class="keyword">try</span>:</span><br><span class="line">				<span class="comment">#Connect to the socket to port 80</span></span><br><span class="line">				serverName = hostn.partition(<span class="string">&quot;/&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">				serverPort = <span class="number">80</span></span><br><span class="line">				<span class="built_in">print</span>((serverName, serverPort))</span><br><span class="line">				c.connect((serverName, serverPort))</span><br><span class="line">				askFile = <span class="string">&#x27;&#x27;</span>.join(filename.partition(<span class="string">&#x27;/&#x27;</span>)[<span class="number">1</span>:])</span><br><span class="line">				<span class="built_in">print</span>(<span class="string">&quot;askFile:&quot;</span>, askFile)</span><br><span class="line">				<span class="comment">#Create a temporary file on this socket and ask port 80</span></span><br><span class="line">				<span class="comment">#for the file requested by the client</span></span><br><span class="line">				fileobj = c.makefile(<span class="string">&#x27;rwb&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">				fileobj.write(<span class="string">&quot;GET &quot;</span>.encode() + askFile.encode() + <span class="string">&quot; HTTP/1.0\r\nHost: &quot;</span>.encode() + serverName.encode() + <span class="string">&quot;\r\n\r\n&quot;</span>.encode())</span><br><span class="line">				<span class="comment">#Read the response into buffer</span></span><br><span class="line">				serverResponse = fileobj.read()</span><br><span class="line">				<span class="comment">#Create a new file in the cache for the requested file.</span></span><br><span class="line">				<span class="comment">#Also send the response in the buffer to client socket and the corresponding file in the cache</span></span><br><span class="line">				filename = <span class="string">&quot;WEB/&quot;</span> + filename</span><br><span class="line">				filesplit = filename.split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">				<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(filesplit) - <span class="number">1</span>):</span><br><span class="line">					<span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;/&quot;</span>.join(filesplit[<span class="number">0</span>:i+<span class="number">1</span>])):</span><br><span class="line">						os.makedirs(<span class="string">&quot;/&quot;</span>.join(filesplit[<span class="number">0</span>:i+<span class="number">1</span>]))</span><br><span class="line">				tmpFile = <span class="built_in">open</span>(filename, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">				<span class="built_in">print</span>(serverResponse)</span><br><span class="line">				serverResponse = serverResponse.split(<span class="string">b&#x27;\r\n\r\n&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">				<span class="built_in">print</span>(serverResponse)</span><br><span class="line">				tmpFile.write(serverResponse)</span><br><span class="line">				tmpFile.close()</span><br><span class="line">				tcpCliSock.send(<span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span>.encode())</span><br><span class="line">				tcpCliSock.send(<span class="string">&quot;Content-Type:text/html\r\n\r\n&quot;</span>.encode())</span><br><span class="line">				tcpCliSock.send(serverResponse)</span><br><span class="line">			<span class="keyword">except</span>:</span><br><span class="line">				<span class="built_in">print</span>(<span class="string">&quot;Illegal request&quot;</span>)</span><br><span class="line">			c.close()</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="comment">#HTTP response message for file not found</span></span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;NET ERROR&quot;</span>)</span><br><span class="line">	<span class="comment">#Close the client and the server sockets</span></span><br><span class="line">	tcpCliSock.close()</span><br><span class="line">tcpSerSock.close()</span><br></pre></td></tr></table></figure>

<br>
3.缓存：<br>
每当客户端发出特定请求时，典型的代理服务器会缓存网页。缓存的基本功能如下：当代理获得一个请求时，它将检查请求的对象是否已经在缓存中，如果是，则从缓存返回对象，从而不用联系服务器。<br><br>
如果对象未被缓存，则代理从服务器获取该对象，向客户端返回该对象，并缓存一个拷贝以备将来的请求。在实际环境下，代理服务器必须验证被缓存的响应是否仍然有效，并且它们能对客户端正确响应。您可以在RFC 2068中阅读有关缓存及其在HTTP中实现方式的更多细节。<br><br>
添加上述简单的缓存功能。您不需要实现任何替换或验证策略。然而您需要实现的是，将请求和响应写入磁盘（即缓存）并能从磁盘中获取它们，用于缓存被请求命中时。为此，您需要在代理中实现一些内部数据结构，以便跟踪哪些请求处于缓存中时，以及它们在磁盘上的位置。您也可以将此数据结构保存在内存中，因为没有必要关机之后持续保存这些数据。
<br>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment">#找不到网站测试</span></span><br><span class="line"><span class="comment">#改为Python3格式</span></span><br><span class="line"><span class="built_in">from</span> <span class="built_in">socket</span> import *</span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt;= <span class="number">1</span>:</span><br><span class="line">	print(<span class="string">&#x27;Usage : &quot;python ProxyServer.py server_ip&quot;\n[server_ip : It is the IP Address Of Proxy Server&#x27;</span>)</span><br><span class="line">	sys.exit(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#Create a server socket, bind it to a port and start listening</span></span><br><span class="line">tcpSerSock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM)</span><br><span class="line">tcpSerPort = int(sys.argv[<span class="number">1</span>])</span><br><span class="line">tcpSerSock.bind((<span class="string">&quot;&quot;</span>, tcpSerPort))</span><br><span class="line">print(tcpSerPort)</span><br><span class="line">tcpSerSock.listen(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="comment">#Strat receiving data from the client</span></span><br><span class="line">    print(<span class="string">&#x27;Ready to serve...&#x27;</span>)</span><br><span class="line">    tcpCliSock, addr = tcpSerSock.accept()</span><br><span class="line">    print(<span class="string">&#x27;Received a connection from:&#x27;</span>, addr)</span><br><span class="line">    message = tcpCliSock.recv(<span class="number">1024</span>)</span><br><span class="line">    message = message.decode()</span><br><span class="line">    print(<span class="string">&quot;message:&quot;</span>, message)</span><br><span class="line">    <span class="keyword">if</span>(message == <span class="string">&#x27;&#x27;</span>):</span><br><span class="line">        continue</span><br><span class="line">    <span class="comment">#Extract the filename from the given message</span></span><br><span class="line">    print(<span class="string">&quot;message.split()[1]:&quot;</span>, message.<span class="built_in">split</span>()[<span class="number">1</span>])</span><br><span class="line">    filename = message.<span class="built_in">split</span>()[<span class="number">1</span>].partition(<span class="string">&quot;/&quot;</span>)[<span class="number">2</span>]</span><br><span class="line">    print(<span class="string">&quot;filename:&quot;</span>, filename)</span><br><span class="line">    fileExist = <span class="string">&quot;false&quot;</span></span><br><span class="line">    filetouse = <span class="string">&quot;/&quot;</span> + filename</span><br><span class="line">    print(<span class="string">&quot;filetouse:&quot;</span>, filetouse)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#Check wether the file exist in the cache</span></span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&quot;WEB/&quot;</span> + filetouse[<span class="number">1</span>:], <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">        outputdata = f.<span class="built_in">read</span>()</span><br><span class="line">        f.<span class="built_in">close</span>()</span><br><span class="line">        fileExist = <span class="string">&quot;true&quot;</span></span><br><span class="line">        <span class="comment"># ProxyServer finds a cache hit and generates a response message</span></span><br><span class="line">        tcpCliSock.<span class="built_in">send</span>(<span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span>.encode())</span><br><span class="line">        tcpCliSock.<span class="built_in">send</span>(<span class="string">&quot;Content-Type:text/html\r\n\r\n&quot;</span>.encode())</span><br><span class="line">        tcpCliSock.<span class="built_in">send</span>(outputdata)</span><br><span class="line">        print(<span class="string">&#x27;Read from cache&#x27;</span>)</span><br><span class="line">    <span class="comment">#Error handling for file not found in cache</span></span><br><span class="line">    except IOError:</span><br><span class="line">        <span class="keyword">if</span> fileExist == <span class="string">&quot;false&quot;</span>:</span><br><span class="line">            <span class="comment">#Create a socket on the proxyserver</span></span><br><span class="line">            c = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM)</span><br><span class="line">            hostn = filename.<span class="built_in">replace</span>(<span class="string">&quot;www.&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">1</span>)</span><br><span class="line">            print(<span class="string">&quot;hostn:&quot;</span>, hostn)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment">#Connect to the socket to port 80</span></span><br><span class="line">                serverName = hostn.partition(<span class="string">&quot;/&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">                serverPort = <span class="number">80</span></span><br><span class="line">                print((serverName, serverPort))</span><br><span class="line">                c.connect((serverName, serverPort))</span><br><span class="line">                askFile = <span class="string">&#x27;&#x27;</span>.join(filename.partition(<span class="string">&#x27;/&#x27;</span>)[<span class="number">1</span>:])</span><br><span class="line">                print(<span class="string">&quot;askFile:&quot;</span>, askFile)</span><br><span class="line">                <span class="comment">#Create a temporary file on this socket and ask port 80</span></span><br><span class="line">                <span class="comment">#for the file requested by the client</span></span><br><span class="line">                fileobj = c.makefile(<span class="string">&#x27;rwb&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">if</span>(message.<span class="built_in">split</span>()[<span class="number">0</span>] == <span class="string">&#x27;GET&#x27;</span>):</span><br><span class="line">                    fileobj.<span class="built_in">write</span>(<span class="string">&quot;GET &quot;</span>.encode() + askFile.encode() + <span class="string">&quot; HTTP/1.0\r\nHost: &quot;</span>.encode() + serverName.encode() + <span class="string">&quot;\r\n\r\n&quot;</span>.encode())</span><br><span class="line">                <span class="keyword">else</span>: <span class="comment">#POST</span></span><br><span class="line">                    fileobj.<span class="built_in">write</span>(</span><br><span class="line">                        <span class="string">&quot;POST &quot;</span>.encode() + askFile.encode() + <span class="string">&quot; HTTP/1.0\r\nHost: &quot;</span>.encode() + serverName.encode() + <span class="string">&quot;\r\n\r\n&quot;</span>.encode())</span><br><span class="line">                    fileobj.<span class="built_in">write</span>(message.<span class="built_in">split</span>(<span class="string">&quot;\r\n\r\n&quot;</span>)[<span class="number">1</span>].encode())</span><br><span class="line">                <span class="comment">#Read the response into buffer</span></span><br><span class="line">                serverResponse = fileobj.<span class="built_in">read</span>()</span><br><span class="line">                <span class="keyword">if</span> serverResponse.<span class="built_in">split</span>()[<span class="number">0</span>] != b<span class="string">&#x27;404&#x27;</span>:</span><br><span class="line">                    print(<span class="string">&#x27;404&#x27;</span>)</span><br><span class="line">                    tcpCliSock.<span class="built_in">send</span>(<span class="string">&quot;HTTP/1.1 404 Not Found\r\n\r\n&quot;</span>.encode())</span><br><span class="line">                    tcpCliSock.<span class="built_in">close</span>()</span><br><span class="line">                    continue</span><br><span class="line">                <span class="comment">#Create a new file in the cache for the requested file.</span></span><br><span class="line">                <span class="comment">#Also send the response in the buffer to client socket and the corresponding file in the cache</span></span><br><span class="line">                filename = <span class="string">&quot;WEB/&quot;</span> + filename</span><br><span class="line">                filesplit = filename.<span class="built_in">split</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="built_in">len</span>(filesplit) - <span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;/&quot;</span>.join(filesplit[<span class="number">0</span>:i+<span class="number">1</span>])):</span><br><span class="line">                        os.makedirs(<span class="string">&quot;/&quot;</span>.join(filesplit[<span class="number">0</span>:i+<span class="number">1</span>]))</span><br><span class="line">                tmpFile = <span class="built_in">open</span>(filename, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">                print(serverResponse)</span><br><span class="line">                serverResponse = serverResponse.<span class="built_in">split</span>(b<span class="string">&#x27;\r\n\r\n&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">                print(serverResponse)</span><br><span class="line">                tmpFile.<span class="built_in">write</span>(serverResponse)</span><br><span class="line">                tmpFile.<span class="built_in">close</span>()</span><br><span class="line">                tcpCliSock.<span class="built_in">send</span>(<span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span>.encode())</span><br><span class="line">                tcpCliSock.<span class="built_in">send</span>(<span class="string">&quot;Content-Type:text/html\r\n\r\n&quot;</span>.encode())</span><br><span class="line">                tcpCliSock.<span class="built_in">send</span>(serverResponse)</span><br><span class="line">            except:</span><br><span class="line">                print(<span class="string">&quot;Illegal request&quot;</span>)</span><br><span class="line">            c.<span class="built_in">close</span>()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#HTTP response message for file not found</span></span><br><span class="line">            print(<span class="string">&quot;NET ERROR&quot;</span>)</span><br><span class="line">    <span class="comment">#Close the client and the server sockets</span></span><br><span class="line">    tcpCliSock.<span class="built_in">close</span>()</span><br><span class="line">tcpSerSock.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>网络通讯</category>
        <category>A-Top-Down-Approach</category>
      </categories>
  </entry>
  <entry>
    <title>「コネクタオリジナルレシピ」を読んで</title>
    <url>/WestRoute.github.io/2021/12/09/%E3%80%8C%E3%82%B3%E3%83%8D%E3%82%AF%E3%82%BF%E3%82%AA%E3%83%AA%E3%82%B8%E3%83%8A%E3%83%AB%E3%83%AC%E3%82%B7%E3%83%94%E3%80%8D%E3%82%92%E8%AA%AD%E3%82%93%E3%81%A7/</url>
    <content><![CDATA[<h3 id="「コネクタオリジナルレシピ-初級編」を読んでのノートです。"><a href="#「コネクタオリジナルレシピ-初級編」を読んでのノートです。" class="headerlink" title="「コネクタオリジナルレシピ 初級編」を読んでのノートです。"></a>「コネクタオリジナルレシピ 初級編」を読んでのノートです。</h3><blockquote>
<p>ダウンロード:<a herf="https://ac-blog.panasonic.co.jp/ebook/connector_lp/">コネクタ初級編</a></p>
</blockquote>
<span id="more"></span> 
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>機器内接続のコネクタには、主に以下のようなコネクタが挙げられます。</p>
<h4 id="１．-カードエッジコネクタ"><a href="#１．-カードエッジコネクタ" class="headerlink" title="１． カードエッジコネクタ"></a>１． カードエッジコネクタ</h4><img src="/WestRoute.github.io/images/cardconnecter.png">
基板から簡単にケーブル出しができ、使い勝手がよいというメリットがありますが、基板の反りや加工公差を考慮しなくてはならず実装が難しいという難点があります。

<h4 id="２．-フラットケーブルコネクタ-flat-cable"><a href="#２．-フラットケーブルコネクタ-flat-cable" class="headerlink" title="２． フラットケーブルコネクタ(flat cable)"></a>２． フラットケーブルコネクタ(flat cable)</h4><img src="/WestRoute.github.io/images/flatcable.png">
ノイズを拾いやすいという難点

<h4 id="３．-2ピーススタッキングコネクタ"><a href="#３．-2ピーススタッキングコネクタ" class="headerlink" title="３． 2ピーススタッキングコネクタ"></a>３． 2ピーススタッキングコネクタ</h4><p>省スペース<br>基板対基板接続用コネクタ/基板対FPC接続用コネクタ</p>
<h4 id="４．-FPC・FFCコネクタ"><a href="#４．-FPC・FFCコネクタ" class="headerlink" title="４． FPC・FFCコネクタ"></a>４． FPC・FFCコネクタ</h4><p>FPCとはFlexible Printed Circuitの略です。<br>FFCとはFlexible Flat Cableの略です。<br><img src="/WestRoute.github.io/images/fpc1.png"><br><br><br><br></p>
<h3 id="「コネクタオリジナルレシピはじめての高速伝送編」を読んでのノートです。"><a href="#「コネクタオリジナルレシピはじめての高速伝送編」を読んでのノートです。" class="headerlink" title="「コネクタオリジナルレシピはじめての高速伝送編」を読んでのノートです。"></a>「コネクタオリジナルレシピはじめての高速伝送編」を読んでのノートです。</h3><blockquote>
<p>ダウンロード:<a herf="https://ac-blog.panasonic.co.jp/ebook/connectorhighspeed_lp/">高速伝送編</a></p>
</blockquote>
<h4 id="インピーダンス"><a href="#インピーダンス" class="headerlink" title="インピーダンス"></a>インピーダンス</h4><p>インピーダンスがそろっていないと、このように信号に乱れが生じてしまいます。<br>この信号の乱れにより、信号が正しく・早く伝えられなくなって<br>下の表2は代表的な伝送規格におけるインピーダンスの値一覧です。</p>
<img src="/WestRoute.github.io/images/tansport.png">
ノイズには、大きく2種類あります。一つ目が伝導ノイズ、もう一つが放射ノイズです。前者は、電線やプリント回路を伝わっていくノイズで、後者は空気中を伝わっていくノイズです。

<h4 id="ノイズ"><a href="#ノイズ" class="headerlink" title="ノイズ"></a>ノイズ</h4><p>ノイズに影響されない＝EMS（電磁気妨害感受：Electromagnetic Susceptibility）<br>ノイズを発生しない＝EMI（電磁気妨害：Electromagnetic Interference）<br>EMC（電磁的両立性：Electromagnetic Compatibility）</p>
<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p><strong>周波数特性</strong><br>1 インサーションロス :入力した信号のうち、出力時にどれくらい減衰したかを示します<br>3 クロストーク :入力した信号のうち、どれくらい出力されずに反射して返ってきたかを示します。<br>2 リターンロス :差動伝送で、隣りあう端子にどれくらい信号が伝わってしまったか（乗り移ってしまったか）を示します。入力側の端子に伝わった信号分を、<br>NEXT（Near End Cross Talk：近い端子への信号の乗り移り）といいます。<br>対して、出力側の端子に伝わった信号分を、<br>FEXT（Far End CrossTalk：遠い端子への信号の乗り移り）といいます</p>
<p><strong>時間軸特性</strong><br>4 スキュー :スキューとは、差動伝送で伝送しているペア信号同士の伝送時間のずれを示します<br><img src="/WestRoute.github.io/images/seque.png"><br>「0」か「1」か読み取れない エラーの原因になる<br>5 ジッタ<br><img src="/WestRoute.github.io/images/jitta.png"></p>
<p>アイパターン</p>
<h4 id="コーディングでのデータ変換"><a href="#コーディングでのデータ変換" class="headerlink" title="コーディングでのデータ変換"></a>コーディングでのデータ変換</h4><p>変換方式は以下のように様々な方法があります。<br>● 8B10B ：8ビットのデータを10ビットへ置き換える<br>● 64B66B ：64ビットのデータを66ビットへ置き換える<br>● 128B130B ：128ビットのデータを130ビットへ置き換える</p>
<h4 id="パラシリ変換・SerDes"><a href="#パラシリ変換・SerDes" class="headerlink" title="パラシリ変換・SerDes"></a>パラシリ変換・SerDes</h4><p>そもそも、データ伝送は使用する信号線の数によって、下記の2種類の伝送方式に分けられます。<br>実際に、様々な基板や機器を接続する場合、伝送経路内でシリアル通信とパラレル通信が混在する場<br>合がでてきます。<br>その際に行うのが、<strong>SerDes変換（パラシリ変換）</strong>です。<br><strong>パラレル通信</strong><br>複数の信号線や回線を使って、一度に多くのデータを伝送します。<br><strong>シリアル通信</strong><br>ひとつの信号線や回線を使って、データを1ビットずつ順番に伝送する方法。<br><br><br>このSerDes変換に必要になるのが、シリアライザー・デシリアライザーと呼ばれる、ICです。<br>シリアライザー ：パラレル通信→シリアル通信<br>デシリアライザー：シリアル通信→パラレル通信</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>硬件</category>
      </categories>
  </entry>
  <entry>
    <title>Verilog学习 01</title>
    <url>/WestRoute.github.io/2021/12/09/Verilog01/</url>
    <content><![CDATA[<p>Verilog HDL 有下列四种基本的值来表示硬件电路中的电平逻辑：</p>
<p>0：逻辑 0 或 “假”<br>1：逻辑 1 或 “真”<br>x 或 X：未知<br>z 或 Z：高阻</p>
<span id="more"></span>
<h4 id="整数数值表示方法"><a href="#整数数值表示方法" class="headerlink" title="整数数值表示方法"></a>整数数值表示方法</h4><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">4</span>&#x27;b<span class="number">1011</span>         // <span class="number">4</span>bit 数值</span><br><span class="line"><span class="attribute">32</span>&#x27;h<span class="number">3022</span>_c<span class="number">0</span>de   // <span class="number">32</span>bit 的数值</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>硬件</category>
      </categories>
  </entry>
  <entry>
    <title>unix系统学习 01</title>
    <url>/WestRoute.github.io/2021/12/09/unix01/</url>
    <content><![CDATA[<p>《Modern Operating System》<br>ANSI = C99<br>POSIX(Portavle Operating System Interface)</p>
<span id="more"></span>

<h3 id="简要考察read系统调用：11个步骤"><a href="#简要考察read系统调用：11个步骤" class="headerlink" title="简要考察read系统调用：11个步骤"></a>简要考察read系统调用：11个步骤</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>count = read(fd,buffer,nbytes);</strong><br>1.push nbytes<br>2.push &amp;buffer<br>3.push fd<br>4.Call read<br>5.Put code for read in register<br>6.trap to the kernal<br>7.<br>8.Dispatch<br>9.Sys call handler<br>10.return to caller<br>11.Increment SP</p>
<h3 id="fork-waitpid"><a href="#fork-waitpid" class="headerlink" title="fork-waitpid"></a>fork-waitpid</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#define TRUE 1 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (TRUE) &#123;      <span class="regexp">/* repeat forever */</span> </span><br><span class="line">      type prompt( ); <span class="regexp">/* display prompt on the screen */</span> </span><br><span class="line">      read command(command, parameters); <span class="regexp">/* read input from terminal */</span> </span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">for</span> k() != <span class="number">0</span>) &#123; <span class="regexp">/* fork off child process */</span> </span><br><span class="line">            <span class="regexp">/ * Parent code. */</span> </span><br><span class="line">            waitpid(−<span class="number">1</span>, &amp;status, <span class="number">0</span>); <span class="regexp">/* wait for child to exit */</span> </span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="regexp">/ * Child code. */</span> </span><br><span class="line">            execve(command, parameters, <span class="number">0</span>); </span><br><span class="line">            <span class="regexp">/* execute command */</span> </span><br><span class="line">      &#125; </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="link"><a href="#link" class="headerlink" title="link"></a>link</h3><p>允许一个文件以不同的名称出现</p>
<h3 id="winAPI"><a href="#winAPI" class="headerlink" title="winAPI"></a>winAPI</h3><img src="/WestRoute.github.io/images/os01.png">

<h3 id="微内核"><a href="#微内核" class="headerlink" title="微内核"></a>微内核</h3><p>微内核中断处理、进程、调度、进程间通信(IPC)<br><img src="/WestRoute.github.io/images/os02.png"></p>
<h3 id="客户端-服务器模式"><a href="#客户端-服务器模式" class="headerlink" title="客户端-服务器模式"></a>客户端-服务器模式</h3><h3 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h3><p>java虚拟机<br><img src="/WestRoute.github.io/images/os03.png"></p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>系统操作</category>
        <category>Unix</category>
      </categories>
  </entry>
  <entry>
    <title>CCNA考试 01</title>
    <url>/WestRoute.github.io/2021/12/09/CCNA01/</url>
    <content><![CDATA[<p>Step 0:install Packet Tracer</p>
<span id="more"></span><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>网络通讯</category>
        <category>CCNA</category>
      </categories>
  </entry>
  <entry>
    <title>openCV学习 01</title>
    <url>/WestRoute.github.io/2021/12/09/openCV01/</url>
    <content><![CDATA[<p>openCV主体分为五个模块，其中四个如下所示<br>CV   MLL   HighGUI<br>↓    ↓       ↓<br>CXCORE</p>
<span id="more"></span>
<h4 id="读取、保存图片"><a href="#读取、保存图片" class="headerlink" title="读取、保存图片"></a>读取、保存图片</h4><p>cv2.IMREAD_COLOR()<br>cv2.IMREAD_GRAYSCALE()加载一张灰度图<br>cv2.IMREAD_UNCHANGED()加载图像，包括它的Alpha通道。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">    img = cv2.imread(<span class="string">&#x27;test2.png&#x27;</span>, i) <span class="comment"># 选择自己的图片</span></span><br><span class="line">    WindowName = <span class="string">&#x27;image&#x27;</span> + <span class="built_in">str</span>(i) <span class="comment"># 使每个窗口名不同</span></span><br><span class="line">    cv2.namedWindow(WindowName, cv2.WINDOW_AUTOSIZE)  <span class="comment"># 建立空窗口</span></span><br><span class="line">    cv2.imshow(WindowName, img)</span><br><span class="line">    <span class="comment"># cv2.resizeWindow(WindowName, 500, 312) # 定义窗口大小</span></span><br><span class="line">    k = cv2.waitKey(<span class="number">0</span>)  <span class="comment"># 始终检测键盘</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">27</span>:  <span class="comment"># 按ESC退出</span></span><br><span class="line">        cv2.destroyAllWindows()</span><br><span class="line">    <span class="keyword">elif</span> k == <span class="built_in">ord</span>(<span class="string">&#x27;s&#x27;</span>):  <span class="comment"># 按s保存</span></span><br><span class="line">        cv2.imwrite(WindowName+<span class="string">&#x27;.png&#x27;</span>, img)</span><br><span class="line">        cv2.destroyAllWindows()</span><br><span class="line">    <span class="keyword">elif</span> k == <span class="built_in">ord</span>(<span class="string">&#x27;p&#x27;</span>):  <span class="comment"># 按p用matplotlib打开</span></span><br><span class="line">        rgb =  cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  <span class="comment"># 将opencv用的的BGR通道顺序变为plt用的RGB顺序</span></span><br><span class="line">        plt.imshow(rgb)</span><br><span class="line">        plt.xticks([]), plt.yticks([])</span><br><span class="line">        plt.show()</span><br></pre></td></tr></table></figure>

<h4 id="视频的捕获、保存与播放"><a href="#视频的捕获、保存与播放" class="headerlink" title="视频的捕获、保存与播放"></a>视频的捕获、保存与播放</h4><p>cv2.VideoCapture(设备索引号)：创建一个VideoCapture 对象，他的参数可以是设备的索引号，或者是一个视频文件。设备索引号就是在指定要使用的摄像头。 一般的笔记本电脑都有内置摄像头。参数是 0。<br>cap.read()： 返回一个布尔值（True/False）。如果帧读取的是正确的，就是 True。所以最后你可以通过检查他的返回值来查看视频文件是否已经到 了结尾。<br>cap.isOpened()： 返回一个布尔值（True/False）。用于检查摄像头是否初始化成功，Ture表示成功，否则要使用cap.open()进行初始化<br>cap.get(参数)：用于获得视频的一些参数信息<br>cap.set(参数，值)：用于设置视频的一些参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"> </span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line">ret = cap.<span class="built_in">set</span>(<span class="number">3</span>, <span class="number">320</span>)  <span class="comment"># 设置帧宽</span></span><br><span class="line">ret = cap.<span class="built_in">set</span>(<span class="number">4</span>, <span class="number">240</span>)  <span class="comment"># 设置帧高</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> cap.isOpened() <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">        ret, frame = cap.read()</span><br><span class="line">        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)  <span class="comment"># 转换为灰色通道</span></span><br><span class="line">        cv2.imshow(<span class="string">&#x27;frame&#x27;</span>, gray)</span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    cap.release()</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;cap is not opened!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<br>

<h5 id="保存视频"><a href="#保存视频" class="headerlink" title="保存视频"></a>保存视频</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"> </span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line">fourcc = cv2.VideoWriter_fourcc(*<span class="string">&#x27;XVID&#x27;</span>)  <span class="comment"># 设置视频编码格式</span></span><br><span class="line">out = cv2.VideoWriter(<span class="string">&#x27;output.avi&#x27;</span>, fourcc, <span class="number">20.0</span>, (<span class="number">640</span>, <span class="number">480</span>))  <span class="comment"># 名称， 格式， 帧率， 帧大小</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> cap.isOpened() <span class="keyword">is</span> <span class="literal">True</span>:  <span class="comment"># 如果摄像头已被初始化返回True</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">        ret, frame = cap.read()  <span class="comment"># 如果帧读取正确则返回True</span></span><br><span class="line">        <span class="keyword">if</span> ret <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">            frame = cv2.flip(frame, <span class="number">1</span>)  <span class="comment"># 反转图像，0：垂直反转，1：水平翻转，2：水平垂直反转</span></span><br><span class="line">            out.write(frame)</span><br><span class="line">            cv2.imshow(<span class="string">&#x27;frame&#x27;</span>, frame)</span><br><span class="line">            <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    cap.release()</span><br><span class="line">    cap.release()</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;cap is not opened!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<br>

<h5 id="播放视频"><a href="#播放视频" class="headerlink" title="播放视频"></a>播放视频</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"> </span><br><span class="line">cap = cv2.VideoCapture(<span class="string">&#x27;output.avi&#x27;</span>)  <span class="comment"># 选择要播放的视频</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> cap.isOpened() <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">        ret, frame = cap.read()</span><br><span class="line">        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)  <span class="comment"># 输出灰色图像</span></span><br><span class="line">        cv2.imshow(<span class="string">&#x27;frame&#x27;</span>, gray)</span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">25</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):  <span class="comment"># 改变cv2.waitKey()中的值可以改变播放速度</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    cap.release()</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;cap is not opened!&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="简单的绘图函数"><a href="#简单的绘图函数" class="headerlink" title="简单的绘图函数"></a>简单的绘图函数</h4><h5 id="设置空白画布"><a href="#设置空白画布" class="headerlink" title="设置空白画布"></a>设置空白画布</h5><p>本质是创建了一个512x512x3的0矩阵，用于存储512x512的3通道图像，数据类型为uint8。<br>lineType：线性，默认为8：8联通，另外有4：4联通，还有cv2.LINE_AA ：表示抗锯齿，比较平滑</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">import</span> numpy as np</span><br><span class="line"><span class="attribute">import</span> cv<span class="number">2</span></span><br><span class="line"> </span><br><span class="line"><span class="attribute">img</span> = np.zeros((<span class="number">512</span>,<span class="number">512</span>,<span class="number">3</span>), np.uint<span class="number">8</span>)</span><br></pre></td></tr></table></figure>
<h5 id="画线"><a href="#画线" class="headerlink" title="画线"></a>画线</h5><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">import</span> numpy as np</span><br><span class="line"><span class="attribute">import</span> cv<span class="number">2</span></span><br><span class="line"> </span><br><span class="line"><span class="attribute">img</span> = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), dtype=np.uint<span class="number">8</span>)  # 设置窗口尺寸和数据类型</span><br><span class="line"><span class="attribute">cv2</span>.line(img, (<span class="number">200</span>, <span class="number">100</span>), (<span class="number">300</span>, <span class="number">200</span>), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">1</span>)</span><br><span class="line"><span class="attribute">cv2</span>.line(img, (<span class="number">200</span>, <span class="number">200</span>), (<span class="number">300</span>, <span class="number">300</span>), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">5</span>, <span class="number">4</span>)</span><br><span class="line"><span class="attribute">cv2</span>.line(img, (<span class="number">200</span>, <span class="number">300</span>), (<span class="number">300</span>, <span class="number">400</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">10</span>, cv<span class="number">2</span>.LINE_AA)</span><br><span class="line"><span class="attribute">WindowsName</span> = &#x27;example&#x27;</span><br><span class="line"><span class="attribute">cv2</span>.namedWindow(WindowsName)</span><br><span class="line"><span class="attribute">cv2</span>.imshow(WindowsName, img)</span><br><span class="line"><span class="attribute">cv2</span>.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="attribute">cv2</span>.destroyWindow(WindowsName)</span><br></pre></td></tr></table></figure>
<h5 id="画矩形"><a href="#画矩形" class="headerlink" title="画矩形"></a>画矩形</h5><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">import</span> numpy as np</span><br><span class="line"><span class="attribute">import</span> cv<span class="number">2</span></span><br><span class="line"> </span><br><span class="line"><span class="attribute">img</span> = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), dtype=np.uint<span class="number">8</span>)  # 设置窗口尺寸和数据类型</span><br><span class="line"><span class="attribute">cv2</span>.rectangle(img, (<span class="number">350</span>, <span class="number">255</span>), (<span class="number">511</span>, <span class="number">511</span>), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">1</span>)</span><br><span class="line"><span class="attribute">cv2</span>.rectangle(img, (<span class="number">350</span>, <span class="number">255</span>), (<span class="number">511</span>, <span class="number">511</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), -<span class="number">1</span>, shift=<span class="number">1</span>)</span><br><span class="line"><span class="attribute">WindowsName</span> = &#x27;example&#x27;</span><br><span class="line"><span class="attribute">cv2</span>.namedWindow(WindowsName)</span><br><span class="line"><span class="attribute">cv2</span>.imshow(WindowsName, img)</span><br><span class="line"><span class="attribute">cv2</span>.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="attribute">cv2</span>.destroyWindow(WindowsName)</span><br></pre></td></tr></table></figure>
<h5 id="画圆"><a href="#画圆" class="headerlink" title="画圆"></a>画圆</h5><p><strong>cv2.circle(img,center,radius,color,thinkness,lineType,shift)</strong><br>center：圆心<br>radius：半径</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">import</span> numpy as np</span><br><span class="line"><span class="attribute">import</span> cv<span class="number">2</span></span><br><span class="line"> </span><br><span class="line"><span class="attribute">img</span> = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), dtype=np.uint<span class="number">8</span>)</span><br><span class="line"><span class="attribute">cv2</span>.circle(img, (<span class="number">255</span>, <span class="number">255</span>), <span class="number">63</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), -<span class="number">1</span>)</span><br><span class="line"><span class="attribute">cv2</span>.circle(img, (<span class="number">255</span>, <span class="number">255</span>), <span class="number">63</span>, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">1</span>, shift=<span class="number">1</span>)</span><br><span class="line"><span class="attribute">WindowsName</span> = &#x27;example&#x27;</span><br><span class="line"><span class="attribute">cv2</span>.namedWindow(WindowsName)</span><br><span class="line"><span class="attribute">cv2</span>.imshow(WindowsName, img)</span><br><span class="line"><span class="attribute">cv2</span>.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="attribute">cv2</span>.destroyWindow(WindowsName)</span><br></pre></td></tr></table></figure>
<h5 id="画椭圆"><a href="#画椭圆" class="headerlink" title="画椭圆"></a>画椭圆</h5><p><strong>cv2.ellipse(img,center,axes,angle,startAngle,endAngle,color,thinkness,lineType,shift)</strong><br>center：椭圆中心<br>axes：（长轴，短轴）<br>angle：椭圆绕中心顺时针旋转度数（例如90°）<br>startAngle：绕中心绘制起始角<br>endAngle：绕中心绘制结束角</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">import</span> numpy as np</span><br><span class="line"><span class="attribute">import</span> cv<span class="number">2</span></span><br><span class="line"> </span><br><span class="line"><span class="attribute">img</span> = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), dtype=np.uint<span class="number">8</span>)  # 设置窗口尺寸和数据类型</span><br><span class="line"><span class="attribute">cv2</span>.ellipse(img, (<span class="number">160</span>, <span class="number">256</span>), (<span class="number">100</span>, <span class="number">50</span>), <span class="number">0</span>, <span class="number">0</span>, <span class="number">240</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line"><span class="attribute">cv2</span>.ellipse(img, (<span class="number">400</span>, <span class="number">256</span>), (<span class="number">100</span>, <span class="number">50</span>), <span class="number">60</span>, <span class="number">0</span>, <span class="number">240</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line"><span class="attribute">WindowsName</span> = &#x27;example&#x27;</span><br><span class="line"><span class="attribute">cv2</span>.namedWindow(WindowsName)</span><br><span class="line"><span class="attribute">cv2</span>.imshow(WindowsName, img)</span><br><span class="line"><span class="attribute">cv2</span>.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="attribute">cv2</span>.destroyWindow(WindowsName)</span><br></pre></td></tr></table></figure>
<h5 id="画多边形"><a href="#画多边形" class="headerlink" title="画多边形"></a>画多边形</h5><p><strong>cv2.polylines(img,pts,isClosed,color,thinkness,lineType,shift)</strong><br><strong>cv2.fillPoly(img,pts,color,thinkness,lineType,shift,offset)</strong></p>
<p>pts：多边形端点<br>isClosed：是否封闭<br>thinkness：线宽无法使用-1表示填充，可以用fillPloy函数填充</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import cv2</span><br><span class="line"> </span><br><span class="line">img = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), dtype=np.uint8)  # 设置窗口尺寸和数据类型</span><br><span class="line">a = np.array([[[<span class="number">10</span>, <span class="number">10</span>], [<span class="number">100</span>, <span class="number">10</span>], [<span class="number">100</span>, <span class="number">100</span>], [<span class="number">10</span>, <span class="number">100</span>]]], dtype=np.int32)</span><br><span class="line">b = np.array([[[<span class="number">150</span>, <span class="number">100</span>], [<span class="number">250</span>, <span class="number">230</span>], [<span class="number">200</span>, <span class="number">200</span>], [<span class="number">150</span>, <span class="number">220</span>]]], dtype=np.int32)</span><br><span class="line">c = np.array([[[<span class="number">300</span>, <span class="number">300</span>], [<span class="number">400</span>, <span class="number">430</span>], [<span class="number">350</span>, <span class="number">400</span>], [<span class="number">300</span>, <span class="number">420</span>]]], dtype=np.int32)</span><br><span class="line">cv2.fillPoly(img, a, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">cv2.polylines(img, b, <span class="number">0</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>))  # <span class="number">0</span>或<span class="symbol">False</span>表示不封闭</span><br><span class="line">cv2.polylines(img, c, <span class="number">1</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>))  # <span class="symbol">True</span>表示封闭</span><br><span class="line"><span class="symbol">WindowsName</span> = <span class="string">&#x27;example&#x27;</span></span><br><span class="line">cv2.namedWindow(<span class="symbol">WindowsName</span>)</span><br><span class="line">cv2.imshow(<span class="symbol">WindowsName</span>, img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyWindow(<span class="symbol">WindowsName</span></span><br></pre></td></tr></table></figure>
<h5 id="添加文字"><a href="#添加文字" class="headerlink" title="添加文字"></a>添加文字</h5><p><strong>cv2.putText(img, text, org, fontFace, fontScale, color, thinkness, lineType, bottomLeftOrigin)</strong><br>fontScale：字体大小，该值和基础大小相乘得到字体大小<br>bottomLeftOrigin：默认0或False，1表示反转</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">import</span> numpy as np</span><br><span class="line"><span class="attribute">import</span> cv<span class="number">2</span></span><br><span class="line"> </span><br><span class="line"><span class="attribute">img</span> = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), dtype=np.uint<span class="number">8</span>)  # 设置窗口尺寸和数据类型</span><br><span class="line"><span class="attribute">font</span> = cv<span class="number">2</span>.FONT_HERSHEY_SIMPLEX</span><br><span class="line"><span class="attribute">cv2</span>.putText(img, &#x27;OpenCV&#x27;, (<span class="number">10</span>, <span class="number">300</span>), font, <span class="number">4</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>, cv<span class="number">2</span>.LINE_AA, <span class="number">0</span>)</span><br><span class="line"><span class="attribute">cv2</span>.putText(img, &#x27;OpenCV&#x27;, (<span class="number">10</span>, <span class="number">300</span>), font, <span class="number">4</span>, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">2</span>, cv<span class="number">2</span>.LINE_AA, <span class="number">1</span>)</span><br><span class="line"><span class="attribute">WindowsName</span> = &#x27;example&#x27;</span><br><span class="line"><span class="attribute">cv2</span>.namedWindow(WindowsName)</span><br><span class="line"><span class="attribute">cv2</span>.imshow(WindowsName, img)</span><br><span class="line"><span class="attribute">cv2</span>.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="attribute">cv2</span>.destroyWindow(WindowsName)</span><br></pre></td></tr></table></figure>

<h4 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h4><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>openCV</category>
      </categories>
  </entry>
  <entry>
    <title>電子工作を始めてからの散財リスト</title>
    <url>/WestRoute.github.io/2021/12/09/%E9%9B%BB%E5%AD%90%E5%B7%A5%E4%BD%9C%E3%82%92%E5%A7%8B%E3%82%81%E3%81%A6%E3%81%8B%E3%82%89%E6%95%A3%E8%B2%A1%E3%83%AA%E3%82%B9%E3%83%88/</url>
    <content><![CDATA[<p>Raspberry pi2 model B(0円,3年前購入)<br>Raspberry piスタンーターキット (1480円)<br>Kuman カメラモジュールRaspberry pi用 (3284円)</p>
<span id="more"></span>
<p>USBケーブル A-A(586円)<br>HDMI2.0ケーブル,50cm(999円)<br><img src="/WestRoute.github.io/images/kibann.jpg"><br>収納ケース (1300円)<br>LCD液晶ボード 7inch 1024*600 VGAモニター(5325円)<br>IC FAN MOTOR (5V 0.15A) (1210円)<br>SANDISCK micro SD card 32GB(600円,初期不良)<br>micro SD card 32GB(1080円)<br>servo SG90(480円)<br>servo SG92R(596円)<br>CR2025 1BS(230円)<br>NE555(54円)<br>HDMI2.0ケーブル,50cm(100円)<br>絶縁テーブル(283円)<br>AC adapter(999円)<br><img src="/WestRoute.github.io/images/hannda.jpg"><br>はんだこて (1031円)<br>こて先クリーニング(327円)<br>巻はんだ(1408円)<br>木綿軍手(173円)</p>
<p>――――   <strong>合計 21,645円</strong></p>
<p>購入予定:</p>
<p>3Dプリンター<br>はんだ立て<br>LCD 9.7inch LP097QX1 LP097QX2<br>6人用ディスク<br>Raspberry pi4<br>電池ボックス<br>電池 単3</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>硬件</category>
      </categories>
  </entry>
  <entry>
    <title>每月总结09 (2021/11)</title>
    <url>/WestRoute.github.io/2021/12/02/MonthlyRe09/</url>
    <content><![CDATA[<p>观影22部，读书4部，时间都去做课题了，写了33个文件，没有偷懒。<br>22部虽然少，但是很幸运看了不少感触很深的。</p>
<span id="more"></span>
<h2 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h2><table>
<thead>
<tr>
<th>name</th>
<th>tagg</th>
<th>compdate</th>
<th>num</th>
</tr>
</thead>
<tbody><tr>
<td>血色将至</td>
<td></td>
<td>2021/12/1</td>
<td>1264</td>
</tr>
<tr>
<td>第五共和国</td>
<td></td>
<td>2021/11/30</td>
<td>1263</td>
</tr>
<tr>
<td>无休无止</td>
<td></td>
<td>2021/11/30</td>
<td>1262</td>
</tr>
<tr>
<td>第四十一</td>
<td></td>
<td>2021/11/29</td>
<td>1261</td>
</tr>
<tr>
<td>大地之歌</td>
<td></td>
<td>2021/11/28</td>
<td>1260</td>
</tr>
<tr>
<td>圣母</td>
<td>2021/法国/保罗·范霍文</td>
<td>2021/11/27</td>
<td>1259</td>
</tr>
<tr>
<td>Titane</td>
<td></td>
<td>2021/11/27</td>
<td>1258</td>
</tr>
<tr>
<td>红高粱</td>
<td></td>
<td>2021/11/26</td>
<td>1257</td>
</tr>
<tr>
<td>冰血暴</td>
<td></td>
<td>2021/11/25</td>
<td>1256</td>
</tr>
<tr>
<td>桃色公寓</td>
<td></td>
<td>2021/11/24</td>
<td>1255</td>
</tr>
<tr>
<td>安德烈·卢布廖夫</td>
<td></td>
<td>2021/11/23</td>
<td>1254</td>
</tr>
<tr>
<td>影迷</td>
<td>1979 /波兰/克日什托夫·基耶斯洛夫斯基</td>
<td>2021/11/23</td>
<td>1253</td>
</tr>
<tr>
<td>天堂之门</td>
<td>太难看了</td>
<td>2021/11/22</td>
<td>1252</td>
</tr>
<tr>
<td>双重赔偿</td>
<td>1944/美国 /利·怀尔德</td>
<td>2021/11/21</td>
<td>1251</td>
</tr>
<tr>
<td>呼喊与细语</td>
<td>1972/瑞典/英格玛·伯格曼</td>
<td>2021/11/20</td>
<td>1250</td>
</tr>
<tr>
<td>M就是凶手</td>
<td>1931/德国/弗里茨·朗</td>
<td>2021/11/19</td>
<td>1249</td>
</tr>
<tr>
<td>第七封印</td>
<td>1957/瑞典/英格玛·伯格曼</td>
<td>2021/11/17</td>
<td>1248</td>
</tr>
<tr>
<td>楢山节考</td>
<td>1983/日本/今村昌平</td>
<td>2021/11/16</td>
<td>1247</td>
</tr>
<tr>
<td>仲夏夜惊魂</td>
<td>2019/美国/阿里·艾斯特</td>
<td>2021/11/13</td>
<td>1246</td>
</tr>
<tr>
<td>五人归来：好莱坞与第二次世界大战 Five Came Back</td>
<td>2017/美国 /劳伦·布罗泽</td>
<td>2021/11/10</td>
<td>1245</td>
</tr>
<tr>
<td>士兵之歌</td>
<td>1959/苏联/格利高利·丘赫莱依</td>
<td>2021/11/7</td>
<td>1244</td>
</tr>
<tr>
<td>潜行者</td>
<td>1959/苏联/安德烈·塔可夫斯基</td>
<td>2021/11/6</td>
<td>1243</td>
</tr>
<tr>
<td>穆谢特</td>
<td>1967/法国/罗伯特·布列松</td>
<td>2021/11/5</td>
<td>1242</td>
</tr>
</tbody></table>
<h2 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h2><table>
<thead>
<tr>
<th>name</th>
<th>tagg</th>
<th>compdate</th>
<th>num</th>
</tr>
</thead>
<tbody><tr>
<td>殺しの双曲線</td>
<td></td>
<td>2021/11/30</td>
<td>168</td>
</tr>
<tr>
<td>白痴</td>
<td>陀思妥耶夫斯基</td>
<td>2021/11/30</td>
<td>167</td>
</tr>
<tr>
<td>python爬虫</td>
<td></td>
<td>2021/11/30</td>
<td>166</td>
</tr>
</tbody></table>
<h2 id="记录生活"><a href="#记录生活" class="headerlink" title="记录生活"></a>记录生活</h2><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>每月总结</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>python05</title>
    <url>/WestRoute.github.io/2021/11/10/python05/</url>
    <content><![CDATA[<p>使用beautifulSoup实现的网站遍历爬虫</p>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment">#define the variable</span></span><br><span class="line">pages = <span class="built_in">set</span>()</span><br><span class="line">random.seed(datetime.datetime.now())</span><br><span class="line"></span><br><span class="line"><span class="comment">#define the function</span></span><br><span class="line"><span class="comment">#ページ内にあるすべて内部リンクを調べる</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getInternalLinks</span>(<span class="params">bs,includeUrl</span>):</span></span><br><span class="line">    includeUrl = <span class="string">&#x27;&#123;&#125;://&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(urlparse(includeUrl).scheme,</span><br><span class="line">    urlparse(includeUrl).netloc)</span><br><span class="line">    internalLinks = []</span><br><span class="line"></span><br><span class="line">        <span class="comment">#&#x27;^(/|.*&#x27;+includeUrl+&#x27;)&#x27;)はregex記法といいます</span></span><br><span class="line">        <span class="comment">#ここでは「//」から始まるリンクだけ探し出す</span></span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> bs.find_all(<span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">        href=re.<span class="built_in">compile</span>(<span class="string">&#x27;^(/|.*&#x27;</span>+includeUrl+<span class="string">&#x27;)&#x27;</span>)):</span><br><span class="line">        <span class="keyword">if</span> link.attrs[<span class="string">&#x27;href&#x27;</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> link.attrs[<span class="string">&#x27;href&#x27;</span>] <span class="keyword">not</span> <span class="keyword">in</span> internalLinks:</span><br><span class="line">                <span class="keyword">if</span>(link.attrs[<span class="string">&#x27;href&#x27;</span>].startswith(<span class="string">&#x27;/&#x27;</span>)):</span><br><span class="line">                    internalLinks.append(</span><br><span class="line">                    includeUrl+link.attrs[<span class="string">&#x27;href&#x27;</span>])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    internalLinks.append(link.attrs[<span class="string">&#x27;href&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> internalLinks</span><br><span class="line"></span><br><span class="line"><span class="comment">##ページ内にあるすべて外部リンクを調べる</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getExternalLinks</span>(<span class="params">bs,excludeUrl</span>):</span></span><br><span class="line">    externalLinks =[]</span><br><span class="line"></span><br><span class="line">        <span class="comment">#「http」や「www」から始まるかつ、いままで出ていないリンクだけ探し出す</span></span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> bs.find_all(<span class="string">&#x27;a&#x27;</span>,href=re.<span class="built_in">compile</span>(<span class="string">&#x27;^(http|www)((?!&#x27;</span>+excludeUrl+<span class="string">&#x27;).)*$&#x27;</span>)):</span><br><span class="line">        <span class="keyword">if</span> link.attrs[<span class="string">&#x27;href&#x27;</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> link.attrs[<span class="string">&#x27;href&#x27;</span>] <span class="keyword">not</span> <span class="keyword">in</span> externalLinks:</span><br><span class="line">                externalLinks.append(link.attrs[<span class="string">&#x27;href&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> externalLinks</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getRandomExternalLink</span>(<span class="params">startingPage</span>):</span></span><br><span class="line">    html = urlopen(startingPage)</span><br><span class="line">    bs = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    externalLinks = getExternalLinks(bs,</span><br><span class="line">    urlparse(startingPage).netloc)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(externalLinks) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;No external links, looking around the site for one&#x27;</span>)</span><br><span class="line">        domain = <span class="string">&#x27;&#123;&#125;://&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(urlparse(startingPage).scheme,</span><br><span class="line">        urlparse(startingPage).netloc)</span><br><span class="line">        internalLinks = getInternalLinks(bs, domain)</span><br><span class="line">        <span class="keyword">return</span> getRandomExternalLink(internalLinks[random.randint(<span class="number">0</span>,</span><br><span class="line">        <span class="built_in">len</span>(internalLinks)-<span class="number">1</span>)])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> externalLinks[random.randint(<span class="number">0</span>, <span class="built_in">len</span>(externalLinks)-<span class="number">1</span>)]</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">followExternalOnly</span>(<span class="params">startingSite</span>):</span></span><br><span class="line">    externalLink = getRandomExternalLink(startingSite)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Random external link is: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(externalLink))</span><br><span class="line">    followExternalOnly(externalLink)</span><br><span class="line"></span><br><span class="line"><span class="comment">#main:</span></span><br><span class="line">followExternalOnly(<span class="string">&#x27;http://oreilly.com&#x27;</span>)</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>c和c++ 管道通讯</title>
    <url>/WestRoute.github.io/2021/11/09/pipe/</url>
    <content><![CDATA[<p>用来复习和对比</p>
<span id="more"></span>
<details><summary>server.c(可点开查看)</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    HANDLE hPipe = <span class="built_in">CreateFile</span>(<span class="string">&quot;\\\\.\\pipe\\mypipe&quot;</span>,</span><br><span class="line">        GENERIC_READ | GENERIC_WRITE, <span class="number">0</span>, <span class="literal">NULL</span>, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (hPipe == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> szBuff[<span class="number">32</span>];</span><br><span class="line">        DWORD dwBytesWritten;</span><br><span class="line">        <span class="built_in">fgets</span>(szBuff, <span class="built_in"><span class="keyword">sizeof</span></span>(szBuff), stdin);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">WriteFile</span>(hPipe, szBuff, <span class="built_in">strlen</span>(szBuff), &amp;dwBytesWritten, <span class="literal">NULL</span>)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">CloseHandle</span>(hPipe);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<details><summary>client.c(可点开查看)</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    HANDLE hPipe = <span class="built_in">CreateNamedPipe</span>(<span class="string">&quot;\\\\.\\pipe\\mypipe&quot;</span>, <span class="comment">//lpName</span></span><br><span class="line">        PIPE_ACCESS_DUPLEX,             <span class="comment">// dwOpenMode</span></span><br><span class="line">        PIPE_TYPE_BYTE | PIPE_WAIT,     <span class="comment">// dwPipeMode</span></span><br><span class="line">        <span class="number">3</span>,                              <span class="comment">// nMaxInstances</span></span><br><span class="line">        <span class="number">0</span>,                              <span class="comment">// nOutBufferSize</span></span><br><span class="line">        <span class="number">0</span>,                              <span class="comment">// nInBufferSize</span></span><br><span class="line">        <span class="number">100</span>,                            <span class="comment">// nDefaultTimeOut</span></span><br><span class="line">        <span class="literal">NULL</span>);                          <span class="comment">// lpSecurityAttributes</span></span><br><span class="line">    <span class="keyword">if</span> (hPipe == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">ConnectNamedPipe</span>(hPipe, <span class="literal">NULL</span>)) &#123;</span><br><span class="line">        <span class="built_in">CloseHandle</span>(hPipe);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> szBuff[<span class="number">256</span>];</span><br><span class="line">        DWORD dwBytesRead;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">ReadFile</span>(hPipe, szBuff, <span class="built_in"><span class="keyword">sizeof</span></span>(szBuff), &amp;dwBytesRead, <span class="literal">NULL</span>)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        szBuff[dwBytesRead] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;PipeServer: %s&quot;</span>, szBuff);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">FlushFileBuffers</span>(hPipe);</span><br><span class="line">    <span class="built_in">DisconnectNamedPipe</span>(hPipe);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(hPipe);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>

<details><summary>server.cpp(可点开查看)</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;create pipe and connect\n&quot;</span>);</span><br><span class="line">      <span class="keyword">char</span> pStr[<span class="number">255</span>];</span><br><span class="line">	DWORD    dwWrite;</span><br><span class="line">	HANDLE hPipe = <span class="built_in">CreateNamedPipe</span>(<span class="string">&quot;\\\\.\\Pipe\\mypipe&quot;</span>, PIPE_ACCESS_DUPLEX, PIPE_TYPE_MESSAGE | PIPE_READMODE_MESSAGE | PIPE_WAIT</span><br><span class="line">		, PIPE_UNLIMITED_INSTANCES, <span class="number">0</span>, <span class="number">0</span>, NMPWAIT_WAIT_FOREVER, <span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">	<span class="comment">//waiting to be connected</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">ConnectNamedPipe</span>(hPipe, <span class="literal">NULL</span>) != <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;connect successful\n&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;put down the phases.\n&quot;</span>;</span><br><span class="line">		cin&gt;&gt;pStr;</span><br><span class="line">		<span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span> (!<span class="built_in">WriteFile</span>(hPipe, pStr, <span class="built_in">strlen</span>(pStr), &amp;dwWrite, <span class="literal">NULL</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;write failed...&quot;</span> &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(pStr==<span class="string">&quot;q&quot;</span>) <span class="keyword">break</span>;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;data sended: &quot;</span> &lt;&lt; pStr &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">			cout&lt;&lt;<span class="string">&quot;put down the phases again.enter &#x27;q&#x27; to quit.\n&quot;</span>;</span><br><span class="line">			cin&gt;&gt;pStr;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">DisconnectNamedPipe</span>(hPipe);</span><br><span class="line">	<span class="built_in">CloseHandle</span>(hPipe);<span class="comment">//关闭管道</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;close\n&quot;</span>);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>

<details><summary>client.cpp(可点开查看)</summary>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFSIZE 5</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      <span class="keyword">char</span> str[<span class="number">1</span>] ;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;namedpipe:client online\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;P key to connect the pipe\n&quot;</span>);</span><br><span class="line">	cin &gt;&gt; str;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;wait connect\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">WaitNamedPipe</span>(<span class="string">&quot;\\\\.\\Pipe\\mypipe&quot;</span>, NMPWAIT_WAIT_FOREVER) == FALSE)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;open pipe\n&quot;</span>);</span><br><span class="line">	HANDLE hPipe = <span class="built_in">CreateFile</span>(<span class="string">&quot;\\\\.\\Pipe\\mypipe&quot;</span>, GENERIC_READ | GENERIC_WRITE, <span class="number">0</span>,</span><br><span class="line">		<span class="literal">NULL</span>, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, <span class="literal">NULL</span>);</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">if</span> ((<span class="keyword">long</span>)hPipe == <span class="number">-1</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">	BOOL fSuccess = <span class="literal">false</span>;</span><br><span class="line">	DWORD len = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> buffer[BUFSIZE];</span><br><span class="line">	string recvData = <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="keyword">int</span> buffercnt=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		fSuccess = <span class="built_in">ReadFile</span>(hPipe, buffer, BUFSIZE * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>), &amp;len, <span class="literal">NULL</span>);</span><br><span class="line">            <span class="keyword">char</span> buffer2[BUFSIZE + <span class="number">1</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">		<span class="built_in">memcpy</span>(buffer2, buffer, len);</span><br><span class="line">		<span class="comment">//recvData.append(buffer2);</span></span><br><span class="line">		<span class="keyword">if</span> (!fSuccess)&#123;</span><br><span class="line">			<span class="comment">//</span></span><br><span class="line">			cout&lt;&lt;<span class="string">&quot;pipe error\n&quot;</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">//cout &lt;&lt; &quot;recv data form server: &quot; &lt;&lt; recvData.c_str() &lt;&lt; endl &lt;&lt; endl;</span></span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;recv data form server: &quot;</span> &lt;&lt; buffer2 &lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">FlushFileBuffers</span>(hPipe);</span><br><span class="line">	&#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">DisconnectNamedPipe</span>(hPipe);</span><br><span class="line">	<span class="built_in">CloseHandle</span>(hPipe);</span><br><span class="line"> </span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>编程练习</category>
      </categories>
  </entry>
  <entry>
    <title>c++09 String类</title>
    <url>/WestRoute.github.io/2021/11/08/c++09string/</url>
    <content><![CDATA[<h3 id="string类构造函数"><a href="#string类构造函数" class="headerlink" title="string类构造函数"></a>string类构造函数</h3><p>string类其实是基于一个类型模板。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> std &#123;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">charT</span>,</span></span><br><span class="line"><span class="class">            <span class="keyword">class</span> <span class="title">traits</span> =</span> char_traits&lt;charT&gt;,</span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">Allocator</span> =</span> allocator&lt;charT&gt; &gt;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">basic_string</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">using</span> string    = basic_string&lt;<span class="keyword">char</span>&gt;;</span><br><span class="line">  <span class="keyword">using</span> u8string  = basic_string&lt;<span class="keyword">char8_t</span>&gt;;   <span class="comment">// C++20から</span></span><br><span class="line">  <span class="keyword">using</span> u16string = basic_string&lt;<span class="keyword">char16_t</span>&gt;;  <span class="comment">// C++11から</span></span><br><span class="line">  <span class="keyword">using</span> u32string = basic_string&lt;<span class="keyword">char32_t</span>&gt;;  <span class="comment">// C++11から</span></span><br><span class="line">  <span class="keyword">using</span> wstring   = basic_string&lt;<span class="keyword">wchar_t</span>&gt;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">namespace</span> pmr &#123;  <span class="comment">// C++17から</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">charT</span>, <span class="keyword">class</span> <span class="title">traits</span> =</span> char_traits&lt;charT&gt;&gt;</span><br><span class="line">      <span class="keyword">using</span> basic_string =</span><br><span class="line">        std::basic_string&lt;charT, traits, polymorphic_allocator&lt;charT&gt;&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> string    = basic_string&lt;<span class="keyword">char</span>&gt;;</span><br><span class="line">    <span class="keyword">using</span> u8string  = basic_string&lt;<span class="keyword">char8_t</span>&gt;; <span class="comment">// C++20から</span></span><br><span class="line">    <span class="keyword">using</span> u16string = basic_string&lt;<span class="keyword">char16_t</span>&gt;;</span><br><span class="line">    <span class="keyword">using</span> u32string = basic_string&lt;<span class="keyword">char32_t</span>&gt;;</span><br><span class="line">    <span class="keyword">using</span> wstring   = basic_string&lt;<span class="keyword">wchar_t</span>&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>头文件string.h和cstring支持对c-风格字符串进行操纵的c库字符串函数，但不支持string类。</p>
<span id="more"></span>

<table>
<thead>
<tr>
<th>构造函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>string(const char * s)</td>
<td>将string对象初始化为s指向NBTS。NBTS为null-byte-temnated string的缩写，表示以空字符结束的字符串（传统的C字符串）</td>
</tr>
<tr>
<td>string(size_type n,char c)</td>
<td>创建一个包含n个元素的string对象，<br>其中每个元素都被初始化为字符c</td>
</tr>
<tr>
<td>string(const string &amp; str)</td>
<td>复制构造函数</td>
</tr>
<tr>
<td>string()</td>
<td>创建一个的string对象，长度为0</td>
</tr>
<tr>
<td>string(const char * s, size_type n)</td>
<td>将string对象初始化为s指向的NBTS中的前n字符，即使超过了NBTS端</td>
</tr>
<tr>
<td>template<clas Iter> string(Iter begin,Iter end)</td>
<td>将string对象初始化为区间(begin,end)内的字符，其中begin和end的行为就像指针</td>
</tr>
<tr>
<td>string(const string &amp; str,string size_type n = npos)</td>
<td>将string对象初始化为对象str中从位置pos开始到结尾的字符，<br>或从位置pos开始的n个字符</td>
</tr>
<tr>
<td>string(string &amp;&amp; str)noexcept</td>
<td>将string对象初始化为string对象(移动构造函数)</td>
</tr>
<tr>
<td>string(initializer_list<char>il)</td>
<td>将string对象初始化为初始化列表il中的字符</td>
</tr>
</tbody></table>
<p>重载运算符+=,=,&lt;&lt;,[]<br></p>
<p><strong>string(initializer_list<char>il)</strong> 允许一下使用方式</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">string piano_man=&#123;<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;t&#x27;</span>&#125;;</span><br><span class="line">string comp_lang &#123;<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;p&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="string类输入"><a href="#string类输入" class="headerlink" title="string类输入"></a>string类输入</h3><table>
<thead>
<tr>
<th>输入方式</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>c-</td>
<td>char info;<br>cin&gt;&gt;info;<br>cin.getlin(info,100);<br>cin.get(info,100);</td>
</tr>
<tr>
<td>string对象</td>
<td>string stuff;<br>cin &gt;&gt; stuff;<br>getline(cin,stuff);<br></td>
</tr>
</tbody></table>
<p>两个版本都有getline，区别是string对象的getline将自动调整目标string对象的大小。<br>对于c-风格的输入，cin是调用对象，而对于string对象输入，cin是一个函数参数。</p>
<h3 id="string类功能"><a href="#string类功能" class="headerlink" title="string类功能"></a>string类功能</h3><p>find()<br>capacity()<br>reserve()</p>
<p>如果你有string，但需要c-风格字符串。比如open接受c-风格字符串</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">string filename<span class="comment">;</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Enter file name&quot;</span><span class="comment">;</span></span><br><span class="line">cin&gt;&gt; filename<span class="comment">;</span></span><br><span class="line">ofstream fout<span class="comment">;</span></span><br><span class="line">fout.open(filename.c_str())<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h3 id="智能指针模板–delete指针对策"><a href="#智能指针模板–delete指针对策" class="headerlink" title="智能指针模板–delete指针对策"></a>智能指针模板–delete指针对策</h3><p>auto_ptr,unique_ptr,share_ptr可以将new活得的地址付给这些对象，当智能指针过期时(离开代码块时)，其析构函数释放内存。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="function">auto_ptr&lt;<span class="keyword">double</span>&gt; <span class="title">ap</span><span class="params">(<span class="keyword">new</span> <span class="keyword">double</span>)</span></span>;</span><br><span class="line">      *ap=<span class="number">25.5</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意：<br>1.不能指向非堆内存<br>2.两个指针不能指向同一个对象<br>3.使用newp[]时不能用auto_ptr，share_ptr</p>
<h3 id="标准模板库–泛型编程"><a href="#标准模板库–泛型编程" class="headerlink" title="标准模板库–泛型编程"></a>标准模板库–泛型编程</h3><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p>size(),swap(),begin(),engd(),push_back(),erase(),insert()<br>for_each(),random_shuffle(),sort()</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span><span class="constructor">_each(<span class="params">books</span>.<span class="params">begain</span>()</span>,books.<span class="keyword">end</span><span class="literal">()</span>,ShowReveiw)</span><br></pre></td></tr></table></figure>

<p>基于范围的for</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">double</span> prices[<span class="number">5</span>] =&#123;<span class="number">4</span>.<span class="number">99</span>,<span class="number">10</span>.<span class="number">99</span>,<span class="number">6</span>.<span class="number">87</span>,<span class="number">7</span>.<span class="number">99</span>,<span class="number">8</span>.<span class="number">49</span>&#125;;</span><br><span class="line"><span class="attribute">for</span>(double x: prices) cout&lt;&lt; x &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>
<p>基于范围的for修改内容</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">for(<span class="attribute">auto</span> &amp;x: books) <span class="built_in">InflateReview</span>(x);</span><br></pre></td></tr></table></figure>
<br>

<p><strong>16.11 inserts.cpp</strong></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// inserts.cpp -- copy!) and insert iterators </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">const</span> std::string &amp; s)</span> </span>&#123; std::cout &lt;&lt; s &lt;&lt; <span class="string">&quot; &quot;</span>; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">	string s1[<span class="number">4</span>] = &#123; <span class="string">&quot;fine&quot;</span>, <span class="string">&quot;fish&quot;</span>, <span class="string">&quot;fashion&quot;</span>, <span class="string">&quot;fate&quot;</span> &#125;;</span><br><span class="line">	string s2[<span class="number">2</span>] = &#123; <span class="string">&quot;busy&quot;</span>, <span class="string">&quot;bats&quot;</span> &#125;;</span><br><span class="line">	string s3[<span class="number">2</span>] = &#123; <span class="string">&quot;silly&quot;</span>, <span class="string">&quot;singers&quot;</span> &#125;;</span><br><span class="line">	<span class="function">vector&lt;string&gt; <span class="title">words</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line">	<span class="built_in">copy</span>(s1, s1 + <span class="number">4</span>, words.<span class="built_in">begin</span>());</span><br><span class="line">	for_each(words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>(), output);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// construct anonymous back_insert_iterator object</span></span><br><span class="line">	<span class="built_in">copy</span>(s2, s2 + <span class="number">2</span>, back_insert_iterator&lt;vector&lt;string&gt; &gt;(words));</span><br><span class="line">	for_each(words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>(), output);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// construct anonymous insert_iterator object</span></span><br><span class="line">	<span class="built_in">copy</span>(s3, s3 + <span class="number">2</span>, insert_iterator&lt;vector&lt;string&gt; &gt;(words, words.<span class="built_in">begin</span>()));</span><br><span class="line">	for_each(words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>(), output);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>WorseThan()</p>
<h4 id="容器种类"><a href="#容器种类" class="headerlink" title="容器种类"></a>容器种类</h4><h5 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h5><h5 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h5><h5 id="list"><a href="#list" class="headerlink" title="list"></a>list</h5><p>双向链表</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//list.cpp -- using a list</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outint</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; std::cout &lt;&lt; n &lt;&lt; <span class="string">&quot; &quot;</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">	<span class="function">list&lt;<span class="keyword">int</span>&gt; <span class="title">one</span><span class="params">(<span class="number">5</span>, <span class="number">2</span>)</span></span>; <span class="comment">// list of 5 2s </span></span><br><span class="line">	<span class="keyword">int</span> stuff[<span class="number">5</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">6</span> &#125;;</span><br><span class="line">	list&lt;<span class="keyword">int</span>&gt; two;</span><br><span class="line">	two.<span class="built_in">insert</span>(two.<span class="built_in">begin</span>(), stuff, stuff + <span class="number">5</span>);</span><br><span class="line">	<span class="keyword">int</span> more[<span class="number">6</span>] = &#123; <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span> &#125;;</span><br><span class="line">	<span class="function">list&lt;<span class="keyword">int</span>&gt; <span class="title">three</span><span class="params">(two)</span></span>;</span><br><span class="line">	three.<span class="built_in">insert</span>(three.<span class="built_in">end</span>(), more, more + <span class="number">6</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;List one: &quot;</span>;</span><br><span class="line">	for_each(one.<span class="built_in">begin</span>(), one.<span class="built_in">end</span>(), outint);</span><br><span class="line">	cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;List two: &quot;</span>;</span><br><span class="line">	for_each(two.<span class="built_in">begin</span>(), two.<span class="built_in">end</span>(), outint);</span><br><span class="line">	cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;List three: &quot;</span>;</span><br><span class="line">	for_each(three.<span class="built_in">begin</span>(), three.<span class="built_in">end</span>(), outint);</span><br><span class="line">	three.<span class="built_in">remove</span>(<span class="number">2</span>);</span><br><span class="line">	cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;List three minus 2s: &quot;</span>;</span><br><span class="line">	for_each(three.<span class="built_in">begin</span>(), three.<span class="built_in">end</span>(), outint);</span><br><span class="line">	three.<span class="built_in">splice</span>(three.<span class="built_in">begin</span>(), one);</span><br><span class="line">	cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;List three after splice: &quot;</span>;</span><br><span class="line">	for_each(three.<span class="built_in">begin</span>(), three.<span class="built_in">end</span>(), outint);</span><br><span class="line">	cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;List one: &quot;</span>;</span><br><span class="line">	for_each(one.<span class="built_in">begin</span>(), one.<span class="built_in">end</span>(), outint);</span><br><span class="line">	three.<span class="built_in">unique</span>();</span><br><span class="line">	cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;List three after unique: &quot;</span>;</span><br><span class="line">	for_each(three.<span class="built_in">begin</span>(), three.<span class="built_in">end</span>(), outint);</span><br><span class="line">	three.<span class="built_in">sort</span>();</span><br><span class="line">	three.<span class="built_in">unique</span>();</span><br><span class="line">	cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;List three after sort &amp;• unique: &quot;</span>;</span><br><span class="line">	for_each(three.<span class="built_in">begin</span>(), three.<span class="built_in">end</span>(), outint);</span><br><span class="line">	two.<span class="built_in">sort</span>();</span><br><span class="line">	three.<span class="built_in">merge</span>(two);</span><br><span class="line">	cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;Sorted two merged into three: &quot;</span>;</span><br><span class="line">	for_each(three.<span class="built_in">begin</span>(), three.<span class="built_in">end</span>(), outint);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="forward-list"><a href="#forward-list" class="headerlink" title="forward_list"></a>forward_list</h5><h5 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h5><h5 id="prioprity-queue"><a href="#prioprity-queue" class="headerlink" title="prioprity_queue"></a>prioprity_queue</h5><h5 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h5><h5 id="array"><a href="#array" class="headerlink" title="array"></a>array</h5><p>array不是STL容器，无法调节容器的大小，但是copy()，for_each()可以用于array。</p>
<h4 id="关联容器-set-multiset-map-multimap"><a href="#关联容器-set-multiset-map-multimap" class="headerlink" title="关联容器 :set,multiset,map,multimap"></a>关联容器 :set,multiset,map,multimap</h4><p><strong>16.13 setops.cpp</strong></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//setops.cpp -- some set operations</span></span><br><span class="line">#<span class="keyword">include</span> &lt;iostream&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;<span class="built_in">string</span>&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;set&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;algorithm&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;iterator&gt;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">int</span> main<span class="literal">()</span></span><br><span class="line">&#123;</span><br><span class="line">	using namespace std;</span><br><span class="line">	const <span class="built_in">int</span> N = <span class="number">6</span>;</span><br><span class="line">	<span class="built_in">string</span> s1<span class="literal">[N]</span> = &#123; <span class="string">&quot;buffoon&quot;</span>,<span class="string">&quot;thinkers&quot;</span>,<span class="string">&quot;for&quot;</span>,<span class="string">&quot;heavy&quot;</span>,<span class="string">&quot;can&quot;</span>,<span class="string">&quot;for&quot;</span> &#125;;</span><br><span class="line">	<span class="built_in">string</span> s2<span class="literal">[N]</span> = &#123; <span class="string">&quot;metal&quot;</span>, <span class="string">&quot;any&quot;</span>, <span class="string">&quot;food&quot;</span>,<span class="string">&quot;elegant&quot;</span>,<span class="string">&quot;deliver&quot;</span>,<span class="string">&quot;for&quot;</span> &#125;;</span><br><span class="line"> </span><br><span class="line">	set&lt;<span class="built_in">string</span>&gt; <span class="constructor">A(<span class="params">s1</span>, <span class="params">s1</span> + N)</span>;</span><br><span class="line">	set&lt;<span class="built_in">string</span>&gt; <span class="constructor">B(<span class="params">s2</span>, <span class="params">s2</span> + N)</span>;</span><br><span class="line"> </span><br><span class="line">	ostream_iterator&lt;<span class="built_in">string</span>, <span class="built_in">char</span>&gt; out(cout, <span class="string">&quot; &quot;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Set A&quot;</span>;</span><br><span class="line">	copy(<span class="module-access"><span class="module"><span class="identifier">A</span>.</span></span><span class="keyword">begin</span><span class="literal">()</span>, <span class="module-access"><span class="module"><span class="identifier">A</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>, out);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Set B: &quot;</span>;</span><br><span class="line">	copy(<span class="module-access"><span class="module"><span class="identifier">B</span>.</span></span><span class="keyword">begin</span><span class="literal">()</span>, <span class="module-access"><span class="module"><span class="identifier">B</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>, out);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Union of A and B:\n&quot;</span>;</span><br><span class="line">	set<span class="constructor">_union(A.<span class="params">begin</span>()</span> , <span class="module-access"><span class="module"><span class="identifier">A</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>, <span class="module-access"><span class="module"><span class="identifier">B</span>.</span></span><span class="keyword">begin</span><span class="literal">()</span>, <span class="module-access"><span class="module"><span class="identifier">B</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>, out); </span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Intersection of A and B:\n&quot;</span>;</span><br><span class="line">	set<span class="constructor">_intersection(A.<span class="params">begin</span>()</span>, <span class="module-access"><span class="module"><span class="identifier">A</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>, <span class="module-access"><span class="module"><span class="identifier">B</span>.</span></span><span class="keyword">begin</span><span class="literal">()</span>, <span class="module-access"><span class="module"><span class="identifier">B</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>, out); </span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Difference of A and B:\n&quot;</span>;</span><br><span class="line">	set<span class="constructor">_difference(A.<span class="params">begin</span>()</span>, <span class="module-access"><span class="module"><span class="identifier">A</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>, <span class="module-access"><span class="module"><span class="identifier">B</span>.</span></span><span class="keyword">begin</span><span class="literal">()</span>, <span class="module-access"><span class="module"><span class="identifier">B</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>, out);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	set&lt;<span class="built_in">string</span>&gt; C; cout &lt;&lt; <span class="string">&quot;Set C:\n&quot;</span>;</span><br><span class="line">	set<span class="constructor">_union(A.<span class="params">begin</span>()</span>, <span class="module-access"><span class="module"><span class="identifier">A</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>, <span class="module-access"><span class="module"><span class="identifier">B</span>.</span></span><span class="keyword">begin</span><span class="literal">()</span>, <span class="module-access"><span class="module"><span class="identifier">B</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>, insert_iterator&lt;set&lt;<span class="built_in">string</span>&gt; &gt;(C, <span class="module-access"><span class="module"><span class="identifier">C</span>.</span></span><span class="keyword">begin</span><span class="literal">()</span>)); </span><br><span class="line">	copy(<span class="module-access"><span class="module"><span class="identifier">C</span>.</span></span><span class="keyword">begin</span><span class="literal">()</span>, <span class="module-access"><span class="module"><span class="identifier">C</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>, out);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">string</span> s3(<span class="string">&quot;grungy&quot;</span>);</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">C</span>.</span></span>insert(s3);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Set C after insertion:\n&quot;</span>;</span><br><span class="line">	copy(<span class="module-access"><span class="module"><span class="identifier">C</span>.</span></span><span class="keyword">begin</span><span class="literal">()</span>, <span class="module-access"><span class="module"><span class="identifier">C</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>, out);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Showing a range:\n&quot;</span>;</span><br><span class="line">	copy(<span class="module-access"><span class="module"><span class="identifier">C</span>.</span></span>lower<span class="constructor">_bound(<span class="string">&quot;ghost&quot;</span>)</span>, <span class="module-access"><span class="module"><span class="identifier">C</span>.</span></span>upper<span class="constructor">_bound(<span class="string">&quot;spook&quot;</span>)</span>, out);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>16.14 multimap.cpp</strong></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//multmap.cpp -- use a multimap</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> KeyType;</span><br><span class="line"><span class="keyword">typedef</span> std::pair&lt;<span class="keyword">const</span> KeyType, std::string&gt; Pair; </span><br><span class="line"><span class="keyword">typedef</span> std::multimap&lt;KeyType, std::string&gt; MapCode;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> std; MapCode codes;</span><br><span class="line">	codes.<span class="built_in">insert</span>(<span class="built_in">Pair</span>(<span class="number">415</span>, <span class="string">&quot;San Francisco&quot;</span>));</span><br><span class="line">	codes.<span class="built_in">insert</span>(<span class="built_in">Pair</span>(<span class="number">510</span>, <span class="string">&quot;Oakland&quot;</span>));</span><br><span class="line">	codes.<span class="built_in">insert</span>(<span class="built_in">Pair</span>(<span class="number">718</span>, <span class="string">&quot;Brooklyn&quot;</span>));</span><br><span class="line">	codes.<span class="built_in">insert</span>(<span class="built_in">Pair</span>(<span class="number">718</span>, <span class="string">&quot;Staten Island&quot;</span>));</span><br><span class="line">	codes.<span class="built_in">insert</span>(<span class="built_in">Pair</span>(<span class="number">415</span>, <span class="string">&quot;San Rafael&quot;</span>));</span><br><span class="line">	codes.<span class="built_in">insert</span>(<span class="built_in">Pair</span>(<span class="number">510</span>, <span class="string">&quot;Berkeley&quot;</span>));</span><br><span class="line"> </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Number of cities with area code 415: &quot;</span> &lt;&lt; codes.<span class="built_in">count</span>(<span class="number">415</span>) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Number of cities with area code 718: &quot;</span> &lt;&lt; codes.<span class="built_in">count</span>(<span class="number">718</span>) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Number of cities with area code 510: &quot;</span> &lt;&lt; codes.<span class="built_in">count</span>(<span class="number">510</span>) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Area Code City\n&quot;</span>;</span><br><span class="line">	MapCode::iterator it;</span><br><span class="line">	<span class="keyword">for</span> (it = codes.<span class="built_in">begin</span>(); it != codes.<span class="built_in">end</span>(); ++it)</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; (*it).first &lt;&lt; <span class="string">&quot;	&quot;</span> &lt;&lt; (*it).second &lt;&lt; endl;</span><br><span class="line">	pair&lt;MapCode::iterator, MapCode::iterator&gt; range = codes.<span class="built_in">equal_range</span>(<span class="number">718</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Cities with area code 718 :\n&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (it = range.first; it != range.second; ++it)</span><br><span class="line">		cout &lt;&lt; (*it).second &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h4><p>很多STL算法都是用函数对象————也叫做函数符(functor)。<br>函数符是可以以函数方式与()结合使用的任意对象。即定义了函数operator()()的类。<br>可以像这样定义一个类;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Linear</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">      <span class="keyword">double</span> slope;</span><br><span class="line">      <span class="keyword">double</span> y0;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      Linear(<span class="keyword">double</span> s1_=<span class="number">1</span>,<span class="keyword">double</span> y_=<span class="number">0</span>): slope(s1_),y0(y_)&#123;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">double</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;<span class="keyword">return</span> y0 + slope * x;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这样重载()运算符将使得能够像函数那样使用Linear对象:<br>Linear f1;<br>Linear f2(2.5,10.0);<br>double y1 = f1(12.5); //y1=0+1<em>12.5<br>double y2 = f2(0.4);  //y2=10.0+2.5</em>0.4</p>
<h5 id="函数符概念"><a href="#函数符概念" class="headerlink" title="函数符概念"></a>函数符概念</h5><p>生成器是不用参数就可以调用的函数符<br>一元函数是用一个参数就可以调用的函数符<br>二元函数是用两个参数就可以调用的函数符</p>
<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>就地版本和复制版本</p>
<p>la.remove(4);<br>调用该方法后，链表中值为4的元素都会被删除，同时链表的长度也会被改变。<br>remove(lb.begin(),lb.end(),4);<br>这个remove是STL算法，是函数不是成员，不能调整链表长度。</p>
<p><strong>16.18 listrmv.cpp</strong></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// listrmv.cpp -- applying the STL to a string </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show</span><span class="params">(<span class="keyword">int</span>)</span></span>; <span class="keyword">const</span> <span class="keyword">int</span> LIM = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">	<span class="keyword">int</span> ar[LIM] = &#123; <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span> &#125;;</span><br><span class="line">	<span class="function">list&lt;<span class="keyword">int</span>&gt; <span class="title">la</span><span class="params">(ar, ar + LIM)</span></span>;</span><br><span class="line">	<span class="function">list&lt;<span class="keyword">int</span>&gt; <span class="title">lb</span><span class="params">(la)</span></span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Original list contents:\n\t&quot;</span>;</span><br><span class="line">	for_each(la.<span class="built_in">begin</span>(), la.<span class="built_in">end</span>(), Show);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	la.<span class="built_in">remove</span>(<span class="number">4</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;After using the remove() method:\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;la:\t&quot;</span>;</span><br><span class="line">	for_each(la.<span class="built_in">begin</span>(), la.<span class="built_in">end</span>(), Show);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	list&lt;<span class="keyword">int</span>&gt;::iterator last;</span><br><span class="line">	last = <span class="built_in">remove</span>(lb.<span class="built_in">begin</span>(), lb.<span class="built_in">end</span>(), <span class="number">4</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;After using the remove() functionin&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;lb:\t&quot;</span>;</span><br><span class="line">	for_each(lb.<span class="built_in">begin</span>(), lb.<span class="built_in">end</span>(), Show); cout &lt;&lt; endl;</span><br><span class="line">	lb.<span class="built_in">erase</span>(last, lb.<span class="built_in">end</span>());</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;After using the erase!) method:\n&quot;</span>; cout &lt;&lt; <span class="string">&quot;lbAt&quot;</span>;</span><br><span class="line">	for_each(lb.<span class="built_in">begin</span>(), lb.<span class="built_in">end</span>(), Show); cout &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	std::cout &lt;&lt; v &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>
希望得到一个按输入顺序排列的单词列表，一个按字母顺序排列的单词列表。
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">vector&lt;string&gt; words;</span><br><span class="line">string input;</span><br><span class="line"><span class="keyword">while</span> (cin&gt;&gt; input &amp;&amp; input != <span class="string">&quot;quit&quot;</span>)</span><br><span class="line">     <span class="function">words <span class="title">push_back</span><span class="params">(input)</span></span>;</span><br><span class="line"></span><br><span class="line">set&lt;string&gt; wordeset;</span><br><span class="line"><span class="built_in">transform</span>(words.<span class="built_in">begin</span>(),words.<span class="built_in">end</span>(),</span><br><span class="line">	insert_iterator&lt;set&lt;string&gt;&gt;.(wordset,wordset.<span class="built_in">begin</span>()),ToLower);</span><br></pre></td></tr></table></figure>
<br>单词出现计数
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">map&lt;string,<span class="keyword">int</span>&gt;wordmap;</span><br><span class="line">set&lt;string&gt;::iterator si;</span><br><span class="line"><span class="keyword">for</span>(si = wordset.<span class="built_in">begin</span>();si != wordset.<span class="built_in">endd</span>();si++)</span><br><span class="line">  wordmap.<span class="built_in">insert</span>(pair&lt;string,<span class="keyword">int</span>&gt;(*si,<span class="built_in">count</span>(words.<span class="built_in">begin</span>(),words.<span class="built_in">end</span>(),*si)));</span><br></pre></td></tr></table></figure>
wordmap["the"]:word出现过的次数
<details><summary>16.19 usealgo.cpp(可点开查看)</summary>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//usealgo.cpp -- using several STL elements </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span> </span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">toLower</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">tolower</span>(ch);&#125;</span><br><span class="line"><span class="function">string &amp; <span class="title">ToLower</span><span class="params">(string &amp; st)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">const</span> string &amp; s)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;string&gt; words;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Enter words (enter quit to quit):\n&quot;</span>;</span><br><span class="line">	string input;</span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; input &amp;&amp; input != <span class="string">&quot;quit&quot;</span>)</span><br><span class="line">		words.<span class="built_in">push_back</span>(input);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;You entered the following words:\n&quot;</span>;</span><br><span class="line">	for_each(words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>(), display);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// place words in set, converting to lowercase</span></span><br><span class="line">	set&lt;string&gt; wordset;</span><br><span class="line">	<span class="built_in">transform</span>(words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>(), insert_iterator&lt;set&lt;string&gt; &gt;(wordset, wordset.<span class="built_in">begin</span>()), ToLower);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\nAlphabetic list of words:\n&quot;</span>;</span><br><span class="line">	for_each(wordset.<span class="built_in">begin</span>(), wordset.<span class="built_in">end</span>(), display);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// place word and frequency in map </span></span><br><span class="line">	map&lt;string, <span class="keyword">int</span>&gt; wordmap;</span><br><span class="line">	set&lt;string&gt;::iterator si;</span><br><span class="line">	<span class="keyword">for</span> (si = wordset.<span class="built_in">begin</span>(); si != wordset.<span class="built_in">end</span>(); si++)</span><br><span class="line">		wordmap[*si] = <span class="built_in">count</span>(words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>(), *si);</span><br><span class="line">	<span class="comment">// display map contents</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\nWord frequency:\n&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (si = wordset.<span class="built_in">begin</span>();</span><br><span class="line">		si != wordset.<span class="built_in">end</span>(); si++) cout &lt;&lt; *si &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; wordmap[*si] &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//预定tolower是int型，所以需要定义string型</span></span><br><span class="line"><span class="function">string &amp; <span class="title">ToLower</span><span class="params">(string &amp; st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">transform</span>(st.<span class="built_in">begin</span>(), st.<span class="built_in">end</span>(), st.<span class="built_in">begin</span>(), toLower);</span><br><span class="line">	<span class="keyword">return</span> st;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">const</span> string &amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; s &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h4 id="其他库"><a href="#其他库" class="headerlink" title="其他库"></a>其他库</h4><p>Vector模板类是一个容器类和算法系统的一部分，它支持面向容器的操作，如排序，插入，转移容器。<br>valarray类模板面向数值计算的二，不是STL的一部分，没有pushback()和insert()<br>array是为代替内置数组而设计的，有更好、更安全的接口。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">double</span>&gt; ved1(<span class="number">10</span>),ved2(<span class="number">10</span>),ved3(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">array</span>&lt;<span class="type">double</span>,<span class="number">10</span>&gt;vod1,vod2,vod3;</span><br><span class="line">valarray&lt;<span class="type">double</span>&gt; vad1(<span class="number">10</span>),vad2(<span class="number">10</span>),vad(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*将两个数组的第一个元素之和放入第三个数组的第一个元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">//vector</span><br><span class="line"><span class="keyword">transform</span>(ved1.<span class="keyword">begin</span>(),ved1.<span class="keyword">end</span>(),ved2.<span class="keyword">begin</span>(),ved2.<span class="keyword">end</span>(),plus&lt;<span class="type">double</span>&gt;());</span><br><span class="line">//<span class="keyword">array</span></span><br><span class="line"><span class="keyword">transform</span>(vod1.<span class="keyword">begin</span>(),vod1.<span class="keyword">end</span>(),vod2.<span class="keyword">begin</span>(),vod2.<span class="keyword">end</span>(),plus&lt;<span class="type">double</span>&gt;());</span><br><span class="line"></span><br><span class="line">//valarray</span><br><span class="line">vad3=vad1+vad2;   //overload</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*将数组元素扩大2.5倍</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">//STL</span><br><span class="line"><span class="keyword">transform</span>(ved1.<span class="keyword">begin</span>(),ved1.<span class="keyword">end</span>(),ved2.<span class="keyword">begin</span>(),ved2.<span class="keyword">end</span>(),bindlst(multiplies&lt;<span class="type">double</span>&gt;(),<span class="number">2.5</span>));</span><br><span class="line"></span><br><span class="line">//valarray</span><br><span class="line">vad3=<span class="number">2.5</span>*vad3;   //overload</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*自然对数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">//STL</span><br><span class="line"><span class="keyword">transform</span>(ved1.<span class="keyword">begin</span>(),ved1.<span class="keyword">end</span>(),ved2.<span class="keyword">begin</span>(),ved2.<span class="keyword">end</span>(),<span class="keyword">log</span>);</span><br><span class="line"></span><br><span class="line">//valarray</span><br><span class="line">vad3=log(vad3);   //overload</span><br></pre></td></tr></table></figure>
<p>valarray适用预处理数组的循环使用，最大的缺点是无法像STl自动调整长度。<br>c++11提供begin和end<br>sort(begin(vad),end(vad));<br>以下演示先vactor的push_back和自动调整大小来搜集数据，再复制到valarray对象中执行数学运算。</p>
<details><summary>16.20 valvect.cpp(可点开查看)</summary>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// valvect.cpp -- comparing vector and valarray </span><br><span class="line">#<span class="keyword">include</span> &lt;iostream&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;valarray&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;vector&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;algorithm&gt;</span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">	using namespace std;</span><br><span class="line">	vector&lt;<span class="keyword">double</span>&gt; <span class="keyword">data</span>;</span><br><span class="line">	<span class="keyword">double</span> temp;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Enter numbers (&lt;=0 to quit):\n&quot;</span>;</span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; temp &amp;&amp; temp &gt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">data</span>.push_back(temp);</span><br><span class="line">	sort(<span class="keyword">data</span>.begin(), <span class="keyword">data</span>.<span class="keyword">end</span>());</span><br><span class="line">	<span class="built_in">int</span> <span class="built_in">size</span> = <span class="keyword">data</span>.<span class="built_in">size</span>();</span><br><span class="line">	valarray&lt;<span class="keyword">double</span>&gt; numbers(<span class="built_in">size</span>);</span><br><span class="line">	<span class="built_in">int</span> i;</span><br><span class="line">	for (i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++)</span><br><span class="line">		numbers[i] = <span class="keyword">data</span>[i];</span><br><span class="line">	valarray&lt;<span class="keyword">double</span>&gt; sq_rts(<span class="built_in">size</span>);</span><br><span class="line">	sq_rts = <span class="built_in">sqrt</span>(numbers);</span><br><span class="line">	valarray&lt;<span class="keyword">double</span>&gt; results(<span class="built_in">size</span>);</span><br><span class="line">	results = numbers + <span class="number">2.0</span> * sq_rts;</span><br><span class="line">	cout.setf(ios_base::fixed);</span><br><span class="line">	cout.<span class="keyword">precision</span>(<span class="number">4</span>);</span><br><span class="line">	for (i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout.width(<span class="number">8</span>);</span><br><span class="line">		cout &lt;&lt; numbers[i] &lt;&lt; <span class="string">&#x27;: &#x27;</span>;</span><br><span class="line">		cout.width(<span class="number">8</span>);</span><br><span class="line">		cout &lt;&lt; results[i] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;done\n&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<p>slice数组索引：起始索引，索引数和跨距</p>
<details><summary>16.21 vslice.cpp(可点开查看)</summary>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//vslice.cpp -- using valarray slices</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">typedef</span> std::valarray&lt;<span class="keyword">int</span>&gt; vint; <span class="comment">// simplify declarations </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">const</span> vint &amp; v, <span class="keyword">int</span> cols)</span></span>; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> std::slice;	<span class="comment">// from &lt;valarray&gt;</span></span><br><span class="line">	<span class="keyword">using</span> std::cout;</span><br><span class="line">	<span class="function">vint <span class="title">valint</span><span class="params">(SIZE)</span></span>;	<span class="comment">// think of as 4 rows of 3</span></span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; SIZE; ++i)</span><br><span class="line">		valint[i] = std::<span class="built_in">rand</span>() % <span class="number">10</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Original array:\n&quot;</span>;</span><br><span class="line">	<span class="built_in">show</span>(valint, <span class="number">3</span>); <span class="comment">// show in 3 columns</span></span><br><span class="line">	<span class="function">vint <span class="title">vcol</span><span class="params">(valint[slice(<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>)])</span></span>; <span class="comment">// extract 2nd column</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Second column:\n&quot;</span>;</span><br><span class="line">	<span class="built_in">show</span>(vcol, <span class="number">1</span>);<span class="comment">// show in 1 column </span></span><br><span class="line">	<span class="function">vint <span class="title">vrow</span><span class="params">(valint[slice(<span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>)])</span></span>;<span class="comment">// extract 2nd row</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Second row:\n&quot;</span>;</span><br><span class="line">	<span class="built_in">show</span>(vrow, <span class="number">3</span>);</span><br><span class="line">	valint[<span class="built_in">slice</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>)] = <span class="number">10</span>;<span class="comment">// assign to 2nd column</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Set last column to 10:\n&quot;</span>; <span class="built_in">show</span>(valint, <span class="number">3</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Set first column to sum of next two:\n&quot;</span>;</span><br><span class="line">	<span class="comment">// + not defined for slices, so convert to valarray&lt;int&gt;</span></span><br><span class="line">	valint[<span class="built_in">slice</span>(<span class="number">0</span>, <span class="number">4</span>, <span class="number">3</span>)] = <span class="built_in">vint</span>(valint[<span class="built_in">slice</span>(<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>)]) + <span class="built_in">vint</span>(valint[<span class="built_in">slice</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>)]);</span><br><span class="line">	<span class="built_in">show</span>(valint, <span class="number">3</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">const</span> vint &amp; v, <span class="keyword">int</span> cols)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> std::cout;</span><br><span class="line">	<span class="keyword">using</span> std::endl;</span><br><span class="line">	<span class="keyword">int</span> lim = v.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		cout.<span class="built_in">width</span>(<span class="number">3</span>);</span><br><span class="line">		cout &lt;&lt; v[i];</span><br><span class="line">		<span class="keyword">if</span> (i % cols == cols - <span class="number">1</span>)</span><br><span class="line">			cout &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			cout &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (lim % cols != <span class="number">0</span>)</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>

<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>C++PrimerPlus</category>
      </categories>
  </entry>
  <entry>
    <title>c++08 异常处理</title>
    <url>/WestRoute.github.io/2021/11/06/c++08except/</url>
    <content><![CDATA[<p>Throw –&gt;Try –&gt;Catch<br>thorw不会引起异常</p>
<span id="more"></span>
<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>abort()：向标准错误流发送消息 bnormal program terminaton<br>throw “message”：throw是一种跳转，及命令程序跳转到另一条语句。message用来指出异常的特征。<br>try：可能出现error的程序<br>catch：用来捕获throw抛出的异常，{}内是出现error之后的处理(这里是要求输入新数字)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//error3.cpp -- using an exception</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">hmean</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> x, y, z;</span><br><span class="line"> </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Enter two numbers: &quot;</span>;</span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; x &gt;&gt; y)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">try</span><span class="comment">//start of try block</span></span><br><span class="line">		&#123;</span><br><span class="line">			z = <span class="built_in">hmean</span>(x, y);</span><br><span class="line">		&#125;<span class="comment">//end of try block</span></span><br><span class="line">		<span class="built_in"><span class="keyword">catch</span></span> (<span class="keyword">const</span> <span class="keyword">char</span> * s)<span class="comment">//start of exception handler</span></span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Enter a new pair of numbers: &quot;</span>;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;<span class="comment">//end of handler</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Harmonic mean of &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot; and &quot;</span> &lt;&lt; y &lt;&lt; <span class="string">&quot; is &quot;</span> &lt;&lt; z &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Enter next set of numbers &lt;q to quit&gt; : &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Bye!\n&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">hmean</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a == -b)</span><br><span class="line">		<span class="keyword">throw</span> <span class="string">&quot;bad hmean() arguments: a = -b not allowed&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">2.0</span> * a * b / (a + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="将对象用作异常类型"><a href="#将对象用作异常类型" class="headerlink" title="将对象用作异常类型"></a>将对象用作异常类型</h4><p>没看懂<br><br></p>
<h4 id="异常规范"><a href="#异常规范" class="headerlink" title="异常规范"></a>异常规范</h4><p>throw可以在函数体中抛出异常，也可以在函数声明中指明当前函数能抛出的异常。<br>double harm(double a) throw(bad_thing);//throw bad_thing exception<br>double marm(double) throw;//doesnt throw<br>可使用新增的noexcept指出函数不会抛出异常<br>double marm() noexcept;</p>
<h4 id="栈解退"><a href="#栈解退" class="headerlink" title="栈解退"></a>栈解退</h4><p>当引用对引发异常的函数进行调用的函数时，涉及栈解退。<br><img src="/WestRoute.github.io/images/cmemoery.png"><br>程序将函数指令的返回地址存入栈中，当被调用的函数执行完毕后，程序将用该地址来确定从哪里继续执行。<br>在栈中，这些函数被视为自动变量。如果被调用的函数调用了其他函数，则后者的信息也将添加在栈中。<br>假设最顶部的函数由于出现异常而被中止，栈直到找到try的}地址为止一直释放栈，控制权转为块尾的异常处理。<br>栈和函数返回一样，对与栈中的自动类对象，类的析构函数会被调用。<br>然而函数返回仅仅是处理该函数放在栈中的对象，而throw语句则处理try-catch之间整个函数调用序列放在战中的对象。</p>
<details><summary>error5.h(可点开查看)</summary>

<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//error5.cpp -- unwinding the stack</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>	</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;exc_mean.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">demo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	string <span class="keyword">word</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">demo</span>(<span class="keyword">const</span> string &amp; str)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">word</span> = str;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;demo &quot;</span> &lt;&lt; <span class="keyword">word</span> &lt;&lt; <span class="string">&quot; created\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">demo</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;demo &quot;</span> &lt;&lt; <span class="keyword">word</span> &lt;&lt; <span class="string">&quot; destroyed\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;demo &quot;</span> &lt;&lt; <span class="keyword">word</span> &lt;&lt; <span class="string">&quot; lives!\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// function prototypes</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">hmean</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">gmean</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">means</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> std::cout;</span><br><span class="line">	<span class="keyword">using</span> std::cin;</span><br><span class="line">	<span class="keyword">using</span> std::endl;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">double</span> x, y, z;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="function">demo <span class="title">d1</span><span class="params">(<span class="string">&quot;found in block in main() &quot;</span>)</span></span>;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Enter two numbers : &quot;</span>;</span><br><span class="line">		<span class="keyword">while</span> (cin &gt;&gt; x &gt;&gt; y)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">try</span><span class="comment">// stare of try block</span></span><br><span class="line">			&#123;</span><br><span class="line">				z = <span class="built_in">means</span>(x, y);</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;The mean mean of &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot; and &quot;</span> &lt;&lt; y &lt;&lt; <span class="string">&quot;is &quot;</span> &lt;&lt; z &lt;&lt; endl;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;Enter next pair: &quot;</span>;</span><br><span class="line">			&#125; <span class="comment">// end of try block</span></span><br><span class="line"> </span><br><span class="line">			<span class="built_in"><span class="keyword">catch</span></span> (bad_hmean &amp; bg) <span class="comment">// start of catch block</span></span><br><span class="line">			&#123;</span><br><span class="line">				bg.<span class="built_in">mesg</span>();</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;Try again.\n&quot;</span>;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line"> </span><br><span class="line">			<span class="built_in"><span class="keyword">catch</span></span> (bad_gmean &amp; hg)</span><br><span class="line">			&#123;</span><br><span class="line">				cout &lt;&lt; hg.<span class="built_in">mesg</span>();</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;Values used: &quot;</span> &lt;&lt; hg.vl &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; hg.v2 &lt;&lt; endl;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;Sorry, you don&#x27;t get to play any more.\n&quot;</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125; <span class="comment">// end of catch block</span></span><br><span class="line">		&#125;</span><br><span class="line">		d1.<span class="built_in">show</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Bye!\n&quot;</span>;</span><br><span class="line">	cin.<span class="built_in">get</span>(); </span><br><span class="line">	cin.<span class="built_in">get</span>(); </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">hmean</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a == -b)</span><br><span class="line">		<span class="keyword">throw</span> <span class="built_in">bad_hmean</span>(a, b);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">2.0</span> * a * b / (a + b);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">gmean</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a &lt; <span class="number">0</span> || b &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">throw</span> <span class="built_in">bad_gmean</span>(a, b); <span class="keyword">return</span> std::<span class="built_in">sqrt</span>(a * b);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">means</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> am, hm, gm;</span><br><span class="line">	<span class="function">demo <span class="title">d2</span><span class="params">(<span class="string">&quot;found in means&#123;)&quot;</span>)</span></span>;</span><br><span class="line">	am = (a + b) / <span class="number">2.0</span>;	<span class="comment">// arithmetic mean</span></span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		hm = <span class="built_in">hmean</span>(a, b);</span><br><span class="line">		gm = <span class="built_in">gmean</span>(a, b);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in"><span class="keyword">catch</span></span> (bad_hmean &amp; bg) <span class="comment">// start of catch block</span></span><br><span class="line">	&#123;</span><br><span class="line">		bg.<span class="built_in">mesg</span>();</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;Caught in means()\n&quot;</span>;</span><br><span class="line">		<span class="keyword">throw</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	d2.<span class="built_in">show</span>();</span><br><span class="line">	<span class="keyword">return</span> (am + hm + gm) / <span class="number">3.0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h4 id="exception类"><a href="#exception类" class="headerlink" title="exception类"></a>exception类</h4><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">except.h或者exception.h</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>1.stdexcept<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logic_error:可通过编译修改<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;domain_error<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;invaild_argument<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;length_error<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out_of_bounds<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;runtime_error:无可避免的问题<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;range_error<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;overflow_error<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;underflow_error<br>2.bad_alloc和new</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;new&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>在不用异常处理时，当无法分配请求的内存量时，返回空指针。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Trying to get a big block of memory:\n&quot;</span>;</span><br><span class="line">	pb = new Big[<span class="number">10000</span>]; <span class="regexp">//</span> <span class="number">1</span>,<span class="number">600</span>,<span class="number">000</span>,<span class="number">000</span> bytes</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Got past the new request:\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">catch (bad_alloc &amp; ba)</span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Caught the exception!\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; ba.what() &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">exit</span>(EXIT_FAILURE);</span><br></pre></td></tr></table></figure>
<p>也可以不抛出异常</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *pi= <span class="built_in"><span class="keyword">new</span></span> (std::nothrow) <span class="keyword">int</span>;</span><br></pre></td></tr></table></figure>

<h4 id="异常，类和继承"><a href="#异常，类和继承" class="headerlink" title="异常，类和继承"></a>异常，类和继承</h4><p>异常，类和继承以三种方式互相关联。<br>注意，bad_index()在class Sales的公开部分里，这使得外部类的catch块可以使用这个类作为类型。<br>Sales::bad_index()是logic_error类派生来的，能够储存和报告数组索引的超界值(out of bounds values)。</p>
<details><summary>sales.h(可点开查看)</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sales.h -- exceptions and inheritance </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sales</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="class"><span class="keyword">enum</span> &#123;</span> MONTHS = <span class="number">12</span> &#125;;	<span class="comment">// could be a static const  </span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">bad_index</span> :</span> <span class="keyword">public</span> std::logic_error</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="keyword">int</span> bi; <span class="comment">// bad index value </span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">explicit</span> <span class="title">bad_index</span><span class="params">(<span class="keyword">int</span> ix, <span class="keyword">const</span> std::string &amp; s = <span class="string">&quot;Index error in Sales object\n&quot;</span>)</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">int</span> <span class="title">bi_val</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> bi; &#125;</span><br><span class="line">		<span class="keyword">virtual</span> ~<span class="built_in">bad_index</span>() <span class="keyword">throw</span>() &#123;&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="function"><span class="keyword">explicit</span> <span class="title">Sales</span><span class="params">(<span class="keyword">int</span> yy = <span class="number">0</span>)</span></span>;</span><br><span class="line">	<span class="built_in">Sales</span>(<span class="keyword">int</span> yy, <span class="keyword">const</span> <span class="keyword">double</span> * gr, <span class="keyword">int</span> n);</span><br><span class="line">	<span class="keyword">virtual</span> ~<span class="built_in">Sales</span>() &#123; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Year</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> year; &#125;</span><br><span class="line">	<span class="keyword">virtual</span> <span class="keyword">double</span> <span class="keyword">operator</span>[](<span class="keyword">int</span> i) <span class="keyword">const</span>;</span><br><span class="line">	<span class="keyword">virtual</span> <span class="keyword">double</span> &amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> i);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">double</span> gross[MONTHS];</span><br><span class="line">	<span class="keyword">int</span> year;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LabeledSales</span> :</span> <span class="keyword">public</span> Sales</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">nbad_index</span> :</span> <span class="keyword">public</span> Sales::bad_index</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		std::string lbl;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">nbad_index</span>(<span class="keyword">const</span> std::string &amp; lb, <span class="keyword">int</span> ix, <span class="keyword">const</span> std::string &amp; s = <span class="string">&quot;Index error in LabeledSales object\n&quot;</span>);</span><br><span class="line">		<span class="function"><span class="keyword">const</span> std::string &amp; <span class="title">label_val</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> lbl; &#125;</span><br><span class="line">		<span class="keyword">virtual</span> ~<span class="built_in">nbad_index</span>() <span class="keyword">throw</span>() &#123;&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="function"><span class="keyword">explicit</span> <span class="title">LabeledSales</span><span class="params">(<span class="keyword">const</span> std::string &amp; lb = <span class="string">&quot;none&quot;</span>, <span class="keyword">int</span> yy = <span class="number">0</span>)</span></span>;</span><br><span class="line">	<span class="built_in">LabeledSales</span>(<span class="keyword">const</span> std::string &amp; lb, <span class="keyword">int</span> yy, <span class="keyword">const</span> <span class="keyword">double</span> * gr, <span class="keyword">int</span> n);</span><br><span class="line">	<span class="keyword">virtual</span> ~<span class="built_in">LabeledSales</span>() &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">const</span> std::string &amp; <span class="title">Label</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> label; &#125;</span><br><span class="line">	<span class="keyword">virtual</span> <span class="keyword">double</span> <span class="keyword">operator</span>[](<span class="keyword">int</span> i) <span class="keyword">const</span>;</span><br><span class="line">	<span class="keyword">virtual</span> <span class="keyword">double</span> &amp; <span class="keyword">operator</span>[] (<span class="keyword">int</span> i);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	std::string label;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</details>
之所以析构函数virtual ~bad_index() throw() {}使用了异常规范是因为bad_index是继承于C++98的except类，而except类的析构函数就是这样写的。而C++11中，except类的析构函数没有异常规范。
当数组索引超界，operator[]()会引发异常。

<p>带异常规范的函数没有与列表中的一场匹配时会导致问题，默认情况下，未捕获的异常将导致程序终止。<br>set_terminate()函数可以修改terminate()函数不去调用abort()来中止程序。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">void myQuit()&#123;</span><br><span class="line">   cou&lt;&lt;<span class="string">&quot;Terminating due to uncaught exception.\n&quot;</span></span><br><span class="line">   <span class="keyword">exit</span>(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">set_terminate(myQuit);</span><br></pre></td></tr></table></figure>
<p>原则上，异常规范应包含调用函数的其他函数所引发的异常，如果发生意外异常，程序将调用unexcept()函数。<br>在这种情况想捕获所有异常，可以</p>
<figure class="highlight mercury"><table><tr><td class="code"><pre><span class="line">void myUnexcepted()&#123;</span><br><span class="line">	throw std::bad_exception();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">...</span><br><span class="line">set_unexcepted(myUnexcepted);</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">...</span><br><span class="line">double Argh(double, double) throw(out_of_bounds,bad_exception)&#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="built_in">try</span>&#123;</span><br><span class="line">		x<span class="built_in">=</span>Argh(a,b);</span><br><span class="line">	&#125;<span class="built_in">catch</span>(out_of_bounds)&#123;</span><br><span class="line">		...</span><br><span class="line">	&#125;<span class="built_in">catch</span>(bad_exception)&#123;</span><br><span class="line">		...</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序设计时就应该实现设计好异常，因为异常不适合模板和动态分配。</p>
<h4 id="RTTI（Runtime-Type-Identification）RTTI只适合在包含虚函数的类使用"><a href="#RTTI（Runtime-Type-Identification）RTTI只适合在包含虚函数的类使用" class="headerlink" title="RTTI（Runtime Type Identification）RTTI只适合在包含虚函数的类使用"></a>RTTI（Runtime Type Identification）RTTI只适合在包含虚函数的类使用</h4><p>dynamic_cast 使用基类指针生成一个指向派生类的指针（是否可以安全的将对象的地址赋给特定类型的指针），返回0则为空指针。<br>typeid 返回一个指出对象的类型的值<br>type_info 结构储存了特定类型的信息</p>
<details><summary>dynamic_cast的使用(可点开查看)</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//rttil.cpp -- using the RTTI dynamic_cast operator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> std::cout; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grand</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> hold;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Grand</span>(<span class="keyword">int</span> h = <span class="number">0</span>) : <span class="built_in">hold</span>(h) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Speak</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;I am a grand class h\n&quot;</span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">Value</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> hold; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Superb</span> :</span> <span class="keyword">public</span> Grand</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Superb</span>(<span class="keyword">int</span> h = <span class="number">0</span>) : <span class="built_in">Grand</span>(h) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Speak</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;I am a superb class!!\n&quot;</span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Say</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;I hold the superb value of: &quot;</span> &lt;&lt; <span class="built_in">Value</span>() &lt;&lt; <span class="string">&quot;!\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Magnificent</span> :</span> <span class="keyword">public</span> Superb</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Magnificent</span>(<span class="keyword">int</span> h = <span class="number">0</span>, <span class="keyword">char</span> c = <span class="string">&#x27;A&#x27;</span>) : <span class="built_in">Superb</span>(h), <span class="built_in">ch</span>(c) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Speak</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;I am a magnificent class I !!\n&quot;</span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Say</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;I hold the character &quot;</span> &lt;&lt; ch &lt;&lt; <span class="string">&quot; and the integer &quot;</span> &lt;&lt; <span class="built_in">Value</span>() &lt;&lt; <span class="string">&quot;!\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function">Grand * <span class="title">GetOne</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line">	std::<span class="built_in">srand</span>(std::<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">	Grand * pg;</span><br><span class="line">	Superb * ps;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		pg - <span class="built_in">GetOne</span>();</span><br><span class="line">		pg-&gt;<span class="built_in">Speak</span>();</span><br><span class="line">		<span class="keyword">if</span> (ps = <span class="keyword">dynamic_cast</span>&lt;Superb *&gt;(pg))</span><br><span class="line">			ps-&gt;<span class="built_in">Say</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Grand * <span class="title">GetOne</span><span class="params">()</span> <span class="comment">// generate one of three kinds of objects randomly</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">		   Grand * p;</span><br><span class="line">		   <span class="built_in"><span class="keyword">switch</span></span>(std::<span class="built_in">rand</span>() % <span class="number">3</span>)</span><br><span class="line">		   &#123;</span><br><span class="line">		   <span class="keyword">case</span>	<span class="number">0</span>:	p = <span class="keyword">new</span> <span class="built_in">Grand</span>(std::<span class="built_in">rand</span>()  % <span class="number">100</span>);</span><br><span class="line">			   <span class="keyword">break</span>;</span><br><span class="line">		   <span class="keyword">case</span>	<span class="number">1</span>:	p = <span class="keyword">new</span> <span class="built_in">Superb</span>(std::<span class="built_in">rand</span>() % <span class="number">100</span>);</span><br><span class="line">			   <span class="keyword">break</span>;</span><br><span class="line">		   <span class="keyword">case</span>	<span class="number">2</span>:	p = <span class="keyword">new</span> <span class="built_in">Magnificent</span>(std::<span class="built_in">rand</span>() % <span class="number">100</span>, <span class="string">&#x27;A&#x27;</span> + std::<span class="built_in">rand</span>() % <span class="number">26</span>);</span><br><span class="line">			   <span class="keyword">break</span>;</span><br><span class="line">		   &#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h4 id="更严格的类型转换"><a href="#更严格的类型转换" class="headerlink" title="更严格的类型转换"></a>更严格的类型转换</h4><p>dynamic_cast;  向上转换 (Low类和High类是is-a关系)pointerLow=dynamic_cast&lt;Low*&gt;pointerHigh;<br>const_cast;  const–&gt;volatile 可以修改指针，但不能修改 const int等；<br>static_cast;<br>reinterpret_cast;比较危险的转换<br>reinterpret_cast示例</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dat</span>&#123;</span><span class="keyword">short</span> a;<span class="keyword">short</span> b;&#125;;</span><br><span class="line"><span class="keyword">long</span> value _0xA224B118;</span><br><span class="line">dat*pd=<span class="keyword">reinterpret_cast</span>&lt;dat*&gt;(&amp;value);</span><br><span class="line">cout&lt;&lt;hex&lt;&lt;pd-&gt;a;</span><br></pre></td></tr></table></figure>


<p><br><br><br></p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>C++PrimerPlus</category>
      </categories>
  </entry>
  <entry>
    <title>c++07　友元</title>
    <url>/WestRoute.github.io/2021/11/06/c++07friends/</url>
    <content><![CDATA[<h3 id="友元类"><a href="#友元类" class="headerlink" title="友元类"></a>友元类</h3><p>友元类的所有方法可以访问原始类的私有成员和保护成员</p>
<span id="more"></span>
<h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p><strong>或 |</strong><br>运算规则：0|0=0&nbsp;&nbsp;&nbsp;&nbsp;0|1=1&nbsp;&nbsp;&nbsp;&nbsp;1|0=1&nbsp;&nbsp;&nbsp;&nbsp;1|1=1<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3|5即&nbsp;&nbsp;&nbsp;&nbsp;0000 0011| 0000 0101 = 0000 0111，因此，3|5的值得7<br><strong>异或 ^</strong><br>运算规则：0^0=0&nbsp;&nbsp;&nbsp;&nbsp;0^1=1&nbsp;&nbsp;&nbsp;&nbsp;1^0=1&nbsp;&nbsp;&nbsp;&nbsp;1^1=0<br><strong>取反运算符 (~)</strong><br>运算规则：　<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ～1=0<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ～0=1<br><strong>复合赋值运算符</strong><br>&amp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例：a&amp;=b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;相当于&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a=a&amp;b<br>|=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例：a|=b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;相当于&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a=a|b<br>/&gt;&gt;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例：a&gt;&gt;=b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;相当于&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a=a&gt;&gt;b<br>&lt;&lt;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例：a&lt;&lt;=b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;相当于&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a=a&lt;&lt;b<br>^=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例：a^=b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;相当于&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a=a^b</p>
<p><strong>条件运算符</strong></p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">void onoff() &#123;<span class="keyword">state</span> = (<span class="keyword">state</span> == On)? Off :On;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>按位异或和赋值运算符</strong></p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">void onoff() &#123;<span class="keyword">state</span> ^= <span class="number">1</span>;&#125;//true(<span class="number">1</span>) or flase(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h4 id="友元类-1"><a href="#友元类-1" class="headerlink" title="友元类"></a>友元类</h4><p>让Remote::setchan()成为Tv类的友元的方法是，在Tv类声明中将其声明为友元：<br>且<strong>顺序不得改变</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Tvfm.h</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Tv</span></span>; <span class="comment">//forward declartion</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Remote</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setchan</span><span class="params">(Tv &amp;t,<span class="keyword">int</span> c)</span></span>;</span><br><span class="line">    .. </span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Tv</span></span>&#123;</span><br><span class="line">    friend <span class="keyword">void</span> Remote::setchan(Tv &amp;t,<span class="keyword">int</span> c);</span><br><span class="line">    ....</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
<p><br><br></p>
<blockquote><p>在 c/c++ 中，为了解决一些频繁调用的小函数大量消耗栈空间（栈内存）的问题，特别的引入了 inline 修饰符，表示为内联函数。<br>栈空间就是指放置程序的局部数据（也就是函数内数据）的内存空间。<br>在系统下，栈空间是有限的，假如频繁大量的使用就会造成因栈空间不足而导致程序出错的问题，如，函数的死循环递归调用的最终结果就是导致栈内存空间枯竭。</p>
</blockquote>
<br>
有时将函数作为两个类的友元更合理，比如一个测量设备class Probe，和一个分析设备class Analyzer，需要使用能同步的计时器。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Analyzer</span>;</span>  <span class="comment">//forward declartion</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Probe</span>&#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">sync</span><span class="params">(Analyzer &amp;a, <span class="keyword">const</span> Probe &amp;p)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">sync</span><span class="params">(Probe &amp;p,<span class="keyword">const</span> Analyzer &amp;a)</span></span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Analyzer</span>&#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">sync</span><span class="params">(Analyzer &amp;a, <span class="keyword">const</span> Probe &amp;p)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">sync</span><span class="params">(Probe &amp;p,<span class="keyword">const</span> Analyzer &amp;a)</span></span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//define the friend functions</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sync</span><span class="params">(Analyzer &amp;a, <span class="keyword">const</span> Probe &amp;p)</span></span>&#123; ... &#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sync</span><span class="params">(Probe &amp;p,<span class="keyword">const</span> Analyzer &amp;a)</span></span>&#123; ... &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<br>

<h3 id="嵌套类（nested-class）"><a href="#嵌套类（nested-class）" class="headerlink" title="嵌套类（nested class）"></a>嵌套类（nested class）</h3><p><strong>结构体是一种在默认情况下其成员为公有的类</strong>，以下是优化11.10和12.11<br><br></p>
<details><summary>11.10 mytime3.h(可点开查看)</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MYTIME3_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MYTIME3_H_</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Time</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">       <span class="keyword">int</span> hours;</span><br><span class="line">       <span class="keyword">int</span> minutes;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">       <span class="built_in">Time</span>();</span><br><span class="line">       <span class="built_in">Timr</span>(<span class="keyword">int</span> h, <span class="keyword">int</span> m=<span class="number">0</span>);</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">addMin</span><span class="params">(<span class="keyword">int</span> m)</span></span>;</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">addHr</span><span class="params">(<span class="keyword">int</span> h)</span></span>;</span><br><span class="line">       Time <span class="keyword">operator</span>+&#123;<span class="keyword">const</span> Time &amp; t&#125; <span class="keyword">const</span>;</span><br><span class="line">       Time <span class="keyword">operator</span>-&#123;<span class="keyword">const</span> Time &amp; t&#125; <span class="keyword">const</span>;</span><br><span class="line">       Time <span class="keyword">operator</span>*&#123;<span class="keyword">const</span> Time &amp; t&#125; <span class="keyword">const</span>;</span><br><span class="line">       <span class="keyword">friend</span> Time <span class="keyword">operator</span>*(<span class="keyword">double</span> m, <span class="keyword">const</span> Time&amp;t)&#123;</span><br><span class="line">           <span class="keyword">return</span> t *m;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">friend</span> std::ostream &amp; <span class="keyword">operator</span> &lt;&lt;(std::ostream &amp;os, <span class="keyword">const</span> Time &amp;t);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</details>
<details><summary>12.11 queue.cpp(可点开查看)</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//queue.cpp -- Queue and Customer methods</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;queue.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"> </span><br><span class="line">Queue::<span class="built_in">Queue</span>(<span class="keyword">int</span> qs <span class="comment">/* = Q_SIZE */</span>) :<span class="built_in">qsize</span>(qs)</span><br><span class="line">&#123;</span><br><span class="line">	front = rear = <span class="literal">NULL</span>;</span><br><span class="line">	items = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Queue::~<span class="built_in">Queue</span>()</span><br><span class="line">&#123;</span><br><span class="line">	Node * temp;</span><br><span class="line">	<span class="keyword">while</span> (front != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		temp = front;</span><br><span class="line">		front = front-&gt;next;</span><br><span class="line">		<span class="keyword">delete</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Queue::isempty</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> items == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Queue::isfull</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> items == qsize;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Queue::queuecount</span><span class="params">()</span> <span class="keyword">const</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> items;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Queue::enqueue</span><span class="params">(<span class="keyword">const</span> Item &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">isfull</span>())</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	Node * add = <span class="keyword">new</span> Node;</span><br><span class="line">	add-&gt;item = item;</span><br><span class="line">	add-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	items++;</span><br><span class="line">	<span class="keyword">if</span> (front == <span class="literal">NULL</span>)</span><br><span class="line">		front = add;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		rear-&gt;next = add;</span><br><span class="line">	rear = add;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Queue::dequeue</span><span class="params">(Item &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (front == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	item = front-&gt;item;</span><br><span class="line">	items--;</span><br><span class="line">	Node * temp = front;</span><br><span class="line">	front = front-&gt;next;</span><br><span class="line">	<span class="keyword">delete</span> temp;</span><br><span class="line">	<span class="keyword">if</span> (items == <span class="number">0</span>)</span><br><span class="line">		rear = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Customer::set</span><span class="params">(<span class="keyword">long</span> when)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	processtime = std::<span class="built_in">rand</span>() % <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">	arrive = when;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<br><br>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">class Queue&#123;</span><br><span class="line">  class <span class="keyword">Node</span><span class="title">&#123;</span></span><br><span class="line"><span class="title">    public</span>:</span><br><span class="line">        Item item;</span><br><span class="line">        <span class="keyword">Node</span> <span class="title">*next</span>;</span><br><span class="line">        <span class="keyword">Node</span><span class="title">(const</span> Item &amp;i):item(i),next(<span class="number">0</span>)&#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
该构造函数将节点的item成员初始化为i，并将next指针指设置为0（空指针的方法之一）

<blockquote><p>空指针的方法：<br>1.0<br>2.NULL，但是需要写一个NULL的有文件<br>3.nullptr（C::11）</p>
</blockquote>
<p>重新编写enqueue方法</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">bool Queue::enqueue(const Item &amp;item)&#123;</span><br><span class="line">  if(isfull()) return flase;</span><br><span class="line">  <span class="keyword">Node</span><span class="title">* add</span>=new <span class="keyword">Node</span><span class="title">(item</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>
将queue模板转定义为模板
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// queuetp.h -- queue template with a nested class </span></span><br><span class="line">#ifndef QUEUETP_H_</span><br><span class="line">#define QUEUETP_H_</span><br><span class="line"> </span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="symbol">Item</span>&gt;</span><br><span class="line"> </span><br><span class="line"><span class="symbol">class</span> <span class="symbol">QueueTP</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">enum</span> &#123; Q_SIZE = <span class="number">10</span> &#125;;</span><br><span class="line"> </span><br><span class="line">	<span class="comment">// Node is a nested class definition </span></span><br><span class="line">	<span class="keyword">class</span> <span class="symbol">Node</span></span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		Item item;</span><br><span class="line">		Node * next;</span><br><span class="line">		Node(<span class="keyword">const</span> Item &amp; i) :item(i), next(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">	&#125;;</span><br><span class="line"> </span><br><span class="line">	Node * front; <span class="comment">// pointer to front of Queue</span></span><br><span class="line">	Node * rear; <span class="comment">// pointer to rear of Queue</span></span><br><span class="line">	<span class="built_in">int</span> items; <span class="comment">// current number of items in Queue</span></span><br><span class="line">	<span class="keyword">const</span> <span class="built_in">int</span> qsize; <span class="comment">// maximum number of items in Queue</span></span><br><span class="line">	QueueTP(<span class="keyword">const</span> QueueTP &amp; q) : qsize(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">	QueueTP &amp; operator= (<span class="keyword">const</span> QueueTP &amp; q) &#123; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	QueueTP(<span class="built_in">int</span> qs = Q_SIZE);</span><br><span class="line">	~QueueTP();</span><br><span class="line">	<span class="built_in">bool</span> isempty() <span class="keyword">const</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> items == <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="built_in">bool</span> isfull() <span class="keyword">const</span></span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">return</span> items == qsize;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="built_in">int</span> queuecount() <span class="keyword">const</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> items;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="built_in">bool</span> enqueue(<span class="keyword">const</span> Item &amp;item); <span class="comment">// add item to end </span></span><br><span class="line">	<span class="built_in">bool</span> dequeue(Item &amp;item) ;	<span class="comment">// remove item from front</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// QueueTP methods</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="symbol">Item</span>&gt;</span><br><span class="line"><span class="symbol">QueueTP</span>&lt;<span class="symbol">Item</span>&gt;::<span class="symbol">QueueTP</span>(<span class="symbol">int</span> <span class="symbol">qs</span>) : <span class="symbol">qsize</span>(<span class="symbol">qs</span>)</span><br><span class="line">&#123;</span><br><span class="line">	front = rear = <span class="number">0</span>; </span><br><span class="line">	items = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="symbol">Item</span>&gt;</span><br><span class="line"><span class="symbol">QueueTP</span>&lt;<span class="symbol">Item</span>&gt; ::~<span class="symbol">QueueTP</span>()</span><br><span class="line">&#123;</span><br><span class="line">	Node * temp;</span><br><span class="line">	<span class="keyword">while</span> (front != <span class="number">0</span>)	<span class="comment">// while queue is not yet empty</span></span><br><span class="line">	&#123;</span><br><span class="line">		temp = front; <span class="comment">// save address of front item </span></span><br><span class="line">		front = front-&gt;next;<span class="comment">// reset pointer to next item </span></span><br><span class="line">		delete temp; <span class="comment">// delete former front</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Add item to queue</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="symbol">Item</span>&gt;</span><br><span class="line"><span class="symbol">bool</span> <span class="symbol">QueueTP</span>&lt;<span class="symbol">Item</span>&gt;::<span class="symbol">enqueue</span>(<span class="symbol">const</span> <span class="symbol">Item</span> &amp; <span class="symbol">item</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (isfull())</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	Node * add = new Node(item); <span class="comment">// create node // on failure, new throws std::bad_alloc exception </span></span><br><span class="line">	items++;</span><br><span class="line">	<span class="keyword">if</span> (front == <span class="number">0</span>)	<span class="comment">// if queue is empty,</span></span><br><span class="line">		front = add;	<span class="comment">// place item at front</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		rear-&gt;next = add; <span class="comment">// else place at rear</span></span><br><span class="line">	rear = add;<span class="comment">// have rear point to new node</span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// Place front item into item variable and remove from queue </span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="symbol">Item</span>&gt;</span><br><span class="line"><span class="symbol">bool</span> <span class="symbol">QueueTP</span>&lt;<span class="symbol">Item</span>&gt;::<span class="symbol">dequeue</span>(<span class="symbol">Item</span> &amp; <span class="symbol">item</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (front == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">	item = front-&gt;item;<span class="comment">// set item to first item in queue</span></span><br><span class="line">	items--;</span><br><span class="line">	Node * temp = front; <span class="comment">// save location of first item </span></span><br><span class="line">	front = front -&gt; next; <span class="comment">// reset front to next item</span></span><br><span class="line">	delete temp;  <span class="comment">// delete former first item</span></span><br><span class="line">	<span class="keyword">if</span> (items == <span class="number">0</span>)</span><br><span class="line">		rear = <span class="number">0</span>; </span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>
测试
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nested.cpp -- using a queue that has a nested class </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;queuetp.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> std::string;</span><br><span class="line">	<span class="keyword">using</span> std::cin;</span><br><span class="line">	<span class="keyword">using</span> std::cout;</span><br><span class="line"> </span><br><span class="line">	<span class="function">QueueTP&lt;string&gt; <span class="title">cs</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">	string temp;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">while</span> (!cs.<span class="built_in">isfull</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Please enter your name. You will be served in the order of arrival.\nname: &quot;</span>;</span><br><span class="line">		<span class="built_in">getline</span>(cin, temp);</span><br><span class="line">		cs.<span class="built_in">enqueue</span>(temp);</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;The queue is full. Processing begins!\n&quot;</span>;</span><br><span class="line">	<span class="keyword">while</span> (!cs.<span class="built_in">isempty</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		cs.<span class="built_in">dequeue</span>(temp);</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Now processing &quot;</span> &lt;&lt; temp &lt;&lt; <span class="string">&quot;...\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>C++PrimerPlus</category>
      </categories>
  </entry>
  <entry>
    <title>航空航天概论02</title>
    <url>/WestRoute.github.io/2021/11/04/%E8%88%AA%E7%A9%BA%E8%88%AA%E5%A4%A9%E6%A6%82%E8%AE%BA02/</url>
    <content><![CDATA[<h3 id="第三章-飞行器的动力系统"><a href="#第三章-飞行器的动力系统" class="headerlink" title="第三章 飞行器的动力系统"></a>第三章 飞行器的动力系统</h3><p>发动机：活塞式发动机和喷气式发动机</p>
<hr>
<p>其他航空知识学习网站：<br><a href="https://pigeon-poppo.com/">https://pigeon-poppo.com/</a> </p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>杂文</category>
        <category>读书笔记</category>
      </categories>
  </entry>
  <entry>
    <title>python04 爬虫01</title>
    <url>/WestRoute.github.io/2021/11/03/python04/</url>
    <content><![CDATA[<p>爬虫：Webスクレイピング</p>
<span id="more"></span>
<h3 id="find-all-とselect"><a href="#find-all-とselect" class="headerlink" title="find_all()とselect()"></a>find_all()とselect()</h3><p>find_all(tag,keyword)<br>select(cssSelector)</p>
<h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><p>BeautifulSoup<br>Tag:bs.div.h1<br>NavigableString:用来标识标签里的文字<br>Comment:</p>
<h3 id="子标签与后代标签"><a href="#子标签与后代标签" class="headerlink" title="子标签与后代标签"></a>子标签与后代标签</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">html</span>=urlopen(&#x27;http://www.pythonscraping.com/pages/page3.html&#x27;)</span><br><span class="line">bs= BeautifulSoup(html,<span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> chid <span class="keyword">in</span> bs.<span class="builtin-name">find</span>(<span class="string">&#x27;table&#x27;</span>,&#123;<span class="string">&#x27;id&#x27;</span>:<span class="string">&#x27;giflist&#x27;</span>&#125;).children:</span><br><span class="line">    <span class="builtin-name">print</span>(child)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="兄弟标签"><a href="#兄弟标签" class="headerlink" title="兄弟标签"></a>兄弟标签</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">html</span>=urlopen(&#x27;http://www.pythonscraping.com/pages/page3.html&#x27;)</span><br><span class="line">bs= BeautifulSoup(html,<span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> chid <span class="keyword">in</span> bs.<span class="builtin-name">find</span>(<span class="string">&#x27;table&#x27;</span>,&#123;<span class="string">&#x27;id&#x27;</span>:<span class="string">&#x27;giflist&#x27;</span>&#125;).tr.next_siblings:</span><br><span class="line">    <span class="builtin-name">print</span>(child)</span><br></pre></td></tr></table></figure>

<h3 id="父级标签"><a href="#父级标签" class="headerlink" title="父级标签"></a>父级标签</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">html=urlopen(<span class="string">&#x27;http://www.pythonscraping.com/pages/page3.html&#x27;</span>)</span><br><span class="line">bs= BeautifulSoup(<span class="selector-tag">html</span>,<span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(bs.find(<span class="string">&#x27;img&#x27;</span>,&#123;<span class="string">&#x27;src&#x27;</span>:<span class="string">&#x27;../img/gifts/img1.jpg&#x27;</span>&#125;)</span></span><span class="selector-class">.paarent</span><span class="selector-class">.previus_sibling</span><span class="selector-class">.get_text</span>())</span><br></pre></td></tr></table></figure>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">html=urlopen(&#x27;http:<span class="comment">//www.pythonscraping.com/pages/page3.html&#x27;)</span></span><br><span class="line">bs= <span class="constructor">BeautifulSoup(<span class="params">html</span>,&#x27;<span class="params">html</span>.<span class="params">parser</span>&#x27;)</span></span><br><span class="line"></span><br><span class="line">images = bs.find<span class="constructor">_all(&#x27;<span class="params">img</span>&#x27;,&#123;&#x27;<span class="params">src</span>&#x27;:<span class="params">re</span>.<span class="params">comile</span>(&#x27;\.\.\<span class="operator">/</span><span class="params">img</span>\<span class="operator">/</span><span class="params">gifts</span>\<span class="operator">/</span><span class="params">img</span>.<span class="operator">*</span>\.<span class="params">jpg</span>)</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> images:</span><br><span class="line">    print(image<span class="literal">[&#x27;<span class="identifier">src</span>&#x27;]</span>)</span><br></pre></td></tr></table></figure>

<h3 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h3><p>获取全部属性  myTag.attrs<br>获取图片源位置 myImgTag.attrs[‘src’]</p>
<h3 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">bs.find<span class="constructor">_all(<span class="params">lambda</span> <span class="params">tag</span>: <span class="params">len</span>(<span class="params">tag</span>.<span class="params">attr</span>)</span>==<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>len(tag.attr)==2是作为boolean型的参数传入的</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">bs.find<span class="constructor">_all(<span class="params">lambda</span> <span class="params">tag</span>: <span class="params">tag</span>.<span class="params">get_text</span>()</span>==&#x27;Or maybe he\&#x27;s only resting?&#x27;)</span><br><span class="line"></span><br><span class="line">bs.find<span class="constructor">_all(&#x27;&#x27;,<span class="params">text</span> = &#x27;Or <span class="params">maybe</span> <span class="params">he</span>\&#x27;<span class="params">s</span> <span class="params">only</span> <span class="params">resting</span>?&#x27;)</span></span><br></pre></td></tr></table></figure>

<h3 id="指向其他的链接"><a href="#指向其他的链接" class="headerlink" title="指向其他的链接"></a>指向其他的链接</h3><p>通过使用正则表达式**’^(/wiki/)((?!:).)*$)**来仅获取词条链接，并随机进入其中一个链接。</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">from urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line">from bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">random.seed(datetime.datetime.now())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def getLinks(articleUrl):<span class="type"></span></span><br><span class="line"></span><br><span class="line">    html=urlopen(<span class="string">&#x27;https://en.wikipedia.org/&#123;&#125;&#x27;</span>.format(articleUrl))</span><br><span class="line">    bs=BeautifulSoup(html.read(),<span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> bs.find(<span class="string">&#x27;div&#x27;</span>,&#123;<span class="string">&#x27;id&#x27;</span>:<span class="type"></span>&#x27;bodyContent<span class="string">&#x27;&#125;).find_all(&#x27;</span><span class="string">&#x27;.href=re.compile(&#x27;</span>^(/wiki/)((?!:<span class="type"></span>).)*$))</span><br><span class="line"></span><br><span class="line">links=getLinks(<span class="string">&#x27;/wiki/Kevin_Bacon&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> len(links) &gt; <span class="number">0</span>:<span class="type"></span></span><br><span class="line">    <span class="keyword">new</span><span class="type">Article</span> = links[random.randint(<span class="number">0</span>,len(links)<span class="number">-1</span>)].attrs[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">    print(<span class="keyword">new</span><span class="type">Article</span>)</span><br><span class="line">    links=getLinks(<span class="keyword">new</span><span class="type">Article</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="遍历网站"><a href="#遍历网站" class="headerlink" title="遍历网站"></a>遍历网站</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment">#define the variable</span></span><br><span class="line">pages = <span class="built_in">set</span>()</span><br><span class="line">random.seed(datetime.datetime.now())</span><br><span class="line"></span><br><span class="line"><span class="comment">#define the function</span></span><br><span class="line"><span class="comment">#ページ内にあるすべて内部リンクを調べる</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getInternalLinks</span>(<span class="params">bs,includeUrl</span>):</span></span><br><span class="line">    includeUrl = <span class="string">&#x27;&#123;&#125;://&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(urlparse(includeUrl).scheme,urlparse(includeUrl).netloc)</span><br><span class="line">    internalLinks =[]</span><br><span class="line"></span><br><span class="line">        <span class="comment">#&#x27;^(/|.*&#x27;+includeUrl+&#x27;)&#x27;)はregex記法といいます</span></span><br><span class="line">        <span class="comment">#ここでは「//」から始まるリンクだけ探し出す</span></span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> bs.find_all(<span class="string">&#x27;a&#x27;</span>,href=re.<span class="built_in">compile</span>(<span class="string">&#x27;^(/|.*&#x27;</span>+includeUrl+<span class="string">&#x27;)&#x27;</span>)):</span><br><span class="line">        <span class="keyword">if</span> link.attrs[<span class="string">&#x27;href&#x27;</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> link.attrs[<span class="string">&#x27;href&#x27;</span>] <span class="keyword">not</span> <span class="keyword">in</span> intenalLinks:</span><br><span class="line">                <span class="keyword">if</span>(link.attrs[<span class="string">&#x27;href&#x27;</span>].startswith(<span class="string">&#x27;/&#x27;</span>)):</span><br><span class="line">                    internalLinks.append(includeUrl+link.attrs[<span class="string">&#x27;herf&#x27;</span>])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    internalLinks.append(link.attrs[<span class="string">&#x27;herf&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> internalLinks</span><br><span class="line"></span><br><span class="line"><span class="comment">##ページ内にあるすべて外部リンクを調べる</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getExternalLinks</span>(<span class="params">bs,excludeUrl</span>):</span></span><br><span class="line">    externalLinks =[]</span><br><span class="line"></span><br><span class="line">        <span class="comment">#「http」や「www」から始まるかつ、いままで出ていないリンクだけ探し出す</span></span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> bs.find_all(<span class="string">&#x27;a&#x27;</span>,href=re.<span class="built_in">compile</span>(<span class="string">&#x27;^(http|www)((?!&#x27;</span>;excludeUrl+<span class="string">&#x27;).)*$&#x27;</span>)):</span><br><span class="line">        <span class="keyword">if</span> link.attrs[<span class="string">&#x27;href&#x27;</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> link.attrs[<span class="string">&#x27;href&#x27;</span>] <span class="keyword">not</span> <span class="keyword">in</span> externalLinks:</span><br><span class="line">                <span class="keyword">if</span>(link.attrs[<span class="string">&#x27;href&#x27;</span>].startswith(<span class="string">&#x27;/&#x27;</span>)):</span><br><span class="line">                    externalLinks.append(link.attrs[<span class="string">&#x27;herf&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> externalLinks</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getRandomExternalLink</span>(<span class="params">startingPage</span>):</span></span><br><span class="line">    html = urlopen(startingPage)</span><br><span class="line">    bs=BeautifulSoup(html,<span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    externalLinks = getExternalLinks(bs,urlparse(startingPage).netloc)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(externalLinks) ==<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;No external links,looking around the site foe one&#x27;</span>)</span><br><span class="line">        domain=<span class="string">&#x27;&#123;&#125;://&#123;&#125;&#x27;</span>,<span class="built_in">format</span>(urlparse(startingPage).scheme,urlparse(startingPage).netloc)</span><br><span class="line">        internalLinks=getInternalLink(internalLinks[random.randint(<span class="number">0</span>,<span class="built_in">len</span>(internalLinks)-<span class="number">1</span>)])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> externalLinks[random.randint(<span class="number">0</span>,<span class="built_in">len</span>(externalLinks)-<span class="number">1</span>)]</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">followExternalOnly</span>(<span class="params">startingSite</span>):</span></span><br><span class="line">    externalLink = getRandomExternalLink(startingSite)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Random external link is:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(externalLink))</span><br><span class="line">    followExternalOnly(externalLink)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#main:</span></span><br><span class="line">followExternalOnly(<span class="string">&#x27;http://oreilly.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>［c/c++］递归统计文件</title>
    <url>/WestRoute.github.io/2021/11/03/c%E9%80%92%E5%BD%92%E7%BB%9F%E8%AE%A1%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="C-统计文件大小"><a href="#C-统计文件大小" class="headerlink" title="C-统计文件大小"></a>C-统计文件大小</h3><p>方法：<br>&nbsp;&nbsp;&nbsp;&nbsp;1.将指针调到末尾，返回指针位置<br>&nbsp;&nbsp;&nbsp;&nbsp;2.一个bit一个bit地count<br>&nbsp;&nbsp;&nbsp;&nbsp;3.stat()［非标准函数库］<br>&nbsp;&nbsp;&nbsp;&nbsp;4.filelength()［Windows］<br>&nbsp;&nbsp;&nbsp;&nbsp;5.GetFileSize(),GetFileSizeEX()［Windows］</p>
<span id="more"></span>

<p><strong>fseek()函数</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;函数原型：int fseek（FILE *fp，long offset，int fromwhere）；<br>&nbsp;&nbsp;&nbsp;&nbsp;函数功能：将fp的文件位置指针从fromwhere开始移动offset个字节指示下一个要读取的数据的位置<br>offset是一个偏移量，它告诉文件位置指针要跳过多少字节，offset为正时，向后移动，为负时，向前移动，ANSIC要求位移量offset是长整型数据（常量数据后要加L），<br>&nbsp;&nbsp;&nbsp;&nbsp;这样当文件的长度大于64k时不至于出问题<br>&nbsp;&nbsp;&nbsp;&nbsp;fromwhere用于确定偏移量计算的起始位置，它的可能取值有3种，SEEK_SET或0，代表文件开始处，SEEK_CUR或1，代表文件当前位置，SEEK_END或2，代表文件结尾处，<br>&nbsp;&nbsp;&nbsp;&nbsp;通过指定fromwork和offset的值，可使位置指针移动到文件的任意位置，从而实现文件的随机读取，如果函数fseek（）调用成功，则返回0值，否则返回非0值<br>两种特殊使用方式：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将读写位置移动到文件开头:fseek(FILE *stream,0,SEEK_SET);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将读写位置移动到文件尾:fseek(FILE *stream,0,0SEEK_END);<br><br></p>
<h3 id="C-递归统计文件"><a href="#C-递归统计文件" class="headerlink" title="C-递归统计文件"></a>C-递归统计文件</h3><p>(仅输出文件及文件名称的版本)</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> file_size;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">forDir</span><span class="params">(<span class="keyword">char</span>* pcDirName)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">file_full_a</span><span class="params">(<span class="keyword">char</span>* filename)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">        file_size =<span class="number">0</span>;</span><br><span class="line">        forDir(<span class="string">&quot;C:\\Users\\user\\Desktop\\C\\&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,file_size);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">forDir</span><span class="params">(<span class="keyword">char</span>* pcDirName)</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">file_full_a</span><span class="params">(<span class="keyword">char</span>* filename)</span></span>;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">pstDirent</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">        DIR* pDir =<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">char</span> fold[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">char</span> file_full_name[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pcDirName == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pDir = <span class="built_in">opendir</span>(pcDirName);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(pDir == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((pstDirent = <span class="built_in">readdir</span>(pDir))!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="built_in">strcmp</span>(pstDirent -&gt;d_name,<span class="string">&quot;.&quot;</span>)==<span class="number">0</span>) ||</span><br><span class="line">                      (<span class="built_in">strcmp</span>(pstDirent-&gt;d_name,<span class="string">&quot;..&quot;</span>)==<span class="number">0</span>))&#123;</span><br><span class="line">                          <span class="keyword">continue</span>;</span><br><span class="line">                      &#125;</span><br><span class="line">            <span class="keyword">if</span>(pstDirent -&gt;d_type ==DT_DIR)&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="built_in">memset</span>(fold,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(fold));</span><br><span class="line">             <span class="comment">//   printf(&quot;d_name:%s&quot;,pstDirent-&gt;d_name);</span></span><br><span class="line">                <span class="built_in">sprintf</span>(fold,<span class="string">&quot;%s\%s\n&quot;</span>,pcDirName,pstDirent-&gt;d_name);</span><br><span class="line">             <span class="comment">//   printf(&quot;fold*%s&quot;,fold);</span></span><br><span class="line">                forDir(fold);</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                size = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s\%s\n&quot;</span>,pcDirName,pstDirent-&gt;d_name);</span><br><span class="line">                <span class="built_in">memset</span>(file_full_name,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(file_full_name));</span><br><span class="line">                <span class="built_in">sprintf</span>(file_full_name,<span class="string">&quot;%s\%s&quot;</span>,pcDirName,pstDirent-&gt;d_name);</span><br><span class="line">                size=<span class="built_in">file_full_a</span>(file_full_name);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,size);</span><br><span class="line">                file_size = size + file_size;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,file_size);</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">file_full_a</span><span class="params">(<span class="keyword">char</span>*filename)</span></span>&#123;</span><br><span class="line">         <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">         FILE *fp =<span class="built_in">fopen</span>(filename,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">         <span class="keyword">if</span>(!fp) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">         <span class="built_in">fseek</span>(fp,<span class="number">0L</span>,SEEK_END);</span><br><span class="line">         len=<span class="built_in">ftell</span>(fp);</span><br><span class="line">         <span class="built_in">fclose</span>(fp);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> len;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><br><br></p>
<h3 id="C-统计文件大小-1"><a href="#C-统计文件大小-1" class="headerlink" title="C++统计文件大小"></a>C++统计文件大小</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;filesystem&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fs = std::filesystem;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  &#123;</span><br><span class="line">    std::ofstream file&#123;<span class="string">&quot;regular.txt&quot;</span>, std::ios::binary&#125;;</span><br><span class="line">    std::<span class="keyword">uint32_t</span> value = <span class="number">42</span>;</span><br><span class="line">    file.<span class="built_in">write</span>(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span>*&gt;(&amp;value), <span class="built_in"><span class="keyword">sizeof</span></span>(value));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  std::<span class="keyword">uintmax_t</span> size = fs::<span class="built_in">file_size</span>(<span class="string">&quot;regular.txt&quot;</span>);</span><br><span class="line">  <span class="built_in">assert</span>(size == <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="C-递归统计文件-1"><a href="#C-递归统计文件-1" class="headerlink" title="C++递归统计文件"></a>C++递归统计文件</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;filesystem&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFile</span><span class="params">(<span class="keyword">char</span>* fp)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fileCom</span><span class="params">(<span class="keyword">char</span>* fp)</span></span>;</span><br><span class="line"><span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    std::string fp;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;パスを入力：&quot;</span>;</span><br><span class="line">    std::cin &gt;&gt; fp;</span><br><span class="line">    std::cout &lt;&lt; std::endl;*/</span><br><span class="line"></span><br><span class="line">    fp = <span class="string">&quot;C:\\Users\\USER\\Desktop&quot;</span>;<span class="comment">//ファイルパスを指定</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="built_in">fileCom</span>(<span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>*&gt;(fp.<span class="built_in">c_str</span>()));</span><br><span class="line">    std::cout &lt;&lt; std::endl &lt;&lt; <span class="string">&quot;numberSUM：&quot;</span> &lt;&lt; number &lt;&lt; <span class="string">&quot;  sizeSUM：&quot;</span> &lt;&lt; size &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fileCom</span><span class="params">(<span class="keyword">char</span>* fp)</span></span>&#123;</span><br><span class="line">    DIR *pDir = <span class="built_in">opendir</span>(fp);</span><br><span class="line">    dirent *pDirEnt = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((pDirEnt = <span class="built_in">readdir</span>(pDir)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(pDirEnt-&gt;d_name == std::<span class="built_in">string</span>(<span class="string">&quot;.&quot;</span>) || pDirEnt-&gt;d_name == std::<span class="built_in">string</span>(<span class="string">&quot;..&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//処理なし</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            std::string fp2 = std::<span class="built_in">string</span>(fp)+<span class="string">&quot;\\&quot;</span>+pDirEnt-&gt;d_name;</span><br><span class="line">            <span class="comment">//std::cout &lt;&lt; fp2 &lt;&lt; std::endl;</span></span><br><span class="line">            <span class="keyword">char</span>* fp3 = <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>*&gt;(fp2.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isFile</span>(fp3))&#123;</span><br><span class="line">                number ++;</span><br><span class="line">                size += std::filesystem::<span class="built_in">file_size</span>(fp3);</span><br><span class="line">                <span class="comment">//std::cout &lt;&lt;&quot;No.&quot; &lt;&lt; number &lt;&lt; &quot;  Name：&quot; &lt;&lt; pDirEnt-&gt;d_name &lt;&lt; &quot;  size：&quot; &lt;&lt; std::filesystem::file_size(fp3) &lt;&lt; std::endl;</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">fileCom</span>(fp3);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFile</span><span class="params">(<span class="keyword">char</span>* fp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> isDirectory = std::filesystem::<span class="built_in">is_directory</span>(fp);</span><br><span class="line">    <span class="keyword">if</span>(isDirectory)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>编程练习</category>
      </categories>
  </entry>
  <entry>
    <title>利用schedule模块 定时打开网站与开机时自动启动</title>
    <url>/WestRoute.github.io/2021/11/03/pythonTimer/</url>
    <content><![CDATA[<h3 id="schedule模块-下载"><a href="#schedule模块-下载" class="headerlink" title="schedule模块 下载"></a>schedule模块 下载</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> schedule</span><br></pre></td></tr></table></figure>

<span id="more"></span>
<h3 id="定时打开文件"><a href="#定时打开文件" class="headerlink" title="定时打开文件"></a>定时打开文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> schedule</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job</span>():</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">#if (datetime.date.today().weekday())&gt;=5:</span></span><br><span class="line">      <span class="comment">#  print(&quot;foo&quot;)</span></span><br><span class="line">   <span class="comment">#else:</span></span><br><span class="line">    subprocess.Popen([<span class="string">r&#x27;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&#x27;</span>,<span class="string">&#x27;https://en.wikipedia.org/wiki/Main_Page&#x27;</span>])    //也可以打开zoom</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(datetime.datetime.now())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I&#x27;m working...&quot;</span>)</span><br><span class="line"></span><br><span class="line">schedule.every().day.at(<span class="string">&quot;10:31&quot;</span>).do(job)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  schedule.run_pending()</span><br><span class="line">  time.sleep(<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="python文件转exe文件"><a href="#python文件转exe文件" class="headerlink" title="python文件转exe文件"></a>python文件转exe文件</h3><p>下载打包用编译器</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> pyinstaller</span><br></pre></td></tr></table></figure>
<p>打包exe</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">pyinstaller zoom.py <span class="comment">--onefile</span></span><br></pre></td></tr></table></figure>

<h3 id="如何设置开机自动开启（Windows）"><a href="#如何设置开机自动开启（Windows）" class="headerlink" title="如何设置开机自动开启（Windows）"></a>如何设置开机自动开启（Windows）</h3><p>name是你在开机自启动列表想要显示的名字，能与其他的开机自启动项目分开就行。<br>path是你的exe文件的路径。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> win32api</span><br><span class="line"><span class="keyword">import</span> win32con</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">1000000</span>)</span><br><span class="line"> </span><br><span class="line">name = <span class="string">&#x27;zoom&#x27;</span></span><br><span class="line">path = <span class="string">&#x27;C:\Desktop\zoom.exe&#x27;</span></span><br><span class="line"> </span><br><span class="line">KeyName = <span class="string">r&#x27;Software\Microsoft\Windows\CurrentVersion\Run&#x27;</span></span><br><span class="line"><span class="comment">#请在每个斜线后再加一个斜线</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    key = win32api.RegOpenKey(win32con.HKEY_CURRENT_USER, KeyName, <span class="number">0</span>, win32con.KEY_ALL_ACCESS)</span><br><span class="line">    win32api.RegSetValueEx(key, name, <span class="number">0</span>, win32con.REG_SZ, path)</span><br><span class="line">    win32api.RegCloseKey(key)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;error！&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;success！&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><br><br></p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>编程练习</category>
      </categories>
  </entry>
  <entry>
    <title>python03 标准库</title>
    <url>/WestRoute.github.io/2021/11/03/python03/</url>
    <content><![CDATA[<h3 id="操作系统接口"><a href="#操作系统接口" class="headerlink" title="操作系统接口"></a>操作系统接口</h3><figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="keyword">import</span> os</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">os.getcwd()      <span class="comment"># 返回当前的工作目录</span></span></span><br><span class="line">&#x27;C:\\Python34&#x27;</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">os.chdir(<span class="string">&#x27;/server/accesslogs&#x27;</span>)   <span class="comment"># 修改当前的工作目录</span></span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">os.system(<span class="string">&#x27;mkdir today&#x27;</span>)   <span class="comment"># 执行系统命令 mkdir </span></span></span><br><span class="line">0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="日常的文件和目录管理任务"><a href="#日常的文件和目录管理任务" class="headerlink" title="日常的文件和目录管理任务"></a>日常的文件和目录管理任务</h3><figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="keyword">import</span> shutil</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">shutil.copyfile(<span class="string">&#x27;data.db&#x27;</span>, <span class="string">&#x27;archive.db&#x27;</span>)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">shutil.move(<span class="string">&#x27;/build/executables&#x27;</span>, <span class="string">&#x27;installdir&#x27;</span>)</span></span><br></pre></td></tr></table></figure>
<h3 id="文件通配符"><a href="#文件通配符" class="headerlink" title="文件通配符"></a>文件通配符</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> glob</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">&#x27;*.py&#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;primes.py&#x27;</span>, <span class="string">&#x27;random.py&#x27;</span>, <span class="string">&#x27;quote.py&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="错误输出重定向和程序终止"><a href="#错误输出重定向和程序终止" class="headerlink" title="错误输出重定向和程序终止"></a>错误输出重定向和程序终止</h3><p>sys 还有 stdin，stdout 和 stderr 属性，即使在 stdout 被重定向时，后者也可以用于显示警告和错误信息。</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; sys.<span class="keyword">stderr</span>.<span class="built_in">write</span>(<span class="string">&#x27;Warning, log file not found starting a new one\n&#x27;</span>)</span><br><span class="line">Warning, <span class="built_in">log</span> <span class="built_in">file</span> <span class="keyword">not</span> found starting <span class="keyword">a</span> <span class="built_in">new</span> <span class="literal">one</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串正则匹配"><a href="#字符串正则匹配" class="headerlink" title="字符串正则匹配"></a>字符串正则匹配</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(<span class="string">r&#x27;\bf[a-z]*&#x27;</span>, <span class="string">&#x27;which foot or hand fell fastest&#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;foot&#x27;</span>, <span class="string">&#x27;fell&#x27;</span>, <span class="string">&#x27;fastest&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.sub(<span class="string">r&#x27;(\b[a-z]+) \1&#x27;</span>, <span class="string">r&#x27;\1&#x27;</span>, <span class="string">&#x27;cat in the the hat&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;cat in the hat&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h3><h3 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h3><figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="keyword">import</span> zlib</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">s = <span class="string">b&#x27;witch which has which witches wrist watch&#x27;</span></span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="built_in">len</span>(s)</span></span><br><span class="line">41</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">t = zlib.compress(s)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="built_in">len</span>(t)</span></span><br><span class="line">37</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">zlib.decompress(t)</span></span><br><span class="line">b&#x27;witch which has which witches wrist watch&#x27;</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">zlib.crc32(s)</span></span><br><span class="line">226805979</span><br></pre></td></tr></table></figure>


<h3 id="性能度量"><a href="#性能度量" class="headerlink" title="性能度量"></a>性能度量</h3><p>例如，使用元组封装和拆封来交换元素看起来要比使用传统的方法要诱人的多,timeit 证明了现代的方法更快一些。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from timeit import Timer</span><br><span class="line">&gt;&gt;&gt; <span class="constructor">Timer(&#x27;<span class="params">t</span>=<span class="params">a</span>; <span class="params">a</span>=<span class="params">b</span>; <span class="params">b</span>=<span class="params">t</span>&#x27;, &#x27;<span class="params">a</span>=1; <span class="params">b</span>=2&#x27;)</span>.timeit<span class="literal">()</span></span><br><span class="line"><span class="number">0.57535828626024577</span></span><br><span class="line">&gt;&gt;&gt; <span class="constructor">Timer(&#x27;<span class="params">a</span>,<span class="params">b</span> = <span class="params">b</span>,<span class="params">a</span>&#x27;, &#x27;<span class="params">a</span>=1; <span class="params">b</span>=2&#x27;)</span>.timeit<span class="literal">()</span></span><br><span class="line"><span class="number">0.54962537085770791</span></span><br></pre></td></tr></table></figure>


<h3 id="测试模块"><a href="#测试模块" class="headerlink" title="测试模块"></a>测试模块</h3><p>doctest模块提供了一个工具，扫描模块并根据程序中内嵌的文档字符串执行测试。<br>测试构造如同简单的将它的输出结果剪切并粘贴到文档字符串中。<br>通过用户提供的例子，它强化了文档，允许 doctest 模块确认代码的结果是否与文档一致:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">average</span>(<span class="params">values</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Computes the arithmetic mean of a list of numbers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(average([20, 30, 70]))</span></span><br><span class="line"><span class="string">    40.0</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(values) / <span class="built_in">len</span>(values)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> doctest</span><br><span class="line">doctest.testmod()   <span class="comment"># 自动验证嵌入测试</span></span><br></pre></td></tr></table></figure>
<p><br><br></p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>每月总结08 (2021/10)</title>
    <url>/WestRoute.github.io/2021/11/02/MonthlyRe08/</url>
    <content><![CDATA[<p>38部电影，7本书。开始打工了很累，有些有心无力，以后工作了又会怎样呢？</p>
<span id="more"></span>
<h3 id="影"><a href="#影" class="headerlink" title="影"></a>影</h3><table>
<thead>
<tr>
<th>电影</th>
<th>日期</th>
<th>顺序</th>
</tr>
</thead>
<tbody><tr>
<td>双峰</td>
<td>2021/10/31</td>
<td>1241</td>
</tr>
<tr>
<td>爱情短片</td>
<td>2021/10/31</td>
<td>1240</td>
</tr>
<tr>
<td>愤怒的葡萄</td>
<td>2021/10/30</td>
<td>1239</td>
</tr>
<tr>
<td>蓝丝绒</td>
<td>2021/10/29</td>
<td>1238</td>
</tr>
<tr>
<td><font color="red">大幻影</font></td>
<td>2021/10/28</td>
<td>1237</td>
</tr>
<tr>
<td><font color="red">战地军魂</font></td>
<td>2021/10/27</td>
<td>1236</td>
</tr>
<tr>
<td><font color="red">影子部队</font></td>
<td>2021/10/26</td>
<td>1235</td>
</tr>
<tr>
<td>维莉蒂安娜</td>
<td>2021/10/25</td>
<td>1234</td>
</tr>
<tr>
<td>资产阶级的审慎魅力</td>
<td>2021/10/25</td>
<td>1233</td>
</tr>
<tr>
<td>通往绞刑架的电梯</td>
<td>2021/10/24</td>
<td>1232</td>
</tr>
<tr>
<td>瑞典女王</td>
<td>2021/10/23</td>
<td>1231</td>
</tr>
<tr>
<td>落水狗</td>
<td>2021/10/23</td>
<td>1230</td>
</tr>
<tr>
<td><font color="red">伊万的童年</font></td>
<td>2021/10/22</td>
<td>1229</td>
</tr>
<tr>
<td><font color="red">冰血长津湖</font></td>
<td>2021/10/21</td>
<td>1228</td>
</tr>
<tr>
<td><font color="red">桂河大桥</font></td>
<td>2021/10/21</td>
<td>1227</td>
</tr>
<tr>
<td>扒手</td>
<td>2021/10/20</td>
<td>1226</td>
</tr>
<tr>
<td>扒手</td>
<td>2021/10/20</td>
<td>1225</td>
</tr>
<tr>
<td>红气球</td>
<td>2021/10/19</td>
<td>1224</td>
</tr>
<tr>
<td><font color="red">你逃我也逃</font></td>
<td>2021/10/18</td>
<td>1223</td>
</tr>
<tr>
<td>青木瓜之味</td>
<td>2021/10/17</td>
<td>1222</td>
</tr>
<tr>
<td>雌雄大盗</td>
<td>2021/10/17</td>
<td>1221</td>
</tr>
<tr>
<td>洞</td>
<td>2021/10/17</td>
<td>1220</td>
</tr>
<tr>
<td><font color="red">高地战</font></td>
<td>2021/10/16</td>
<td>1219</td>
</tr>
<tr>
<td>紫色</td>
<td>2021/10/16</td>
<td>1218</td>
</tr>
<tr>
<td>阿玛柯德</td>
<td>2021/10/15</td>
<td>1217</td>
</tr>
<tr>
<td><font color="red">海与毒药</font></td>
<td>2021/10/15</td>
<td>1216</td>
</tr>
<tr>
<td>野草莓</td>
<td>2021/10/15</td>
<td>1215</td>
</tr>
<tr>
<td>黄金三镖客</td>
<td>2021/10/15</td>
<td>1214</td>
</tr>
<tr>
<td><font color="red">自己去看</font></td>
<td>2021/10/14</td>
<td>1213</td>
</tr>
<tr>
<td>夺魂索</td>
<td>2021/10/13</td>
<td>1212</td>
</tr>
<tr>
<td><font color="red">大独裁者</font></td>
<td>2021/10/12</td>
<td>1211</td>
</tr>
<tr>
<td>莫扎特传</td>
<td>2021/10/11</td>
<td>1210</td>
</tr>
<tr>
<td>佐杜洛夫斯基的沙丘</td>
<td>2021/10/10</td>
<td>1209</td>
</tr>
<tr>
<td><font color="red">邮差</font></td>
<td>2021/10/5</td>
<td>1208</td>
</tr>
<tr>
<td>地球之夜</td>
<td>2021/10/4</td>
<td>1207</td>
</tr>
<tr>
<td>重庆森林</td>
<td>2021/10/3</td>
<td>1206</td>
</tr>
<tr>
<td>罗拉快跑</td>
<td>2021/10/2</td>
<td>1205</td>
</tr>
<tr>
<td><font color="red">英国病人</font></td>
<td>2021/10/1</td>
<td>1204</td>
</tr>
</tbody></table>
<h3 id="书"><a href="#书" class="headerlink" title="书"></a>书</h3><p>这个月看的战争电影比较多，红色标出了。<br>选出三个推荐的是：《海与毒药》《莫扎特传》《黄金三镖客》<br><br><br>同样值得推荐的纪录片是《冰血长津湖》。<br>| 书        | 日期     | 顺序    |<br>|————-|————–|——–|<br>| Oxfords Birds of North American | 2021/10/31 | 164 |<br>| 江户川乱步佳作集                  | 2021/10/31 | 163 |<br>| 索拉里斯星                     | 2021/10/31 | 162 |<br>| 癫狂与文明                     | 2021/10/31 | 161 |<br>| 巴巴罗萨                      | 2021/10/31 | 160 |<br>| 查拉图斯特拉如是说                 | 2021/10/31 | 159 |<br>| 阿特斯拉耸耸肩                   | 2021/10/31 | 158 |<br>| 中国生物多样性地理图集               | 2021/10/31 | 157 |</p>
<h4 id="索拉里斯星"><a href="#索拉里斯星" class="headerlink" title="索拉里斯星"></a>索拉里斯星</h4><p>确实是原作比电影好看多了。<br>《三体》只是幻想的集合，但以人类为中心视觉探索宇宙同时又缺少人类的特点————感性，就像文中的人类没有办法在无边际的宇宙确定人类的位置一样，作者也没有办法对人类这个集合做一个总结，最后得出了最消极的“黑暗森林”定理；<br>《人工智能能梦到电子羊吗？》也是从人类的伦理道德去探讨机器人和人类的区别，但是在《三体》的基础上增加了对人类的自身的反省；<br>《索拉里斯星》讲的是一种超越人类想象的存在，对手不是外星“人”，甚至没有人类的感情，同时又突出描写了人类自身的弱点，是我至今度过最畅快的科幻小说。<br>可能是因为看过电影，每一个场景都十分清晰地浮现在眼前。</p>
<h4 id="江户川乱步佳作集"><a href="#江户川乱步佳作集" class="headerlink" title="江户川乱步佳作集"></a>江户川乱步佳作集</h4><p>不是本格推理，更像初中生的鬼故事会。</p>
<h4 id="癫狂与文明"><a href="#癫狂与文明" class="headerlink" title="癫狂与文明"></a>癫狂与文明</h4><p>太好读了！怎么能写的这么生动有趣？</p>
<h4 id="阿特斯拉耸耸肩"><a href="#阿特斯拉耸耸肩" class="headerlink" title="阿特斯拉耸耸肩"></a>阿特斯拉耸耸肩</h4><blockquote><p>….出版以后，恶评如潮但畅销无比，对美国大众的影响仅次于《圣经》，作者也因该书几乎激怒了整个成人世界：父亲、母亲、左派知识分子、自由主义者和保守主义者。他们贬低她：“只有十几岁的青少年醉心于她的学说。”….</p>
<footer><strong>序</strong></footer></blockquote>
<p>确实让人想起年轻气盛的青少年时期…<br>读的时候对比着从前的梦想，对比着书里不切实际的故事，对比着路人的冷眼旁观，同时在想今后自己到底要过这样的生活。<br><br><br>小说先是选择了一个奇怪的背景————全世界实施共产主义，所有的人的口头禅是“我们必须帮助弱者”、“贫穷不是罪恶，金钱才是罪恶”。之后是他的登场人物，除了部分主角外所有人都是愚蠢而又不知感恩，去剥夺资本家的血汗钱。<br>如果没有读过小说的人一定会疑问，“血汗钱”怎么会和“资本家”连在一起出现呢？<br>在故事里，主人公们十年如一日的努力工作研发出了低价硬度高的合金却因为“合金太优秀了，会伤害到其他企业的自尊心”为由而受到政府的制裁。制裁内容是：主人公合金哪怕质量再好也不可以生产超过其他企业的的平均产量，铁路公司如果买合金买不到那就买脆弱的钢铁吧。<br><br><br>读的时候可能会想：<br>————作者怎么会写这样一篇明显就是恶心人的东西就是为了堵住社会学家的嘴？<br>————就这种幼稚的发泄也能自称哲学？<br><br><br>然而当我们读柏拉图的《理想国》的时候，我们当然知道柏拉图的极端又光怪陆离的乌托邦无法实现、甚至让人难接受，但是它仍作为一颗明星闪烁在人类历史文明的长河中————那么处在公平-自由天平另一极端的《阿特拉斯耸耸肩》怎么就不能同样端坐在人类智慧的殿堂之上呢？<br><br><br></p>
<h4 id="Oxfords-Birds-of-North-American"><a href="#Oxfords-Birds-of-North-American" class="headerlink" title="Oxfords Birds of North American"></a>Oxfords Birds of North American</h4><img src="/WestRoute.github.io/images/book.png">
从小一直想看的书，没想到真的能拿在手上。
<br><br>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>2021/10/31是「initial step in NIJISANJI」演唱会。<br>和朋友一起筹款送花篮，我负责画画。<br><img src="/WestRoute.github.io/images/flowers.JPG"></p>
<p>2021/11/6</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>每月总结</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础2</title>
    <url>/WestRoute.github.io/2021/10/29/python02/</url>
    <content><![CDATA[<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>迭代器有两个基本的方法：<strong>iter()</strong> 和 **next()**。<br>字符串，列表或元组对象都可用于创建迭代器</p>
<span id="more"></span>
<p>可以使用常规for语句进行遍历(<strong>对象</strong>)：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">list</span>=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="attribute">it</span> = iter(list)    # 创建迭代器对象</span><br><span class="line"><span class="attribute">for</span> x in it:</span><br><span class="line">    <span class="attribute">print</span> (x, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以使用 next() 函数：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">import sys         <span class="comment"># 引入 sys 模块</span></span><br><span class="line"> </span><br><span class="line">list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">it = iter(list)    <span class="comment"># 创建迭代器对象</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    try:</span><br><span class="line">        print (<span class="keyword">next</span>(it))</span><br><span class="line">    except StopIteration:</span><br><span class="line">        sys.<span class="keyword">exit</span>()</span><br></pre></td></tr></table></figure>
<br>
StopIteration 异常用于标识迭代的完成

<h3 id="生成器（generator）"><a href="#生成器（generator）" class="headerlink" title="生成器（generator）"></a>生成器（generator）</h3><p>在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line"> </span><br><span class="line">def fibonacci(n): <span class="comment"># 生成器函数 - 斐波那契</span></span><br><span class="line">    a, b, counter = <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        <span class="keyword">if</span> (counter &gt; n): </span><br><span class="line">            return</span><br><span class="line">        yield a</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">f = fibonacci(<span class="number">10</span>) <span class="comment"># f 是一个迭代器，由生成器返回生成</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    try:</span><br><span class="line">        print (<span class="keyword">next</span>(f), end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    except StopIteration:</span><br><span class="line">        sys.<span class="keyword">exit</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出结果如下：<br>0 1 1 2 3 5 8 13 21 34 55</p>
<p><br><br>在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(a))   <span class="comment"># 指向的是同一个对象</span></span><br><span class="line">    a=<span class="number">10</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(a))   <span class="comment"># 一个新对象</span></span><br><span class="line"> </span><br><span class="line">a=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line">change(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出结果如下：<br>2301180864816<br>2301180864816<br><strong>2301180865104</strong><br><strong>2301180864816</strong><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changeme</span>(<span class="params"> mylist </span>):</span></span><br><span class="line">   <span class="string">&quot;修改传入的列表&quot;</span></span><br><span class="line">   mylist.append([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;函数内取值: &quot;</span>, mylist)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#调用changeme函数</span></span><br><span class="line">mylist = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>]</span><br><span class="line">changeme( mylist )</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;函数外取值: &quot;</span>, mylist)</span><br></pre></td></tr></table></figure>
<p>输出结果如下：<br>函数内取值:  [10, 20, 30, [1, 2, 3, 4]]<br>函数外取值:  [10, 20, 30, [1, 2, 3, 4]]</p>
<h3 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h3> <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可写函数说明</span></span><br><span class="line">def printinfo( name, age = 35 ):</span><br><span class="line">   <span class="string">&quot;打印任何传入的字符串&quot;</span></span><br><span class="line">   <span class="builtin-name">print</span> (<span class="string">&quot;名字: &quot;</span>, name)</span><br><span class="line">   <span class="builtin-name">print</span> (<span class="string">&quot;年龄: &quot;</span>, age)</span><br><span class="line">   return</span><br><span class="line"> </span><br><span class="line"><span class="comment">#调用printinfo函数</span></span><br><span class="line">printinfo( <span class="attribute">age</span>=50, <span class="attribute">name</span>=<span class="string">&quot;runoob&quot;</span> )</span><br><span class="line"><span class="builtin-name">print</span> (<span class="string">&quot;------------------------&quot;</span>)</span><br><span class="line">printinfo( <span class="attribute">name</span>=<span class="string">&quot;runoob&quot;</span> )</span><br></pre></td></tr></table></figure>
<br>
加了星号 * 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可写函数说明</span></span><br><span class="line">def printinfo( arg1, *vartuple ):</span><br><span class="line">   <span class="string">&quot;打印任何传入的参数&quot;</span></span><br><span class="line">   <span class="builtin-name">print</span> (<span class="string">&quot;输出: &quot;</span>)</span><br><span class="line">   <span class="builtin-name">print</span> (arg1)</span><br><span class="line">   <span class="builtin-name">print</span> (vartuple)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#调用printinfo 函数</span></span><br><span class="line">printinfo( 70, 60, 50 )</span><br></pre></td></tr></table></figure>
输出结果如下：
70
(60, 50)

<p><br><br>加了两个星号 ** 的参数会以字典的形式导入。<br> / 用来指明函数形参必须使用指定位置参数，不能使用关键字参数的形式。</p>
<h3 id="lambda-函数"><a href="#lambda-函数" class="headerlink" title="lambda 函数"></a>lambda 函数</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sum</span> = lambda arg<span class="number">1</span>, arg<span class="number">2</span>: arg<span class="number">1</span> + arg<span class="number">2</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#调用sum函数</span></span><br><span class="line"><span class="attribute">print</span> (<span class="string">&quot;相加后的值为 : &quot;</span>, sum( <span class="number">10</span>, <span class="number">20</span> ))</span><br><span class="line"><span class="attribute">print</span> (<span class="string">&quot;相加后的值为 : &quot;</span>, sum( <span class="number">20</span>, <span class="number">20</span> ))</span><br></pre></td></tr></table></figure>


<h3 id="模块-import"><a href="#模块-import" class="headerlink" title="模块 import"></a>模块 import</h3><p>每个模块都有一个__name__属性，当其值是’<strong>main</strong>‘时，表明该模块自身在运行，否则是被引入。<br>内置的函数 dir() 可以找到模块内定义的所有名称</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(sys)  </span><br><span class="line">[<span class="string">&#x27;__displayhook__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__excepthook__&#x27;</span>, <span class="string">&#x27;__loader__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;__stderr__&#x27;</span>, <span class="string">&#x27;__stdin__&#x27;</span>, <span class="string">&#x27;__stdout__&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;_clear_type_cache&#x27;</span>, <span class="string">&#x27;_current_frames&#x27;</span>, <span class="string">&#x27;_debugmallocstats&#x27;</span>, <span class="string">&#x27;_getframe&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;_home&#x27;</span>, <span class="string">&#x27;_mercurial&#x27;</span>, <span class="string">&#x27;_xoptions&#x27;</span>, <span class="string">&#x27;abiflags&#x27;</span>, <span class="string">&#x27;api_version&#x27;</span>, <span class="string">&#x27;argv&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;base_exec_prefix&#x27;</span>, <span class="string">&#x27;base_prefix&#x27;</span>, <span class="string">&#x27;builtin_module_names&#x27;</span>, <span class="string">&#x27;byteorder&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;call_tracing&#x27;</span>, <span class="string">&#x27;callstats&#x27;</span>, <span class="string">&#x27;copyright&#x27;</span>, <span class="string">&#x27;displayhook&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;dont_write_bytecode&#x27;</span>, <span class="string">&#x27;exc_info&#x27;</span>, <span class="string">&#x27;excepthook&#x27;</span>, <span class="string">&#x27;exec_prefix&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;executable&#x27;</span>, <span class="string">&#x27;exit&#x27;</span>, <span class="string">&#x27;flags&#x27;</span>, <span class="string">&#x27;float_info&#x27;</span>, <span class="string">&#x27;float_repr_style&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;getcheckinterval&#x27;</span>, <span class="string">&#x27;getdefaultencoding&#x27;</span>, <span class="string">&#x27;getdlopenflags&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;getfilesystemencoding&#x27;</span>, <span class="string">&#x27;getobjects&#x27;</span>, <span class="string">&#x27;getprofile&#x27;</span>, <span class="string">&#x27;getrecursionlimit&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;getrefcount&#x27;</span>, <span class="string">&#x27;getsizeof&#x27;</span>, <span class="string">&#x27;getswitchinterval&#x27;</span>, <span class="string">&#x27;gettotalrefcount&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;gettrace&#x27;</span>, <span class="string">&#x27;hash_info&#x27;</span>, <span class="string">&#x27;hexversion&#x27;</span>, <span class="string">&#x27;implementation&#x27;</span>, <span class="string">&#x27;int_info&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;intern&#x27;</span>, <span class="string">&#x27;maxsize&#x27;</span>, <span class="string">&#x27;maxunicode&#x27;</span>, <span class="string">&#x27;meta_path&#x27;</span>, <span class="string">&#x27;modules&#x27;</span>, <span class="string">&#x27;path&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;path_hooks&#x27;</span>, <span class="string">&#x27;path_importer_cache&#x27;</span>, <span class="string">&#x27;platform&#x27;</span>, <span class="string">&#x27;prefix&#x27;</span>, <span class="string">&#x27;ps1&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;setcheckinterval&#x27;</span>, <span class="string">&#x27;setdlopenflags&#x27;</span>, <span class="string">&#x27;setprofile&#x27;</span>, <span class="string">&#x27;setrecursionlimit&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;setswitchinterval&#x27;</span>, <span class="string">&#x27;settrace&#x27;</span>, <span class="string">&#x27;stderr&#x27;</span>, <span class="string">&#x27;stdin&#x27;</span>, <span class="string">&#x27;stdout&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;thread_info&#x27;</span>, <span class="string">&#x27;version&#x27;</span>, <span class="string">&#x27;version_info&#x27;</span>, <span class="string">&#x27;warnoptions&#x27;</span>]</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<p> <br><br></p>
<h3 id="文件I-O"><a href="#文件I-O" class="headerlink" title="文件I/O"></a>文件I/O</h3><p>这里有两种方式输出一个平方与立方的表:</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">  &gt;&gt;&gt; for x in range(1, 11):</span><br><span class="line">...     print(repr(x).rjust(2), repr(x*x).rjust(3), end=&#x27; &#x27;)</span><br><span class="line">...     <span class="comment"># 注意前一行 &#x27;end&#x27; 的使用  </span></span><br><span class="line">...     print(repr(x*x*x).rjust(4))</span><br><span class="line">...</span><br><span class="line"><span class="number"> 1 </span> <span class="number"> 1 </span>   1</span><br><span class="line"><span class="number"> 2 </span> <span class="number"> 4 </span>   8</span><br><span class="line"><span class="number"> 3 </span> <span class="number"> 9 </span>  27</span><br><span class="line"><span class="number"> 4 </span><span class="number"> 16 </span>  64</span><br><span class="line"><span class="number"> 5 </span><span class="number"> 25 </span> 125</span><br><span class="line"><span class="number"> 6 </span><span class="number"> 36 </span> 216</span><br><span class="line"><span class="number"> 7 </span><span class="number"> 49 </span> 343</span><br><span class="line"><span class="number"> 8 </span><span class="number"> 64 </span> 512</span><br><span class="line"><span class="number"> 9 </span><span class="number"> 81 </span> 729</span><br><span class="line">10<span class="number"> 100 </span>1000</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; for x in range(1, 11):</span><br><span class="line">...     print(&#x27;&#123;0:2d&#125; &#123;1:3d&#125; &#123;2:4d&#125;&#x27;.format(x, x*x, x*x*x))</span><br><span class="line">...</span><br><span class="line"><span class="number"> 1 </span> <span class="number"> 1 </span>   1</span><br><span class="line"><span class="number"> 2 </span> <span class="number"> 4 </span>   8</span><br><span class="line"><span class="number"> 3 </span> <span class="number"> 9 </span>  27</span><br><span class="line"><span class="number"> 4 </span><span class="number"> 16 </span>  64</span><br><span class="line"><span class="number"> 5 </span><span class="number"> 25 </span> 125</span><br><span class="line"><span class="number"> 6 </span><span class="number"> 36 </span> 216</span><br><span class="line"><span class="number"> 7 </span><span class="number"> 49 </span> 343</span><br><span class="line"><span class="number"> 8 </span><span class="number"> 64 </span> 512</span><br><span class="line"><span class="number"> 9 </span><span class="number"> 81 </span> 729</span><br><span class="line">10<span class="number"> 100 </span>1000</span><br></pre></td></tr></table></figure>
<p><br><br>读取键盘输入</p>
<figure class="highlight hsp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">str</span> = <span class="keyword">input</span>(<span class="string">&quot;请输入：&quot;</span>)<span class="comment">;</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;你输入的内容是: &quot;</span>, <span class="keyword">str</span>)</span><br></pre></td></tr></table></figure>
<br>
打开读写文件
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment">#open(filename, mode)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;/tmp/foo.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">f.<span class="built_in">write</span>( <span class="string">&quot;Python 是一个非常好的语言。\n是的，的确非常好!!\n&quot;</span> )</span><br><span class="line"><span class="comment">#关闭打开的文件</span></span><br><span class="line">f.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">f.<span class="keyword">read</span>(<span class="keyword">size</span>)</span><br><span class="line">str = f.readline()</span><br><span class="line">f.<span class="keyword">readlines</span>() 将返回该文件中包含的所有行。</span><br></pre></td></tr></table></figure>

<p><strong>f.tell()</strong><br>f.tell() 返回文件对象当前所处的位置, 它是从文件开头开始算起的字节数。<br><br></p>
<p><strong>f.seek()</strong><br>如果要改变文件当前的位置, 可以使用 f.seek(offset, from_what) 函数。<br>from_what 的值, 如果是 0 表示开头, 如果是 1 表示当前位置, 2 表示文件的结尾，例如：<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;seek(x,0) ： 从起始位置即文件首行首字符开始移动 x 个字符<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;seek(x,1) ： 表示从当前位置往后移动x个字符<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;seek(-x,2)：表示从文件的结尾往前移动x个字符</p>
<h3 id="pickle模块"><a href="#pickle模块" class="headerlink" title="pickle模块"></a>pickle模块</h3><p>python的pickle模块实现了基本的数据序列和反序列化。</p>
<h3 id="OS-文件-目录方法"><a href="#OS-文件-目录方法" class="headerlink" title="OS 文件/目录方法"></a>OS 文件/目录方法</h3><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">arg</span> <span class="keyword">in</span> sys.argv[<span class="number">1</span>:]:</span><br><span class="line">    try:</span><br><span class="line">        f = <span class="built_in">open</span>(<span class="built_in">arg</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    except IOError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;cannot open&#x27;</span>, <span class="built_in">arg</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">arg</span>, <span class="string">&#x27;has&#x27;</span>, <span class="built_in">len</span>(f.readlines()), <span class="string">&#x27;lines&#x27;</span>)</span><br><span class="line">        f.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure>

<h3 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h3><blockquote><p>A namespace is a mapping from names to objects.Most namespaces are currently implemented as Python dictionaries。</p>
</blockquote><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>python基础1</title>
    <url>/WestRoute.github.io/2021/10/28/python01/</url>
    <content><![CDATA[<p>Python 3 源码文件以 UTF-8 编码，所有字符串都是 unicode 字符串</p>
<span id="more"></span>
<h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;缩进不一致，会导致运行错误，反斜杠 \ 来实现多行语句</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">total</span> = <span class="string">item_one + \</span></span><br><span class="line"><span class="string">        item_two + \</span></span><br><span class="line"><span class="string">        item_three</span></span><br></pre></td></tr></table></figure>
<p><br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;在 [], {}, 或 () 中的多行语句，不需要使用反斜杠 <br><br></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">total</span> = [<span class="string">&#x27;item_one&#x27;</span>, <span class="string">&#x27;item_two&#x27;</span>, <span class="string">&#x27;item_three&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;item_four&#x27;</span>, <span class="string">&#x27;item_five&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p><br><br><br></p>
<h3 id="变量和数据类型"><a href="#变量和数据类型" class="headerlink" title="变量和数据类型"></a>变量和数据类型</h3><p>Python3 中有六个标准的数据类型：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>不可变数据（3 个）</strong>：Number（数字）、String（字符串）、Tuple（元组）；<br>&nbsp;&nbsp;&nbsp;&nbsp;<strong>可变数据（3 个）</strong>：List（列表）、Dictionary（字典）、Set（集合）。</p>
<p>不需要声明数据类型，但可以用 isinstance 来判断：</p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a = <span class="number">111</span></span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="built_in">isinstance</span>(a, <span class="built_in">int</span>)</span></span><br><span class="line">True</span><br></pre></td></tr></table></figure>
<p><br><br><br>isinstance 和 type 的区别在于：</p>
<p>type()不会认为子类是一种父类类型。<br>isinstance()会认为子类是一种父类类型。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>注意</strong>：Python3 中，bool 是 int 的子类，True 和 False 可以和数字相加， True==1、False==0 会返回 True，但可以通过 is 来判断类型。</p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="built_in">issubclass</span>(<span class="built_in">bool</span>, <span class="built_in">int</span>) </span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="literal">True</span>==<span class="number">1</span></span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="literal">False</span>==<span class="number">0</span></span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="literal">True</span>+<span class="number">1</span></span></span><br><span class="line">2</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="literal">False</span>+<span class="number">1</span></span></span><br><span class="line">1</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="number">1</span> <span class="keyword">is</span> <span class="literal">True</span></span></span><br><span class="line">False</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="number">0</span> <span class="keyword">is</span> <span class="literal">False</span></span></span><br><span class="line">False</span><br></pre></td></tr></table></figure>
<p><br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;del语句删除单个或多个对象<br><br><br></p>
<h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><p>运算</p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="number">2</span> / <span class="number">4</span>  <span class="comment"># 除法，得到一个浮点数</span></span></span><br><span class="line">0.5</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="number">2</span> // <span class="number">4</span> <span class="comment"># 除法，得到一个整数</span></span></span><br><span class="line">0</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="number">17</span> % <span class="number">3</span> <span class="comment"># 取余</span></span></span><br><span class="line">2</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="number">2</span> ** <span class="number">5</span> <span class="comment"># 乘方</span></span></span><br><span class="line">32</span><br></pre></td></tr></table></figure>

<h4 id="列表（List）"><a href="#列表（List）" class="headerlink" title="列表（List）"></a>列表（List）</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">list = [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, 1997, 2000]</span><br><span class="line"> </span><br><span class="line"><span class="builtin-name">print</span> (<span class="string">&quot;原始列表 : &quot;</span>, list)</span><br><span class="line">del list[2]</span><br><span class="line"><span class="builtin-name">print</span> (<span class="string">&quot;删除第三个元素 : &quot;</span>, list)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="built_in">print</span>(tup[<span class="number">0</span>])</span></span><br><span class="line">1</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="built_in">print</span>(tup[<span class="number">1</span>:<span class="number">5</span>])</span></span><br><span class="line">(2, 3, 4, 5)</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">tup[<span class="number">0</span>] = <span class="number">11</span>  <span class="comment"># 修改元组元素的操作是非法的</span></span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: &#x27;tuple&#x27; object does not support item assignment</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure>
<p>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">tup1</span> = ()    <span class="comment"># 空元组</span></span><br><span class="line"><span class="attr">tup2</span> = (<span class="number">20</span>,) <span class="comment"># 一个元素，需要在元素后添加逗号</span></span><br></pre></td></tr></table></figure>

<h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p>set可以进行集合运算</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line">b = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a - b)     <span class="comment"># a 和 b 的差集</span></span><br><span class="line"><span class="built_in">print</span>(a | b)     <span class="comment"># a 和 b 的并集</span></span><br><span class="line"><span class="built_in">print</span>(a &amp; b)     <span class="comment"># a 和 b 的交集</span></span><br><span class="line"><span class="built_in">print</span>(a ^ b)     <span class="comment"># a 和 b 中不同时存在的元素</span></span><br></pre></td></tr></table></figure>

<h4 id="Dictionary（字典）"><a href="#Dictionary（字典）" class="headerlink" title="Dictionary（字典）"></a>Dictionary（字典）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span> = &#123;&#125;</span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>] = <span class="string">&quot;1 - 菜鸟教程&quot;</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="number">2</span>]     = <span class="string">&quot;2 - 菜鸟工具&quot;</span></span><br><span class="line"></span><br><span class="line">tinydict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;runoob&#x27;</span>,<span class="string">&#x27;code&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;site&#x27;</span>: <span class="string">&#x27;www.runoob.com&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>])       <span class="comment"># 输出键为 &#x27;one&#x27; 的值</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">dict</span>[<span class="number">2</span>])           <span class="comment"># 输出键为 2 的值</span></span><br></pre></td></tr></table></figure>
<p>另外，字典类型也有一些内置的函数，例如clear()、keys()、values()等。</p>
<h3 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h3><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> co<span class="symbol">ndition_1</span>:</span><br><span class="line">    stateme<span class="symbol">nt_block_1</span></span><br><span class="line">elif co<span class="symbol">ndition_2</span>:</span><br><span class="line">    stateme<span class="symbol">nt_block_2</span></span><br><span class="line">else:</span><br><span class="line">    stateme<span class="symbol">nt_block_3</span></span><br></pre></td></tr></table></figure>
<p><br><br></p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件<span class="comment">(condition)</span>：</span><br><span class="line">    执行语句<span class="comment">(statements)</span>……</span><br></pre></td></tr></table></figure>

<p><br>无限循环</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="built_in">var</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">var</span> == <span class="number">1</span> :  <span class="meta"># 表达式永远为 true</span></span><br></pre></td></tr></table></figure>
<br>
**while 循环使用 else 语句**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expr 条件语句为 true 则执行 statement(s) 语句块，如果为 false，则执行 additional_statement(s)。
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">count</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">count</span> &lt; <span class="number">5</span>:</span><br><span class="line">   <span class="keyword">print</span> (<span class="keyword">count</span>, <span class="string">&quot; 小于 5&quot;</span>)</span><br><span class="line">   <span class="keyword">count</span> = <span class="keyword">count</span> + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">print</span> (<span class="keyword">count</span>, <span class="string">&quot; 大于或等于 5&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><br>for语句</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">for <span class="params">&lt;variable&gt;</span> in <span class="params">&lt;sequence&gt;</span>:</span><br><span class="line">    <span class="params">&lt;statements&gt;</span></span><br><span class="line"><span class="symbol">else:</span></span><br><span class="line">    <span class="params">&lt;statements&gt;</span></span><br></pre></td></tr></table></figure>
<p><br><br></p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;languages = [&quot;C&quot;, &quot;C++&quot;, &quot;Perl&quot;, &quot;Python&quot;] </span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="keyword">for</span> x <span class="keyword">in</span> languages:</span></span><br><span class="line"><span class="meta">...</span> <span class="python">    <span class="built_in">print</span> (x)</span></span><br><span class="line"><span class="meta">...</span> </span><br><span class="line">C</span><br><span class="line">C++</span><br><span class="line">Perl</span><br><span class="line">Python</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="range函数"><a href="#range函数" class="headerlink" title="range函数"></a>range函数</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="selector-tag">for</span> <span class="selector-tag">i</span> <span class="selector-tag">in</span> <span class="selector-tag">range</span>(<span class="number">5</span>):</span><br><span class="line">...     <span class="selector-tag">print</span>(i)</span><br></pre></td></tr></table></figure>
<p>结果：0，1，2，3，4<br><br><br><br>也可以使用range指定区间的值：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="selector-tag">for</span> <span class="selector-tag">i</span> <span class="selector-tag">in</span> <span class="selector-tag">range</span>(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">...     <span class="selector-tag">print</span>(i)</span><br></pre></td></tr></table></figure>
<p><br><br>指定等差数列:</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="selector-tag">for</span> <span class="selector-tag">i</span> <span class="selector-tag">in</span> <span class="selector-tag">range</span>(<span class="number">0</span>,<span class="number">10</span>,<span class="number">3</span>):</span><br><span class="line">...     <span class="selector-tag">print</span>(i)</span><br></pre></td></tr></table></figure>

<figure class="highlight less"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="selector-tag">for</span> <span class="selector-tag">i</span> <span class="selector-tag">in</span> <span class="selector-tag">range</span>(-<span class="number">10</span>, -<span class="number">100</span>, -<span class="number">30</span>):</span><br><span class="line">...     <span class="selector-tag">print</span>(i)</span><br></pre></td></tr></table></figure>
<p>结果：-10,-40,-70</p>
<h3 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h3><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">&#x27;Runoob&#x27;</span>:     <span class="meta"># 第一个实例</span></span><br><span class="line">   <span class="keyword">if</span> letter == <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">   <span class="keyword">print</span> (<span class="string">&#x27;当前字母为 :&#x27;</span>, letter)</span><br><span class="line">  </span><br><span class="line"><span class="built_in">var</span> = <span class="number">10</span>                    <span class="meta"># 第二个实例</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">var</span> &gt; <span class="number">0</span>:              </span><br><span class="line">   <span class="keyword">print</span> (<span class="string">&#x27;当前变量值为 :&#x27;</span>, <span class="built_in">var</span>)</span><br><span class="line">   <span class="built_in">var</span> = <span class="built_in">var</span> <span class="number">-1</span></span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">var</span> == <span class="number">5</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;Good bye!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<br>

<h3 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span>  <span class="comment"># 等待键盘中断 (Ctrl+C)</span></span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>动植物笔记</title>
    <url>/WestRoute.github.io/2021/10/28/%E5%8A%A8%E6%A4%8D%E7%89%A9%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>1.中国生物多样性地理图集<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;中国物种信息服务CSIS<br>2.Oxfords Birds of American</p>
<span id="more"></span>

<h3 id="中国生物多样性地理图集"><a href="#中国生物多样性地理图集" class="headerlink" title="中国生物多样性地理图集"></a>中国生物多样性地理图集</h3><p>EX 灭绝     EW野外灭绝     RE地区灭绝<br>CR极危      EN濒危        VU易危       NT近危       LC无危<br>DD 数据缺乏   NA不予评价   NE未予评估<br><br><br><br><br>中国地形三大阶梯中，西南部物种最丰富<br>！！！！插入 中国物种估计数量<br>！！！！三峡物种<br>！！！！世界鸟类迁移图<br>！！！！中国陆地主要生境类型图</p>
<h4 id="陆生脊椎动物"><a href="#陆生脊椎动物" class="headerlink" title="陆生脊椎动物"></a>陆生脊椎动物</h4><h5 id="陆生动物"><a href="#陆生动物" class="headerlink" title="陆生动物"></a>陆生动物</h5><p>赛加羚羊 EW<br>獐  VU<br>水獭 EN<br>羚牛 CR<br>巢鼠 LC<br>东北鼠兔 LC<br>猪獾  VU<br>雪豹  CR<br>花面狸 NT<br>白颊长臂猿 CR<br>川金丝猴  VU<br>盘羊  EN<br>褐长耳蝠 NT<br>长舌果蝠  VU<br>云南菊头蝠  EN  中国特有<br>喜马拉雅山旱獭  LC<br>豪猪  VU<br><br><br><br></p>
<h5 id="鸟类"><a href="#鸟类" class="headerlink" title="鸟类"></a>鸟类</h5><p>鸡、雁、䴕、佛法僧、鸮、鸽、鹤、鹳、鹰隼、丘鹬、雀、莺、燕雀、鸦、鹟、麻雀<br><br><br><br>灰椋鸟 LC<br>橙胸鹟 LC<br>须浮鸥 Lc<br>棕头鸦雀 LC<br>灰鹡鸟  LC<br>大山雀  LC<br>北红尾鸲（qu）  LC<br>杂色山雀  LC<br>棕头鸥  LC<br>鸡形目鸟类共有63种，仅鹌鹑和日本鹌鹑与迁徙习性<br>翠鸟  LC<br>雪鸮（xiao） LC<br>猎隼（sun）  LC<br>翻石鹬（yu） LC<br>画眉 NT<br>远东树莺  LC<br>棕颈雪雀  LC<br>黄鹡（ji）鸰（ling）  LC<br>红嘴相思鸟  NT<br><br><br><br></p>
<h5 id="陆生爬行"><a href="#陆生爬行" class="headerlink" title="陆生爬行"></a>陆生爬行</h5><p>福建绿叶青蛇 LC<br><br><br><br></p>
<h4 id="陆生无脊椎动物"><a href="#陆生无脊椎动物" class="headerlink" title="陆生无脊椎动物"></a>陆生无脊椎动物</h4><p>窄斑凤尾蛱蝶  LC<br>宽带美凤蝶  LC<br><br><br><br></p>
<h4 id="陆生植物"><a href="#陆生植物" class="headerlink" title="陆生植物"></a>陆生植物</h4><p>西伯利亚云杉  VU<br>宝兴牡丹 VU<br>天南星 NE<br><br><br><br></p>
<h4 id="内陆水生动物"><a href="#内陆水生动物" class="headerlink" title="内陆水生动物"></a>内陆水生动物</h4><p>长须狮子鱼 NE</p>
<h3 id="Oxfords-Birds-of-American"><a href="#Oxfords-Birds-of-American" class="headerlink" title="Oxfords Birds of American"></a>Oxfords Birds of American</h3><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>杂文</category>
        <category>读书笔记</category>
      </categories>
  </entry>
  <entry>
    <title>生活医学~NSAIDsによる蕁麻疹/血管浮腫~</title>
    <url>/WestRoute.github.io/2021/10/18/%E7%94%9F%E6%B4%BB%E5%8C%BB%E5%AD%A6/</url>
    <content><![CDATA[<h3 id="NSAIDsによる蕁麻疹-血管浮腫"><a href="#NSAIDsによる蕁麻疹-血管浮腫" class="headerlink" title="NSAIDsによる蕁麻疹/血管浮腫"></a>NSAIDsによる蕁麻疹/血管浮腫</h3><p><strong>Loxoprofen</strong>　　is a nonsteroidal NSAID in the propionic acid derivatives group, which also includes ibuprofen and naproxen among others. </p>
<span id="more"></span>

<p><strong>NSAIDs</strong>　anti-inflammatory drug 非ステロイド性抗炎症薬。広義にはステロイドではない抗炎症薬すべてを含みます。アセトアミノフェン。</p>
<p><strong>病院で処方される主なNSAIDs</strong>：<br>アスピリン（バファリン®など）<br>ロキソプロフェン（ロキソニン®など）<br>ジクロフェナク（ボルタレン®など）<br>インドメタシン（インダシン®など）<br>メフェナム酸（ポンタール®など）<br>スルピリン(メチロン®など)<br>アセトアミノフェン（アンヒバ®、カロナール®など）<br>その他</p>
<p>基本的に通常の急性喘息発作の対応と同じであるが、アドレナリンが有効であることと、ステロイドの急速静注は禁忌であることを十分に理解しておく。</p>
<p><strong>Glucocorticoid/糖質コルチコイド</strong>　are a class of steroid hormones. Glucocorticoids are corticosteroids that bind to the glucocorticoid receptor[1] that is present in almost every vertebrate animal cell. The name “glucocorticoid” is a portmanteau (glucose + cortex + steroid) and is composed from its role in regulation of glucose metabolism, synthesis in the adrenal cortex, and its steroidal structure (see structure to the right).<br>免疫系 代謝系 発育 覚醒・認知 体液恒常性</p>
<p><strong>steroid</strong>　是醇类的一种，特征是有一个四环的母核。在人类生理及药理上，最重要的甾体是胆固醇、甾体激素、它的前体及代谢物。在血液中，甾体负责运送蛋白质。</p>
<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>
<h3 id="水ぶくれ"><a href="#水ぶくれ" class="headerlink" title="水ぶくれ"></a>水ぶくれ</h3><p><strong>単純疱疹（たんじゅんほうしん）</strong>Herpes simplex virus<br><strong>帯状疱疹（たいじょうほうしん）</strong>Varicella Zoster virus<br><strong>ヘルペスウイルス</strong><br>ヘルペスウイルスは2本鎖DNAをゲノムとするDNAウイルスのうち、T数16のカプシドがエンベロープに包まれ直径200 nm（ナノメートル）程度の球状粒子を形作るものの総称。</p>
<p>qouted from Wikipeida</p>
<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>杂文</category>
      </categories>
  </entry>
  <entry>
    <title>『宇宙飛行士たちの日常』&amp;&amp; カフェギャラリーきのね</title>
    <url>/WestRoute.github.io/2021/10/12/%E5%AE%87%E5%AE%99%E9%A3%9B%E8%A1%8C%E5%A3%AB%E3%81%9F%E3%81%A1%E3%81%AE%E6%97%A5%E5%B8%B8/</url>
    <content><![CDATA[<p>カフェギャラリーきのね ：大阪府大阪市北区中崎3-2-14  的咖啡店。<br>『宇宙飛行士たちの日常』：在推特上上传行走在大阪的宇航员的照片。</p>
<span id="more"></span>
<img src="/WestRoute.github.io/images/utyuiroiro.png" width= "500" height="450">


<p>这周周日上午有一场考试，考试前又在推特上看到出展的消息，就打算考完试顺道去一趟。<br>我关注这个账号很久了，宇宙的电影看了不少，有带着对宇宙美好憧憬的《千钧一发》，也有对人类发出尖锐警告人类的《太空漫游2001》，但都不如单单这一张漫画让我受到的冲击多。</p>
<img src="/WestRoute.github.io/images/sawman.jpg" width= "400" height="600">

<p>其实也可以见到很多《电锯人》漫画粉丝会把宇航员这一情节单独拿出来谈。</p>
<p>这个恐惧刚开始只停留在这个故事中，这部作品不久就迎来了结束。但当我在推特上偶然看到了这个在地球的宇航员时，这张画中的恐惧蔓延到了现实中，而且还是在我居住的城市。</p>
<p><br><br></p>
<p>而这个“宇航员生活在大阪”的系列我几乎每一张都存在了手机里，凝视它仿佛就是凝视死亡。</p>
<p>几乎所有的照片都好看，<b>穿着人类的宇航服走在人类的星球上却让我觉得这里面的人是个地球外生物</b>,即使有些照片并没有散发着恐怖的气息，而是十分俏皮，看到推特上说展会现场有卖相册，我就觉一定要去看（买）。</p>
<p>等我出了中崎站，我发现整个街道都和大阪其他的地方不同，这里有很多看起来适合拍照的咖啡店、手工艺品店、古着店。但同时也有破旧的好像是二战期间留下来的破旧木质建筑，凌乱的电线杆和一片破败的墙。<br><img src="/WestRoute.github.io/images/nakasaki.jpg"><br><img src="/WestRoute.github.io/images/nakasaki2.jpg"></p>
<p>这或许是传说中的文青胜地。可我不看诗集，我不是文青，我没近距离接触过这类人，我开始怀疑和忐忑起来。</p>
<p>在我眼里开来文青是不用考虑自己的作品欢迎程度而自由创作的人。他们人情洋溢、热爱生活、生命力极强、对自己的感情和梦想十分坚定……</p>
<p>我走进了店里。这里是一个咖啡店，店面真的特别小，把二楼租出去当小众创作者的展览会，没有门票，但上二楼坐一坐最好点一杯饮料。<br>我一眼就看到了摆在门口的画集。但是有两个人挡住我了。<br>他们主动搭话<span style="color: grey">“您是来看谁的展出的？”</span></p>
<p><span style="color: grey">“宇宙的…”</p>
<p><span style="color:grey">“哦哦！他本人在二楼！！”</span></p>
<p>我刚考完了一场考试外加再来的路上一直在读福柯，脚上的鞋还不合脚，各种因素都让我有些疲惫，我不是很想开口说话。</p>
<p><span style="color: grey">“我还是不上去了。”</span>我拿了相册准备去付账。</p>
<p>前台特别小，楼梯也特别小，一眼望去感觉特别安静，既然这么安静去看看也无妨，鬼使神差下我付完了钱就走上了二楼。</p>
<p>走上二楼，快到门口时发现说话的声音特别多，走进去一看二楼是也很小，是榻榻米+日式矮桌。矮桌不好坐，几乎没人坐着，所以没人手里拿着饮料。</p>
<p>然后一眼望过去就是那套宇航服和被粉丝众星拱月的作者本人。</p>
<p>我被那套宇航服深深的吸引，身体被刚刚在门口的小姐姐拉过去，推到了作者面前。实在是没有和偶像说话的经验，出乎意料的场景让我紧张的满头大汗，我本来是买本相册就走的怎么会坐在这里？</p>
<img src="/WestRoute.github.io/images/twoshoot.JPG">

<p>原来如此，街上的文青气息和二楼展厅的样子都在说明作者并不是一个航天爱好者，而是和我一样是一个创作者。他确确实实是表演者一个地球人穿宇航服的角色，而不是我通过《电锯人》联想到的地狱与恶魔。手里相册的意义仿佛发生了改变，不再具有敬畏和恐惧。</p>
<p>站在作者面前我实在不知道说什么，我其实只对那套宇航服感兴趣，我仔细观察他的材质因为我也想要一套。旁边还坐着一个很热情又特别会聊天的粉丝大叔，帮了支支吾吾的我不少忙，我不追星实在是很不适应。<br>还问了关于宇航服的制作，在照片里十分逼真，但是近距离接触就发现其实很潦草，作者说原本是想用来拍电影的，然后又笑着说“用来拍电影还是太粗糙了。”</p>
<p>坐着说要拍一张我和宇航服的拍立得送给我，我没想到会拍照，我也没穿好看的衣服来，我拒绝了两次，但作者说每个买了相册的人都送。</p>
<img src="/WestRoute.github.io/images/goods.JPG">

<p>我最后也没说什么马上就灰溜溜的走了，因为照片的意义已经发生了变化。</p>
<p>下楼了之后我想起在二楼坐了就需要点一杯咖啡，在一楼点了个咖啡并要求带走。</p>
<p>店长推荐了“卢旺达女人”。</p>
<p><span style="color:grey">“卢旺达是不是那个……”</span></p>
<p>我觉得“大屠杀”这个词说出口实在太残忍，又一时找不到代替词。</p>
<p>店长说：<span style="color:grey">『Hotel Rwanda』？</span><br>『Hotel Rwanda』，讲述卢旺达大屠杀的电影。透过电影的纱窗，这个血淋淋的历史事件现在找到了比较温和的代替词。</p>
<p>店长：<span style="color:grey">很少有人知道『Hotel Rwanda』</span>。</p>
<p>之后聊了聊咖啡豆的来历————在大屠杀中卢旺达的男性都被杀光了，女人们为了养活自己开始种植咖啡豆，且这个咖啡豆是公平贸易咖啡。</p>
<br>
<br>
<br>
<br>

<p>最后我走的时候特别急，像是逃跑一样。尽管如此这也是我人生第一次参加现代年轻创作家个人展的经历，他们无人赞助，但散发着来自灵魂深处的生命力，我从来都只在网上投稿我的作品，这对我来说是一个陌生而神奇的世界。</p>
<p>我想能让人想去第二次的艺术展就是一个好的艺术展，这样的展会我想来第二次，可能和我的预期有些不同，但毫无疑问，他拍的照片我很喜欢，他的创意我很喜欢，希望还能看到他开展。</p>
<br>
<br><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
  </entry>
  <entry>
    <title>応用情報技術者試験準備</title>
    <url>/WestRoute.github.io/2021/10/05/%E5%BF%9C%E7%94%A8%E6%83%85%E5%A0%B1%E6%8A%80%E8%A1%93%E8%80%85%E8%A9%A6%E9%A8%93%E6%BA%96%E5%82%99/</url>
    <content><![CDATA[<p>ノートが綺麗に書くほど復習しにくいらしい。</p>
<span id="more"></span>
<h3 id="テクノロジー"><a href="#テクノロジー" class="headerlink" title="テクノロジー"></a>テクノロジー</h3><p>ナノ秒　10億分の1秒 (10−9 s, 11,000,000,000 s)<br><code>SMTP</code> simple mail transfer protocol、メールサーバーから消さない<br><code>POP3</code> 一回メールを開いたら、メールサーバーから消す（残らない）<br><code>S/MIME</code>　カプセル化した電子メールの<span style="background-color:#ffcccb">公開鍵方式</span>による暗号化とデジタル署名<br><code>SPF</code> 　送信元ドメインのDNSに登録されているメールサーバのIPアドレスとを照合する<br><code>OP25B</code>　スパム対策　port587 /SMTP-AUTH</p>
<p><code>IMAP4(Internet Message Access Protocol Version 4)</code>   は、電子メールの受信に使われるプロトコルで、りメールサーバ内のメールを<span style="background-color:#ffcccb">選択して</span>受信することができます。</p>
<p><code>MIME(Multipurpose Internet Mail Extension)</code>   ASCII文字しか使用できないSMTPを利用したメールで、日本語の2バイトコードや画像データを送信するための仕組みです。</p>
<p><code>POP3(Post Office Protocol Version 3)</code>    電子メールで使われるプロトコルの一つで、ユーザがメールサーバから自身のメールを<span style="background-color:#ffcccb">全部</span>処理において使用されます。</p>
<p><code>リバースプロキシ</code>　プロキシサーバーと逆方向に働く　<br>インターネットから公開サーバへのアクセスを中継し、公開サーバへ攻撃を防ぐ<br>ploxy:内部→外部　リバース:外部→内部</p>
<p><code>CRL</code><br>1MIPS=1 million commands/s<br><code>フィシング</code><br><code>ランサムウェア</code> 身代金<br><code>ドライブバイダウンロード</code><br><code>ゼロディ</code>　脆弱性<br><code>スキーマ</code>　外部スキーマ:利用するデータの定義（業務変化の影響吸収）論理スキーマ　内部スキーマ:データの物理構造（物理構造変化の影響吸収）　<br><code>スタースキーマ</code><br>IN　副問い合わせ　<br>EXIST　相関副問い合わせ<br>第２正規形　主キーと関数関係<br>UNION　ALL　重複を含めて結合<br>NOR型フラッシュメモリー　不揮発性　ファームウェア<br>NAND型フラッシュメモリー　揮発性　　SDカード</p>
<p><code>NAS</code>   ネットワーク（LAN）上に接続することができるハードディスクです。</p>
<p><code>SAN</code> 磁気ディスク装置や磁気テープ装置などのストレージ(補助記憶装置)を，通常のLANとは別の高速な専用ネットワークで構成する方式</p>
<p><code>シンプロビジョニング</code><br><code>ストライピング</code><br><code>OpenCV</code>　<br><code>chainer</code><br><code>DSP</code><br><code>FPGA</code><br><code>GPU</code><br><code>SoC</code></p>
<p><code>デュプレックス(duplex system)</code>　主系と待機系からなる２系列の処理システム構成<br><code>デュアル</code>　常に両者で同じ処理を行う方式<br><code>デュアルコア</code>　　核の部分であるコアを2つ持っていること</p>
<p><code>クリッピング</code><br>HTTPS:　HTTP＋STL<br><code>レインボー攻撃</code>ハッシュ→パスワード<br><code>ソルト</code>パスワードの味付け<br><code>APT攻撃</code>　国と国</p>
<p><code>AES</code>:共通鍵　　<code>RSA</code>:公開鍵　　<code>SHA</code>:ハッシュ関数</p>
<p>3ビット右シフト　1010 1011　→　1111 1010<br><code>ウォッチドッグタイマ(Watchdog Timer)</code>  あらかじめ設定された一定時間内にタイマがクリアされなかった場合，システム異常とみなしてシステムをリセット又は終了する。</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span>の補数（<span class="number">4</span>の場合）</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>の<span class="number">2</span>進数表示は<span class="number">0100</span>。この<span class="number">0100の0と1</span>を入れ替えると<span class="number">1011</span>となる。これに<span class="number">1</span>を足すと<span class="number">1100</span>となる。</span><br><span class="line">よって、<span class="number">1100が4の2</span>の補数表示となる。</span><br></pre></td></tr></table></figure>

<p><code>死の谷</code>　経費不足、結果出してない</p>
<h3 id="マネジメント"><a href="#マネジメント" class="headerlink" title="マネジメント"></a>マネジメント</h3><p>売上原価:固定費+変動費<br>損益分岐点:売上高ー売上原価=売上総利益が0になる点<br>営業利益:売上総利益ー販売費及び一般管理費(販管費)<br>経常利益:営業利益+営業外収益ー営業外費用<br><code>サービスマネジメント</code>　サービス品質の向上<br><code>インシデント</code><br><code>SLA</code>　合意書<br><code>段階的取扱い/エスカレーション</code><br><code>ITIL対策</code>　サービス戦略　サービス設計　サービス移行　サービス運用　継続的サービス対策<br><code>CSF</code>　要因<br><code>KGI</code>　ゴール<br><code>KPI</code>　指標<br><code>マーケティングミックス</code>　<code>マーケティングリサーチ</code>　<code>マーチャンダイジング</code>陳列　<code>マスマーケティング</code>商品一種類<br><code>完全化保守</code>　<code>是正保守</code>　<code>適応保守</code>　<code>予防保守</code><br><code>かんばん</code>　<code>ブランニングポーカ</code>　<code>プロダクトバッグログ</code>　<br>固定比率=固定资产÷自己资本<br>流动比率=流动资产÷流动负债<br>自己资本比率=自己资本÷总资本<br>〇〇▲▲率 = ▲▲ ÷ 〇〇<br>バランスシート</p>
<p><code>ROE</code><br><code>ROA</code><br><code>ROI</code></p>
<p><code>バリューチェーン</code>   業務を，購買物流，製造，出荷物流，販売・マーケティング，サービスという五つの主活動と，人事・労務管理などの四つの支援活動に分類する。<br><code>ファイブフォース分析</code>　業界内での競争　業界への新規参入者　代替品の存在　買い手（顧客）の交渉力　売り手（サプライヤー）の交渉力<br><code>ファスト・トラッキング</code>　時間短縮<br><code>クリティカルパス</code>　critical path<br><code>リード</code> 同時<br><code>ラグ</code>　前後<br><code>コア・コンピタンス (Core competence)</code>   他社と差別化<br><code>チャレンジャ戦略</code>    上位企業の市場シェアを奪うことを目標に，製品，サービス，販売促進，流通チャネルなどのあらゆる面での差別化戦略をとる。</p>
<p><code>キャパシティ管理</code><br><code>クラッシング</code><br><code>フィット＆ギャップ分析</code></p>
<h3 id="ストラテジー"><a href="#ストラテジー" class="headerlink" title="ストラテジー"></a>ストラテジー</h3><p><code>マクシミン原理</code>  最悪の場合の利益が最大になるものを選ぶ<br><code>ミニマックス</code> 最大損失を最小にする<br><code>鞍点</code>  マクシミン値とミニマックス値が一致するとき、その値をゲームの値、一致する点を「鞍点」という</p>
<p><code>ビジネスモデルキャンパス</code><br><code>ニーズ</code>　消費者が求めているもの<br><code>シーズ</code>　企業が提供できる特別技術や材料<br><code>PFM</code><br><code>SOX</code>　金融商品取引法<br><code>フォロワ戦略</code> 目標とする企業の戦略を観察し，迅速に模倣することで，開発や広告のコストを抑制し，市場での存続を図る。<br>M&amp;Aは合併(Mergers)と買収(Acquisitions)<br><code>アンゾフの成長マトリクス</code> は、経営学者のH・イゴール・アンゾフ（H. Igor Ansoff）が提唱したもので、縦軸に「市場」、横軸に「製品」をとり、それぞれに「既存」「新規」の2区分を設け、4象限(市場浸透，製品開発，市場開拓，多角化)のマトリクスとしたものです。<br><code>ダイバーシティマネジメント</code>   性別や年齢，国籍などの面で従業員の多様性</p>
<p><code>花形(star)</code> … [成長率：高、占有率：高]<br>多額の資金の投入を必要とする分野<br><code>金のなる木(cash cow) </code>… [成長率：低、占有率：高]<br>投資用資金・利益源</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>杂文</category>
      </categories>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/WestRoute.github.io/2021/10/01/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p>《正则表达式必知必会》笔记<br>据说笔记做的太漂亮反而不会复习。</p>
<span id="more"></span>


<p>.代替任意字符，包括.本身<code>sales.</code><br>..代替任意两个字符 <code>.a..</code><br>\转义符 <code>.a.\.xls</code><br>n或者s开头 <code>[ns]a.\.xls</code> <code>[Re]eg[Ee]x</code><br>搜索html colorcode <code>#[0-9A-Fa-F]</code><br>搜索Array[0]  <code>Array\[0\]</code><br>搜索path <code>\\</code><br>匹配空白字符 <code>\r\n\r\n</code>    \r 回车 \n换行 \f 换页符  \t制表符 \v垂直制表符<br>\d \D等价于 <code>[0-9]</code><br>\w 等价于 <code>[a-zA-z0-9_]</code><br>\W 等价于 <code>非[a-zA-z0-9_]</code><br>\s 等价于任何空白字符<br>\S 等价于任何非空白字符</p>
<p><code>[:digit:]</code>任何数字<br><code>[:xdigit:]</code>任何十六进制数字<br><code>[:alpha:]</code>任何字母<br><code>[:lower:]</code>任何小写字母<br><code>[:upper:]</code>任何大写字母<br><code>[:alnum:]</code>任何字母或数字<br><code>[:cntrl:]</code>ASCII控制字符（ASCII 0~31 和 ASCII 127）<br><code>[:punct:]</code>不属于[:alnum:]和[:cntrl:]的任何字符（标点符号）<br><code>[:blank:]</code>空格或制表符（[\t ]）<br><code>[:space:]</code>任何空白字符，包括空格（[\f\n\r\t\v ]）<br><code>[:print:]</code>任何可打印字符<br><code>[:graph:]</code>同[:print:],但不包括空格</p>
<p><font size="5">重复匹配</font></p>
<p>重复匹配 一个或多个 <code>\w+@\w.\w+</code><br>重复匹配 0个或多个  <code>\w+[\w.]*@[\w.]+\.\w+</code><br>只能匹配一个字符  <code>https?://[\w./]+</code>  这个？是指s要么不出现要么只出现一次<br><code>[[:digit:]]&#123;6&#125;</code>  6次<br><code>\d&#123;1,2&#125;[-\/]\d&#123;1,2&#125;</code>  {1,2}最少重复1次，最多两次<br><code>\d&#123;2，&#125;[-\/]\d&#123;2&#125;</code> 最少2次<br><code>*</code> <code>*?</code><br><code>+</code> <code>*?</code></p>
<p><font size="5">位置匹配</font></p>
<p>\b单词边界 <code>\bcat\b</code>=cat   <code>\bcap</code>=captain<br>\B前后都不是单词   <code>\B-\B</code>= -<br>字符串 开头^(开头前可以是多个空白)结尾$  <code>^\S*&lt;\&gt;</code><br>分行匹配模式 <code>?m</code>  <code>?m^\s*//.*$</code></p>
<p><font size="5">子表达式</font><br>&amp;nbsp；不是换行的空格</p>
<p><code>(&amp;nbsp;)&#123;2,&#125;</code>    <code>(&amp;nbsp;)</code>是子表达式<br><code>19|20\d&#123;2&#125;</code><br><code>(\d&#123;1,3&#125;\.)&#123;3&#125;\d&#123;1,3&#125; </code>  子表达式的嵌套</p>
<p><font size="5">回溯引用：前后一致匹配</font></p>
<p><code>[ ]+(\w+)[]+\1</code>  查找重复的单词  \1代表第一个子表达式<br><code>&lt;[hH]([1-6])&gt;.*?&lt;/[hH]\1&gt;</code>  查找&lt;\h1&gt;~&lt;\h6&gt;</p>
<p>再替换中可用$1来代表变量，且在不同语言中使用方法不同<br><code>(\d&#123;3&#125;)(-)(\d&#123;4&#125;)(-)(\d&#123;4&#125;)</code><br><code>($1) $3-$5</code></p>
<p><font size="5">大小写转换</font></p>
<p>\E end，表示大小写转换的结束范围<br>\l low，表示把下一个字符转为小写<br>\L Low，表示把\L与\E之间的字符转为小写<br>\u up，表示把下一个字符转为大写<br>\U Up，表示把\U与\E之间的字符转为大写</p>
<p><code>(&lt;[hH]1&gt;)(.*?)(&lt;/[hH]1&gt;)</code><br><code>$1\U$2\E$3</code></p>
<p><font size="5">前后查找</font></p>
<p>向前查找 ?=<br><code>.+(?=:)</code>  遇到：号截至，不包括：<br><code>.+(:)</code>  遇到：号截至，包括：</p>
<p>向后查找 ?&lt;=<br><code>(?=\$[0-9.]+)</code>    $9.99 → 9.99</p>
<p>负向前寻找 ?!<br><code>(?&lt;=\$)\d+</code><br>负向后寻找 ?&lt;!<br><code>\b(?&lt;!\$)\d+\b</code></p>
<p><font size="5">嵌入条件</font></p>
<p>查找电话号码 <code>\(?\d&#123;3&#125;\&#125;?-?\d&#123;3&#125;-\d&#123;4&#125;</code>  时 （123-456-7890 也会匹配<br><code>(\()?\d&#123;3&#125;(?(1)\)|-d)\d&#123;3&#125;-\d&#123;4&#125;</code></p>
<p>11111<br>22222<br>33333-<br>44444-4444<br>只需要xxxxx-xxxx时<br><code>\d&#123;5&#125;(-\d&#123;4&#125;)?</code> →  <code>\d&#123;5&#125;(?(?=-)-\d&#123;4&#125;)</code></p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
      </categories>
  </entry>
  <entry>
    <title>每月总结07 (2021/9)</title>
    <url>/WestRoute.github.io/2021/09/29/MonthlyRe07/</url>
    <content><![CDATA[<p>这个月花了10天来建网站，38部电影已经是不错的记录了。<br>书重点读了社会和政治。下个月想看看历史军事类。</p>
<span id="more"></span>

<table>
<thead>
<tr>
<th>电影(38)</th>
<th>标签</th>
<th>日期</th>
</tr>
</thead>
<tbody><tr>
<td>日落大道</td>
<td>1950/美国/比利·怀德</td>
<td>2021/9/30</td>
</tr>
<tr>
<td>迷魂记</td>
<td>1958/美国/阿尔弗雷德·希区柯克</td>
<td>2021/9/29</td>
</tr>
<tr>
<td>愤怒的公牛</td>
<td>1980/美国 /马丁·斯科塞斯</td>
<td>2021/9/28</td>
</tr>
<tr>
<td>第三人</td>
<td>1949/英国/卡罗尔·里德</td>
<td>2021/9/27</td>
</tr>
<tr>
<td>生活多美好</td>
<td>1946/美国</td>
<td>2021/9/26</td>
</tr>
<tr>
<td>秋日奏鸣曲</td>
<td>1978/瑞典/英格玛·伯格曼</td>
<td>2021/9/25</td>
</tr>
<tr>
<td>苔丝</td>
<td>1979/法国/罗曼·波兰斯基</td>
<td>2021/9/24</td>
</tr>
<tr>
<td>安妮霍尔</td>
<td>1977/美国/伍迪·艾伦</td>
<td>2021/9/24</td>
</tr>
<tr>
<td>神圣车行</td>
<td>2012/法国/莱奥·卡拉克斯</td>
<td>2021/9/23</td>
</tr>
<tr>
<td>西北偏北</td>
<td>1959/美国/阿尔弗雷德·希区柯克</td>
<td>2021/9/23</td>
</tr>
<tr>
<td>泯灭天使</td>
<td>1962/墨西哥/路易斯·布努埃尔</td>
<td>2021/9/22</td>
</tr>
<tr>
<td>性爱自修室第三季</td>
<td>2021/英国/本·泰勒</td>
<td>2021/9/21</td>
</tr>
<tr>
<td>处女泉</td>
<td>1960/瑞典/英格玛·伯格曼</td>
<td>2021/9/19</td>
</tr>
<tr>
<td>奇遇</td>
<td>1960/意大利/米开朗基罗·安东尼奥尼</td>
<td>2021/9/19</td>
</tr>
<tr>
<td>让娜·迪尔曼</td>
<td>1975/ 法国/ 香特尔·阿克曼</td>
<td>2021/9/18</td>
</tr>
<tr>
<td>芬妮与压力山大</td>
<td>1982/ 法国 / 格玛·伯格曼</td>
<td>2021/9/18</td>
</tr>
<tr>
<td>丹麦女孩</td>
<td>2015/英国/姆·霍伯</td>
<td>2021/9/17</td>
</tr>
<tr>
<td>女大法官金斯伯格</td>
<td>2018/美国/朱莉·科</td>
<td>2021/9/16</td>
</tr>
<tr>
<td>西力传</td>
<td>1983/美国/伍迪·艾伦</td>
<td>2021/9/15</td>
</tr>
<tr>
<td>消防员舞会</td>
<td>1967/捷克斯洛伐克/</td>
<td>2021/9/14</td>
</tr>
<tr>
<td>红圈</td>
<td>1970/法国/让-皮埃尔·梅尔维尔</td>
<td>2021/9/14</td>
</tr>
<tr>
<td>茶馆</td>
<td>1982/中国/谢添</td>
<td>2021/9/13</td>
</tr>
<tr>
<td>唐人街</td>
<td>1974/美国/罗曼·波兰斯基</td>
<td>2021/9/13</td>
</tr>
<tr>
<td>玫瑰之名</td>
<td>1986/意大利/让-雅克·阿诺</td>
<td>2021/9/12</td>
</tr>
<tr>
<td>群鸟</td>
<td>1963/美国/阿尔弗雷德·希区柯克</td>
<td>2021/9/12</td>
</tr>
<tr>
<td>那个男人来自地球</td>
<td>2007/美国/理查德·沙因克曼</td>
<td>2021/9/12</td>
</tr>
<tr>
<td>欢乐满人间2</td>
<td>2018/美国/罗伯·马歇尔</td>
<td>2021/9/11</td>
</tr>
<tr>
<td>欢乐满人间</td>
<td>1964/美国/罗伯特·斯蒂文森</td>
<td>2021/9/9</td>
</tr>
<tr>
<td>驴子巴特萨</td>
<td>1966/法国/罗伯特·布列松</td>
<td>2021/9/9</td>
</tr>
<tr>
<td>解构爱情狂</td>
<td>1997/美国/伍迪·艾伦</td>
<td>2021/9/8</td>
</tr>
<tr>
<td>圣女贞德蒙难记</td>
<td>1928/法国/卡尔·西奥多·德莱叶</td>
<td>2021/9/7</td>
</tr>
<tr>
<td>Love Live!Superstar</td>
<td>2021/日本/极尚彦</td>
<td>2021/9/6</td>
</tr>
<tr>
<td>彗星美人</td>
<td>1950/美国/约瑟夫·L·曼凯维奇</td>
<td>2021/9/5</td>
</tr>
<tr>
<td>费城故事</td>
<td>1940/美国/乔治·库克 / 凯瑟琳·赫本</td>
<td>2021/9/5</td>
</tr>
<tr>
<td>白色巨塔</td>
<td>2003/日本/西谷弘</td>
<td>2021/9/4</td>
</tr>
<tr>
<td>伊豆的舞女</td>
<td>1974/日/西河克己</td>
<td>2021/9/3</td>
</tr>
<tr>
<td>观鸟大年</td>
<td>2011/美国/大卫·弗兰科尔</td>
<td>2021/9/2</td>
</tr>
<tr>
<td>大都会</td>
<td>1927 / 德国</td>
<td>2021/9/1</td>
</tr>
</tbody></table>
<p>唯一想聊的是罗曼波兰斯基的《唐人街》：</p>
<p>当我看到黑色电影这个词的时候我第一个会想起库布里克的《杀手》，一群人在一盏小灯着凉的黑夜里小声谋密、黑夜漫长、机密策划，等我睡着的时候他们才开始抢劫。</p>
<p>黑色电影好像都是前半段95%的枯燥，只在临近尾声中才打出第一声枪声，那一声枪响响彻云霄，好像是对自己从此断送前途而对命运发出声嘶力竭的质问。</p>
<p>唐人街就是这样的一部电影。虽然是彩色的。当“最后一声枪响”回荡在唐人街上低矮黑暗的夜空中时，波兰斯基对自己妻子的思念、对敌人的痛恨、对自己无力回天的悔恨都留在杰克尼科尔森的眼神里。<br><br><br></p>
<table>
<thead>
<tr>
<th>书(8)</th>
<th>日期</th>
</tr>
</thead>
<tbody><tr>
<td>反对阐释</td>
<td>2021/9/30</td>
</tr>
<tr>
<td>第二性（第1卷）</td>
<td>2021/9/28</td>
</tr>
<tr>
<td>狂人分子</td>
<td>2021/9/29</td>
</tr>
<tr>
<td>克拉拉与太阳</td>
<td>2021/9/27</td>
</tr>
<tr>
<td>坑夫</td>
<td>2021/9/25</td>
</tr>
<tr>
<td>正则表达式必知必会</td>
<td>2021/9/20</td>
</tr>
<tr>
<td>艺术的故事</td>
<td>2021/9/19</td>
</tr>
<tr>
<td>图解社会学</td>
<td>2021/9/19</td>
</tr>
</tbody></table>
<h3 id="坑夫"><a href="#坑夫" class="headerlink" title="坑夫"></a>坑夫</h3><p>我知道这篇在台湾有译本，在大陆没有，所以来聊一聊。<br>非常独特的一部作品，夏目漱石历来的作品都是台词饶舌又精致，用冷酷的洞察力精密地切割出心灵的病灶，这部作品是平铺直叙，青年主人公没有明确的目标，仿佛漫步在迷雾中，没有方向没有目标，甚至没有知觉。</p>
<p>写的是主人公生在东京有钱人家里，和两个女孩子纠缠不清，实在理不清关系就出逃了，跑去挖煤，九死一生之后什么心理描写都没有就回家了，夏目漱石可能是想说青少年的内心就是什么都没有一片混沌吧（全肯定）。</p>
<p>和以往的作品完全不同，过往的主人公看到除了自己以外的人在就要在心里嘀嘀咕咕评判几句，十分八婆，这一次确实是在用青年的角度在叙述。不往深了想，这次可能就是作者为了炫技才写的吧。<br>也不是说真的就什么都没有，主人公想要逃离的过往的心思确实很让人共鸣，觉得自己搞砸了一件事之后家里就一无所有决心赴死的幼稚也很真实。</p>
<p>在值不值得读的问题上，我和过去无数对着不神奇的作品抱否定态度的人一样，觉得除了多认识几个单词以外不推荐读。但是你要是和我一样控制不了好奇心的话，可以读读看，确实和以往不同，起码开头还很有临场感，读起来十分舒服。</p>
<h3 id="图解社会学"><a href="#图解社会学" class="headerlink" title="图解社会学"></a>图解社会学</h3><p>想买实体本</p>
<h3 id="反对阐释"><a href="#反对阐释" class="headerlink" title="反对阐释"></a>反对阐释</h3><blockquote><p>“与贵族时代的社会等级制一样，这种文化也是等级制的，不仅与大众文化和先锋派艺术格格不入，而且排斥和贬低大众文化和先锋派艺术，因为它建立在好与坏、高级与低级、崇高与庸俗等一系列二元对立的价值评判基础上，而在六十年代反文化激进派看来，这一基础本身就成问题。”<br><br>“在现代大多数情形中，阐释无异于庸人们拒绝艺术作品的独立存在。真正的艺术能使我们感到紧张不安。通过把艺术作品消减为作品的内容，然后对内容予以阐释，人们就驯服了艺术作品。阐释使艺术变得可被控制，变得顺从。”<br><br> “例如，卡夫卡的作品一直经受着不下于三拨的阐释者的大规模劫掠。那些把卡夫卡的作品当作社会寓言来读的批评家从中发现了卡夫卡对现代官僚体制的层层阻挠、疯狂及其最终沦为极权国家的案例研究。那些把卡夫卡的作品当作心理分析寓言来读的批评家从中发现了卡夫卡对父亲的恐惧、他的阉割焦虑、他对自己性无能的感觉以及对梦的沉湎的种种绝望的显露。那些把卡夫卡的作品当作宗教寓言来读的批评家则解释说，《城堡》中的K试图获得天国的恩宠，而《审判》中的约瑟夫·K经受着上帝严厉而神秘的法庭的审判……萨缪尔·贝克特的作品也吸引着吸血鬼般的阐释者。贝克特描绘孤立意识——被减缩成彼此分离的一些要素，常以身体呆滞表现出来——的那些细腻的剧本，经常被读解为有关现代人疏离于意义或上帝的表达，或被读解为精神机能障碍的寓言。” 
  </p>
</blockquote>  
<p> <br><br></p>
  <blockquote><p>“在一九六七年左右，即批评文集《反对阐释》（Against Interpretaion and Other Essays，初版于一九六六年，美国版）的英国版出版之时，尽管苏珊·桑塔格（Susan Sontag）女士才发表了一部长篇小说以及若干短篇小说，但她无疑更看重自己作为小说家的才能，因此才会在文集的《自序》中说，这些文章是“从小说创作中漫溢出来而进入批评的那种能量，那种焦虑”。但可能出乎她当初的意料，正是这些在小说创作的间隙写下的批评文字，尤其是收入本文集中的《反对阐释》（一九六四）、《关于“坎普”的札记》（一九六四）、《一种文化与新感受力》（一九六五）等文章，使她在以小说家的身份蜚声文坛前，先以文化批评家的身份广为人知，以至后来任何一个试图写作美国后现代文化史的历史家都不能回避这几篇论文，甚至仅凭这几篇文字，她就可以被《伊甸园之门》（无疑，这是关于六十年代美国文化史的经典之作[…]”}    </p>
<footer><strong>中文版序</strong></footer></blockquote>   

<p><br><br></p>
<p>从中文版序可以看出这是一本批评文集，甚至是随笔文集，也可以说是朋友圈生活感想集。它的定位决定了我们不能对它太过苛刻。</p>
<p>这本书的智慧和我对它的期望并不相符，她反对的阐释仅限于网络上的骂战，不具有普遍性，但是她却起了个吸引眼球的标题，让我还以为她有什么让我惊讶的想法，结果和上一本《摄影之眼》一样很鸡肋。</p>
<p>或许在她那个年代她的想法还是个先见。但在满是先入为主、带有色彩的媒体铺天盖地残害心灵的今天，桑塔格的文字已经蒙上了一种为时已晚的孤独的面纱。</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>每月总结</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>C　PrimerPlus(6) 14私有继承与类模板</title>
    <url>/WestRoute.github.io/2021/09/25/c++06classtemplate/</url>
    <content><![CDATA[<h3 id="私有继承"><a href="#私有继承" class="headerlink" title="私有继承"></a>私有继承</h3><p>实现has-a关系的方法除了包含还有私有继承。<br>推荐使用包含。<br><strong>私有成员永远只能被本类的成员函数访问，或者是友元访问，除此以外，即使是其派生出的子类，也不能直接访问这些私有成员。</strong><br>私有继承也是默认的继承方式，如果没有继承方式的关键字说明，默认为私有继承。</p>
<span id="more"></span>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<br>私有继承-如何定义类</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Student</span> : <span class="symbol">private</span> <span class="symbol">std::<span class="symbol">string</span>,<span class="symbol">private</span></span> <span class="symbol">std::<span class="symbol">valarray</span></span>&lt;<span class="symbol">double</span>&gt;&#123;</span><br><span class="line">    <span class="comment">//上文指出student类是从string类和valarray类派生而来</span></span><br><span class="line">    <span class="comment">//多重继承</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在包含中，人们使用这样的构造函数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Student(const char* str,const double <em>pd,int n):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name(str),scores</em>(pd,n)//use object name<br>在私有继承中，人们使用这样的构造函数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Student(const char* str,const double *pd,int n):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background-color:#ffcccb">std::string(str)</span>,<span style="background-color:#ffcccb">ArrayDB(pd,n)</span>//use class name</p>
<h4 id="访问基类的方法"><a href="#访问基类的方法" class="headerlink" title="访问基类的方法"></a>访问基类的方法</h4><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> Student::Average() const&#123;</span><br><span class="line">    <span class="keyword">if</span> (ArrayDb::<span class="built_in">size</span>()&gt;<span class="number">0</span>) <span class="keyword">return</span> ArrayDb::<span class="built_in">sum</span>()/ArrayDb::<span class="built_in">size</span>();</span><br><span class="line">    //<span class="keyword">use</span> <span class="keyword">class</span> <span class="keyword">name</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="访问基类的对象-—-强制类型转换与-this指针"><a href="#访问基类的对象-—-强制类型转换与-this指针" class="headerlink" title="访问基类的对象 —=强制类型转换与*this指针"></a>访问基类的对象 —=强制类型转换与*this指针</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br></pre></td></tr></table></figure>

<h4 id="访问基类友元函数"><a href="#访问基类友元函数" class="headerlink" title="访问基类友元函数"></a>访问基类友元函数</h4><p>友元函数定义</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; os,<span class="keyword">const</span> Student &amp; stu)&#123;</span><br><span class="line">    os &lt;&lt;<span class="string">&quot;Scores for &quot;</span>&lt;&lt;(<span class="keyword">const</span> string &amp;) stu &lt;&lt; <span class="string">&quot;:\n&quot;</span>;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果plato是Student对象的话，plato指向的是Student &amp; stu，os指向的是cout地引用：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">os&lt;&lt; stu<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>私有继承需要通过显式地转换为基类来调用函数</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">os &lt;&lt;<span class="string">&quot;Scores for &quot;</span>&lt;&lt;(<span class="keyword">const</span> string &amp;) stu &lt;&lt; <span class="string">&quot;:\n&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="保护继承"><a href="#保护继承" class="headerlink" title="保护继承"></a>保护继承</h3><p>保护成员扩大的访问范围表现在：基类的保护成员可以在派生类的成员函数中被访问。<br>| 特征        | 公有继承     | 保护继承   | 私有继承   |<br>|———-|————–|————-|————–|<br>| 公有成员变成| public   | protected   | private   |<br>| 保护成员变成| protected   | protected  | private   |<br>| 私有成员变成| interface   | interfce   | interface   |<br>| 隐式向上转换| True   | True(派生类)   | False   |</p>
<h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><p>多重继承的问题：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.从两个不同的基类继承同名方法<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.继承同一个类的实例<br>解决方法————虚基类，可以从多个类派生出的对象只继承一个基类对象(virtual public的次序无关紧要)。</p>
<figure class="highlight nim"><table><tr><td class="code"><pre><span class="line">class <span class="type">Singer</span>: virtual public <span class="type">Woker</span><span class="meta">&#123;...&#125;</span>;</span><br><span class="line">class <span class="type">Waiter</span>: public virtual <span class="type">Woker</span><span class="meta">&#123;...&#125;</span>;</span><br><span class="line"></span><br><span class="line">class <span class="type">SingerWaiter</span> : public <span class="type">Singer</span>, public <span class="type">Waiter</span>;</span><br></pre></td></tr></table></figure>

<h3 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h3><p>10章的Stack类</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> Item;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">      <span class="class"><span class="keyword">enum</span> &#123;</span>MAX=<span class="number">10</span>&#125;;</span><br><span class="line">      Item items[MAX];</span><br><span class="line">      <span class="keyword">int</span> top;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">Stack</span>();</span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">isempty</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">isfull</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> Item&amp;item)</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">(Item&amp;item)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>替换为stack模板</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//stacktp.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> STACKTP_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACKTP_H_</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">      <span class="class"><span class="keyword">enum</span> &#123;</span>MAX=<span class="number">10</span>&#125;;</span><br><span class="line">      Item items[MAX];</span><br><span class="line">      <span class="keyword">int</span> top;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">Stack</span>();</span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">isempty</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">isfull</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> Item &amp; item)</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">(Item &amp; item)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span> Stack &lt;Type&gt;::<span class="built_in">Stack</span>()&#123;</span><br><span class="line">    top = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span> <span class="keyword">bool</span> Stack&lt;Type&gt;::<span class="built_in">isempty</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> top == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span> <span class="keyword">bool</span> Stack::isfull&#123;</span><br><span class="line">    <span class="keyword">return</span> top == MAX;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span> <span class="function"><span class="keyword">bool</span> <span class="title">Stack::push</span><span class="params">(<span class="keyword">const</span> Item &amp; item)</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span> ( top &lt; MAX )&#123;</span><br><span class="line">        items[top++]=item;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;<span class="keyword">else</span>  <span class="keyword">return</span> flase;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span> <span class="function"><span class="keyword">bool</span> <span class="title">Stack::pop</span><span class="params">(Item &amp; item)</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span> ( top &lt; MAX )&#123;</span><br><span class="line">        items=item[--top];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;<span class="keyword">else</span>  <span class="keyword">return</span> flase;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>泛型识标符、类型参数————Type，赋给他的不是能是数字，只能是类型。<br>与函数模板的区别，需要显示提供所需的类型：<br><strong>Stack<a href="std::String">std::String</a> st;</strong></p>
<h4 id="类模板使用指针"><a href="#类模板使用指针" class="headerlink" title="类模板使用指针"></a>类模板使用指针</h4><p>不推荐<br><br></p>
<h4 id="类模板用作容器————数组模板"><a href="#类模板用作容器————数组模板" class="headerlink" title="类模板用作容器————数组模板"></a>类模板用作容器————数组模板</h4><br>

<h4 id="递归使用模板制作2维数组"><a href="#递归使用模板制作2维数组" class="headerlink" title="递归使用模板制作2维数组"></a>递归使用模板制作2维数组</h4><p>请注意，在模板语法中维的顺序与等价的二维数组相反，即i，j互换。<br><br></p>
<h4 id="默认模板参数类型"><a href="#默认模板参数类型" class="headerlink" title="默认模板参数类型"></a>默认模板参数类型</h4><figure class="highlight nim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;class <span class="type">T1</span>,class <span class="type">T2</span> = <span class="built_in">int</span>&gt; class <span class="type">Topo</span><span class="meta">&#123;...&#125;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">Topo</span>&lt;double,double&gt; m1;</span><br><span class="line"><span class="type">Topo</span>&lt;double&gt;m2;</span><br></pre></td></tr></table></figure>
<br>

<h4 id="模板的具体化"><a href="#模板的具体化" class="headerlink" title="模板的具体化"></a>模板的具体化</h4><p>如果有多个模板，编译器会首先选择具体化最高的模板。</p>
<h5 id="隐式实例化"><a href="#隐式实例化" class="headerlink" title="隐式实例化"></a>隐式实例化</h5><p>目前为止都是隐式实例化,声明对象后指出类型</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Array</span>&lt;<span class="type">double</span>,<span class="number">100</span>&gt; stuff;</span><br></pre></td></tr></table></figure>
<br>

<h5 id="显式实例化"><a href="#显式实例化" class="headerlink" title="显式实例化"></a>显式实例化</h5><p>修饰词用template</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> <span class="class"><span class="keyword">class</span> <span class="title">Array</span>&lt;</span>string,<span class="number">100</span>&gt;;</span><br></pre></td></tr></table></figure>
<br>

<h5 id="显式具体化"><a href="#显式具体化" class="headerlink" title="显式具体化"></a>显式具体化</h5><p>为特殊类型特化，需要对模板进行修改。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">SortedArray</span>&#123;</span></span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>泛式模板的T可以是数值，可以是类(需要定义T::opertor&gt;())，但是T不能是const char*(将会按照单个字符来排列)，这时就需要显式具体化模板<br><br></p>
<h5 id="部分具体化"><a href="#部分具体化" class="headerlink" title="部分具体化"></a>部分具体化</h5><p>即部分限制模板的通用性，比如指定一个具体的类型。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//general template </span></span><br><span class="line">  template &lt;<span class="keyword">class</span> <span class="symbol">T1,<span class="symbol">class</span></span> <span class="symbol">T2,<span class="symbol">class</span></span> <span class="symbol">T3</span>&gt;<span class="symbol">class</span> <span class="symbol">paris</span>&#123;&#125;;</span><br><span class="line"><span class="comment">//specialiazed template </span></span><br><span class="line">  template &lt;<span class="keyword">class</span> <span class="symbol">T1</span> &gt;<span class="symbol">class</span> <span class="symbol">paris</span>&lt;<span class="symbol">T1,<span class="symbol">int</span></span>&gt;&#123;&#125;;</span><br></pre></td></tr></table></figure>
<br>

<h4 id="成员模板"><a href="#成员模板" class="headerlink" title="成员模板"></a>成员模板</h4><p>模板可做结构，类和模板类成员。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tempmemb.cpp--- template members</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cout; </span><br><span class="line"><span class="keyword">using</span> std::endl; </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">beta</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">template</span> &lt;<span class="keyword">typename</span> V&gt; <span class="comment">// nested template class member </span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">hold</span></span></span><br><span class="line"><span class="class">	&#123;</span></span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		V val;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">hold</span>(V v = <span class="number">0</span>) : <span class="built_in">val</span>(v) &#123;&#125;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; cout &lt;&lt; val &lt;&lt; endl; &#125;</span><br><span class="line">		<span class="function">V <span class="title">Value</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> val; &#125;</span><br><span class="line">	&#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">beta</span>(T t, <span class="keyword">int</span> i) : <span class="built_in">q</span>(t), <span class="built_in">n</span>(i) &#123;&#125;</span><br><span class="line">	<span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; <span class="comment">// template method</span></span><br><span class="line">	<span class="function">U <span class="title">blab</span><span class="params">(U u, T t)</span> </span>&#123; <span class="keyword">return</span> (n.<span class="built_in">Value</span>() + q.<span class="built_in">Value</span>()) * u / t &#125;</span><br><span class="line">	<span class="keyword">void</span> <span class="built_in">Show</span>() <span class="keyword">const</span> &#123; q.<span class="built_in">show</span>(); n.<span class="built_in">show</span>(); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">beta&lt;<span class="keyword">double</span>&gt; <span class="title">guy</span><span class="params">(<span class="number">3.5</span>, <span class="number">3</span>)</span></span>; </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;T was set to double\n&quot;</span>; </span><br><span class="line">	guy.<span class="built_in">Show</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;V was set to T, which is-double, then V was set to int\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; guy.<span class="built_in">blab</span>(<span class="number">10</span>, <span class="number">2.3</span>) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;U was set to int\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; guy.<span class="built_in">blab</span>(<span class="number">10.0</span>, <span class="number">2.3</span>) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;U was set to double\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Done\n&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>
**上述定义将T，V和U作为模板参数，因为模板是嵌套的，必须如下声明：**
template<typename T>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;template<typename V>
而不能用这个方法：~~template<typename T，typename V>~~
<br>

<h4 id="模板作为参数"><a href="#模板作为参数" class="headerlink" title="模板作为参数"></a>模板作为参数</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// tempparm.cpp - templates as parameters </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stacktp.h&quot;</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">Thing</span> &gt;</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crab</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	Thing&lt;<span class="keyword">int</span>&gt; s1;</span><br><span class="line">	Thing&lt;<span class="keyword">double</span>&gt; s2; </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Crab</span> () &#123;&#125;;</span><br><span class="line">	<span class="comment">// assumes the thing class has pushd and pop() members</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">double</span> x)</span> </span>&#123; <span class="keyword">return</span> sl.<span class="built_in">push</span>(a) &amp;&amp; s2.<span class="built_in">push</span>(x); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">(<span class="keyword">int</span> &amp; a, <span class="keyword">double</span> &amp; x)</span> </span>&#123; <span class="keyword">return</span> sl.<span class="built_in">pop</span>(a) &amp;&amp; s2.<span class="built_in">pop</span>(x); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> std::cout;</span><br><span class="line">	<span class="keyword">using</span> std::cin;</span><br><span class="line">	<span class="keyword">using</span> std::endl;</span><br><span class="line">	Crab&lt;Stack&gt; nebula;</span><br><span class="line">	<span class="comment">// Stack must match template &lt;typename T&gt; class thing </span></span><br><span class="line">	<span class="keyword">int</span> ni;</span><br><span class="line">	<span class="keyword">double</span> nb;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Enter int double pairs, such as 4 3.5 (0 0 to end):\n&quot;</span>;</span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; ni &gt;&gt; nb &amp;&amp; ni &gt; <span class="number">0</span> &amp;&amp; nb &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!nebula.<span class="built_in">push</span>(ni, nb))</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (nebula.<span class="built_in">pop</span>(ni, nb))</span><br><span class="line">		cout &lt;&lt; ni &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; nb &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Done.\n&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<br>

<h4 id="模板类和友元"><a href="#模板类和友元" class="headerlink" title="模板类和友元"></a>模板类和友元</h4><p>模板的友元分为3类：<br>1.非模板友元<br>2.约束模板友元<br>3.非约束模板友元<br><br><br></p>
<h5 id="非模板友元"><a href="#非模板友元" class="headerlink" title="非模板友元"></a>非模板友元</h5><p>格式如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HasFriend</span>&lt;</span><span class="keyword">int</span>&gt;&#123;</span><br><span class="line">      <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">report</span> <span class="params">(HasFriend&lt;T&gt; &amp;)</span></span>;</span><br><span class="line">      ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h5 id="模板类的约束模板友元"><a href="#模板类的约束模板友元" class="headerlink" title="模板类的约束模板友元"></a>模板类的约束模板友元</h5><p>首先在类定义里声明模板，然后在函数定义里再次声明友元</p>
<p>&lt;&gt;指出这是模板具体化，report可以省略因为可以从参数来判断，<br>counts()没有参数，因此必须使用参数模板语法<TT>来指明其具体化，TT指的是HasFriendT类的参数类型。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">counts</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">report</span><span class="params">(T &amp;)</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">hasfriendT</span>&#123;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">void</span> counts&lt;TT&gt;();</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">void</span> report&lt;&gt;(hasfriendT&lt;TT&gt; &amp;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>假设声明了   HasFriendT<int> squack；<br>编译器将用int代替<TT></p>
<h5 id="非约束模板友元"><a href="#非约束模板友元" class="headerlink" title="非约束模板友元"></a>非约束模板友元</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">manyfriendT</span>&#123;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> C,<span class="keyword">typename</span> D&gt;<span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">(C &amp;,D &amp;)</span></span>;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">void</span> report&lt;&gt;(hasfriendT&lt;T T&gt;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h4 id="模板别名"><a href="#模板别名" class="headerlink" title="模板别名"></a>模板别名</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line">   <span class="keyword">using</span>  arrtype = std::array&lt;T,<span class="number">12</span>&gt;;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>C++PrimerPlus</category>
      </categories>
  </entry>
  <entry>
    <title>C　PrimerPlus(5) 13类继承与接口</title>
    <url>/WestRoute.github.io/2021/09/24/c++05Inherit/</url>
    <content><![CDATA[<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>接口与实现</p>
<blockquote><p>使用公有继承时，类可以继承接口，可能还有实现（基类的纯虚函数提供接口，但不提供实现）\n<br>获得接口是is-a关系的组成部分。\n<br>而使用组合，类可以获得实现，但不能获得接口。不继承接口是has-a关系的组成部分。\n</p>
</blockquote>
<span id="more"></span>
<br>

<p><strong>而使用组合，类可以获得实现，但不能获得接口。</strong>:组合通过object.function()引用。<br><br><br></p>
<h3 id="派生类"><a href="#派生类" class="headerlink" title="派生类"></a>派生类</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Circle</span> ：<span class="symbol">public</span> <span class="symbol">Ellipse</span></span><br></pre></td></tr></table></figure>
<!--more-->
<p>&nbsp;&nbsp;&nbsp;&nbsp;抽象类（ABC，abstract）必须包含一个<strong>纯虚函数</strong>（virtual）。<br>基类指针可以访问派生类对象，但是不能访问仅属于派生类的元素，这时候我们用虚函数来调用子类的这个函数。<br>纯虚函数则是用来实现接口。</p>
<p>虚类，即含有虚函数但不含有纯虚函数的类。<br>抽象类，即含有纯虚函数和非虚函数的类。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;基类使用动态分配内存，并重新定义赋值和复制构造函数，派生类也是用new时必须为派生类定义显示的析构函数、复制构造函数和赋值构造函数。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;派生类</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">hasDMA</span> :<span class="symbol">public</span> <span class="symbol">baseDMA</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">       char* style;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;&nbsp;定义派生类独有的析构函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">baeDMA::~<span class="function"><span class="title">baseDMA</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> []  label;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hase DMA::~<span class="function"><span class="title">hasDMA</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> [] style;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当派生类想要生成基类的temp-copy时无法访问基类数据，派生类的复制构造函数必须<strong>调用</strong>基类的复制构造函数来处理共享的基类数据</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">hasDMA::<span class="built_in">hasDMA</span>(<span class="keyword">const</span> hasDMA &amp;hs): <span class="built_in">baseDMA</span>(hs)&#123;</span><br><span class="line">    style=<span class="keyword">new</span> <span class="keyword">char</span>[std::<span class="built_in">strlen</span>(hs.style)+<span class="number">1</span>];</span><br><span class="line">    std::<span class="built_in">strcpy</span>(style,hs.style);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;派生类赋值构造函数则是需要通过显式调用.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//baseClass</span></span><br><span class="line">baseDMA &amp; baseDMA::<span class="keyword">operator</span>=(<span class="keyword">const</span> baseDMA &amp;rs)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>==&amp;rs) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">delete</span> [] label;</span><br><span class="line">    label=<span class="keyword">new</span> <span class="keyword">char</span>[std::<span class="built_in">strlen</span>(hs.style)+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    std::<span class="built_in">strcpy</span>(label,rs.label);</span><br><span class="line">    rating=rs.rating;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//stance</span></span><br><span class="line">hasDMA &amp; hasDMA::<span class="keyword">operator</span>=(<span class="keyword">const</span> hasDMA &amp;hs)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>==&amp;hs) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    baseDMA::<span class="keyword">operator</span>=(hs);</span><br><span class="line">    <span class="keyword">delete</span> [] label;</span><br><span class="line">    label=<span class="keyword">new</span> <span class="keyword">char</span>[std::<span class="built_in">strlen</span>(hs.style)+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    std::<span class="built_in">strcpy</span>(label,rs.label);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>dma.h</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> DMA_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DMA_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//  Base Class Using DMA</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baseDMA</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span> * label;</span><br><span class="line">    <span class="keyword">int</span> rating;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">baseDMA</span>(<span class="keyword">const</span> <span class="keyword">char</span> * l = <span class="string">&quot;null&quot;</span>, <span class="keyword">int</span> r = <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">baseDMA</span>(<span class="keyword">const</span> baseDMA &amp; rs);</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">baseDMA</span>();</span><br><span class="line">    baseDMA &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> baseDMA &amp; rs);</span><br><span class="line">    <span class="keyword">friend</span> std::ostream &amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream &amp; os, </span><br><span class="line">                                     <span class="keyword">const</span> baseDMA &amp; rs);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// derived class without DMA</span></span><br><span class="line"><span class="comment">// no destructor needed</span></span><br><span class="line"><span class="comment">// uses implicit copy constructor</span></span><br><span class="line"><span class="comment">// uses implicit assignment operator</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lacksDMA</span> :</span><span class="keyword">public</span> baseDMA</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> &#123;</span> COL_LEN = <span class="number">40</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> color[COL_LEN];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">lacksDMA</span>(<span class="keyword">const</span> <span class="keyword">char</span> * c = <span class="string">&quot;blank&quot;</span>, <span class="keyword">const</span> <span class="keyword">char</span> * l = <span class="string">&quot;null&quot;</span>,</span><br><span class="line">              <span class="keyword">int</span> r = <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">lacksDMA</span>(<span class="keyword">const</span> <span class="keyword">char</span> * c, <span class="keyword">const</span> baseDMA &amp; rs);</span><br><span class="line">    <span class="keyword">friend</span> std::ostream &amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream &amp; os, </span><br><span class="line">                                     <span class="keyword">const</span> lacksDMA &amp; rs);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// derived class with DMA</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hasDMA</span> :</span><span class="keyword">public</span> baseDMA</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span> * style;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">hasDMA</span>(<span class="keyword">const</span> <span class="keyword">char</span> * s = <span class="string">&quot;none&quot;</span>, <span class="keyword">const</span> <span class="keyword">char</span> * l = <span class="string">&quot;null&quot;</span>,</span><br><span class="line">              <span class="keyword">int</span> r = <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">hasDMA</span>(<span class="keyword">const</span> <span class="keyword">char</span> * s, <span class="keyword">const</span> baseDMA &amp; rs);</span><br><span class="line">    <span class="built_in">hasDMA</span>(<span class="keyword">const</span> hasDMA &amp; hs);</span><br><span class="line">    ~<span class="built_in">hasDMA</span>();</span><br><span class="line">    hasDMA &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> hasDMA &amp; rs);  </span><br><span class="line">    <span class="keyword">friend</span> std::ostream &amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream &amp; os, </span><br><span class="line">                                     <span class="keyword">const</span> hasDMA &amp; rs);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p><br><br><br>dma.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;dma.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="comment">// baseDMA methods</span></span><br><span class="line">baseDMA::<span class="built_in">baseDMA</span>(<span class="keyword">const</span> <span class="keyword">char</span> * l, <span class="keyword">int</span> r)</span><br><span class="line">&#123;</span><br><span class="line">    label = <span class="keyword">new</span> <span class="keyword">char</span>[std::<span class="built_in">strlen</span>(l) + <span class="number">1</span>];</span><br><span class="line">    std::<span class="built_in">strcpy</span>(label, l);</span><br><span class="line">    rating = r;</span><br><span class="line">&#125;</span><br><span class="line">baseDMA::<span class="built_in">baseDMA</span>(<span class="keyword">const</span> baseDMA &amp; rs)</span><br><span class="line">&#123;</span><br><span class="line">    label = <span class="keyword">new</span> <span class="keyword">char</span>[std::<span class="built_in">strlen</span>(rs.label) + <span class="number">1</span>];</span><br><span class="line">    std::<span class="built_in">strcpy</span>(label, rs.label);</span><br><span class="line">    rating = rs.rating;</span><br><span class="line">&#125;</span><br><span class="line">baseDMA::~<span class="built_in">baseDMA</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> [] label;</span><br><span class="line">&#125;</span><br><span class="line">baseDMA &amp; baseDMA::<span class="keyword">operator</span>=(<span class="keyword">const</span> baseDMA &amp; rs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;rs)</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">delete</span> [] label;</span><br><span class="line">    label = <span class="keyword">new</span> <span class="keyword">char</span>[std::<span class="built_in">strlen</span>(rs.label) + <span class="number">1</span>];</span><br><span class="line">    std::<span class="built_in">strcpy</span>(label, rs.label);</span><br><span class="line">    rating = rs.rating;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream &amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream &amp; os, <span class="keyword">const</span> baseDMA &amp; rs)</span><br><span class="line">&#123;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;Label: &quot;</span> &lt;&lt; rs.label &lt;&lt; std::endl;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;Rating: &quot;</span> &lt;&lt; rs.rating &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// lacksDMA methods</span></span><br><span class="line">lacksDMA::<span class="built_in">lacksDMA</span>(<span class="keyword">const</span> <span class="keyword">char</span> * c, <span class="keyword">const</span> <span class="keyword">char</span> * l, <span class="keyword">int</span> r)</span><br><span class="line">    : <span class="built_in">baseDMA</span>(l, r)</span><br><span class="line">&#123;</span><br><span class="line">    std::<span class="built_in">strncpy</span>(color, c, <span class="number">39</span>);</span><br><span class="line">    color[<span class="number">39</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">lacksDMA::<span class="built_in">lacksDMA</span>(<span class="keyword">const</span> <span class="keyword">char</span> * c, <span class="keyword">const</span> baseDMA &amp; rs)</span><br><span class="line">    : <span class="built_in">baseDMA</span>(rs)</span><br><span class="line">&#123;</span><br><span class="line">    std::<span class="built_in">strncpy</span>(color, c, COL_LEN - <span class="number">1</span>);</span><br><span class="line">    color[COL_LEN - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::ostream &amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream &amp; os, <span class="keyword">const</span> lacksDMA &amp; ls)</span><br><span class="line">&#123;</span><br><span class="line">    os &lt;&lt; (<span class="keyword">const</span> baseDMA &amp;) ls;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;Color: &quot;</span> &lt;&lt; ls.color &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// hasDMA methods</span></span><br><span class="line">hasDMA::<span class="built_in">hasDMA</span>(<span class="keyword">const</span> <span class="keyword">char</span> * s, <span class="keyword">const</span> <span class="keyword">char</span> * l, <span class="keyword">int</span> r)</span><br><span class="line">         : <span class="built_in">baseDMA</span>(l, r)</span><br><span class="line">&#123;</span><br><span class="line">    style = <span class="keyword">new</span> <span class="keyword">char</span>[std::<span class="built_in">strlen</span>(s) + <span class="number">1</span>];</span><br><span class="line">    std::<span class="built_in">strcpy</span>(style, s);</span><br><span class="line">&#125;</span><br><span class="line">hasDMA::<span class="built_in">hasDMA</span>(<span class="keyword">const</span> <span class="keyword">char</span> * s, <span class="keyword">const</span> baseDMA &amp; rs)</span><br><span class="line">         : <span class="built_in">baseDMA</span>(rs)</span><br><span class="line">&#123;</span><br><span class="line">    style = <span class="keyword">new</span> <span class="keyword">char</span>[std::<span class="built_in">strlen</span>(s) + <span class="number">1</span>];</span><br><span class="line">    std::<span class="built_in">strcpy</span>(style, s);</span><br><span class="line">&#125;</span><br><span class="line">hasDMA::<span class="built_in">hasDMA</span>(<span class="keyword">const</span> hasDMA &amp; hs)</span><br><span class="line">         : <span class="built_in">baseDMA</span>(hs)  <span class="comment">// invoke base class copy constructor</span></span><br><span class="line">&#123;</span><br><span class="line">    style = <span class="keyword">new</span> <span class="keyword">char</span>[std::<span class="built_in">strlen</span>(hs.style) + <span class="number">1</span>];</span><br><span class="line">    std::<span class="built_in">strcpy</span>(style, hs.style);</span><br><span class="line">&#125;</span><br><span class="line">hasDMA::~<span class="built_in">hasDMA</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> [] style;</span><br><span class="line">&#125;</span><br><span class="line">hasDMA &amp; hasDMA::<span class="keyword">operator</span>=(<span class="keyword">const</span> hasDMA &amp; hs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;hs)</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    baseDMA::<span class="keyword">operator</span>=(hs);  <span class="comment">// copy base portion</span></span><br><span class="line">    <span class="keyword">delete</span> [] style;         <span class="comment">// prepare for new style</span></span><br><span class="line">    style = <span class="keyword">new</span> <span class="keyword">char</span>[std::<span class="built_in">strlen</span>(hs.style) + <span class="number">1</span>];</span><br><span class="line">    std::<span class="built_in">strcpy</span>(style, hs.style);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream &amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream &amp; os, <span class="keyword">const</span> hasDMA &amp; hs)</span><br><span class="line">&#123;</span><br><span class="line">    os &lt;&lt; (<span class="keyword">const</span> baseDMA &amp;) hs;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;Style: &quot;</span> &lt;&lt; hs.style &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><br><br></p>
<h3 id="const的位置与用法"><a href="#const的位置与用法" class="headerlink" title="const的位置与用法"></a>const的位置与用法</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;保证<span style="background-color:#ffcccb">参数</span>不被修改</p>
<figure class="highlight nim"><table><tr><td class="code"><pre><span class="line"><span class="type">Star</span>::star(<span class="keyword">const</span> <span class="built_in">char</span> *s)<span class="meta">&#123;...&#125;</span></span><br><span class="line">//即使时数组指针也无法修改</span><br></pre></td></tr></table></figure>
<p><br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;保证<span style="background-color:#ffcccb">调用对象</span>不被修改</p>
<figure class="highlight nim"><table><tr><td class="code"><pre><span class="line"><span class="built_in">void</span> <span class="type">Star</span>::show() <span class="keyword">const</span> <span class="meta">&#123;...&#125;</span></span><br><span class="line">//即this.的所有参数无法修改</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;也可以放于返回值之前，意味着可以初始化返回对象中的变量，但无法修改返回对象的数据</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>C++PrimerPlus</category>
      </categories>
  </entry>
  <entry>
    <title>C　PrimerPlus(4) 11使用类12类的动态内存</title>
    <url>/WestRoute.github.io/2021/09/23/c++04objectAndClass/</url>
    <content><![CDATA[<h3 id="重载运算符"><a href="#重载运算符" class="headerlink" title="重载运算符"></a>重载运算符</h3><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Time</span> <span class="keyword">Time</span>::operator+(const <span class="keyword">Time</span> &amp;t)const&#123;</span><br><span class="line">    <span class="keyword">Time</span> <span class="built_in">sum</span>;</span><br><span class="line">    <span class="built_in">sum</span>.minutes = minutes + t.minutes;</span><br><span class="line">    <span class="built_in">sum</span>.hours = hours + t.hours+su.minutes/<span class="number">60</span>;</span><br><span class="line">    <span class="built_in">sum</span>.minutes %= <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h3><p>通过让函数称为类的友元，可以赋予该函数与类的成员函数相同的访问权限<br>符号重载实现B<em>2.78， 友元的符号重载实现2.78</em>B<br>&nbsp;&nbsp;&nbsp;&nbsp;1.将友元函数的声明放入类声明中   2.不要再定义函数时加上friend</p>
<figure class="highlight nim"><table><tr><td class="code"><pre><span class="line"><span class="type">Time</span> operator:(double m,<span class="keyword">const</span> <span class="type">Time</span> &amp;t)&#123;</span><br><span class="line">    <span class="type">Time</span> <span class="literal">result</span>;</span><br><span class="line">    long totalminutes = t.hours*m*<span class="number">60</span>  +  t.minutes*m</span><br><span class="line">    <span class="literal">result</span>.minutes = totalminutes%<span class="number">60</span>;</span><br><span class="line">    <span class="literal">result</span>.hours = totalminutes/<span class="number">60</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><br><br><br><br></p>
<h3 id="类的动态内存"><a href="#类的动态内存" class="headerlink" title="类的动态内存"></a>类的动态内存</h3><p> &nbsp;&nbsp;&nbsp;&nbsp;<strong>类对象作为函数参数调用时，将会产生对象的副本，而这个个副本是调用类中的拷贝构造函数实现的，如果类中没有自定义拷贝构造，编译器会自动生成一个缺省的函数，该函数有以下特点：</strong><br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、对于基本类型的成员变量，按字节复制<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、对于类类型的成员变量，将自动调用相应类的拷贝函数来初始化<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3、指针只是简单的赋值，而不会自动分配内存<br><br><br> &nbsp;&nbsp;&nbsp;&nbsp;当退出该函数时，副本将调用析构函数，删除该指针，指针所指向内存也已被释放。将原始对象只保留一个指针值。当该类再次调用析构函数时会出现double free的错误。<br> 解决方法：<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、自定义拷贝函数<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、将对象作为引用传递</p>
<p><br><br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;特殊成员函数：默认构造函数，默认析构函数，复制构造函数，赋值运算函数，地址运算函数<br><br></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;复制构造函数：创建一个新对象并将其初始化一个 <strong>现有对象</strong>，参数为指向类对象的常量。<strong>按值进行复制</strong></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;NULL是表示空指针的C语言宏。</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>C++PrimerPlus</category>
      </categories>
  </entry>
  <entry>
    <title>C PrimerPlus(3) 函数与命名空间</title>
    <url>/WestRoute.github.io/2021/09/22/c++03funcAndNamespace/</url>
    <content><![CDATA[<h3 id="8-5显式具体化"><a href="#8-5显式具体化" class="headerlink" title="8.5显式具体化"></a>8.5显式具体化</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;显式具体化：可以提供具体化函数定义。</p>
<span id="more"></span>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// non template function prototype</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(job&amp;,job&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//template prototype</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(T &amp;,T &amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//explicit specialization for the job type</span></span><br><span class="line"><span class="comment">//程序选择时，显式具体化优先于第二个模板生成</span></span><br><span class="line"><span class="keyword">template</span> &lt;&gt; <span class="keyword">void</span> Swap&lt;job&gt;(job &amp;,job &amp;);</span><br></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;&nbsp;习题8.8：操作string，输入字符转成大写。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="9-1内存模型和名称空间"><a href="#9-1内存模型和名称空间" class="headerlink" title="9.1内存模型和名称空间"></a>9.1内存模型和名称空间</h3><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>C++PrimerPlus</category>
      </categories>
  </entry>
  <entry>
    <title>C PrimerPlus(2) string与char[]、char*</title>
    <url>/WestRoute.github.io/2021/09/21/c++02string/</url>
    <content><![CDATA[<h3 id="c语言"><a href="#c语言" class="headerlink" title="c语言"></a>c语言</h3><p>printf只能用char*型，所以需要转换成string型。<br><code>str.c_str()</code></p>
<span id="more"></span>
<h4 id="string-h-函数库"><a href="#string-h-函数库" class="headerlink" title="string.h 函数库"></a>string.h 函数库</h4><p><strong>连接文字符</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;char *strcat(char *s, chat *a);<br>&nbsp;&nbsp;&nbsp;&nbsp;char *strncat(char *s, chat *a, int n);<br><strong>比较</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;int strcmp(char *s, chat *t);<br>&nbsp;&nbsp;&nbsp;&nbsp;int strncmp(char *s, chat *t, int n);<br><strong>复制</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;char *strcpy(char *d, chat *s);<br>&nbsp;&nbsp;&nbsp;&nbsp;char *strncpy(char *d, chat *s, int n);<br><strong>求长</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;int strlen(chat *s);<br><strong>位置</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;char *strchr(chat *s, int c);<br>&nbsp;&nbsp;&nbsp;&nbsp;char *strrchr(chat *s, int c);<br>&nbsp;&nbsp;&nbsp;&nbsp;char *strstr(chat *s, char *ss);    </p>
<h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><p>方便程度：  char[] &gt; char* &gt; string</p>
<h4 id="使用-char-注意-‘-0’"><a href="#使用-char-注意-‘-0’" class="headerlink" title="使用 char[] 注意 ‘\0’"></a>使用 char[] 注意 ‘\0’</h4><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str1[] = <span class="string">&quot;DNA&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> str2[] = &#123;<span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="char-转换成-string"><a href="#char-转换成-string" class="headerlink" title="char[] 转换成 string"></a>char[] 转换成 string</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> arr[] = <span class="string">&quot;CGTCAAACGG&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::string <span class="title">dna_seq</span><span class="params">(arr, <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]))</span></span>;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; dna_seq &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// CGTCAAACGG</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="char-转换成-string-1"><a href="#char-转换成-string-1" class="headerlink" title="char* 转换成 string"></a>char* 转换成 string</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* char_ptr = <span class="string">&quot;CGTCAAACGG&quot;</span>;</span><br><span class="line"></span><br><span class="line">    std::string dna_seq = std::<span class="built_in">string</span>(char_ptr);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; dna_seq &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// CGTCAAACGG</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="string可以用-0-来访问"><a href="#string可以用-0-来访问" class="headerlink" title="string可以用 [0] 来访问"></a>string可以用 [0] 来访问</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function">string <span class="title">change</span><span class="params">(string &amp;str)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter a string (q to quit): &quot;</span>;</span><br><span class="line">    string str;</span><br><span class="line">    <span class="built_in">getline</span>(cin, str);</span><br><span class="line">    <span class="keyword">while</span> (str != <span class="string">&quot;q&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        str = <span class="built_in">change</span>(str);</span><br><span class="line">        cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Next string (q to quit): &quot;</span>;</span><br><span class="line">        <span class="built_in">getline</span>(cin, str);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Bye.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">string <span class="title">change</span><span class="params">(string &amp;str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; str[i]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        str[i] = <span class="built_in">toupper</span>(str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>C++PrimerPlus</category>
      </categories>
  </entry>
  <entry>
    <title>C PrimerPlus(1) 对象与类</title>
    <url>/WestRoute.github.io/2021/09/20/c++01class/</url>
    <content><![CDATA[<h3 id="对象与类"><a href="#对象与类" class="headerlink" title="对象与类"></a>对象与类</h3><p>需要同时编译两个文件，即：</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">g</span>++ <span class="comment">bank</span><span class="string">.</span><span class="comment">cpp</span> <span class="comment">usebank</span><span class="string">.</span><span class="comment">cpp</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>成员函数</p>
<p><strong>内联</strong> 内联函数是代码被插入到调用者代码处的函数。在C++中，在类的内部定义了函数体的函数，被默认为是内联函数。而不管你是否有inline关键字。 </p>
<p><strong>私有成员函数</strong>  在类定义文件中定义。</p>
<p><strong>构造函数</strong>  类的构造函数是类的一种特殊的成员函数，它会在每次创建类的新对象时执行。构造函数的名称与类的名称是完全相同的，并且不会返回任何类型，也不会返回 void。构造函数可用于为某些成员变量设置初始值。</p>
<p><strong>析构函数</strong>  在每次删除所创建的对象时执行。析构函数的名称与类的名称是完全相同的，只是在前面加了个波浪号（~）作为前缀，它不会返回任何值，也不能带有任何参数。析构函数有助于在跳出程序（比如关闭文件、释放内存等）前释放资源。</p>
<h4 id="编程练习题第6问"><a href="#编程练习题第6问" class="headerlink" title="编程练习题第6问"></a>编程练习题第6问</h4><!--more-->

<p>six.h</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SIX_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIX_H_</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Move</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> x;</span><br><span class="line">    <span class="keyword">double</span> y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Move</span>(<span class="keyword">double</span> a = <span class="number">0.0</span>, <span class="keyword">double</span> b = <span class="number">0.0</span>);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showmove</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">Move <span class="title">add</span><span class="params">(<span class="keyword">const</span> Move &amp;m)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">(<span class="keyword">double</span> a = <span class="number">0.0</span>, <span class="keyword">double</span> b = <span class="number">0.0</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>six.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;six.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Move::<span class="built_in">Move</span>(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span><br><span class="line">&#123;</span><br><span class="line">    x = a;</span><br><span class="line">    y = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Move::showmove</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; x &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;y = &quot;</span> &lt;&lt; y &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Move <span class="title">Move::add</span><span class="params">(<span class="keyword">const</span> Move &amp;m)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Move temp;</span><br><span class="line">    temp.x = m.x + <span class="keyword">this</span>-&gt;x; <span class="comment">//加上调用对象的x值;</span></span><br><span class="line">    temp.y = m.y + <span class="keyword">this</span>-&gt;y; <span class="comment">//加上调用对象的y值;</span></span><br><span class="line">    <span class="keyword">return</span> temp;            <span class="comment">//返回值为一个新对象;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Move::reset</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = a;</span><br><span class="line">    y = b;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>testSix.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;six.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> std::cout;</span><br><span class="line">    <span class="keyword">using</span> std::endl;</span><br><span class="line">    Move temp;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Starting values:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    temp.<span class="built_in">showmove</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;After x + 2, y + 5:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    temp.<span class="built_in">reset</span>(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">    temp.<span class="built_in">showmove</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;After adding new object value:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    temp = temp.<span class="built_in">add</span>(temp); <span class="comment">//对象赋值;</span></span><br><span class="line">    temp.<span class="built_in">showmove</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="编程练习题第8问"><a href="#编程练习题第8问" class="headerlink" title="编程练习题第8问"></a>编程练习题第8问</h4><p>eight.h</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> EIGHT_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EIGHT_H_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Item;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">10</span>;</span><br><span class="line">    Item items[MAX];</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">List</span>();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add_data</span><span class="params">(Item item)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_empty</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_full</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(<span class="keyword">void</span> (*pf)(Item &amp;))</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>



<p>eight.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;eight.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">List::<span class="built_in">List</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;index = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">List::add_data</span><span class="params">(Item item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;items[index++] = item;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">List::is_empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> == index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">List::is_full</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> MAX == index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">List::visit</span><span class="params">(<span class="keyword">void</span> (*pf)(Item &amp;))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;index; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        (*pf)(<span class="keyword">this</span>-&gt;items[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>testEight.cpp</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;eight.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(Item &amp;item)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    Item temp;</span><br><span class="line">    List mylist;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The list include following functions:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a to add an number.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v to visit every number.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;q to exit the menu.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Please enter your choice: &quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; ch &amp;&amp; <span class="built_in">tolower</span>(ch) != <span class="string">&#x27;q&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (cin.<span class="built_in">get</span>() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">tolower</span>(ch) != <span class="string">&#x27;a&#x27;</span> &amp;&amp; <span class="built_in">tolower</span>(ch) != <span class="string">&#x27;v&#x27;</span>) <span class="comment">//处理错误选择;</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Please enter a, v or q: &quot;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (<span class="built_in">tolower</span>(ch))</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Please enter an number: &quot;</span>;</span><br><span class="line">            <span class="keyword">while</span> (!(cin &gt;&gt; temp)) <span class="comment">//处理错误非数值输入;</span></span><br><span class="line">            &#123;</span><br><span class="line">                cin.<span class="built_in">clear</span>();</span><br><span class="line">                <span class="keyword">while</span> (cin.<span class="built_in">get</span>() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Please enter an number again: &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mylist.<span class="built_in">is_full</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;The list is full. Can&#x27;t add new number.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                mylist.<span class="built_in">add_data</span>(temp);</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Add number &quot;</span> &lt;&lt; temp &lt;&lt; <span class="string">&quot; successfully.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;v&#x27;</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (mylist.<span class="built_in">is_empty</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;No number.\n&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Visit every number:&quot;</span> &lt;&lt; endl;</span><br><span class="line">                mylist.<span class="built_in">visit</span>(traverse);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\n\n\n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;The list include following functions:&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a to add an number.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;v to visit every number.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;q to exit the menu.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Please enter your choice: &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Bye.&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(Item &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; item &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h3 id="10-1对象与类"><a href="#10-1对象与类" class="headerlink" title="10.1对象与类"></a>10.1对象与类</h3><p>抽象方法 设计抽象类（通常称为 ABC）的目的，是为了给其他类提供一个可以继承的适当的基类。抽象类不能被用于实例化对象，它只能作为接口使用。如果试图实例化一个抽象类的对象，会导致编译错误。</p>
<p>虚方法</p>
<p>抽象方法和虚方法的区别<br>1.虚方法必须有实现部分，抽象方法没有提供实现部分，抽象方法是一种强制派生类覆盖的方法，否则派生类将不能被实例化。<br>2.抽象方法只能在抽象类中声明，虚方法不是。如果类包含抽象方法，那么该类也是抽象的，也必须声明类是抽象的。<br>3.抽象方法必须在派生类中重写，这一点和接口类似，虚方法不需要再派生类中重写。</p>
<p>静态联编 在编译时期完成的联编</p>
<p>动态联编 编译器生成能够在程序运行时选择的正确的虚方法的代码</p>
<p><br><br><br><br><br><br><br><br></p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>C++PrimerPlus</category>
      </categories>
  </entry>
  <entry>
    <title>9月3日车祸</title>
    <url>/WestRoute.github.io/2021/09/20/%E8%BD%A6%E7%A5%B8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="73511aa6deb1ca48861d191c5f25eeb965d6ec5fda82990179c0abfa03011015">ddcb92ca3505b02d4d9056cce2d4f9b404e2fc0b4a6ba268c4ba4b8147b3124022b5c6a8bd8df6a8a0529344700c14d2ade5e9740da013719d9ee096bef2abc443dfe08b1acbfc84d19b5f5bf5768d9508efc81cc09fe57ec1a2f0ce49a0e74289449064963f12e3a7908975379e89884dede2080ea026abbfe61ce5ffa71e89063097eb51d073fd97dffbaa2247463259f4f807e117dc36119ba85d48ff9f3a0bb8b2ac0b833cfb0d16e88b38ed0a77dcc0a6317e3f280a3aeb62b4b7efe85a61fa01d073267eef587fca4f1cac56dc7cae092e83d290a2256ae7041697e45964cc55db591f2cd72e667fd5ea0fe94749667cc679468ec32be98f93ae6a70f9be9583cf67a4871aef2b76f0cf54de2403abf8742202255f4a6fbe97bc78ed0303fe1089af213576a77dd0981204d105c5242feba6f89c01611c8815bd5096b6c5f5c137834f389f4988cda12f5b6c6f404f2f6253d0a6daa6eb1e8f8459dd99e614b5efcacdfa7464fe1e4f1b0683e8894b44e03cc8fa1dcfb3f9fd0aa6fa2790be928863535d73670f9d36f570b8d9b9851f8a4c32d2835bff183730efed0a5e2b4b0cea6f0ad31871fe4fe77467ed</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">继续阅读需要输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/WestRoute.github.io/lib/hbe.js"></script><link href="/WestRoute.github.io/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
  </entry>
  <entry>
    <title>《哲学的故事》笔记</title>
    <url>/WestRoute.github.io/2021/09/01/%E5%93%B2%E5%AD%A6%E7%9A%84%E6%95%85%E4%BA%8B/</url>
    <content><![CDATA[<p>（美）杜兰特著；蒋剑峰，张程程译. —杭州：浙江大学出版社</p>
<span id="more"></span>
<h3 id="第一章-柏拉图"><a href="#第一章-柏拉图" class="headerlink" title="第一章 柏拉图"></a>第一章 柏拉图</h3><p>古希腊第一批天文学家<br>起初哲学是物理性质的</p>
<p> 并将民主贬斥为无能的虚伪 。从某种意义上当时的雅典几乎谈不上民主。奴隶。<br>伯罗奔尼撒战争（前431-前404） 赛提亚反对民主</p>
<p>苏格拉底<br>一个人只要不违法1妨碍他去做任何他想做的事情便是毫无理由的。这种离散式的个人主义大大削弱了雅典人民的个性。<br>《苏格拉底自辩篇》<br>1.伦理学<br>《理想国》摘录<br>正义是强者的利益<br>非正义受到谴责是因为谴责他的人怕自己吃苦头，而并非真的出于任何道德上的顾虑<br>按照自身的利益来展开赞扬和谴责，这样的正义是属于愚民的奴隶式道德。一个人的正正的美德是勇气和智慧。<br>雅典对外政策的帝国主义发展<br>2政治学问题<br>人口控制，素食主义，回归自然 犬儒派第欧根尼 圣西门，傅里叶，威廉莫里斯以及托尔斯泰<br>民主制度的可怕<br>3.心理学问题<br>政治心理学问题<br>每个人心中都潜藏着兽性<br>贪婪易妒好斗好色<br>我们必须有宗教<br>脱离家庭式个体主义</p>
<p>耶稣说道德是善待弱者<br>你才说道德是强者的英勇<br>柏拉图说道德是全体的有效和谐</p>
<p>俄共和柏拉图的理想国 责任稀释</p>
<p>柏拉图最欠缺的或许是赫拉克利特的变化意识：他过于焦急的想将这个和世界凝固成一幅静止的图画</p>
<h3 id="第二章-亚里士多德和希腊科学"><a href="#第二章-亚里士多德和希腊科学" class="headerlink" title="第二章  亚里士多德和希腊科学"></a>第二章  亚里士多德和希腊科学</h3><p>反柏拉图<br>【摘抄】<br>马其顿国王菲利普坚持要让自己的儿子接受最优质的教育，因为他已在其他各个方面为儿子设计了不可限量的前程。他于公元前356年征服了色雷斯，控制了当地的金矿，由此生产出的金子十倍于当时日渐衰败的劳里恩银矿运到雅典的银两；他的臣民是勤劳的农民和勇敢的战士，尚未被城市的浮华俘虏：这里将是数百个弱小城邦结合、形成政治上统一的大希腊的希望之地。菲利普对擅长艺术和学术创作的希腊人没有丝毫的同情，并将她的社会秩序一举击破；在这些零散城邦的首都中，他看到的不是令人窒息的文明或无与伦比的艺术，而是处处显露的商业腐败和政治混乱；他看到贪婪的商人和银行家将国家的重要资产据为己有，无能的政治家和善于诡辩的说客将自顾不暇的民众引向一个又一个灾难般的阴谋和战争，政党分裂阶级，阶级又聚变成森严的社会等级：这不是一个国家，菲利普说，而是一群鱼龙混杂、良莠不齐的个体——天才和奴隶。他要给这片混乱的土地带来秩序，将全希腊团结起来，将其建成强大的世界政治中心和根基。他在底比斯的幼年时期曾投到著名的伊巴密浓达[4]门下学习军事策略和市政管理；现在凭借无比的勇气和远大的志向，他将所学到的东西发挥得出神入化。公元前338年，他在克罗尼亚大败雅典人，并最终用锁链成功建立起统一的希腊。然而，正当高踞胜利宝座的他谋划着如何和儿子一起实施统治世界的下一步时，他被刺杀了。</p>
<p>逻辑学的创立</p>
<p>科学学派<br>希腊之前：天文学<br>赫拉克利特<br>亚里士多德和希腊科学 唯物主义决定论的原子学说<br>博学家 物理学家 生物学胚胎学 形而上学和上帝的本质————无为之王，什么都不做，英国女王<br>心理学（意志的自由和灵魂的不灭）和艺术的本质</p>
<p>政治学<br>共产主义和保守主义<br>婚姻和教育<br>民主制和贵族制<br>  民主制整体上仍旧不如贵族制，因为它建立在一个虚假的平等基础上<br>  立宪政府提供了可惜的结合<br>不以物喜亚里士多德<br>伦理学和幸福的本质<br>亚里士多德观察收集数据并分类，却得不出研究结果<br>亚里士多德认为理想化的生活就是正规的三段论，不可取</p>
<h3 id="第三章-弗朗西斯培根"><a href="#第三章-弗朗西斯培根" class="headerlink" title="第三章 弗朗西斯培根"></a>第三章 弗朗西斯培根</h3><p>从亚里士多德到文艺复兴<br>斯多葛学说 和 伊壁鸠鲁学说（崇尚克制，悲观主义者）<br>一个坦然接受失败 一个在快乐的怀抱中忘掉失败<br>两者都是关于征服与被奴役之下如何求得幸福的理论<br>恰好就像十九世纪，持有悲观的东方斯多葛主义的叔本华和持有消极的伊壁鸠鲁主义的勒南，象征着一败涂地的法国大革命与支离破碎的法国<br>叔本华认为个人意志无法战胜宇宙意志<br>对于一个敏感的人来说，无论是做主人还是做仆人都是困难重重<br>罗马哲学 无论是皇帝马可奥勒留还是努力爱比克泰斯，大多都属于芝诺学派</p>
<p>《论说文集》<br>知识不运用于行动便只是苍白无力的学术虚荣而已<br>手工业者讨厌学问，头脑简单之人敬仰学问，而真正的智慧之刃运用学问<br>创造新学科 社会心理学<br>培根爱的是哲学 不是科学。科学本身必须体验组织性。<br>【个人想法】我们大多数人都是更热爱哲学而非科学</p>
<p>《新工具》<br>谬误 种族偶像 洞穴偶像 市场偶像 剧场偶像<br>怀疑<br>单纯经验<br>假设，演绎和实验<br>评价<br>培根并没有超越前人<br>歌德说“一个人的短处来自于他的时代，一个人的优点来自他的自身”</p>
<h3 id="第四章-斯宾诺莎"><a href="#第四章-斯宾诺莎" class="headerlink" title="第四章 斯宾诺莎"></a>第四章 斯宾诺莎</h3><p>研究神学<br>他觉得《迷途指津》中更多的是迷途，鲜少有指津<br>莱布尼茨，洛克，贝克莱，休谟和康德发起的三百年的哲学战争<br>开除教籍<br>《神学政治论》<br>《知性改进论》<br>《伦理学》<br>斯宾诺莎体系三大关键词 实体属性和样式<br>【咚咚锵】你应该来编程<br>自然和上帝 物质和精神 理智和道德<br>他从把幸福快乐作为各种行为的目标开始，将快乐非常简单地界定为愉悦的存在和伤痛的消除。但是愉悦和痛是相关的，不是绝对的，它们不是既成的状态，而是转换的过程。“愉悦是人从一个相对不完美的状态”（完美也就是指圆满或者满足）“转换至一个更加完美的状态的过程”。“这其中包含着快乐，一个人的力量也因此得到增强。”[95]“伤痛则是一个人从比较完美的状态转至不那么完美的状态。我之所以说是转换，因为愉悦本身并不完美。如果一个人生来就拥有完美，那么他也将没有……愉悦的感觉。与之相反的情况就更显而易见了。”[96]所有的激情都是过客，所有的感情都会改变，它们或者更加接近或者更加远离圆满和力量。</p>
<p>尼采和斯宾诺莎 不支持谦卑</p>
<p>集大成者《政治论》</p>
<h3 id="第五章-伏尔泰和法国启蒙运动"><a href="#第五章-伏尔泰和法国启蒙运动" class="headerlink" title="第五章 伏尔泰和法国启蒙运动"></a>第五章 伏尔泰和法国启蒙运动</h3><p>哲学小说</p>
<h3 id="第六章-伊曼努尔康德和德国唯心主义"><a href="#第六章-伊曼努尔康德和德国唯心主义" class="headerlink" title="第六章 伊曼努尔康德和德国唯心主义"></a>第六章 伊曼努尔康德和德国唯心主义</h3><p>康德《纯粹理性批判》<br>休谟《人性论》<br>休谟认为，他已经证明了心灵不存在，科学亦不存在；心灵只是观念的排列和联结；我们认为的必然其实只是随时可能被推翻的偶然。康德认为，休谟的这些结论都是错误的，因为前提就已经错了。他反驳休谟说：假设所有的认识都来源于“独立的、不同的”感觉，那认识就不存在必然性，也不可能给予我们不变的确定结果；如此一来，你肯定不能指望“看到”你的心灵，即使是用内在感觉的双眼也不行。如果所有的认识都来自感官，来自独立的外部世界，这个世界又是不稳定的，那认识的绝对可靠性就是不可能的。但是如果有些认识是独立于感官经验之外的呢？比如有些知识的可靠性先于我们的经验——即先验。这样的话，绝对真理和绝对科学就是可能的，难道不是吗？存在这样的绝对知识吗？这就是《纯粹理性批判》讨论的问题。</p>
<p>先验感性论<br>《实践理性批判》</p>
<p>论宗教和理性《判断力批判》《纯粹理性范围内的宗教》<br>论政治与持久和平《论联系全宇宙政治史观念的政治秩序的自然原则》</p>
<p>评论<br>英国的皮尔逊，德国的马赫，法国的亨利庞加莱等一些人的研究都更赞同休谟而非康德</p>
<p>黑格尔</p>
<h3 id="第七章-叔本华"><a href="#第七章-叔本华" class="headerlink" title="第七章 叔本华"></a>第七章 叔本华</h3><p>《作为意志和表象的世界》<br>理性会疲劳，意志永远不会<br>意志是人的本质</p>
<p>卢梭之后 理智主义开始衰落，康德之后半死不活，叔本华之后理智主义彻底告别了世界</p>
<h3 id="第八章-赫伯特斯宾塞"><a href="#第八章-赫伯特斯宾塞" class="headerlink" title="第八章 赫伯特斯宾塞"></a>第八章 赫伯特斯宾塞</h3><p>孕育出实证主义运动的奠基人<br>哲学并非异于科学，哲学以提升人生为目的，是对一切科学的协助，综合<br>根据培根的思想传统，思想的对象是事物，而心灵的对象是物质；霍布斯的唯物论、洛克的感觉论、休谟的怀疑论、边沁[1]的功利主义，都是同一主题的不同变奏，这个主题就是现实而又忙碌的生活。</p>
<p>十七世纪，数学主宰哲学，于是出现了笛卡尔、霍布斯、斯宾诺莎、莱布尼茨、帕斯卡[12]；随着心理学的兴起，哲学界出现了贝克莱、休谟、孔狄亚克、康德；十九世纪，谢林、叔本华、斯宾塞、尼采、柏格森等哲学家扮演着主要角色，此时的哲学思想以生物学为背景。在这些时代里，影响最为深远的思想都是思想家成果的零碎片断，或多或少都有些晦涩；但是，每一种具有影响力的思想都与整理、阐述它们的思想家密不可分，正如“新大陆”以亚美利哥·韦斯普奇命名，因为亚美利哥绘制了一幅地图。赫伯特·斯宾塞是达尔文时代的韦斯普奇，从某种程度上来说，也许还是达尔文时代的哥伦布。</p>
<p>《综合哲学》《第一原理》 不可知论<br>《社会静力学》《社会学原理》<br>社会主义是军事国家和封建国家的产物<br>《伦理学原理》</p>
<p>批评<br>我们必须记住，斯宾塞是在两个时代的夹缝中生活的：他的政治思想形成于自由放任政策时代，并深受亚当·斯密的影响；而在他的晚年，英国正绞尽脑汁通过社会控制来纠正其对工业政权的滥用。斯宾塞不厌其烦地重申其反对国家干涉的立场，他反对任何由政府资助的教育，反对政府在金融诈骗方面对公民进行保护。[164]有一次他甚至还主张，对战争的运筹也应是私人的事，而不应是国家的事。[165]斯宾塞所希望的，用威尔斯[166]的话说就是，“提升公众的懒散性，通过国家政策使这种懒散受到尊重”。斯宾塞亲自将手稿送到印刷厂，他不敢把稿子交给邮局，因为他对政府机构不抱任何信心。[167]他是一个个性极为强烈的人，无论何种情况都坚持独处，否则便会大发雷霆。在他看说，每一项新法案都是对个人自由的侵犯。</p>
<h3 id="第九章-弗里德里希尼采"><a href="#第九章-弗里德里希尼采" class="headerlink" title="第九章 弗里德里希尼采"></a>第九章 弗里德里希尼采</h3><p>崇拜叔本华</p>
<p>在罗马人（哪怕是一个普通民众）看来，所谓的美德便是男人气概、勇气、冒险和胆量。但在亚洲，尤其是在犹太人的脑海中，却孕育了另一种道德标准：遭受政治压迫的人们变得谦逊、无助、无私。实际上，这是在求助。在庶民道德的笼罩下，人们热爱安定与和平，厌恶冒险和权力；人们不再追求力量，他们乐于狡诈，人与人之间的报复不再公开，而是变得隐秘；怜悯代替了严厉，模仿代替了创新，人们不再因享有殊荣而自豪，而是无情地谴责自己的良心，因为荣誉只属于异教徒、罗马人、封建主和贵族，良心才属于犹太人、基督徒、资产阶级和大众。[74]从阿摩司[75]到耶稣，一大批能说会道的先知将奴隶阶层的思想发扬光大，使之几乎成为普世伦理观。于是，“俗世”和“肉体”成为罪恶的代名词，贫穷成了道德的象征。[76]</p>
<p>而耶稣则将这种价值标准推至顶峰。在他看来，人人都拥有平等的价值，享有平等的权利。</p>
<p>后来，耶稣的教义又发展出民主思想、功利主义、社会主义。于是，人们开始根据庶民哲学、渐进的平等化和庸俗化、颓废和堕落的生活来定义进步。[77]颓废生活的最后一幕便是对怜悯慈悲、自我牺牲的赞美，对罪大恶极者不理性的安慰，以及“人类社会排泄功能的丧失”。积极的同情是可取的，而怜悯则是一种麻痹心灵的奢侈品，对那些无可救药、昏庸无能、穷凶极恶的废物，那些满是缺陷、活该害病、违法犯罪的畜生来说，怜悯则是浪费感情。怜悯隐含着粗俗，是一种侵犯，比如，“‘探望病人’是想到邻居无助之时，心生的一种类似性高潮的优越感”</p>
<p>颓废<br>因此，贵族是通往超人的必由之路。民主——“这种热衷于清点人数的制度”——必须尽早铲除。对所有高贵的人而言，废除民主的第一步便是毁灭基督教。民主始于基督的胜利；“第一位基督徒，在其本能最深处，是一位反对任何特权的叛逆者，他为了‘平等的权利’生活，并为了‘平等的权利’不懈斗争，要是在现代，他早就被流放到西伯利亚去了”。“如果他是你们当中最伟大的人，就让他成为你们的仆人吧”——这是一切政治智慧、一切健全头脑爱玩的颠覆游戏。的确，一个人在阅读《福音书》的时候，会感觉自己像是沉浸在俄国小说的氛围中；原来，《福音书》是对陀思妥耶夫斯基的剽窃。</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>杂文</category>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>《航空航天概论》笔记(1)</title>
    <url>/WestRoute.github.io/2021/09/01/%E8%88%AA%E7%A9%BA%E8%88%AA%E5%A4%A9%E6%A6%82%E8%AE%BA01/</url>
    <content><![CDATA[<script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML">
</script>
<script type="text/x-mathjax-config">
 MathJax.Hub.Config({
 tex2jax: {
 inlineMath: [['$', '$'] ],
 displayMath: [ ['$$','$$'], ["\\[","\\]"] ]
 }
 });
</script>
<div class="book">
    <div class="hpbook"><img src="/WestRoute.github.io/images/book/150.jpg"></div>

</div>

<p>&nbsp;<br>&nbsp;<br>&nbsp;<br>《航空航天概论》是1997年10月北京航空航天大学出版社出版的图书，作者是何庆芝。</p>
<span id="more"></span>
<br>
<br>
<br>
<br>
<br>

<h3 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h3><p>第二代超声速战斗机的代表机型有 <span style="background-color:#ADD8E6"></span><span style="background-color:#ADD8E6">米格21</span> <span style="background-color:#ADD8E6">F104</span><br>马赫3 <span style="background-color:#ADD8E6">米格21</span> <span style="background-color:#ADD8E6">SR-71</span><br>第一宇宙速度 第二 第三<br>F-80shooting star喷气式战斗机<br>第三代战斗机 <span style="background-color:#ADD8E6">F-15</span> <span style="background-color:#ADD8E6">Su-27</span> <span style="background-color:#ADD8E6">米格29</span><br>第四代战斗机 （银生能力 超声速巡航能力 推力矢量技术 超视距多目标攻击）<span style="background-color:#ADD8E6">F-35</span> <span style="background-color:#ADD8E6"> F-22</span> <span style="background-color:#ADD8E6">歼31</span> <span style="background-color:#ADD8E6"> 歼20</span> <span style="background-color:#ADD8E6">  F16 </span> <span style="background-color:#ADD8E6">米拉吉2000 </span><br>我国自行研制的具有完全自主知识产权的第三代战机是<span style="background-color:#ADD8E6">歼10</span><br><span style="background-color:#ffcccb">1961年</span> 加加林 首次进入太空<br>我国载人飞船的发射场 酒泉卫星发射场<br>低动态临近空间飞行器的飞行速度为 马赫数小于1<br>WW2著名飞机有 <span style="background-color:#ADD8E6">零式</span> <span style="background-color:#ADD8E6">  P-51（美）</span> <span style="background-color:#ADD8E6"> P-61（美）</span><br><span style="background-color:#ffcccb">2003年</span> 哥伦比亚号航天飞机失事<br><span style="background-color:#ffcccb">1947年</span> 美国X-1研究机首次突破音障<br><span style="background-color:#ffcccb">1968年</span> 苏联首次试飞超声速旅客机<br><span style="background-color:#ffcccb">1969年</span> 英法合作研制协和号超声速旅客机试飞成功<br>第1代超声速战斗机 <span style="background-color:#ADD8E6">歼6</span> <span style="background-color:#ADD8E6">  米格-19 </span> <span style="background-color:#ADD8E6"> F-100</span><br>第2代超声速战斗机 <span style="background-color:#ADD8E6">歼7</span> <span style="background-color:#ADD8E6"> 歼8</span> <span style="background-color:#ADD8E6">   米格-21</span> <span style="background-color:#ADD8E6"> F-104</span><br>美国<span style="background-color:#ADD8E6">F35</span>将代替<span style="background-color:#ADD8E6">F16</span><br>隐身技术：<br>&nbsp;&nbsp;&nbsp;1降低雷达波特征   外形隐身 采用倾斜式双立尾 应用吸收材料<br>&nbsp;&nbsp;&nbsp;2降低红外辐射特征   采用涡扇发动机 采用矩形二元喷管 发动机布置于机身或机翼上<br>&nbsp;&nbsp;&nbsp;3降低可见光特征<br>&nbsp;&nbsp;&nbsp;4降低声学特征<br>隐身飞机有<span style="background-color:#ADD8E6">F-22</span> <span style="background-color:#ADD8E6"> F-117</span> <span style="background-color:#ADD8E6"> B-2</span><br>前掠翼<span style="background-color:#ADD8E6">X29</span><br>飞得最高的 <span style="background-color:#ADD8E6">米格25</span><br>飞的最快的 <span style="background-color:#ADD8E6">SR-71</span><br>最大的客机 <span style="background-color:#ADD8E6">A380</span><br>第一个隐身飞机 <span style="background-color:#ADD8E6">F-117</span><br>隐身直升飞机 <span style="background-color:#ADD8E6">科曼奇</span><br>2015 国产大型客机C919<br>1998 国际空间站<br>中国自主研发的第一个真正意义上的太空实验室 天宫2号<br>地球静止轨道卫星</p>
<p>直升机的布局形式有 <code>单旋翼</code> <code>纵列双旋翼</code> <code>横列双旋翼</code> <code>共轴双旋翼</code><br>加油方式 <code>伸缩管式</code> <code>插头椎管式</code> <code>嵌入式</code> <code>对接式</code><br><span style="background-color:#ADD8E6">V-22 鱼鹰 侧转旋翼机</span><br>科索沃战争<br>旅行者号经历36年飞出太阳系</p>
<p>大气层：对流层 平流层 中间层 热层 散逸层<br>地球空间环境：季节 太阳活动程度 电子浓度变化 高能带电粒子辐射带（范艾伦辐射带）<br>行星际空间环境：太阳发射的电磁辐射 爆发性高能粒子辐射 稳定的等离子体流（太阳风）</p>
<hr>
<h3 id="第二章-飞行原理"><a href="#第二章-飞行原理" class="headerlink" title="第二章 飞行原理"></a>第二章 飞行原理</h3><h4 id="流动流体的物理量和参数"><a href="#流动流体的物理量和参数" class="headerlink" title="流动流体的物理量和参数"></a>流动流体的物理量和参数</h4><p>(1)流体的状态参数，可压缩性，声速和粘性<br><strong>流体的状态参数</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;密度、温度、压强<br><br></p>
<p><strong>可压缩性</strong>也称弹性<br><br></p>
<p><strong>声速计算公式</strong><br>$$ c=20 \sqrt{T} $$<br>T是空气中的热力学温度<br><strong>粘性</strong><br>摩擦有两种，外摩擦和内摩擦。<br>内摩擦即是粘性，内摩擦里F,相邻流动层的速度差Δv，接触面积ΔS，相邻两层的距离Δy，μ流体内摩擦系数［Pa·s］<br>$$ F=\mu\frac{\Delta x}{\Delta y} \Delta{S} $$</p>
<p><strong>流动雷诺数Re∞</strong><br>$$ Re_{\infty}=\rho_{\infty}\upsilon_{\infty} l/\mu_{\infty} $$<br>ρ∞，μ∞分别是飞行高度上大气的密度和动力粘度系数，l是飞机的尺寸特征，通常是飞机机长<br><br></p>
<p><strong>压力系数Cp</strong><br>$$ C_{p}=(p - p_{\infty})/\frac{1}{2}\rho_{\infty}\upsilon^{2}_{\infty} $$<br>ρ是指原前方测得的参数</p>
<p><strong>可压缩流体的沿流管的连续方程</strong><br>$$ \rho_{1}\upsilon_{1}A_{1} = \rho_{2}\upsilon_{2}A_{2} = \rho_{3}\upsilon_{3}A_{3} $$<br><strong>伯努利方程</strong><br>流体的总压等于静压与动压之和<br>马赫数最本质的作用是体现流体的被压缩的状态。<br>低速流体：<br>$$ \frac{1}{2}\upsilon_{1}^{2}+\frac{ p_{1} }{\rho}=\frac{1}{2}\upsilon_{2}^{2} + \frac{p_{2}}{\rho} $$<br><strong>风速管测速原理</strong><br><strong>低速、亚声速流动和声速流动的区别</strong><br>低速 收缩管道：增速，减压 扩张管道：减速，增压 壁面分离现象<br>亚声速流动 收缩管道：增速，减压 扩张管道：减速，增压<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;亚音速流动是分为两类的：马赫数小于0.3的低速流体视为不可压流体，而马赫数大于0.3的流体为的可压流体。<br>超声速 收缩管道：<span style="background-color:#ffcccb">减速，增压 </span>扩张管道：<span style="background-color:#ffcccb">增速，减压</span><br>拉瓦尔喷管 局部激波 脱体激波<br>单翼 反翼 立尾 正常式 鸭式 无尾式<br>变后掠翼飞机： 米格-23 狂风 F-14 B-1轰炸机</p>
<p><strong>马赫锥图</strong><br>$$ \sin\mu = c/\upsilon = 1/Ma $$</p>
<p><strong>外部绕流的区别，离体与附体激波</strong></p>
<h4 id="作用在飞机上的空气动力"><a href="#作用在飞机上的空气动力" class="headerlink" title="作用在飞机上的空气动力"></a>作用在飞机上的空气动力</h4><p>当给定飞机的外形、飞行高度和速度时，飞机马赫数=常数，飞行雷诺数=常数，而作用于飞机上的升力、阻力和俯仰力矩仅仅取决于飞行仰角α的大小。<br>升力特性曲线，极曲线（阻力特性曲线），俯仰力特性曲线<br><strong>雷诺实验，层流和蓄流</strong><br>&nbsp;&nbsp;变后掠翼飞机主要缺点： 转动及结构复杂 结构重量大 气动中心变化大<br>开普勒三大定律：椭圆定律 面积定律 调和定律</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>杂文</category>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>每月总结06 (2021/8)</title>
    <url>/WestRoute.github.io/2021/09/01/MonthlyRe06/</url>
    <content><![CDATA[<h1 id="八月总结"><a href="#八月总结" class="headerlink" title="八月总结"></a>八月总结</h1><p>最后一年暑假，阅片41部，读书13本</p>
<span id="more"></span>
<h3 id="影片"><a href="#影片" class="headerlink" title="影片"></a>影片</h3><table>
<thead>
<tr>
<th align="left">电影(41)</th>
<th align="left">观看日期</th>
<th align="center">评分(10)</th>
</tr>
</thead>
<tbody><tr>
<td align="left">史密斯游美京</td>
<td align="left">2021/8/1</td>
<td align="center">5</td>
</tr>
<tr>
<td align="left">魔术师</td>
<td align="left">2021/8/2</td>
<td align="center">4</td>
</tr>
<tr>
<td align="left">杰罗德游戏</td>
<td align="left">2021/8/3</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">象人</td>
<td align="left">2021/8/4</td>
<td align="center">5</td>
</tr>
<tr>
<td align="left">切尔诺贝利</td>
<td align="left">2021/8/5</td>
<td align="center">4</td>
</tr>
<tr>
<td align="left">左拉传</td>
<td align="left">2021/8/6</td>
<td align="center">5</td>
</tr>
<tr>
<td align="left">狂人皮埃罗</td>
<td align="left">2021/8/6</td>
<td align="center">5</td>
</tr>
<tr>
<td align="left">假面</td>
<td align="left">2021/8/8</td>
<td align="center">5</td>
</tr>
<tr>
<td align="left">后窗</td>
<td align="left">2021/8/8</td>
<td align="center">5</td>
</tr>
<tr>
<td align="left">回忆三部曲</td>
<td align="left">2021/8/9</td>
<td align="center">5</td>
</tr>
<tr>
<td align="left">第九道门</td>
<td align="left">2021/8/9</td>
<td align="center">4</td>
</tr>
<tr>
<td align="left">蜘蛛巢城</td>
<td align="left">2021/8/9</td>
<td align="center">4</td>
</tr>
<tr>
<td align="left">游戏规则</td>
<td align="left">2021/8/9</td>
<td align="center">5</td>
</tr>
<tr>
<td align="left">薇塔与弗吉尼亚</td>
<td align="left">2021/8/10</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">鱿鱼鲸</td>
<td align="left">2021/8/11</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">弗里达</td>
<td align="left">2021/8/12</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">邪不压正</td>
<td align="left">2021/8/13</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">大人物拿破仑</td>
<td align="left">2021/8/14</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">罗斯玛丽的婴儿</td>
<td align="left">2021/8/15</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">超人归来</td>
<td align="left">2021/8/16</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">一步之遥</td>
<td align="left">2021/8/16</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">自杀小队2</td>
<td align="left">2021/8/17</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">爱丽丝城市漫游记</td>
<td align="left">2021/8/18</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">机械师</td>
<td align="left">2021/8/18</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">末路狂花</td>
<td align="left">2021/8/18</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">赌博默示录</td>
<td align="left">2021/8/19</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">犹在镜中</td>
<td align="left">2021/8/19</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">四百击</td>
<td align="left">2021/8/20</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">异形</td>
<td align="left">2021/8/21</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">畸形人</td>
<td align="left">2021/8/22</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">战舰波将金号</td>
<td align="left">2021/8/23</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">恐惧吞噬灵魂</td>
<td align="left">2021/8/24</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">亚特兰大号</td>
<td align="left">2021/8/25</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">阿基尔，上帝的愤怒</td>
<td align="left">2021/8/26</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">现代启示录</td>
<td align="left">2021/8/27</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">体热</td>
<td align="left">2021/8/28</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">科学怪人的新娘</td>
<td align="left">2021/8/29</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">初吻</td>
<td align="left">2021/8/30</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">西部世界</td>
<td align="left">2021/8/30</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">东城梦魇</td>
<td align="left">2021/8/30</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">不良少女莫妮卡</td>
<td align="left">2021/8/31</td>
<td align="center">-</td>
</tr>
</tbody></table>
<h5 id="象人-畸形人："><a href="#象人-畸形人：" class="headerlink" title="象人/畸形人："></a>象人/畸形人：</h5><p>默片时期的演员要求表演动作夸张，演员出身马戏团的几率很大，所以早期经常会出现以马戏团的演员们为故事主角的电影，描写他们的背井离乡、贫穷、被人嘲弄的可怜样子。畸形人也是马戏团的一大成员。当故事中有人对这些异类们伸出慈爱的手的时候，这份温暖就穿过时间的河流，逆流而上，安慰了电脑前孤独的心灵。</p>
<p>从那个迷信、贫穷又愚昧的时代开始人类真的逐渐走向幸福了吗？<br>我觉得仅仅是一部分人富裕了，人类整体并没有进步。</p>
<h5 id="切尔诺贝利（HBO连续剧）："><a href="#切尔诺贝利（HBO连续剧）：" class="headerlink" title="切尔诺贝利（HBO连续剧）："></a>切尔诺贝利（HBO连续剧）：</h5><p>缓慢而恐惧。剧中科普核电站的知识，剧外，豆瓣上有很好的长评详细地罗列了剧中又体现但是没有文字写明的灾难现象。这才是一个好的电视剧该做的。        </p>
<p>无知者无畏，我从来不知道福岛核泄漏可怕在哪里，直到这次如此直观地用影向我展示了放射性物质的恐怖。</p>
<p>在剧集中灾难发生时，苏高层想瞒天过海，声称灾害不严重不允许居民离开切尔诺贝利。<br>这里出现了地狱和天堂。一边紧张又绝望的灾难处理工作，一边是居民们日常生活而不知死亡窥伺已久。<br>这个对比在剪辑上没有明显的切换，产生了一种眩晕感和失重感。</p>
<p>不好的地方是:<br>能闻到洗白的味道。美国的文化传播霸权们竟然为苏联洗白，也是出于对伟大的牺牲表示尊敬吧,瑕不掩瑜。</p>
<h5 id="左拉传："><a href="#左拉传：" class="headerlink" title="左拉传："></a>左拉传：</h5><p>人间值得。    </p>
<h5 id="狂人皮埃罗（让-吕克・达戈尔）："><a href="#狂人皮埃罗（让-吕克・达戈尔）：" class="headerlink" title="狂人皮埃罗（让-吕克・达戈尔）："></a>狂人皮埃罗（让-吕克・达戈尔）：</h5><p>太喜欢了，我真的太喜欢了。一切都是骗局，而我明白了我是个傻子。<br>还会再看，取代了《新桥恋人》成为了我的爱情片榜首。</p>
<h5 id="假面-犹在镜中-不良少女莫妮卡-英格玛・伯格曼-："><a href="#假面-犹在镜中-不良少女莫妮卡-英格玛・伯格曼-：" class="headerlink" title="假面/犹在镜中/不良少女莫妮卡    (英格玛・伯格曼)："></a>假面/犹在镜中/不良少女莫妮卡    (英格玛・伯格曼)：</h5><p>终于理解为什么说“电影导演的电影是拍给观众的，英格玛・伯格曼的电影是拍给电影导演的”这一句话了：<br>英格玛・伯格曼所表现的是人类共同的忧郁与绝望，当我们想要完成一件大事时除了会出现跃跃欲试的积极情绪外，我们也会对自己产生怀疑：我是谁？我真的能完成吗？就算完成了我真的会成功吗？会得到认可吗？这就像是一个人分裂成两个人在不断对话。<br>而《沉默》/《假面》中就是用两个完全不同的女性代表人的极端的两面进行摩擦与对峙。这不仅安抚了创业者/创作者的心灵，还成了未来导演的骗观众的摇钱树。</p>
<p>《犹在镜中》更是如此，父亲是作家，他观察日渐消瘦饱受折磨的女儿想以此完成自己的作品，并相信必是自己最伟大的作品，借此讨论了文艺作品和道德之间的关系。<br>当然英格玛・伯格曼并没有给出答案，到底哪一个更重要。事实上大多数伟大的哲学家/文学家/各路创作者都是只提问而不回答，太可气了。<br>除了冷漠的作家父亲外，相信科学认为妻子是精神病的丈夫，被孤立的妻子，青春期有些不安和攻击性的弟弟都是对各种人各种人生阶段的特写。</p>
<p>《不良少女莫妮卡》当一个不入正途，好吃懒做的人怀揣着对美好生活向往的时候，我也不清楚我该怎么对待她，我觉得不应该是100%的看不起。</p>
<p>英格玛・伯格曼的电影太多了，暂时不会担心看不完。</p>
<h5 id="后窗（希区柯克）："><a href="#后窗（希区柯克）：" class="headerlink" title="后窗（希区柯克）："></a>后窗（希区柯克）：</h5><p>久闻《后窗》大名，听说是从窗户偷窥邻居生活的电影，以为气氛和音乐比是十分阴暗恐怖，没想到主角几人是这样有正义感又很可爱。</p>
<h5 id="回忆三部曲（大友克洋）-："><a href="#回忆三部曲（大友克洋）-：" class="headerlink" title="回忆三部曲（大友克洋）    ："></a>回忆三部曲（大友克洋）    ：</h5><p>看看作画就行。</p>
<h5 id="第九道门-罗斯玛丽的婴儿-罗曼・波兰斯基"><a href="#第九道门-罗斯玛丽的婴儿-罗曼・波兰斯基" class="headerlink" title="第九道门/罗斯玛丽的婴儿    (罗曼・波兰斯基) :"></a>第九道门/罗斯玛丽的婴儿    (罗曼・波兰斯基) :</h5><p>波兰斯基这个名字，一听就是拍上句台词下句台词毫无链接文艺片的导演。我看的第一部《苦月亮》是有种云里雾里那个味道，但是《第九道门》《罗丝玛丽的婴儿》是切切实实的商业（？）片，门槛儿不高，很容易看，甚至这两部只看了开头就能猜到结尾。<br>《九道门》给我的感觉是街景特别美，街景不是被忽略的背景，这一点和别处不同。<br>《罗丝玛丽的婴儿》则是十分压迫，大有《煤气灯下》的意思。</p>
<h5 id="弗里达："><a href="#弗里达：" class="headerlink" title="弗里达："></a>弗里达：</h5><p>探索艺术有两个方向：一个是在技术上登峰造极，一个是挖掘人生的苦。<br>但是挖掘人生的苦必须满足一个条件————你亲身经历过，不然就是无病呻吟、矫情。<br>这是一部简单又伟大的人物传，当然归于弗里达本人十分伟大，天生资质和命运悲惨从来没如此鲜明地摆在荧幕上。</p>
<h5 id="大人物拿破仑："><a href="#大人物拿破仑：" class="headerlink" title="大人物拿破仑："></a>大人物拿破仑：</h5><p>太好笑了。很喜欢。和日本冷笑话一样，不看不知道。</p>
<h5 id="四百击（弗朗索瓦·特吕弗）："><a href="#四百击（弗朗索瓦·特吕弗）：" class="headerlink" title="四百击（弗朗索瓦·特吕弗）："></a>四百击（弗朗索瓦·特吕弗）：</h5><p>在法语中有一个谚语是小孩子要打四百下才能变乖，由此来的片名。<br>但我觉得，片中因为偷东西被送进少年管教所的少年安托万，缺的并不是毒打，而是父母的爱。</p>
<blockquote>
<p>“我要求一部影片或表现电影创作之乐，或表现电影创作之苦。我对介于两者之间的状态丝毫不感兴趣。<br>     ——弗朗索瓦·特吕弗”</p>
</blockquote>
<h5 id="异形："><a href="#异形：" class="headerlink" title="异形："></a>异形：</h5><p><del>我本以为太空电影的全盛时期是在苏美军备竞赛那一段时间，但是世界上最伟大的太空片（2001太空漫游）却又是出现在人类进入太空之前。</del><br><del>所以库布里克其实是外星人。</del></p>
<p>队员都太蠢了，很有娱乐性，一点也不哈人。<br>他们身穿宇航服的样子让人想起《海底两万里》中“我们”在海底森林里打猎一样。</p>
<h5 id="战舰波将金号："><a href="#战舰波将金号：" class="headerlink" title="战舰波将金号："></a>战舰波将金号：</h5><p>一部带着政治意识的片子看了竟不会反感，演员人数很多，大制作了。</p>
<h5 id="恐惧吞噬灵魂："><a href="#恐惧吞噬灵魂：" class="headerlink" title="恐惧吞噬灵魂："></a>恐惧吞噬灵魂：</h5><p>这个片子我觉得可以和《海边的曼彻斯特》《超脱》平齐，一部描写被排挤的少数人的片子。<br>片中的60岁奶奶和40岁外国打工男想要组成了家庭，听说这件事的邻居百般刁难、儿子踢破电视想要和母亲断绝关系、甚至楼下百货店的老板都不愿意再卖东西给女主。<br>两人决定出远门去放松心情，仅仅出去完了几天，回来之后所有人的态度都发生转变，所有人都急着和女主重归于好————虽说节奏快了点但我觉得这是想表达排挤是有多不讲理又无奈。<br>其中穿插着两人跨年龄、跨语言、跨文化的爱情，无比曲折又真挚。</p>
<p>是我看过最心动的爱情片了。</p>
<h5 id="亚特兰大号："><a href="#亚特兰大号：" class="headerlink" title="亚特兰大号："></a>亚特兰大号：</h5><p>引用豆瓣上的一句短评：</p>
<blockquote>
<p>大多数的人的生活就是这样不如意，男人无能，女人虚荣。</p>
</blockquote>
<p>等我到了踏入婚姻的阶段时我会不会想起这部电影？</p>
<h5 id="阿基尔，上帝的愤怒："><a href="#阿基尔，上帝的愤怒：" class="headerlink" title="阿基尔，上帝的愤怒："></a>阿基尔，上帝的愤怒：</h5><p>世上竟有如此神片？前半段几乎感受不到“摄影之眼”的存在。难以复制。</p>
<h5 id="现代启示录："><a href="#现代启示录：" class="headerlink" title="现代启示录："></a>现代启示录：</h5><p>在小船一路走向上游的时，虽然你看到画面感到愤怒恶心惊讶不适  但你的道德底线确实在不断地降低。<br>无法处理的谜题塞满大脑，缓慢的过程不断麻醉神经，让你不再思考，最终我们放佛淡出了文明社会一样。</p>
<p>迷幻的烟雾、轻贱的生命、漫长的时间、残留的冤魂、横死的尸体，魔鬼慢慢揭露真实面孔。<br>随着电影的继续你也放弃思考逐渐失去自我，只有你关掉电影出门散步时冷静才想起战争片是反战的，这一部也不例外，才发现哦自己上当了，自己又被电影欺骗了。</p>
<h5 id="科学怪人的新娘："><a href="#科学怪人的新娘：" class="headerlink" title="科学怪人的新娘："></a>科学怪人的新娘：</h5><p>很有舞台剧既视感的电影。这样《狗镇》就不是什么创新的了哈。</p>
<h5 id="西部世界-东城梦魇（HBO连续剧）："><a href="#西部世界-东城梦魇（HBO连续剧）：" class="headerlink" title="西部世界/东城梦魇（HBO连续剧）："></a>西部世界/东城梦魇（HBO连续剧）：</h5><p>都是HBO电视剧就分在了一起，不好看也不难看。<br>这两部还有一个共同点就是，男人都坏透了。<br>《西部世界》里机器人觉醒都是从女性机器人开始的，不能忽略，这确实是时代印记。</p>
<h3 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h3><table>
<thead>
<tr>
<th align="left">书(9)</th>
<th align="left">阅读日期</th>
<th align="center">评分(10)</th>
</tr>
</thead>
<tbody><tr>
<td align="left">海底两万里</td>
<td align="left">2021/8/5</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">规训与惩罚</td>
<td align="left">2021/8/10</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">manifesto of the communist party</td>
<td align="left">2021/8/15</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">电子工作入门</td>
<td align="left">2021/8/17</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">活下去的理由</td>
<td align="left">2021/8/18</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">沉思录</td>
<td align="left">2021/8/19</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">俄国新经济政策</td>
<td align="left">2021/8/21</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">銀河英雄伝説 2 野望篇</td>
<td align="left">2021/8/23</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">小径分叉的花园</td>
<td align="left">2021/8/24</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">银河系漫游指南</td>
<td align="left">2021/8/25</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">墙上的斑点</td>
<td align="left">2021/8/26</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">航空航天导论</td>
<td align="left">2021/8/27</td>
<td align="center">-</td>
</tr>
</tbody></table>
<h5 id="manifesto-of-the-communist-party："><a href="#manifesto-of-the-communist-party：" class="headerlink" title="manifesto of the communist party："></a>manifesto of the communist party：</h5><p>书捧在手上的时候那个激动————共产主义果然是个好东西！什么都没共产主义好！<br>冷静下来一想，在我有生之年是不会见到的了。</p>
<h5 id="俄国新经济政策："><a href="#俄国新经济政策：" class="headerlink" title="俄国新经济政策："></a>俄国新经济政策：</h5><p>亏你们能把这种高中课本上的三言两语解释好的知识写成400页来卖。<br>看到苏联政府为了钱开始把教会的财物宝物抢走时，还是会忍不住思考一些人与现代社会与信仰的问题。</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>每月总结</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>《俄国新经济政策》笔记</title>
    <url>/WestRoute.github.io/2021/09/01/%E4%BF%84%E5%9B%BD%E6%96%B0%E7%BB%8F%E6%B5%8E%E6%94%BF%E7%AD%96/</url>
    <content><![CDATA[<div class="book">
    <div class="hpbook"><img src="/WestRoute.github.io/images/book/145.jpg"></div>

</div>



<h3 id="共产党宣言："><a href="#共产党宣言：" class="headerlink" title="共产党宣言："></a>共产党宣言：</h3><p>现代的工业劳动，现代的资本压迫，无论在英国或法国，都是一样的，都是无产者失去了任何民族性，法律、道德、宗教，在他们看来全都是资产阶级偏见，隐藏在这些偏见后面全都是资产阶级利益。</p>
<span id="more"></span>

<p>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;</p>
<h3 id="俄国新经济政策："><a href="#俄国新经济政策：" class="headerlink" title="俄国新经济政策："></a>俄国新经济政策：</h3><h4 id="主编的话："><a href="#主编的话：" class="headerlink" title="主编的话："></a>主编的话：</h4><p>列宁想走民主革命→工厂革命<br>不具有基础经济<br>有些仓促的开展了工厂革命，内部不同意<br>布尔什维克党（在俄语中意为“多数派”）<br>参考战时社会主义，引起不满<br>开展新经济政策</p>
<p>孟什维克党（是俄国社会民主工党的派别）和社会革命党（党的前身是北方社会革命党同盟以及南方社会革命党。党的核心领导纲领是1906年确立的《社会革命党纲领》。党初期的主要领导人有：维克多·切尔诺夫）被取代<br>驱逐知识分子（哲学船事件）<br>消除东正教人士，压制少数名族干部（格鲁吉亚事件）<br>列宁晚年，中断新经济政策，回归军事共产主义，农业集体化，重工业化和军事工业化————农业和轻工业落后<br>斯大林处死接班人库兹涅佐夫，怀疑莫洛托夫，伏罗希洛夫，贝利亚等人，还有医生事件<br>制造外蒙独立，肢解中国<br>赫鲁晓夫解冻<br>勃列日涅夫 官僚特权级<br>戈尔巴乔夫 禁酒</p>
<h4 id="第一章-对新经济的过度"><a href="#第一章-对新经济的过度" class="headerlink" title="第一章 对新经济的过度"></a>第一章 对新经济的过度</h4><p>士兵无岗位 体制内人员多 农民重税 粮食征收制<br>安东诺夫农民暴动 征收 浪费 枪决 粮食征收制<br>伏尔加流域的恰潘起义 旱灾 ，自治产生的资产压迫 粮食征收制<br>西西伯利亚起义<br>工人的不满和工潮<br>喀琅施塔得水兵暴动 列举要求 屠杀</p>
<p>开始实施新经济改革，消除军事共产主义<br>没收教会财产，以影响radio的缘由拆除教堂大钟，宣传去除迷信</p>
<div class='page-break'></div>

<h4 id="第二章-新经济政策的实施"><a href="#第二章-新经济政策的实施" class="headerlink" title="第二章 新经济政策的实施"></a>第二章 新经济政策的实施</h4><p>1922保留土地国家所有制原则，实施土地劳动使用法，促进经济复苏<br>1922年的俄罗斯联邦土地法名义上直到1970年一直具有法律效果，但是1927年国家采取多种措施同富农作斗争，限制个体经济，到实施集体化的时候，法典已经名存实亡<br>农业合作社 农业信用社 农业的改革生活改善<br>党的领导人习惯与欧洲标准的席位方式，保留了就社会对民主党对农民的轻视态度，把农民看作是随时会产生资本主义的小生产。中农化，但中农其实也不富裕。提出富裕口号反遭围攻。奇怪<br>工业的复苏<br>没有国外资本参与很难恢复经济<br>实际运营的租让企业数量最多的是1927-1928<br>发生世界经济危机<br>随之取消 且国家的意愿发生了变化<br>实际工资是战前的1/3<br>国内经济尖锐化 工人之间工资差价大<br>新经济政策不但没有消除丧失阶级性分子反而助长了<br>新经济政策的重大成就————财政金融改革<br>银行系统的建立和发展<br>国内外借款问题 热那亚回忆和海牙会议</p>
<h4 id="第三章-列宁的探索和思考"><a href="#第三章-列宁的探索和思考" class="headerlink" title="第三章 列宁的探索和思考"></a>第三章 列宁的探索和思考</h4><p>对军事共产主义的反思<br>从产品交换到商品买卖<br>  把新经济政策的实质归为商品市场的关系<br>  国家资本主义<br>  农民不断产生资本主义 是大敌<br>  共产主义下的国家资本主义<br>退却和进攻<br>  党内存在严重的反对经济政策情绪————未来的导火索<br>分裂的危险<br>  工农分裂 国家分裂 党的分裂<br>反对官僚主义<br>列宁去世<br>最后三封信 遗嘱<br>遗体的处理<br>日记<br>伊斯特曼《列宁死后》</p>
<h4 id="第四章-世界革命的期待和冲破资本主义的封锁"><a href="#第四章-世界革命的期待和冲破资本主义的封锁" class="headerlink" title="第四章 世界革命的期待和冲破资本主义的封锁"></a>第四章 世界革命的期待和冲破资本主义的封锁</h4><p>共产国际 利用德国军事，宣布格鲁吉亚民主共和国独立<br>苏俄对格鲁吉亚战争<br>热内亚 国际经济和财政会议<br>德国革命</p>
<h4 id="第五章-苏维埃社会主义共和国联盟的成立"><a href="#第五章-苏维埃社会主义共和国联盟的成立" class="headerlink" title="第五章 苏维埃社会主义共和国联盟的成立"></a>第五章 苏维埃社会主义共和国联盟的成立</h4><p>各国独立 但均由德国共产党统治<br>民族联合的障碍——大俄罗斯主义</p>
<h4 id="第六章-党内斗争"><a href="#第六章-党内斗争" class="headerlink" title="第六章 党内斗争"></a>第六章 党内斗争</h4><p>总书记 在册权贵<br>三驾马车 七人小组</p>
<h4 id="七章-20世纪20年代的政治体制"><a href="#七章-20世纪20年代的政治体制" class="headerlink" title="七章 20世纪20年代的政治体制"></a>七章 20世纪20年代的政治体制</h4><p>国家民主化的建议 禁查异党<br>知识分子的问题<br>出版自由<br>国家安全组织改组<br>俄罗斯哲学家 尼 呀 别尔嘉耶夫</p>
<h4 id="第八章-斯大林模式的源头"><a href="#第八章-斯大林模式的源头" class="headerlink" title="第八章 斯大林模式的源头"></a>第八章 斯大林模式的源头</h4><p>输出农产品，购入设备<br>克拉辛<br>1928新的工业化宣言<br>反托洛茨基派<br>合作化还是集体化？<br>三大支柱<br>废除新经济政策 消除农民以实施集体化<br>重工业化<br>军事工业化</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>杂文</category>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>每月总结05 (2021/7)</title>
    <url>/WestRoute.github.io/2021/07/31/MonthlyRe05/</url>
    <content><![CDATA[<h1 id="七月总结"><a href="#七月总结" class="headerlink" title="七月总结"></a>七月总结</h1><p>电影 24 部，书 9 本 </p>
<p>脱离豆瓣的第一个月，没什么心思看电影，也没完成了最低限度的观影计划，算是假期了吧，8月份明显看的比7月多。</p>
<span id="more"></span>
<table>
<thead>
<tr>
<th align="left">电影(24)</th>
<th align="left">观看日期</th>
<th align="center">评分(10)</th>
</tr>
</thead>
<tbody><tr>
<td align="left">姿三四郎</td>
<td align="left">2021/07/01</td>
<td align="center">5</td>
</tr>
<tr>
<td align="left">泳池情杀案</td>
<td align="left">2021/07/02</td>
<td align="center">5</td>
</tr>
<tr>
<td align="left">新桥恋人</td>
<td align="left">2021/07/02</td>
<td align="center">8</td>
</tr>
<tr>
<td align="left">打开心世界</td>
<td align="left">2021/07/02</td>
<td align="center">7+</td>
</tr>
<tr>
<td align="left">致允熙</td>
<td align="left">2021/07/03</td>
<td align="center">7</td>
</tr>
<tr>
<td align="left">至暗时刻</td>
<td align="left">2021/07/03</td>
<td align="center">6</td>
</tr>
<tr>
<td align="left">银翼杀手</td>
<td align="left">2021/07/04</td>
<td align="center">7</td>
</tr>
<tr>
<td align="left">银翼杀手2049</td>
<td align="left">2021/07/04</td>
<td align="center">7</td>
</tr>
<tr>
<td align="left">小鬼当家</td>
<td align="left">2021/07/04</td>
<td align="center">6</td>
</tr>
<tr>
<td align="left">万物理论</td>
<td align="left">2021/07/05</td>
<td align="center">7</td>
</tr>
<tr>
<td align="left">一代宗师</td>
<td align="left">2021/07/06</td>
<td align="center">7</td>
</tr>
<tr>
<td align="left">萨利机长</td>
<td align="left">2021/07/07</td>
<td align="center">7</td>
</tr>
<tr>
<td align="left">E.T. 外星人</td>
<td align="left">2021/07/08</td>
<td align="center">5</td>
</tr>
<tr>
<td align="left">红胡子</td>
<td align="left">2021/07/09</td>
<td align="center">7.8</td>
</tr>
<tr>
<td align="left">破浪</td>
<td align="left">2021/07/10</td>
<td align="center">5</td>
</tr>
<tr>
<td align="left">第九区</td>
<td align="left">2021/07/11</td>
<td align="center">6</td>
</tr>
<tr>
<td align="left">心理学导论</td>
<td align="left">2021/07/12</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">公民凯恩</td>
<td align="left">2021/07/13</td>
<td align="center">7</td>
</tr>
<tr>
<td align="left">毕业生</td>
<td align="left">2021/07/14</td>
<td align="center">7-</td>
</tr>
<tr>
<td align="left">π</td>
<td align="left">2021/07/15</td>
<td align="center">7</td>
</tr>
<tr>
<td align="left">雾码头</td>
<td align="left">2021/07/16</td>
<td align="center">7+</td>
</tr>
<tr>
<td align="left">奇巧计程车</td>
<td align="left">2021/07/17</td>
<td align="center">6+</td>
</tr>
<tr>
<td align="left">马耳他之鹰</td>
<td align="left">2021/07/18</td>
<td align="center">6</td>
</tr>
<tr>
<td align="left">二战的指挥官</td>
<td align="left">2021/07/19</td>
<td align="center">8</td>
</tr>
</tbody></table>
<p>这个月重点看了黑泽明，但是我真的不怎么喜欢他的电影，还是我的等级太低看不懂，虽然看了一大堆除了被镜头之美震慑住以外但是并无什么想法。<br>我不喜欢完全依赖于剧本的电影，但我也不喜欢完全依赖于镜头的电影。<br>当然，黑泽明的伟大不会因为我的看法而失去光泽。</p>
<h5 id="新桥恋人"><a href="#新桥恋人" class="headerlink" title="新桥恋人"></a>新桥恋人</h5><p>特别长的电影，看完之后不太懂，之后的50多天里反复出现在脑海里。<br>很神奇的电影。<br>本应该是讲的是爱情，但不是一般人的爱情，讲的是处境极惨的两个人的相遇，当本是千金大小姐得知自己的病并打算回去治疗的时候，流浪汉疯狂制止甚至被捕入狱。<br>当我代入千金时，我猜测千金其实并不爱流浪汉，她爱的是那个抛弃她的音乐家，但是为何片尾千金又回来找流浪汉一起远走高飞了呢？<br>当我代入流浪汉的时候，我又不懂为什么流浪汉会那么拼命地阻止千金回去治疗眼疾。我的独占欲也很强，但最终都不会采取任何行动而是烂在胃里，对于流浪汉的行为也是无解。<br>我反复想起这部电影，但还是不明白，或许我不懂爱情吧。</p>
<h5 id="万物理论"><a href="#万物理论" class="headerlink" title="万物理论"></a>万物理论</h5><p>虽然人物传记总是有很多美化，但多看些人物传记我觉得是好的。</p>
<h5 id="萨利机长"><a href="#萨利机长" class="headerlink" title="萨利机长"></a>萨利机长</h5><p>我们都说外国办事效率差，一个案子反反复复要申个好几遍，看完之后也不得不长舒一口气，这一个电影会让人们对复杂冗长的法律办事风格造成的不变改观吗？一部当然不够，最好还要看十二怒汉。</p>
<h5 id="Π"><a href="#Π" class="headerlink" title="Π"></a>Π</h5><p>是我喜欢的类型的电影，太帅了。喜欢科幻的或者追求癫狂特效的人十分推荐。</p>
<h5 id="毕业生"><a href="#毕业生" class="headerlink" title="毕业生"></a>毕业生</h5><p>每次当你以为主角要做出正确的决定，或者主角自己以为自己终于要做出正确的决定之后<br>他都选择诚哥路线</p>
<h5 id="破浪"><a href="#破浪" class="headerlink" title="破浪"></a>破浪</h5><p>看不懂看不懂，不喜欢。但是不喜欢的话就正中导演下怀了。</p>
<h5 id="二战的指挥官"><a href="#二战的指挥官" class="headerlink" title="二战的指挥官"></a>二战的指挥官</h5><p>挺有趣，下饭</p>
<table>
<thead>
<tr>
<th align="left">书(9)</th>
<th align="left">观看日期</th>
<th align="center">评分(10)</th>
</tr>
</thead>
<tbody><tr>
<td align="left">銀河英雄伝説 1 黎明編</td>
<td align="left">2021/07/01</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">Operating System Concepts 10th edition</td>
<td align="left">2021/07/02</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">亲密关系</td>
<td align="left">2021/07/05</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">Intimate Relationships</td>
<td align="left">2021/07/06</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">Linux Basics for Hackers</td>
<td align="left">2021/07/6</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">Wireshark网络分析就这么简单</td>
<td align="left">2021/07/07</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">哲学的故事</td>
<td align="left">2021/07/31</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">猫</td>
<td align="left">2021/07/31</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">理想国</td>
<td align="left">2021/07/31</td>
<td align="center">-</td>
</tr>
</tbody></table>
<p>总体看，技术书偏多。</p>
<h5 id="银英1："><a href="#银英1：" class="headerlink" title="银英1："></a>银英1：</h5><p>很好看。</p>
<h5 id="亲密关系："><a href="#亲密关系：" class="headerlink" title="亲密关系："></a>亲密关系：</h5><p>写的很全，一次包罗所有感情烦恼。当我发现我的思维和一些书中的大男子主义符合时还是有点难过的。<br>早就应该看的书之一。</p>
<h5 id="Wireshark："><a href="#Wireshark：" class="headerlink" title="Wireshark："></a>Wireshark：</h5><p>这本书打开了我的计算机学习的新世界。</p>
<h5 id="哲学的故事："><a href="#哲学的故事：" class="headerlink" title="哲学的故事："></a>哲学的故事：</h5><p>这本书写得太差了，哲学入门应该从耶鲁死亡公开课开始看，视频很下饭。</p>
<h5 id="猫："><a href="#猫：" class="headerlink" title="猫："></a>猫：</h5><p>好长啊好长啊，对于现代人过于枯燥，但是对于那个时代人来说很幽默。当我和字幕组的人交流时大家都一致认为日文是写不出真正的幽默的，总是文绉绉的。</p>
<h5 id="理想国："><a href="#理想国：" class="headerlink" title="理想国："></a>理想国：</h5><p>对话形式，十分好读，很轻松。<br>从什么是正义入手，讨论了个人的正义（正义只有在需要的时候才是正义），再到什么是正义的政府，发现这个问题实在太大了难以讨论，于是讨论如何从村庄建成一个庞大的帝国开始模拟环境，不断提出问题然后解决，最后柏拉图得出的结论是：国家该由哲学家统治；统治阶层和防卫国家的战士应该共享财产，妻子，后嗣；男人女人平等地参加工作；良好的基因应该和良好的基因产下后代，到底谁是良好的基因这种隐私和交配决策全由哲学家管理。<br>结论上来说确实有些难以接受，但从中可以窥探些实用的方法论。</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>每月总结</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>每月总结04 (2021/6)</title>
    <url>/WestRoute.github.io/2021/07/02/MonthlyRe04/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c9308f1858439e343fca80b48c2f8180d792aec273a06d64ca4dea47dcdfe27f">ddcb92ca3505b02d4d9056cce2d4f9b4666c74a466842a190723c2dd4baa2b54da2b06babec5bc3d262a530161183b7cf0348c68879dad3bf3bdb2ce972a18b016fe27ec27f16cef56f1bfc98b9e014f58a274039dcecd99c219fb1ee342848e229ac1f379641b0dfc562104cd9facd8831eb5303014d8f2fe1c003b3dc859e5905bb840eb2edceb7e060b0d41bd42c0351f518e18abf748395267b2a898c824b9709fa793d4bec3226cc47464ff396f921e6efae0c6e9bb7e4e0b8872f28f5b91dbaae22777db26b4e66d2e013d9104a1757b331a3b2f027ea50cc740f5a850142155deddc9b81b88f744261ef512db778f66e6e93c3b97140eada743e7903bb36c445251b221e87922e2fd2e80ba28e9418d0a3afedc01718b42373dd9e01e3c223d412d6e4e2d8b512542e772230c1a2f90f786deca44955ce4010d477c7561089cb343bf0db877ed94592927889316d368508c42eac074b111938e6be86e927c30c3b5c22eaa2eb297296b1b746ff1154acccb87df322dfcc46b4381ef74869a3f5f426017f4dd07fd964285dd2e3a2b7d591926ea3e0d687d62b32e1698e0c842854862e89bbc1098f2a83868693c4f957b553a1901a81ac3e621885450055ac0e948df4b6966fb040f0c3195c4269c08fe4ff05f18e299e80ccf2897436554acd73d610a465b29a27b4a38ac610a353c28e43c27db263683aac9349c11368f5ed34f43af701101a0c975cbb7a5ea1d7220d1189c8ee5aad7f74cf3354399749d7fae98b5cb0824af16359cabd49bc46ecad5cdaf0e4a104bad7dfdad31eef77c60e862c7ff8b41bcf7d2e2de3eb3bb277dbbbf04a443df2194e41760573f1085e16e708c7efd796e4ce94eb948b438c405b272af273c0eb14668e1e6da4f1ae8e56a9e6c97dd5a9fcdc0da9f43c754780c76c2371aa221da988fbc8d42d6fb3a02c3ecc894d5f14d5794bb8068466330487581852e9ee733ba9cae22f6223e3f2a3cc03a86bd811825b263c6a5d9760053d5567e3a53ef28ec1e73e769d3a1afba445576b7eb5afebaf217ffd3a443b97ca86ba545447ae7c557813807550cc9c26d25658aa9e4438c99b56a994e28c970b345282393868dff72b9d174f75b75c86347cc86df94b05a08d97337cb25101319130128004026ef94b028a53ad2c4e9913141d6232f259436e5f2853fd3c22aadbfb56bc18b083e1ed99f7ca887d71aad0b2528c7e1194dd4d244db6c10c3165786f256a9266e3ae498080668687df585d1da3cf0733ffc04ffd66594e21f80bd9a5791e201bb96bce8cd12</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">继续阅读需要输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/WestRoute.github.io/lib/hbe.js"></script><link href="/WestRoute.github.io/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>每月总结</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>2021年6月疫情下的影院记录</title>
    <url>/WestRoute.github.io/2021/06/08/June-2021-%E7%94%B5%E5%BD%B1%E9%99%A2/</url>
    <content><![CDATA[<img src="/WestRoute.github.io/images/1.png">

<p>尽管电影院解封而已学校上课还是remote上课，等我在家里接受完考试出门才十二点半。</p>
<span id="more"></span>
<p>第一场是 《少女与战车 最终章 第3话》 。</p>
<p>这部动画讲的是在在以“战车道”（开坦克）作为女子修养的世界里，各个学校的女学生们驾驶坦克参加演习比赛的故事。剧场版侧重于表现作战临场感与紧张感，甚至很多时候是坐在坦克上的第一视角。除去独树一帜的临场感，主角队的作战策略也是这部动画的魅力之处。<br>在第二话前半部上演的是迷宫里的包围战术，主角队（ 大洗 ）一气呵成地绝地反击十分畅快。可到了后半部则是在丛林中上演了拉锯战。在第二场比赛里，主角队没有占据优势，这场比赛延长到第三话开头部分。水岛努在第三话前半展现的是隐蔽性极高的丛林游击战术+夜战+长时间作战这样艰难的战场，也对主角队（ 大洗 ）过于依赖西住的指挥这一缺点进行讨论。<br>我个人觉得和第二场超长续航作战没有第一场对凡尔赛来的有娱乐性。我想水岛努是想展现各种地理环境各种艰难局面下不同的作战吧，不能说不好，但确实不那么吸引人了。<br>除了故事之外，坦克的炮声也是特意来电影院看这部电影的原因。听留学生们说，国内影院的imax比日本imax更要响亮，如果可以还是希望国内也能上映。 </p>
<img src="/WestRoute.github.io/images/2.png">
第二场是 《少女☆歌剧 Revue Starlight 剧场版》 。

<p>没吃午饭<br>其实我是非常讨厌少女歌剧tv版的，而这次是个全新的故事于是我就去了。<br>这部动画讲的是为歌剧舞台挥洒汗水的少女们的故事。<br>先说说我为什么讨厌这部动画。这部动画的监督 古川知宏是我最喜欢的动画监督之一 几原邦邦彦（《少女革命》）的徒弟。我喜欢几原邦彦喜欢到认为他是我的再生父母。</p>
<p>《少女☆歌剧 Revue Starlight 剧场版》<br>少女歌剧的tv动画过度模仿（同样是决斗，同样是舞台，同样的反复播放换衣变身画面）但《少女歌剧》的舞台又没有《少女革命》那样宏大、多态、深刻。说是让主角们挖掘内心的欲望，但角色的形象却十分脸谱化，单一。<br>于是我给《少女歌剧》tv动画打了1星。<br>这次我还是去看了剧场版。刚入场，观众男女比例是男3女7让我受到冲击。（之前我看过的百合动画基本都是男性观众）难道。。。来的女观众都是女同？<br>等我看完了这部剧场版之后我对古川知宏态度180°大转弯————剧场版的人物刻画更加鲜明生动，作画也更加自由，短短两小时（也不短）塞进了6场打戏，诚意十足，配乐十分精彩，最重要的是画面也能感觉到古川的实力————不是对师傅的照搬模仿，而是真正的活学活用，展现了十分精彩有感染力的画面。<br>我觉得tv版只能算是一点点开胃菜，剧场版讲故事进行升华和总结。感谢古川这次让我看到了这个月最华丽的舞台。从各方面来讲这次的剧场版我都会打5星。<br>（剧中几对组合互相告白，旁边的妹子竟然哇哇在哭，所以你们果然都是女同对吧）<br>周五打算去看电影《闪光的哈撒韦》，《希德尼娅骑士 剧场版》，很期待。也希望能有时间三刷eva。晚安。</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
  </entry>
  <entry>
    <title>每月总结03 (2021/5)</title>
    <url>/WestRoute.github.io/2021/06/02/MonthlyRe03/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="5e60d77008f555e68439fd8ed78e40c126c2c2a2731b348a40765f5babfb5cc6">ddcb92ca3505b02d4d9056cce2d4f9b4ccacdc5b68e03a9fd4a4bf07591312dcfcaa18ba4c034ac8d2ef1400f94709bf865e119071cc76661aeae11ee329994f72bebcfd88bafd447d3e63796ff4f53c583076de83655b275338177a58c5ee9200d2c889ccfc6aa478644be6aa8eec714989f632970421c0c88522bdecf9a3a1dd0df0e33cefd9818200cd17090207f4c49b21b93d570c689f975885def7e12c03564374388cde189571afc93de4cc500a85c44c8348265fd769b90c875dad049221a5c17d292afc4c89bc8d4b5a20e82743bd762ada76673a49ebc6cd2e22560872f80189d2be1ca0b7bef4258e03d433e36ef7baa9db823360c644a1d82f8ff9dc327768e94f8721efb17f18140361094b41438bdf57ff113a238dc84622650a2cf7b0162d08cf4e26d63f65ae9d6d773ed6356e51402895fe633deff8b7bd8b7ce98051b63db7d8ccdbe0fc23778fb7a743709d076ebc2500197c6120fc48f8f11ba6cbad0bacde2dfa1ae2997f29efa4274d8e49bb7b8229407bf7a54249cf79a8347ba2bf11fa924769406d4f059cade29ef4307b83df99be24f12df0dc4b358dc660aa3d94d9bfc1f1d96fc263b7b5abeae5204b31b6ac9d9ccbf8d36e310496eb4ad4515fc8f3b617e89b1c3d2a855ee1f0559ed47ef75713d796ff171a1a18fc035c001d798b31526ff27b0d081a387a0b72721d718ef4f8f8346ec662aaffb233db5284b4aec1d303c0964022bacf40931e769f8061c9a4c4be3193b3ca60be1f6fcae0b02249cbf69d31ecb4f8ba0fd45ae5f8ce122475701e8c66c2e1652a9e9d70a67a29e4708e2155f5a8465e084a8ea17f370a111d4b3a159e2553798e99b79b6fe6e237adb3e7b811d24f101255d2e44b58674d243a386c62e26ba0ad9ebb4c10061bb7044c3e47d4f4a9d7613f0c4a79a4b009009278e0f1de726fb912613133596c09066a3283c74057503d90f151ba98afd8f20d7ba3e77a9a67c2042b6ab144e1830a7a8ab3f42762e3088362c57e018868cf4d347303ad9b7087da3c63965edcaa4ed0ce8bf732106e16580e5f4a3041b0d2641bb812849157f7930c46d46659c29805321e4e0e55712feb969a6056d3084549fb2f29128cef1257bf66fabf48272aa3d617f47197ac5174d99a483ac9f953f50d970aca57c1ee9cec7dde22edac67fe9b7ad11775af62b54c8cfa977364148b34b2dc865846c271e6acb50c5fa4e368711fff583e502e9bb8e983dbca3cbb87c1b8cf6d319df43a1a7a68551d7cfaa222f2b977a8d1a30f6c59ebfb849abd8b782eace5288ef58812f8a4de1b9a9254fd07b67708692525abd99881b722a1165206ed042bc2786be569d08fedd460690543bc48f1e63f4602c7b6943c33cf9a49388aa5ef6461d66f662522bb9678637bee399fd0e848c6267a5c13b68de097e01dd6433e33e8ff9fb111e690bb4388e5f77e269890a87f16e7797ec6e57561002fc4cf763e3c8f7543266834f17396c9e570e79bb5b17c28a59c475e026d34664a8a1836d4c6592a146463bc23d4124515cebcb4b409191a9a5def27d3c9f4653817027390e14557d08fb5cc5c639a989bd545c7b0310d46a4d56d38b76f281a3a5f11ed89843c007991f3a40a65852b61b62bdc4e6adfb53827b159426515e700bfca9065d5c46082af52a03346e6cdab977fa021ae38c0eac0d9d49d5ccbbf26ca867542318497e72897310606a3643c608133589f2cc208ca13ecf989d41cb7ae9dde026e745dc21b146c7cc3d9e2cc53a4e7f0159ae0121dbd63047648fdfb3e90f0173645cde9fcf100cca8964b9227c47742f09f4330e325589807a08df82b417363421aacfeee7c7ee397f700e53b4d6eec6bf87381e29c971b7a4a880ef74b8583aeac8b4b72d747a8316c984e0596cd263936db8e8b048a5cad9818a0c561a9cab1bc72183f26a0a3f1658c07b2205306eaece2600029cfcb8361c45997d5ffcfe324cb1f497a0c8aafc995d8cb690e8dd182469b46d3c72a03c67a68d73d9b77b2be8ade04416722db5d6fd53c6b60eb91d87eb1eb84184ea07138b812d0c4097cbea60296b30331461d719af8094ba58ab35bd8be254d01943421468c9481d9b980a473872218ada687bafb8db7af3ba4475f9e63744e8977cb1c44c923f2169ee25146b28d036a71a2a1d91d3b647a4db04dc7bfe57c9d6fce0d95721ce9d1a2b138cf7ebdc0a9c2b90d2c8d1737e850709da0317c5e2d7d59e32dc8288db03bf78ab067a64da186469d4a31205acb31d32a2a4be92d34cce5fe4214e3b69705e7bc6bb32007e248bba3740c667ce5b98f987a1f313f12e21ab9a3d458eea1645ef9cd3681a4ce52e306be7783e2f6e593432c71b2d10db2cc7cd0dbdc140fac92bc208edbe11742d07f14ab278b4804462714fccef98efc12b2f83dc75e4b3b0897649b90afc0ebd65b5dbcade7a971a60e0ede0bfdf33797780e43e823a01051d2a9d51b0836c605a3223cbcd59a407eb8820bf3ef01f5c3b1ef333f94878525e94708d98ceee642fe5bc87ce72f90b9bab7bdbde653d607b907aef989ae4203f111a125afa0509601c6e58ba51d28b6baa6a498f45bd7d0b4bb907f41c26f524d388da855b1725ff2b1b961b7b617405522ba9be7fa1be5dd87aad85fde039372cedf4401a590c2468fb2d926f70e72caf02d34fff090e656a98f6c54a74c5278c0480ce8fa113088559fcdff3981d9d85fedfbe9ca8976bc8452e2df2b5a5d5a88ca346be5524140d87a73c3f044803d6a0807a9fce6b88c881f0a45e1d02391cd3206557a45e8e24cc3ddd4bad32c5581f57d3db0da95bbf64bff0634df08fbd894064a7671807c241218417f66b34dbdc6968d44faf380847d2466786d0c39ff9ba5320e86396360a15337e696382e2dfb3e97806629abd537c2257e67b0f1d4eca7488b9c460c47f79e4b8f1ecb3d35951d942a8f2c02919f0faffed6a15ea1ddb4271e9b33cff7e01dcc4a75124fd5170d54c6a33ee7142d4f43c04de66a295c29a7611b0f697a0897f0d6cc142e01a368591e98e23a59e58edffcdb4a2e02787056fc1d4f7729b30595e7f64c385312a7fcad0d46f141da67e12b07dda79cc388e5fe02dec388227006cc42f67aac9037c4f4daa7f2f4555951bc585e9d3d968dcfd27a608b35290cc5797775c5357931d04dbdb9ac4895afd2f57c3c5f8c8baac79d64edf8f978a5f039cb6b16fea2ce951ecd625c6897cbc3b676f94b53799838f2d17acf36ba5a449c3a1673b89951a5e760cf0e8ca7520994aaeb9e7ede34ad321c971149094994e23716352734824fd15f404a973f05b57ff5972d21e479faa7a6cb2a26f5f3377cd9d2d94402334223c0953ed7dac2052232cc599808ee6cd8a7d46fe9d777fdbcd00f24944e77c6ff9b2da3a46f8ae8e96ab4684511a3383334795363f6c035fd01dc0e55401fcf5bee4a05a286c52b75d4cfd5f5695fde64bb81629709649f13ae633e885678e06c9f2d2083300e2e3ee882186639f7ee2babe1395600d4b10fd706b179de0ad138103b96e45021c7dc3a2969bc42e3f8f9395416467dff9cb2df7d35b2efc140f1847e630e284dbd106f224a3c79996fca36046b1fed2753b39b22c9f0aa304611bee7f218e05a1220341973f027df621c6a592e32e55c714dcd1d4548a0234e89839eb5dcb9bd4687497e4ce94d07149a5a28b8f730e00dcab07fd9eae097d1603f178a9279675cdcc3122814c9e63e374102e961168e16810b1c9f296ca9cfd01637ac1ec439c0d33320d10a8866894bb25d0d8ee791db315db1394ee89e6ad141ab8ea6b3a7f67623050c09e23a37c573d9cbe1ba40b146cab8e93e90a57aced101b2877301fac3c0c5cf3b599bb409f65e37b306469ba62b94150df60e3912f68c878c8fdf3118e7d6eb1a4a59c5eb6ce4820d41c6cd164bf2cc5c78d2324f6ce6baa4475a6e1dbfb7edb7285fa4aba5e21ac536c8d2b5819e4b19b41dcccbb552bdc956bfd30916f84cc5e58859cb193f5d81a279067201dfb1d7930b414df36aba0537d68d96b2326268a72cafbc2571a8ae351ff7be96622c708e4bd2a79e232ad81a89b2de71a702f94fcd6a4decfa372cf725af5759aed57a430ba873f31a6ee5f7e9e77953af0cf0e751de2895e06e43070eb7d3a2ffa85ab1ddf111e6fbd1d9551611c847bf679e8f37d2f1fcc21d028cf1aa2cdd5e6a5af7504d7f97d44f50680d749212e19803816feb29dc22b47694c435084413aced9e8aac3f13e1efac77258ab23f1a894be95300483af006100a4adedce4c273f365311f8127c22e4ea94ed143bdd1677e3790bfbb2afc6806dfae7ecd55d402a6f7595e87d5ddc050987312bd862722048e23fe930f63169429912601697f34bef0d42dc8ad797cd759e309b1dbe8b38b16bdc093bebd31b8e673a895a7a3184a70083a7d5eb8499a7f1fec9b8876494faba5c70c2589a0f5bfdd3861a259edd35dc6634704e70c14a1422dfe8d4ec9f2342220b3ff202e7467d187fa66145070539c9ceafd8b682c2c142cf3266f29c4fcefd9d34cf2410399855cb806cfc197a11c68912a5dff2bcdbcddb8a7efbec0e3bc373efd6e89bf5892f427523f22575413d487389a238c4b2ba895028c3306730d9a4bc3742c3c406b4820f91abe022f132feb75c3e75a03e3e272e59f3b040c9b888dd9bc103bb0f46ffe490ffc18b490a111203bb40b8687a89ab6616cf0e6c09a8b09bd967e49475ce0b921648c079b7aea01069ec4c7dcac1d3b0d910fd6a824e9fe3ad87b7b80303315498bd7ebb1c8eeef4b5d7999c0c6b2a71749e0caef1189e87f6bedad44010a35602f2486cb5fdda90e1562175b0f06223ce68577a3c92b7a426aba77a76f50d6f495a0459668a231938c1b5f086cb134f2f531761b9999be1b989fa917ec7411aa7bbc81de6bdbe2953dc3b6ef32130405dfa096a208929d8c4c26b266aca336c6205ed3e055fccb0a1cf2c02180f633280bf54274f741aa4efd54eef6e28b8b7b6a72c9c3268f63a54a1cb94b37cf7b35dc868d10ef559669d0f3cb0047ff2e57cc5442fc4472271b1bddda5242ec74c9682c8b752a60a12840c5b4c1dd1c124e046f0d18b680f8ca5eec3a31e3009c0e69c1d85c98d1cbcd62751f788c4de7b302f2492ef1895bd4b56a9bdb63ecff2498315cd75a6baaeddfcec5d123a9b82eaa2c0e253efe39d8a4b1aa03cf7a6ebf9dae93b9e7b8a77c4875551683bb2df9161ae84a9362545fbc5dc6925a8e1784ee49f10f540122ae0cdbc99c4d973838f0380beb09ec477e0fa5b89c7a5436edc81009527852037638356b8842da20a3ba5b345f65510a666c955a936e2d84ca74b83b8c9b1ab9333d77b4fdca08170156dbd77097f0f837b549a248957dbb4402b95d9b08032e0c6f5873dd1fd21c6f3d58f9c7edf2af69475d718df974128cc4cc7721a7926c15d83dfa</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">继续阅读需要输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/WestRoute.github.io/lib/hbe.js"></script><link href="/WestRoute.github.io/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>每月总结</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>每月总结02 (2021/4)</title>
    <url>/WestRoute.github.io/2021/05/02/MonthlyRe02/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="69dcdf91e7f71c997edab389a4de394b403865a9452808ca808b998e89278daa">ddcb92ca3505b02d4d9056cce2d4f9b46818d8b633af996e579accbfa8345f66cc5679563ec90b0c68cf1970cd1ad65a6f3cc1fa55e43969c3c53977c2f20b7b07ffc159f3eeaef8d22e528771079e8eebd1122c2c51d8dfcfe43b63fe9304eb25a8cca06ab3ce112275fd889a96188cef62349f38c12bd798b7eb5d33288bd7761ed80c09412401bb6d73800b007555911a3e34630f1312ebab7435afca6d8f19a1c09cfea50fcefb39f482bf51c529559f50fe61389d1b4c10979175d3129f45d115aeb887ce8b401bf044ca8187197366ead5bcbd2007fa585ba2cf230bdf5e736961c0162d6a4da0230e98739fb6c54196cadd4a13b22fd512df3a6884cdfbeebbb47d44b8facfc446fa55e779357e5e12396e0945eed9ac5d100c751047b1908f8bdeae332885e45267404ebcbddac56e6ef95f7bb216084101294aa2c2</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">继续阅读需要输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/WestRoute.github.io/lib/hbe.js"></script><link href="/WestRoute.github.io/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>每月总结</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>每月总结01 (2021/3)</title>
    <url>/WestRoute.github.io/2021/04/02/MonthlyRe01/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7b7f0c96497d875efd329d5e9219b842aa6a827705ee9e5b145c4e6ef9a47ab2"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">继续阅读需要输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/WestRoute.github.io/lib/hbe.js"></script><link href="/WestRoute.github.io/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>每月总结</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
</search>
