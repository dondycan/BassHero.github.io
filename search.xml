<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>---- &lt;i class=&quot;fa fa-heart&quot;&gt;&lt;/i&gt; &lt;i class=&quot;fa fa-skull&quot;&gt;&lt;/i&gt; &lt;i class=&quot;fa fa-robot&quot;&gt;&lt;/i&gt;  ----</title>
    <url>/WestRoute.github.io/2021/09/01/top/</url>
    <content><![CDATA[<div style="text-align: center;color:#808080;">
      <i class="fas fa-crow"></i>
  <span id="sitetime"></span>

<script language=javascript>
    function siteTime(){
        window.setTimeout("siteTime()", 1000);
        var seconds = 1000;
        var minutes = seconds * 60;
        var hours = minutes * 60;
        var days = hours * 24;
        var years = days * 365;
        var today = new Date();
        var todayYear = today.getFullYear();
        var todayMonth = today.getMonth()+1;
        var todayDate = today.getDate();
        var todayHour = today.getHours();
        var todayMinute = today.getMinutes();
        var todaySecond = today.getSeconds();
        /* 
        Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳)
        year - 作为date对象的年份，为4位年份值
        month - 0-11之间的整数，做为date对象的月份
        day - 1-31之间的整数，做为date对象的天数
        hours - 0(午夜24点)-23之间的整数，做为date对象的小时数
        minutes - 0-59之间的整数，做为date对象的分钟数
        seconds - 0-59之间的整数，做为date对象的秒数
        microseconds - 0-999之间的整数，做为date对象的毫秒数
        */
        var t1 = Date.UTC(2021,09,1,00,00,00); //北京时间2018-2-13 00:00:00
        var t2 = Date.UTC(todayYear,todayMonth,todayDate,todayHour,todayMinute,todaySecond);
        var diff = t2-t1;
        var diffYears = Math.floor(diff/years);
        var diffDays = Math.floor((diff/days)-diffYears*365);
        var diffHours = Math.floor((diff-(diffYears*365+diffDays)*days)/hours);
        var diffMinutes = Math.floor((diff-(diffYears*365+diffDays)*days-diffHours*hours)/minutes);
        var diffSeconds = Math.floor((diff-(diffYears*365+diffDays)*days-diffHours*hours-diffMinutes*minutes)/seconds);

        document.getElementById("sitetime").innerHTML=" 已运行"+diffYears+" 年 "+diffDays+" 天 "+diffHours+" 小时 "+diffMinutes+" 分钟 "+diffSeconds+" 秒";
    }
    siteTime();
</script>
</div>

<br>

<div style="text-align: center;"><font size="4";color="#808080";>已看：1372/3000 | 已读： 266/500</font></div>
<br>
<div  style="text-align: center;">
   电影进度
  <div class="progress-bar" >
                    <div class="progress-film">
                    </div>
                </div>
                <br>
    阅读进度
  <div class="progress-bar">
                    <div class="progress-book">
                    </div>
                </div>
                <br>
    <p>2023年做三件事：1.考证 2.上传cover视频 3.读60本书</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
  </entry>
  <entry>
    <title>月报(19)2023/1</title>
    <url>/WestRoute.github.io/2023/02/13/MonthlyRe19/</url>
    <content><![CDATA[<p>这个月没有看电影。<br>（其实也是有看的，《极盗者》看了五分钟就关掉了）<br>但是做了很多难以用以往的记录方式来记录的活动和体验。</p>
<span id="more"></span>

<p>比如如果没有生病那几乎每周周末都会去滑雪。<br>比如坚持练习贝斯学习乐理。<br>比如画了很多画。推特上也有了更多的粉丝。在二创上面从来没有被这样肯定过。<br>比如2/4号和布丁见面。<br>比如主动去开车练车。</p>
<p>是工作日很痛苦的一个月，大概是因为寒假放假把人放懒了。<br>现在开始减肥，为了夏天做准备。<br>接下的计划：<br>1.2月份上传一个bass  cover视频<br>2.今年和爸爸一起去跳伞<br>3.去医院开点镇定剂</p>
<table>
<thead>
<tr>
<th>书名</th>
<th>日期</th>
</tr>
</thead>
<tbody><tr>
<td>奇想之年</td>
<td>2023/1/31</td>
</tr>
<tr>
<td>一个无政府主义者的意外死亡</td>
<td>2023/1/28</td>
</tr>
<tr>
<td>悲剧的诞生</td>
<td>2023/1/27</td>
</tr>
<tr>
<td>可能性的艺术</td>
<td>2023/1/24</td>
</tr>
<tr>
<td>阅微草堂笔记</td>
<td>2023/1/5</td>
</tr>
</tbody></table>
<h2 id="阅微草堂笔记"><a href="#阅微草堂笔记" class="headerlink" title="阅微草堂笔记"></a>阅微草堂笔记</h2><p>教育性短篇故事集。最喜欢开篇第一卷的君子不立于危墙之下那一篇。</p>
<h2 id="可能性的艺术"><a href="#可能性的艺术" class="headerlink" title="可能性的艺术"></a>可能性的艺术</h2><p>读到后面终于知道为什么禁止这本书了。</p>
<h2 id="悲剧的诞生"><a href="#悲剧的诞生" class="headerlink" title="悲剧的诞生"></a>悲剧的诞生</h2><p>尼采24岁左右的的文章，可能还比较青涩，和其他作品比起来十分好懂。尼采的文章大多数节奏快，情绪就像发疯的牛一样横冲直撞，尼采本人也支持要在艺术上表达自己的情绪，会让人误以为尼采支持感性大于理性。<br>实际上对于尼采而言，艺术上的狂热情绪就是一种理性。这是一个很容易被普通读者误解，难以理解的一点。</p>
<p>读的时候很难理解尼采的论证，只能根据情绪来判断接下来的走向。有机会想再读一次。</p>
<h2 id="一个无政府主义者的意外死亡"><a href="#一个无政府主义者的意外死亡" class="headerlink" title="一个无政府主义者的意外死亡"></a>一个无政府主义者的意外死亡</h2><p>舞台剧，我看的版本十分接地气。</p>
<h2 id="奇想之年"><a href="#奇想之年" class="headerlink" title="奇想之年"></a>奇想之年</h2><p>十分喜欢，描写最爱的人离去之后的悲伤。注视着沉在水中不再说话的爱人的脸庞，难以消逝的悲伤在逐渐耗尽作者的生命力。</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>每月总结</category>
      </categories>
      <tags>
        <tag>2023</tag>
      </tags>
  </entry>
  <entry>
    <title>月报(18)2022/12</title>
    <url>/WestRoute.github.io/2023/01/07/MonthlyRe18/</url>
    <content><![CDATA[<p>本来年末是期待已久的贯穿日本旅行，因为口唇ヘルペス取消了。<br>卖了以前的bass，买了新的yamaha。<br>滑雪，买了单板鞋。</p>
<span id="more"></span>

<p>这个月虽然没看什么书，但是看了100+同人文，还动手自己写了1.3w字左右，好评比想象的多，十分充实。<br>这个月看的书都很难评价，简单介绍一下。</p>
<h1 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h1><table>
<thead>
<tr>
<th>书名</th>
<th>日期</th>
</tr>
</thead>
<tbody><tr>
<td>政府论</td>
<td>2022/12/24</td>
</tr>
<tr>
<td>天真的人类学家</td>
<td>2022/12/15</td>
</tr>
<tr>
<td>远大前程</td>
<td>2022/12/13</td>
</tr>
<tr>
<td>田园交响曲</td>
<td>2022/12/8</td>
</tr>
<tr>
<td>女教授</td>
<td>2022/12/3</td>
</tr>
<tr>
<td>自学大全</td>
<td>2022/12/6</td>
</tr>
</tbody></table>
<h2 id="自学大全"><a href="#自学大全" class="headerlink" title="自学大全"></a>自学大全</h2><p>确实学到一些方法，看到自己独创的学习方法被书上提起有一种“哼！你看看！”的自豪感</p>
<h2 id="女教授"><a href="#女教授" class="headerlink" title="女教授"></a>女教授</h2><p>好长 不好看</p>
<h2 id="田园交响曲"><a href="#田园交响曲" class="headerlink" title="田园交响曲"></a>田园交响曲</h2><p>今年最佳虚构小说TOP3，<br>是我最喜欢的第一人称视角自欺欺人恶心观众的写法。</p>
<h2 id="远大前程"><a href="#远大前程" class="headerlink" title="远大前程"></a>远大前程</h2><p>可以说是这趟读书旅途的终点，当然接下还要读下去，但是把读书设置成为一个人生目标就是因为这本书和陀思妥耶夫斯基。<br>让我读一本教化年轻人行善，不要过度追名逐利我会很不屑，因为脑海里总是会想起那些老掉牙的名言名句。<br>这本书当然不是，皮普的自卑和愚蠢，以及因为本性善良而不断闪现的自省和愧疚都十分贴合自己的青年时期。<br>这种心怀不安但是因为没有领路人而不由自主踏入雷区的故事如何不让人感动？</p>
<p>或许也是年龄大了的原因。</p>
<h2 id="天真的人类学家"><a href="#天真的人类学家" class="headerlink" title="天真的人类学家"></a>天真的人类学家</h2><p>好看！<br>十分好看！<br>我最爱的「非洲游记」「人类学」结合在一起能不有趣吗？当然作者诙谐幽默的笔调是本书的最大优点，任何不爱看「非洲游记」或「人类学」的人也一定会觉得本书有趣。</p>
<h2 id="政府论"><a href="#政府论" class="headerlink" title="政府论"></a>政府论</h2><p>看之前你绝对不会想到这是本这样的书。<br>逻辑强，有趣。</p>
<h1 id="影视"><a href="#影视" class="headerlink" title="影视"></a>影视</h1><table>
<thead>
<tr>
<th>影视名</th>
<th>日期</th>
</tr>
</thead>
<tbody><tr>
<td>MIU404</td>
<td>2022/12/30</td>
</tr>
<tr>
<td>do it yourself</td>
<td>2022/12/30</td>
</tr>
<tr>
<td>孤独摇滚</td>
<td>2022/12/30</td>
</tr>
<tr>
<td>新米炼金术师</td>
<td>2022/12/30</td>
</tr>
<tr>
<td>水星的魔女</td>
<td>2022/12/30</td>
</tr>
</tbody></table>
<h2 id="孤独摇滚"><a href="#孤独摇滚" class="headerlink" title="孤独摇滚"></a>孤独摇滚</h2><p>这个月我如此魔怔的最大一个原因。现在已经冷静下来了，但是确实狂热了很长时间，脑袋全都被这个占据的。</p>
<p>现在摸着良心和理性聊一聊这部动画：<br>动画好看吗？<br>——确实好看。<br>原作（漫画）好看吗？<br>——整体结构破散，主体十分矛盾，主角队第四位角色属于工具人。<br>期待第二季吗？<br>——动画做的太好了，但是实际上和后面剧情很矛盾。<br>——动画电锯人开播后辜负太多狂热粉丝的期待，这些热情就被灌注到了孤独摇滚身上，把这部动画抬到了意想不到的热度。其实是有点担心后面的。</p>
<h1 id="其他娱乐01"><a href="#其他娱乐01" class="headerlink" title="其他娱乐01"></a>其他娱乐01</h1><p>既然都看了100+的同人文，也算是这个月的一大event。该聊聊。</p>
<p>首先这100+篇同人文里，有80篇是出自<br>出口なし/石田麦(<a href="http://mugi4ishida.blog71.fc2.com/)(https://twitter.com/mugi_ishida)">http://mugi4ishida.blog71.fc2.com/)(https://twitter.com/mugi_ishida)</a><br>之手。</p>
<p>作者每天都在更新，idea不断，对原作的考察也十分直切要害。这个月因为这位神人时不时在推特上的嘀咕而每天脑海过山车。</p>
<h1 id="其他娱乐02"><a href="#其他娱乐02" class="headerlink" title="其他娱乐02"></a>其他娱乐02</h1><p>开始弹贝斯了。把旧的卖掉换了新的。</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>每月总结</category>
      </categories>
      <tags>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>吉他英雄7_波奇篇2</title>
    <url>/WestRoute.github.io/2022/12/29/%E5%90%89%E4%BB%96%E8%8B%B1%E9%9B%847/</url>
    <content><![CDATA[<p>一里 高一 寒假</p>
<span id="more"></span>

<p>后藤一里昨天收到了虹夏的短信带了些留宿行李，今天打工结束之后，来到了几步之遥的伊地知家。</p>
<p>今天虹夏也没来打工。</p>
<p>虹夏已经进入了准备大学入试的阶段了，除了个人练和团练以外的时间已经全部划分给了学习。店长也不得不招了些新人到starry帮忙。自从上个月那场的对话之后，两人的关系已经和以前不同了，但也只有在一里到虹夏家留宿的时候才会有两人独处的时间。</p>
<p>那天被虹夏送上电车，悠悠荡荡回到家中，一切都像是无事发生。或许真的是一场短期失效的幻觉，有或许是自己误会了虹夏的意思————这样忐忑不安的时候，手机传来的虹夏的消息不断战胜自己越来越难以控制的负面情绪。</p>
<p>「安全到家了记得告诉我」</p>
<p>第二天在starry的台上的乐队开演后，一里像往常一样静静地看着吵闹的人群，柜台之后虹夏悄悄牵住了一里的手。可惜这样忙中偷闲地情况没持续多久，虹夏渐渐地很少在打工时间露面了。</p>
<p>第一次因为团练太晚赶不上终电，没有一点准备地在虹夏的房间住下了。之后两人就开始不断地以这个借口从繁忙的乐队、学业和压力中逃离。</p>
<p>独处的时候虹夏喜欢抱着自己，学习累的时候喜欢抱住自己放松，会露出妹妹的一面对自己撒娇，冷静之后又会不好意思地反省自己不够「成熟」。</p>
<p>虹夏总是对一里的任性全盘接受。第一次接吻时，看到虹夏红透的耳尖，有些痛苦的眼神，颤抖的呼吸轻轻地拍在一里的脸上，让一里心底泛起了某种想要欺负虹夏的危险念头。</p>
<p>虹夏需要自己。假设在脑里徘徊，那一晚一里不断试探虹夏对自己的纵容边界。</p>
<p>「波奇酱干脆就长期住在这里吧！」店长已经不止一次这样感叹了。</p>
<p>最近来这里住的次数太频繁了，店长是不是开始嫌我烦了呢？虽然为了表达感激之情每次闭店之后都会努力工作…</p>
<p>（虹夏酱不介意的话很想住下来…但是会打扰到虹夏酱休息。）</p>
<p>（…将来挣钱了果然是想买大房子和虹夏一起出去住。）</p>
<p>打开家门屋子清冷无人，但是马上就打开了客厅的灯和空调，两人开始在厨房忙了起来。店长最近也渐渐开始分担了家务，自己也加入了准备晚饭的后厨队。两人一边看youtube教学视频一边做出来的菜怎么也觉得不如虹夏做的可口。</p>
<p>「我回来了。」发短信告诉自己补课班结束后15分钟左右，虹夏推开门进来了。</p>
<p>看着鼻子冻得通红的样子的虹夏之后难以克制又开始心动了。昨天也见过面但今天也一直很想见你。</p>
<p>「小情侣别进入两人世界了，快点吃饭就去洗澡吧。」店长的声音里确实听着很不爽。最近店长这样的抗议自己也变得听不见了，大概因为被虹夏喜欢而冲昏了脑袋变得开始得寸进尺了…小情侣、嘿嘿嘿。</p>
<p>寒流直击东京，今天准备的是热腾腾的火锅。架上锅，在锅里塞满食材，稀释掉超市买好的柚子味底料倒进去煮上几分钟就完成了。</p>
<p>三人一起边吃边看着天气预报感叹今年好冷。煮熟之后甜甜的大葱，还有烫嘴的豆腐让人停不下筷子，不知不觉吃多了。</p>
<p>一起收拾完碗筷，虹夏洗完澡，之后轮到自己走进了浴室。</p>
<p>关上门，坐到淋雨喷头前的小椅子上。说起来现在是放学后第一个自己独处的时间呢。</p>
<p>镜子里的自己好陌生，从橱柜里走出来，被结束乐队接纳，渐渐starry成为除了学校以外度过时间最长的地方，到现在和虹夏的半同居状态。</p>
<p>一个人会在短短不到一年时间变化这么快吗？大脑已经无法处理现在的状态了。虹夏要去上大学，虹夏去的大学是我无论怎么努力也去不了的地方。</p>
<p>想到这一点一里的内心只要又被刺痛。</p>
<p>第一次接吻的那一晚，中途自己曾经被虹夏推开过一次。</p>
<p>「对不起…我本不该想要留住你」</p>
<p>「…你应该有属于你自己的未来的。」</p>
<p>「明明大你一岁，还是乐队的领队，我不该做这样的事的啊。我真是个无可救药的烂人啊。」</p>
<p>我不在意那些事。现在的一切是我自己想要的。因为不想离开虹夏身上的温度急得胡乱说了一通，现在一里逐渐明白了自己的话语的单薄。</p>
<p>虹夏比自己成熟，大多时候总是心里装着很多事不说，然后装作什么都没发生的样子。虹夏上了大学之后是不是会和自己的距离越来越远呢？</p>
<p>如果是一个人在家想起这些事，一里就会钻入壁橱，无休无止地拨动琴弦来驱逐心里的恐惧。每次对未来感到不安的时候一里就会去练习吉他。不断地提高自己。一里只能相信只要自己的技术足够好就可以成功，就可以跨越一切困难。</p>
<p>洗完身子，一里进入伊地知家的浴缸。</p>
<p>但是今天是难得的和虹夏共处的时间，不能放任自己沉浸在自卑和无用的消极情绪里。</p>
<p>吹完头发，一里走进虹夏的房间，虹夏还在翻着地理暗记参考书。</p>
<p>「马上结束了哦。」</p>
<p>一里穿过被凉前辈堆满私人物品的「租界」，留宿时一里绝不碰任何一件不属于虹夏的东西，就这样一路走到虹夏身边，一起坐在了床上。</p>
<p>虹夏将参考书收了起来。虹夏已经好久没睡够了，今天要早点睡是见面前约定好的。</p>
<p>关上灯，两人钻进被子。</p>
<p>「今天怎么样？」</p>
<p>「还可以。模拟考试结果发下来了。第一志愿是A。我想先告诉波奇酱。」</p>
<p>一里又向虹夏靠了靠，继续听虹夏聊着今天发生的事。</p>
<p>虽然被学习占去了很多时间，但是虹夏从来没有缺席任何一场团练，还作为领队为了乐队考虑各种活动，在家里还要做家务。</p>
<p>一里还知道最近大家离去后虹夏总是会一个人练习到很晚。</p>
<p>虹夏绝不是像关注结束乐队的人之间流传的那样因为大学入试而放弃乐队，这不是一里一个人这样认为的，乐队的其他小伙伴都会支持虹夏的。</p>
<p>想为虹夏做些什么。不想做一直向虹夏索取温柔的小孩子，一里也想成为虹夏的力量。所以和店长一起做好了饭等虹夏回家。</p>
<p>虹夏在为自己得梦想努力，她没有放弃乐队，只是选择了其中最艰难的道路。</p>
<p>虹夏渐渐不回话了，看来已经睡着了。</p>
<p>对一整天无所事事的自己来说关灯不一定就是要睡觉，不如说黑暗才让一里越来越精神。一里仔细听着虹夏浅而绵长的呼吸声。</p>
<p>自己还能为虹夏做什么呢？一里让虹夏松开了自己，将虹夏的身体摆正，让虹夏以最舒服的姿势休息。</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
  </entry>
  <entry>
    <title>吉他英雄6_虹夏篇2</title>
    <url>/WestRoute.github.io/2022/12/20/%E5%90%89%E4%BB%96%E8%8B%B1%E9%9B%846_%E8%99%B9%E5%A4%8F%E7%AF%872/</url>
    <content><![CDATA[<p>虹夏 高二 第二学期 11月</p>
<span id="more"></span>

<p>北海道和东北地区已经下了今年第一场大雪，东京也气温骤降。<br>日本完全冷了下来了。</p>
<p>虹夏接到姐姐的line后谎称姐姐生病需要照顾就匆忙赶了回来，打开沉重的防盗门，幸好房间很暖和，先放下了心。</p>
<p>「波奇酱？」小声问了一句也没人回答。</p>
<p>走到客厅发现波奇酱竟然睡在沙发上，因为自己进来时带来的冷气冻得一激灵，但是没有醒。想起自己小时候总是从公园带回流浪猫流浪狗被姐姐教训一顿，没想到这次竟然是姐姐先带了波奇酱进家门，确实心里很不甘心。</p>
<p>虹夏将外套挂到了一边，慢慢推醒波奇酱。</p>
<p>「波奇酱<del>起床啦</del>要不去房间里睡吧~」</p>
<p>一直以来波奇酱在外面突然昏迷时自己负责扛回去，这次也打算将波奇酱扛到自己卧室，但是没想到波奇酱慢慢醒过来。</p>
<p>「….虹夏酱！？」</p>
<p>「嗯，是我啊~」</p>
<p>「现在几点了？」</p>
<p>「快到下午一点了，波奇酱吃过午饭了吗？」</p>
<p>波奇酱摇了摇头，看起来像是还没睡醒，刚睡醒的体温还很高，在刚被寒风吹过手脚冰凉的虹夏来说又添一种难以抗拒的吸引力。</p>
<p>「现在身体好点了吗？」</p>
<p>波奇酱也只是点了点头。</p>
<p>「哪里不舒服吗？」虹夏的语气越来越像育儿师一样软绵绵的，脸上也不知不觉是温暖的笑容。</p>
<p>眼看着这个可爱的生物弯腰驼背下去，脸色也阴暗了一些，自己问了什么不该问的事情吗？在学校被欺负了吗？</p>
<p>「那要不要吃点什么？」虹夏看到了桌子上的便当，是姐姐喜欢吃蛋包饭的便当。虹夏选择无视。</p>
<p>米饭已经没有了。想起还有一些素面。</p>
<p>「吃面可以吗？」</p>
<p>有些摸不清状况的波奇酱机械地点点头。</p>
<p>简单地切了些胡萝卜，蘑菇，海菜。打了个鸡蛋搅出蛋花，最后再撒上一些葱花。</p>
<p>每次姐姐喝多了回家，第二天虹夏都会做出这样一碗热腾腾的面让姐姐喝了暖胃。</p>
<p>想起波奇酱喜欢吃肉，又迅速用盒装绞肉拍了一份汉堡肉出来。</p>
<p>一碗汤面配汉堡肉，不是很好的搭配。</p>
<p>「家里没什么食材了，先随便吃点吧。有机会给你做更好吃的饭哦~」</p>
<p>故意说得很谦虚。转身看到波奇酱像是小狗一样满脸开心的样子，虹夏更加不好意思了。</p>
<p>终于能坐下来一起吃饭了，看着波奇酱毫不客气大快朵颐的样子。虹夏产生了一种幻觉，这已经是高中毕业几年后，波奇酱没有工作，自己和波奇酱同居并照顾她起居的可怕未来了。</p>
<p>一会儿要让波奇酱刷碗，绝对不能养成坏习惯。虹夏心里默默地想。</p>
<p>吃完了饭，波奇酱整个人也恢复了精神。</p>
<p>简单收拾一下两人又重新坐在沙发上。</p>
<p>在波奇酱洗碗的时候就休息得差不多了的虹夏开始紧张。最近不仅只有在捧起吉他时，就连平时的波奇酱的一举一动也会让自己紧张地变得不能像从前那样健谈。要不要推荐一些cd给她？讲讲各自喜欢的音乐？按小动物的习性接下来应该是睡午觉时间了吧？</p>
<p>「…很少能像这样和虹夏酱坐在一起。」结果竟然是波奇酱先开了口。</p>
<p>虽然波奇酱低着头，盯着自己的脚尖，声音比往常更低。虹夏看到波奇酱的耳尖已经红透了。</p>
<p>很少吗？想起每一次和波奇酱单独聊天时，都是在聊很重要的话题。至少虹夏是这么认为的，机会虽然很少，但每一次都影响着自己的人生。</p>
<p>波奇酱手指不安得摩擦着体操服的袖口。</p>
<p>「如果以后能多和虹夏酱偶尔聊聊天的话…就好了，我是这么想的。」</p>
<p>波奇酱说出来的话石沉大海。虹夏不知道怎么回答。</p>
<p>在深夜里,虹夏感到无聊的时候也总是想着要是波奇酱在身边的话该多好，两人在外面一个是开朗的队长，一个唯一支柱的吉他手。但是只要她们两个离开人群，溜到没有人的角落，像是在逃跑，两个人眼里只有对方。灵魂早已离开了躯体————好像是稍微回头看一眼就会坠入没有归路的黑暗。</p>
<p>沉默气氛让波奇酱感觉自己的灵魂在一点点流逝，终于忍耐不住，波奇酱从沙发上弹跳起来。</p>
<p>「对不起！对不起！是我太自命不凡了！虹虹虹夏酱说不定还有男男朋友，今天真是打扰了，感谢您今日的照顾，日后还会来府上访问的…」</p>
<p>「啊？什么男朋友啊？！」被波奇酱的思路惊到的虹夏发出今天最大的声音，也一起站了起来。</p>
<p>「…虹夏酱肯定很受欢迎的吧…?又高又帅的足球部男朋友…」</p>
<p>「感觉你在说些很过分的话…」</p>
<p>怎么可能认识了大半年了还不知道自己有没有男朋友…不过确实合练时间大家都很认真，不会闲聊这些话题。不如说除了喜多酱没人会聊这种话题，喜多酱也很懂气氛地不会提起。</p>
<p>「…那喜欢的人呢？」波奇酱又慢慢坐会座位上。</p>
<p>虹夏心口一紧。</p>
<p>但仍保留最后一丝希望不去揣度波奇酱的心思，希望波奇酱能在这个话题上不再深入。</p>
<p>「…是吉他英雄那样的人吗？」波奇酱的尾音开始发抖。<br>每一个字都能听出说话人的小心翼翼与勇气，这样的对话让虹夏愧疚到无地自容，自己为什么一直希望波奇酱不要说出来呢？</p>
<p>『现在的我一点也不像英雄，想等到矫正性格之后再跟大家说…』<br>『特别是虹夏酱…』</p>
<p>「…不是哦。」</p>
<p>自己的懦弱到底是回避不了波奇酱的真挚。</p>
<p>「…我喜欢的不是网络上的吉他英雄，喜欢的是坐在我身边的，像波奇酱一样的人。」</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
  </entry>
  <entry>
    <title>吉他英雄5_星歌篇</title>
    <url>/WestRoute.github.io/2022/12/17/%E5%90%89%E4%BB%96%E8%8B%B1%E9%9B%845_%E6%98%9F%E6%AD%8C%E7%AF%87/</url>
    <content><![CDATA[<p>星歌，社会人，11月</p>
<span id="more"></span>


<p>10点半，伊地知星歌起床了。</p>
<p>吃完厨房里放着妹妹做好的早饭，饭后想吃点甜点，星歌穿上大衣走到超市。</p>
<p>还没有进入了圣诞节的季节，但从11月起整个东京就已经装扮起圣诞节的装饰，超市也开始单曲循环「Last Christmas」。<br>为什么大家都喜欢放这么悲伤的音乐呢？已经没有其他歌可以放了吗？</p>
<p>午饭，草莓牛奶，冰淇凌，再买点妹妹喜欢的布丁。</p>
<p>买完东西的星歌快步穿过让自己格格不入的街道。不止是音乐，很多事都让她心烦，比如今天下午要和税理士见面，以及虽然结束乐队让自己感到骄傲，但虹夏在家里却变得越来越沉默寡言。</p>
<p>大概是青春期吧？自己的青春期也是这样多愁善感又喜怒无常。但是要是问自己当时因为什么事而烦恼过，好像一个也想不起来了，反正没有一件事称得上是大事。</p>
<p>几度想开口问一问，最后还是决定在一旁默默的看着。</p>
<p>星歌心里还是希望虹夏能主动对自己开口。无论虹夏要求什么，就算是星星和月亮，只要虹夏想要，星歌都会为妹妹摘下来。</p>
<p>走到自己常去的公园发现今天竟然有人占着自己经常坐着的秋千上。</p>
<p>『嗯？那个是不是..小波奇？』</p>
<p>看起来背比平时还要低得多，气色也不是很好。…难道…已经被学校退学了吗？不会吧？</p>
<p>小波奇很脆弱，不能吓到她。星歌在心里提醒自己，连动作也变得小心翼翼起来，就像动物园管理员去安抚受惊的小动物一样。不知道今天会不会露出肚子让我摸呢？</p>
<p>「大白天的你在这儿干什么啊？」</p>
<p>「那、那个个！我身体tt、有、有点不舒服…」</p>
<p>声音高一下低一下，身子抖成筛子的样子看着感觉比平时更有趣了。不过起码应该不是退学了吧。</p>
<p>「嗯？看起来和平常没什么两样啊……你要冰淇淋吗？」<br>「今天很冷…不要，谢谢。」<br>「你是逃课了吧？」</p>
<p>小波奇马上露出做错事等待大人骂的表情。<br>看着是真可怜，这孩子实在不适合日本这样的社会啊。<br>星歌想起小学体育课的组合体操，初高中的集体行动，只要掉队就会被冷眼相向，无论哪一个想起来都讨厌得牙痒痒。</p>
<p>「…反正我们家没人，来我家坐坐吧？」</p>
<p>不然呢？想回家的话也不会在公园里闲坐吧？</p>
<p>————————————————</p>
<p>把人招待到家里但其实并没有什么时间，星歌只好倒了茶留下了自己的午饭，让一里好好休息就出门办事了。</p>
<p>在路上发了条短信给虹夏。</p>
<p>『小波奇现在睡在咱们家。下午开店之前我会回来。』<br>『波奇酱为什么会在咱们家！？』</p>
<p>星歌觉得头疼捂着脑袋自己也不知道怎么回答。</p>
<p>很难告诉妹妹自己第一次把身体不舒服的高中生领到家里，就把人家丢在屋子里出来工作了。但是想起小波奇眼泪汪汪的样子又觉得自己的所作所为是人之常情，不管怎样总之先把工作速战速决吧。</p>
<p>再说晚一点starry就开业了，小波奇见到小伙伴们之后就会好一些了吧。</p>
<p>————————————————</p>
<p>等到事情结束回到家已经是开店30分钟前了。这个时间虹夏已经到家了。</p>
<p>打开家门，只有一双熟悉的通学皮鞋。</p>
<p>「虹夏你回来了？」<br>「嗯，欢迎回来。」<br>妹妹从沙发上起身回头看自己。</p>
<p>「小波奇呢？」<br>「在这里睡了一觉，看起来脸色不错，不过既然不舒服我就叫她不要打工了，让她先回去休息了。」<br>「这样啊。」</p>
<p>或许是实在太忙了，星歌没有多想，放下包准备去厨房翻点东西来吃就去做开店准备。</p>
<p>「姐姐，我有事对你说。」<br>星歌没有回答，开始往嘴塞面包。今天只吃了早饭，已经饿了一天了，所有收在视野里的东西都想要往嘴里塞。</p>
<p>「我有喜欢的人了。」<br>唔，星歌感觉自己被噎了一下，刚想要说什么，像是阻止自己说话一样虹夏从背后保住了自己。</p>
<p>「是不该喜欢的人。」</p>
<p>星歌将食物咽了下去，但是嗓子好干，好像喝水。</p>
<p>星歌以为虹夏会说下去，但是两人陷入沉默。持续的沉默越长越让星歌感到不安。</p>
<p>不该喜欢的人是什么意思？学校的老师？已婚人士？打小钢珠度日的无业游民？还是一无是处喜欢吹牛的十八线地下歌手？<br>经常被自己的朋友调侃「你家妹妹太懂事了，越是懂事的女孩子越是容易被渣男骗，你一定要照顾好哦。」难道变成了现实了吗？</p>
<p>「是个女孩子。」虹夏终于开口了，说完之后虹夏忍不住大哭了起来。</p>
<p>什么啊，只是因为是女孩子啊。</p>
<p>星歌松了一口气，因为这件事而大张旗鼓让星歌觉得有些好笑，拉开虹夏抱住自己的手臂，转身将虹夏紧紧拥入怀里。想着已经多久没看到虹夏哭了呢，星歌甚至产生了一种既怀念又幸福的感觉。<br>星歌想告诉虹夏这些一点都不重要，但是虹夏好像还有话要说。</p>
<p>「也是我的队友。」虹夏下定决心一般一字一句说的很用力，说完之后因为缺氧开始有些抽搐。</p>
<p>原来如此。这才是妹妹感到愧疚的理由。</p>
<p>「对不起！明明说要组建乐队结果发生这种事，姐姐，对不起，对不起…」</p>
<p>虹夏像是崩溃了一样放声大哭，一个劲儿地道歉：是我不对，对不起….最后泣不成声只能双手拉着星歌的衣角呜咽。星歌一边帮虹夏擦干眼泪，一边用手轻拍后背。</p>
<p>尽管没有听清虹夏最后说了什么，但是星歌也能猜到虹夏的意思。</p>
<p>看着妹妹哭得如此伤心欲绝，星歌觉得心疼又无奈，只能学着妈妈曾经安慰虹夏一样轻声对虹夏说：没关系的，没关系的…</p>
<p>如果starry让这个孩子成为了烦恼的话那starry也没有存在的意义。因为这个世界上没有什么比自己的妹妹更重要的东西了。</p>
<p>星歌一边抱紧虹夏一边思考如何让妹妹也能明白自己的愿望。<br>至于虹夏喜欢的人是谁，也都不重要了。</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
  </entry>
  <entry>
    <title>吉他英雄_波奇篇</title>
    <url>/WestRoute.github.io/2022/12/14/%E5%90%89%E4%BB%96%E8%8B%B1%E9%9B%844_%E6%B3%A2%E5%A5%87%E7%AF%87/</url>
    <content><![CDATA[<p>一里，高一，第二学期，11月</p>
<span id="more"></span>

<p>是保健室的天花板。</p>
<p>后藤一里又在学校走廊上昏倒了。</p>
<p>保健室里的灯被人关掉了，帘外也没有人的样子。保健室外面静悄悄的，现在应该是今天第三节课吧。<br>算了，等一会儿这节课结束后就回教室收拾书包回家吧。今天不想努力了。</p>
<p>曲卷起身体把自己藏在被窝里，开始思考回到家见到妈妈要说什么样的借口。突然枕边响起了手机震动的声音。保健老师放在这里的吧？</p>
<p>『没事吗？听说你昏倒了？发生了什么了？』是喜多同学传来的line。</p>
<p>说不出口！</p>
<p>听到一男一女在课间走廊上打情骂俏，男生爽朗的声音夸女生新头型很合适的时候不自主抬头看了看，看到女生梳着侧马尾以为是虹夏酱就口吐白沫浑身抽搐什么的说不出口啊！</p>
<p>对自己感到恶心和对喜多同学关心的感激，一里逐字回复「我没事，我今天先回去了」为了显得问题不那么严重还努力地选了一个喜多同学常用的贴纸。</p>
<p>「真丢人…」<br>后藤一里在被窝里抱紧自己。</p>
<p>虹夏酱人那么可爱，怎么可能不会有男朋友呢？一定是运动部的帅哥吧，穿着干净的白衬衫（而自己是脏脏的粉色体操服），跑得又快，好闻的味道，和虹夏酱一样是个善待所有人的好人，休息的时候两人一起去游戏中心，两人一起买可爱的布偶外套一起拍可爱的大头贴，偶尔一起犯傻，亲吻的时候是柠檬味或者是汽水味的，既是恋人又是最好的朋友……the ☆青春！</p>
<p>不不，虹夏酱可是说过以后会照顾我的！不会丢下我的！</p>
<p>…但是像虹夏酱这样的懂事的好孩子感觉会突然带来一个人介绍说「这是我从初中开始交往的男朋友…我们已经在一起五年了，因为太普通了所以一直没跟大家说啊哈哈哈」———不可以！绝对不可以！———「这家伙最近还出轨了，但是他说最喜欢的是我所以原谅他啦～」———不要啊！感觉越说越离谱啊！星歌小姐快点出现救救你的妹妹啊！</p>
<p>呜呜呜不想了不想了，总之今天还是先回家好好睡一觉吧。</p>
<p>后藤一里一边自责一边在心里流泪。只是想象假想情敌的样子，就耗费了今天所有的力气。</p>
<p>今天本来不该这样的。</p>
<p>—————</p>
<p>「后藤同学到家了之后一定要往教师办公室打电话报告一下哦。」保健室的老师习以为常，很利落地给自己开了假条。</p>
<p>一里出了校门跑去离学校不远的公园坐了下来。</p>
<p>「啊，这里是——」第一次和虹夏相遇的地方。</p>
<p>可能有点想见虹夏。一里掏出手机反复看自己和虹夏的聊天记录，看完了就又从头看了起来。</p>
<p>「大白天的你在这儿干什么啊？」</p>
<p>一里抬起头。是星歌小姐。就算是冬天穿着羽绒服也能看出身材很好。</p>
<p>「那、那个个！我身体tt、有、有点不舒服…」<br>「嗯？看起来和平常没什么两样啊……」</p>
<p>星歌小姐走到旁边的秋千坐下了下来。</p>
<p>「你要冰淇淋吗？」</p>
<p>「今天很冷…不要，谢谢。」</p>
<p>星歌小姐毫不犹豫地撕开了冰淇凌的包装放入嘴里。</p>
<p>「你是逃课了吧？」</p>
<p>就是这样…</p>
<p>「…反正我们家没人，来我家坐坐吧？」</p>
<p>嗯？伊地知家的人都喜欢到公园捡人吗？</p>
<p>————</p>
<p>虽然不知道为什么不回家而是到了伊地知姐妹家里，后藤一里选择既来之则安之——想顺便看看有没有虹夏酱的「男朋友」的线索——虽然感觉虹夏酱要是有男朋友的话最不可能告诉的人就是星歌小姐。</p>
<p>等走到了虹夏家里，尽管店长说「随便坐吧，我还有事我一会儿回来」，一里也只敢盯着脚尖看。还不如留在保健室了呢，一里小声嘀咕。</p>
<p>10分钟过去了，一里也只敢看着自己的脚尖，但是渐渐地鼻尖能闻到自己想念已久的味道，让一里渐渐放松了下来。</p>
<p>果然还是好想见到虹夏。</p>
<p>『所以啊，我想说的是，就算那些很光鲜的人在背后也是很努力的哦！』</p>
<p>是第一次合奏之后虹夏酱提起对「吉他英雄」的想法。</p>
<p>自己唯一的长处就只有拼命练习，拼命练习和拼命练习。如果练不好吉他的话，不要说朋友了，来未来吃饭都是问题。虽然想被别人崇拜，「天赋」之类的东西是一里从来没有去思考过的问题。那天从虹夏酱嘴里说出的「努力」是不一样的。自己过去的努力被人认可的同时，无论怎么努力都在社交和义务教育上失败的自己，也有了接下来也可以继续在和别人合作组成乐队上努力试一试的信念。</p>
<p>想要被别人承认。特别是想被虹夏承认，想要成为虹夏所期待的吉他英雄，然后听她说「谢谢你波奇酱！」。</p>
<p>一里逐渐松开环抱双膝的手臂，慢慢靠在伊地知宅的沙发上。</p>
<p>今天虹夏一回家就能见到她了。她会不会因为我早退而生气呢？应该不会吧。如果可以的话，在打工开始之前还想只和她两个人待在一起，不聊天也可以，只是能坐在一起感觉今天发生的不好的事就能烟消云散了……</p>
<p>虽然什么都没做但是感觉今天已经功成圆满、浑身疲惫的一里带着不能说出口的愿望在躺在沙发上渐渐睡去。</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
  </entry>
  <entry>
    <title>吉他英雄_喜多篇</title>
    <url>/WestRoute.github.io/2022/12/07/%E5%90%89%E4%BB%96%E8%8B%B1%E9%9B%842_%E5%96%9C%E5%A4%9A%E7%AF%87/</url>
    <content><![CDATA[<p>喜多：高一，第二学期，10月</p>
<span id="more"></span>


<p>为了准备和结束乐队一起在学园祭登台演出，喜多拒绝了同学们举荐的学园祭执行委员会的职位，但是不得不留下来做班级的展出物的组织人。</p>
<p>班会上计划做什么主题时还没有入秋，等到制作工程快要收尾的时候已经穿上了外套了。高中第一次的学园祭大家都激动不已，喜多和朋友围坐在班级的地板上手工制作宣传看板和室内装饰，心底早已乱成一片。</p>
<p>今天是乐队的团练，凉学姐请了假，虽然今天见不到凉学姐但是一想到能和乐队的成员们一起出现在学园祭的舞台上，喜多就觉得不能练习的一分一秒都很煎熬。</p>
<p>Line上传来后藤同学的消息，已经先到了练习室。</p>
<p>但是后藤同学一个人真的没关系吗？和柜台的人能好好说明吗？能顺利拿到钥匙进去吗？</p>
<p>当上次live结束后知道原来后藤同学在人前不能发挥实力时，喜多暗暗下定决心一定要能够支援后藤同学。</p>
<p>想让后藤同学的实力被更多人看到的同时，「是不是对于后藤同学来说我和别人有些不同？」的疑问开始反复在心里出现，又反复被自己否定。</p>
<p>可是无论被自己否定多少次，那之后再看到后藤同学拿起吉他的时候都能感觉到自己好像在期待什么。</p>
<p>「对不起大家，我今天先去乐队练习了！」</p>
<p>看到line上后藤同学已经和虹夏学姐已经在练习室前汇合顺利入室了之后，喜多终于忍不住从地上站起来去收拾书包。</p>
<p>朋友们热情地为自己加油的话语抚平了喜多的负罪感。终于坐上了驶向下北泽的列车，喜多掏出了耳机，播放凉学姐制作的歌曲样本，翻开歌词本一边用指尖在腿上敲着节拍一边开始在脑海里思考着歌词。</p>
<p>「変だね　世界の音がしない」</p>
<p>「奇怪的是 世界竟然悄然无声」</p>
<p>反复读着后藤同学写的歌词，歌词开始的压抑与悲伤是喜多很少体验的，甚至是难以理解的。</p>
<p>『后藤同学平时都是这样的心情吗？』</p>
<p>「ぶちまけちゃおうか　星に」</p>
<p>「对着星辰 倾诉一切吧」</p>
<p>手指抚摸着歌词本，喜多体会着歌词中间爆发着来自后藤一里的能量，来自有的时候会突然做些奇怪行为的同学的求救信号，关乎她的生死存亡一般急切强烈的诉求。之前并不懂什么是摇滚，但是看了后藤同学的歌词之后隐隐约约明白了摇滚和平时听过的偶像团体的快乐的歌完全不同。</p>
<p>虽然自己没有经历过后藤同学一样的经历，但是却忍不住想要去了解这位同学的内心。就算和后藤同学待在一起的时间不长也能明白到她是不善言语的人，如果不写成歌词，后藤同学是无法把自己的想法传达出来的。</p>
<p>——而负责把歌词唱出来的就是自己。</p>
<p>喜多想起平日里两人单独练习时狭窄的楼梯角落。放学后，远处的音乐教室响起此起彼伏的金属管乐器的声音，操场那边传来了棒球部的吆喝，走廊上不会再有脚步声，不会再有人来到这里，只有自己和后藤同学紧挨着坐在一起，近到视线里只能有后藤同学一个人。后藤同学很细心地教自己，后藤同学代替语言弹出的和弦总是回响在自己耳边。</p>
<p>『到底该怎么办？』下北泽车站到了，喜多合上了歌词本，这次也没有找到答案。</p>
<p>终于到了练习室，喜多按照line群聊里找到了房间号，虽然练习室隔间的隔音效果很好，但是今天是不是有点太安静了？</p>
<p>『现在在休息了吗？』</p>
<p>「下午好~」敲门之后喜多没有犹豫地打开了练习室的门。</p>
<p>不知道为什么虹夏先辈怀里抱着黑色的吉他，后藤同学坐在虹夏前辈的对面，看样子是后藤同学在教虹夏前辈弹吉他。</p>
<p>两个人好像都被喜多吓了一跳。</p>
<p>「…啊！下午好！」</p>
<p>「啊，啊，这个…下午好..」</p>
<p>虹夏前辈注意到了喜多的视线马上说明道：「我让波奇酱教我弹吉他…好难啊<del>啊哈哈</del>」</p>
<p>『虹夏前辈声音抖成了外国人刚学日语一样~』，很想用玩笑话说出来缓和一下气氛，但是好像说出来就会把什么不能说的秘密戳穿了似的，喜多犹豫了一下并没有说出口。</p>
<p>练习室陷入了冷场，喜多选择先从吉他上移开视线。</p>
<p>「来晚了对不起~两位现在在休息吗？」</p>
<p>喜多走到房间角落，将书包和吉他放下。虽然背对着两人，但是能感觉两人的距离逐渐拉开了。</p>
<p>「嗯，辛苦了，喜多酱也先休息一下吧」虹夏前辈恢复了平常的语气。</p>
<p>虽然明白自己这种嫉妒十分没有道理，但又希望后藤同学能察觉到自己的不开心。</p>
<p>可是后藤同学什么都没有说，毕竟如果不是主动叫她的话后藤同学基本不会加入对话。</p>
<p>喜多拉开吉他背包，取出吉他。</p>
<p>自己想要的到底是什么呢？真的只有让大家知道后藤同学的厉害之处而已吗？</p>
<p>可是人们付出之后就会锁求回报。意识到自己想从后藤同学身上索取某种近似暴力的占有欲时，一股指向自己的失望和无名之火油然而生。</p>
<p>「来合奏吧！我想合奏！」喜多回身给了两人自己最有拿手的微笑。</p>
<p>喜多决心今天一定不能弹错任何一个音，不能把刚刚的动摇让任何人看到。</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
  </entry>
  <entry>
    <title>吉他英雄_虹夏篇</title>
    <url>/WestRoute.github.io/2022/12/03/%E5%90%89%E4%BB%96%E8%8B%B1%E9%9B%841_%E8%99%B9%E5%A4%8F%E7%AF%87/</url>
    <content><![CDATA[<p>虹夏：高二，第二学期，9月</p>
<span id="more"></span>

<p>上完第一节体育课，虹夏和大家挤在更衣室默默地换着衣服。灯泡亮得伤眼睛，投射下来的光却显得整个房间都是阴影。</p>
<p>因出汗而变得浓郁的洗发水和柔软剂的暖流让虹夏的呼吸越来越微弱和紧促。</p>
<p>高一的时候大家对新同学的身体抱有很多兴趣、偶尔开几句玩笑甚至嬉皮笑脸地伸手摸一下，现在已经变成了无言又迅速的机械动作。</p>
<p>因为身材没有突出的成长从来不会被吃豆腐，再加上本来就喜欢体育课，虹夏还从没觉得这段时间有这么难熬。</p>
<p>虹夏感到坐立不安的是自己总是感到房间里有一双眼睛盯着自己。</p>
<p>这双眼睛发现了自己的错位，发现了自由的鹿群之中隐藏的灰狼。墙壁只能隔绝「外面」来保护学生，墙壁之内隐藏的危险要怎么才能避免？</p>
<p>罪恶感和怕被揭穿的恐惧像是不断翻腾的沼泽，虹夏眼睛只能盯着前方的储物柜，不敢看向别处。</p>
<p>「最近虹夏是不是对波奇酱太溺爱了？」</p>
<p>凉的line至今还没回复。如果赶在其他班级下课之前回到教室就能减少碰到凉的几率了。虹夏加快了换衣的动作。</p>
<p>回到有冷气全开的教室，男生们早就开始吃午饭聊天了。下课铃已经响过了，但是幸运的是并没碰到凉。</p>
<p>坐下吹了一会儿冷气，也听不到窗外吵闹的蝉鸣，虹夏终于松了一口气。刚结束暑假，夏天已经所剩无几了。</p>
<p>不止今天，虹夏已经连着几天没什么食欲。</p>
<p>「今天热死了。一点胃口也没有。」这么说的人也只买了草莓牛奶。</p>
<p>虽然有些人许久没见，虹夏一个人的时候偶尔也会看看ins上大家在暑假分享的照片和24小时就会删除的动态，虹夏慢慢融入到大家的话题去。</p>
<p>有人和家人去了北海道，有人和大学生男朋友去了音乐节，有人假期把头发染黄了现在又染了回来，也有人参加了一整个假期的补课班。</p>
<p>「虹夏酱下一次livehouse是什么时候啊？」</p>
<p>不知不觉话题又回到了自己身上，前几天最后一次和乐队成员见面的那一晚闪现在脑海里。</p>
<p>「感觉这次好棒！！我把录像传在ins上，足球部的杉本前辈还点赞了呢！！」</p>
<p>「每个月都举办一次哦~下次会演奏的更好的，希望你们能来」</p>
<p>「虹夏酱是打算毕业以后搞音乐吗？」</p>
<p>「可以给我个签名吗？我会裱起来的！」</p>
<p>昨天开学第一天的班会上班主任就把进路调查表发下来了，虹夏在调查问卷上好好填了自己志愿的大学，只是还没告诉姐姐和爸爸。这个学期末还有三者面谈，今年的三者面谈大约又是姐姐代替父亲出席了吧。</p>
<p>「还没那么厉害啦w当然是打算先去大学啦ww」</p>
<p>「虹夏酱真的好厉害啊，进路我还没想好…我总之大概先随便进个大学吧」</p>
<p>厉害的不是我，波奇酱才是很认真地想要搞音乐啊…无论从决心还是努力上她对我来说都遥不可及。</p>
<p>「好想掉个金龟婿啊，家庭主妇就是我的梦想！」另一个同学夸张的说。同样的发言从高一开始已经耳朵都听出茧子了，就算这里是升学名校，但是大家并不是所有人都有一个明确的梦想并像波奇酱那样拼了命一样的去奋斗的。</p>
<p>梦想啊……</p>
<p>如果没有波奇酱的话，梦想是离自己多么遥远的东西啊。</p>
<p>如果没有波奇酱的话，现在早就放弃了吧….</p>
<p>想起了live结束后庆功宴上自己说过的话——「只要波奇酱在的话，我感觉我的愿望可能成为现实。」——就像说「请带我去甲子园吧！」的社团经理一样狡猾又不负责任，虹夏酱忍不住勾起嘴角。</p>
<p>「你们听我说！B班说上一节国语课突击考试了！」有个男同学跑了进来。</p>
<p>B班是凉的班级。凉的line又出现在脑海里。</p>
<p>『最近虹夏是不是对波奇酱太溺爱了？』</p>
<p>收到line的时候虹夏才意识到自己的视线总是停留在波奇身上。</p>
<p>原来是这样啊。</p>
<p>虹夏想起合奏结束时波奇酱抬起头时总是第一个看向自己，而喜多酱总是看向波奇酱的侧脸——其他人发现了吗？波奇酱发现了吗？虹夏嘴里泛起了苦涩。</p>
<p>现在虹夏宁可波奇酱不要察觉。</p>
<p>教室从午休喧闹又回归了宁静，所有人都拿起笔记在复习，但虹夏却怎么也提不起力气看笔记。</p>
<p>这样下去不可以。因为关系不平衡而导致乐队分裂实在太常见了。</p>
<p>——波奇酱会实现我的愿望的话，我也会加倍珍惜波奇酱的梦想。</p>
<p>所以下次live时我要怎样回视波奇酱的眼神呢？</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
  </entry>
  <entry>
    <title>月报(17)2022/11</title>
    <url>/WestRoute.github.io/2022/12/03/MonthlyRe17/</url>
    <content><![CDATA[<p>高尔夫，铁道博物馆，决定去旅行，自己一个人订飞机旅馆，开始练贝斯，看了不少电影，但是一直抱怨看不下去书的十一月。<br>我开始怀疑我对很喜欢的东西的热情只能持续一年，对于像铁道摄影这类的东西或许半个月。<br>zlib覆灭，北京上海多地的学生运动。但是我还不能放下手中的书。</p>
<span id="more"></span>

<h1 id="一些自白"><a href="#一些自白" class="headerlink" title="一些自白"></a>一些自白</h1><p>我以前一直是一个有些恃才傲物的人。<br>已经到了什么程度了呢，我宁可不去练习让自己的画的更好只为了对别人说「我可是没有练习就能画成这样嗷」。<br>对从前的我来说努力是很丢脸的事，我很享受天赋的荣光。</p>
<p>这两年我一直在努力改变。我开始以努力作为一切的基准，我一直想摆脱上面这种幼稚的想法。所有人都应该以天赋做借口偷懒为耻。</p>
<p>稍微一想偷懒就会拿自己的天赋来做借口，我需要不断对自己重复这个道理。</p>
<h1 id="书"><a href="#书" class="headerlink" title="书"></a>书</h1><table>
<thead>
<tr>
<th>书名</th>
<th>日期</th>
<th>作者/出版社</th>
</tr>
</thead>
<tbody><tr>
<td>BASSMagazine202211号ベーシストのエフェクトシステム</td>
<td>2022/11/30</td>
<td>リットーミュージック.</td>
</tr>
<tr>
<td>JR路線大全2</td>
<td>2022/11/28</td>
<td>旅と鉄道編集部</td>
</tr>
<tr>
<td>苦炼</td>
<td>2022/11/27</td>
<td>玛格丽特·尤瑟纳尔</td>
</tr>
<tr>
<td>冷血</td>
<td>2022/11/25</td>
<td>楚曼卡波堤</td>
</tr>
<tr>
<td>伊凡•杰尼索维奇的一天</td>
<td>2022/11/19</td>
<td>索尔仁尼琴</td>
</tr>
<tr>
<td>AIRLINE2022年5月号</td>
<td>2022/11/26</td>
<td>旅と鉄道編集部</td>
</tr>
<tr>
<td>貨物鉄道読本</td>
<td>2022/11/23</td>
<td>旅と鉄道編集部</td>
</tr>
<tr>
<td>JR路線大全1函館本線・北海道各線</td>
<td>2022/11/20</td>
<td>旅と鉄道編集部</td>
</tr>
<tr>
<td>鉄道の基礎知識</td>
<td>未</td>
<td>所澤秀樹</td>
</tr>
<tr>
<td>鉄道150年物語り</td>
<td>2022/10/15</td>
<td>旅と鉄道編集部</td>
</tr>
<tr>
<td>是我把你蠢哭了吗（脑科学科普）</td>
<td>2022/11/14</td>
<td>迪安·博内特</td>
</tr>
<tr>
<td>变调的旋律（5卷全）</td>
<td>2022/11/13</td>
<td>秋山春</td>
</tr>
<tr>
<td>わたしが恋人になれるわけないじゃんムリムリ</td>
<td>2022/11/12</td>
<td>みかみてれん</td>
</tr>
<tr>
<td>法兰西的陷落</td>
<td>2022/11/12</td>
<td>朱利安·杰克逊</td>
</tr>
<tr>
<td>ゴールデンカムイ(31巻全)</td>
<td>2022/11/10</td>
<td>野田サトル</td>
</tr>
<tr>
<td>悠久の時間を旅にする</td>
<td>2022/11/7</td>
<td>星野道夫</td>
</tr>
<tr>
<td>文艺复兴全史（上）</td>
<td>2022/11/4</td>
<td>贝恩德•勒克</td>
</tr>
</tbody></table>
<h2 id="变调的旋律"><a href="#变调的旋律" class="headerlink" title="变调的旋律"></a>变调的旋律</h2><p>是我想要的漫画，细腻的心理描写，欲望和无可奈何的现实与一小撮人的勇气。</p>
<h2 id="文艺复兴全史"><a href="#文艺复兴全史" class="headerlink" title="文艺复兴全史"></a>文艺复兴全史</h2><p>通史类，时间跨度大，人物多，涉及的国家也多，需要已经对文艺复兴有了解才能读。</p>
<h2 id="ゴールデンカムイ"><a href="#ゴールデンカムイ" class="headerlink" title="ゴールデンカムイ"></a>ゴールデンカムイ</h2><p>好久没看到这么有趣的热血漫画了</p>
<h2 id="是我把你蠢哭了吗"><a href="#是我把你蠢哭了吗" class="headerlink" title="是我把你蠢哭了吗"></a>是我把你蠢哭了吗</h2><p>还行</p>
<h2 id="杂志-AIRLINE"><a href="#杂志-AIRLINE" class="headerlink" title="杂志 AIRLINE"></a>杂志 AIRLINE</h2><p>了解飞机的第一步（还有999步！</p>
<h2 id="伊凡•杰尼索维奇的一天"><a href="#伊凡•杰尼索维奇的一天" class="headerlink" title="伊凡•杰尼索维奇的一天"></a>伊凡•杰尼索维奇的一天</h2><p>不长，但是不好读，突出了监狱的枯燥</p>
<h2 id="冷血"><a href="#冷血" class="headerlink" title="冷血"></a>冷血</h2><p>根据事实改编的小说，和之前看过的《什么也不要说——北爱尔兰谋杀案》是一个类型。<br>首先根据事实改编就摆脱不掉现实的乏味，作者为了推动故事进行需要夸张一些戏剧成分，像上帝一样赋予一些因果关系。这样现实的荒诞和强扭的喜剧效果都让我很难读下去。但是至少可以看出作者很下功夫，尽管情绪上很克制，欲言又止，但是能明白作者是很同情这个杀人犯并且想让其他人也来了解这个可怜的冷血杀人犯。</p>
<h2 id="苦炼"><a href="#苦炼" class="headerlink" title="苦炼"></a>苦炼</h2><p>十分古风啊。真真正正让人想起柏拉图时代，让人想起《查拉图斯特拉如是说》。感觉每句话都很有深意，让人不得不放下阅读的速度，仔细思考。</p>
<h1 id="影视"><a href="#影视" class="headerlink" title="影视"></a>影视</h1><table>
<thead>
<tr>
<th>影视名</th>
<th>日期</th>
</tr>
</thead>
<tbody><tr>
<td>日月无光</td>
<td>2022/11/21</td>
</tr>
<tr>
<td>老无所依</td>
<td>2022/11/20</td>
</tr>
<tr>
<td>人間の条件(第一、ニ)</td>
<td>2022/11/19</td>
</tr>
<tr>
<td>第一头牛</td>
<td>2022/11/18</td>
</tr>
<tr>
<td>雨月物语</td>
<td>2022/11/16</td>
</tr>
<tr>
<td>猪与军舰</td>
<td>2022/11/15</td>
</tr>
<tr>
<td>大红灯笼高高挂</td>
<td>2022/11/12</td>
</tr>
<tr>
<td>IT狂人第一季</td>
<td>2022/11/3</td>
</tr>
<tr>
<td>地下</td>
<td>2022/11/5</td>
</tr>
<tr>
<td>女子警察的逆袭</td>
<td>2022/10/5</td>
</tr>
<tr>
<td>万物生灵第二季</td>
<td>2022/11/4</td>
</tr>
<tr>
<td>歌剧少女</td>
<td>2022/11/5</td>
</tr>
<tr>
<td>洛城机密</td>
<td>2022/11/1</td>
</tr>
</tbody></table>
<h2 id="歌剧少女"><a href="#歌剧少女" class="headerlink" title="歌剧少女"></a>歌剧少女</h2><p>我不喜欢青春迷茫的故事，我喜欢看年轻的主角们早早就找到自己的梦想，并为之努力，虽然偶尔在途中会遇到困难，自我怀疑，但还是难以割舍梦想的干燥清爽，无怨无悔的故事。就是这一部。</p>
<h2 id="雨月物语"><a href="#雨月物语" class="headerlink" title="雨月物语"></a>雨月物语</h2><p>本月唯一推荐电影</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>每月总结</category>
      </categories>
      <tags>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>月报(16)2022/10</title>
    <url>/WestRoute.github.io/2022/10/30/MonthlyRe16/</url>
    <content><![CDATA[<p>今年的十月是一直在和傲慢还有自卑作斗争的过程。</p>
<span id="more"></span>

<h1 id="书"><a href="#书" class="headerlink" title="书"></a>书</h1><p>大概是今年难度最大的一个月。<br>到了年末开始在意数字。但数字其实并不能代表什么。有很多事情是没有办法用数字统计的。<br>还有我认为还有我认为我的书单应该允许作品的重复出现，<br>有一部分书不重复读有点可惜了。<br>但是最近读书已经变得开始怀疑书中的内容，大多数作者说的话已经无法让我完全信服了。<br>也渐渐觉得读书变得没以前那样有意思了。</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Date</th>
<th>Detail</th>
</tr>
</thead>
<tbody><tr>
<td>JR路線大全8</td>
<td>2022/10/27</td>
<td>旅と鉄道編集部</td>
</tr>
<tr>
<td>通往奴役之路</td>
<td>2022/10/30</td>
<td>弗里德利希・冯・哈耶克</td>
</tr>
<tr>
<td>平原上的摩西</td>
<td>2022/10/26</td>
<td>双雪涛</td>
</tr>
<tr>
<td>鼠疫</td>
<td>2022/10/24</td>
<td>阿尔贝·加缪</td>
</tr>
<tr>
<td>二人の証拠</td>
<td>2022/10/3</td>
<td>雅歌塔·克里斯朵夫</td>
</tr>
<tr>
<td>死屋手记</td>
<td>2022/10/21</td>
<td>陀思妥耶夫斯基</td>
</tr>
<tr>
<td>泪之地</td>
<td>2022/10/18</td>
<td>罗伯特•哈姆斯</td>
</tr>
<tr>
<td>人的况境</td>
<td>2022/10/16</td>
<td>汉娜·阿伦特</td>
</tr>
<tr>
<td>实践论</td>
<td>2022/10/12</td>
<td>毛泽东</td>
</tr>
<tr>
<td>社会学的想像力</td>
<td>2022/10/11</td>
<td>查尔斯·赖特·米尔斯</td>
</tr>
<tr>
<td>健全的社会</td>
<td>2022/10/2</td>
<td>艾里希·弗洛姆</td>
</tr>
</tbody></table>
<h2 id="鼠疫"><a href="#鼠疫" class="headerlink" title="鼠疫"></a>鼠疫</h2><p>说的貌似是疫情下的人类的末日、但并不只限定于疫情下、更多的也是各种专治横行的恐怖<br>有的时候用词很刻薄</p>
<h2 id="社会学的想像力"><a href="#社会学的想像力" class="headerlink" title="社会学的想像力"></a>社会学的想像力</h2><p>本月最推荐书目</p>
<h2 id="健全的社会"><a href="#健全的社会" class="headerlink" title="健全的社会"></a>健全的社会</h2><p>いまいち。</p>
<h2 id="人的况境"><a href="#人的况境" class="headerlink" title="人的况境"></a>人的况境</h2><p>人生第一本汉娜·阿伦特。之前只知道她与马克思有关，以为是推进马克思的，没想到是指出马克思存在错误方向。<br>和福柯一样读着很舒服。</p>
<h2 id="死屋手记"><a href="#死屋手记" class="headerlink" title="死屋手记"></a>死屋手记</h2><p>今年第100本。单元故事集。也有可能是翻译的原因，没有《卡拉马佐夫》《罪与罚》那样疯癫的感觉，读起来像是个正常人所写。<br>但是唯一不太满意的是，亚历山大彼德罗维奇从进监狱开始对犯人们展现强烈的兴趣，和文中一直反复提到「亚历山大彼德罗维奇自己」作为贵族永远无法被穷人接受，总是被敌视，让我十分不适。<br>这里的不适感的由来我还没有想明白。<br>另外读完之后，我忍不住又回到开头，看「我」如何遇到亚历山大彼德罗维奇以及如何得到亚历山大彼德罗维奇的手记，彼德罗维奇的前后差异也让我感到不和谐。<br>这可能是</p>
<h2 id="通往奴役之路"><a href="#通往奴役之路" class="headerlink" title="通往奴役之路"></a>通往奴役之路</h2><p>难以认同。<br>这书名气很大，我也期待了许久，但是并不是真的如想象的那样名副其实，查了查确实争议很大的。</p>
<p>这一篇文章是二战后世界开始流行共产主义时，哈耶克为了极力阻止英国走向计划福利国家而写的。其中就存在无可避免的立场问题。<br>文中常见的是坚定的「宣传语」————「社会主义最终会走向极权」。<br>哈耶克先是承认了资本主义存在的问题，只有又长篇向读者说明共产主义和纳粹同时出现在德，和他们的相似之处。<br>最后哈耶克提出了没有一个政治体系可以「永远」地一直正确，他推崇两种主义互相调和互相牵制创造新世界。</p>
<p>显而易见这是很美好的梦想，而我对这本书唯一的不满就是，哈耶克只是论述了这么一个第三个乌托邦，而没有提出具体怎么取舍、调和「自由」与「平等」。<br>这本书批评共产主义迷惑人民引导人民走向被奴役之路，但它本身也是一个政客在给国民画大饼而含糊一些概念和把一些实际问题抽象化。</p>
<h1 id="影视"><a href="#影视" class="headerlink" title="影视"></a>影视</h1><table>
<thead>
<tr>
<th>Name</th>
<th>Date</th>
</tr>
</thead>
<tbody><tr>
<td>万物生灵第一季</td>
<td>2022/10/30</td>
</tr>
<tr>
<td>是，大臣第一季</td>
<td>2022/10/26</td>
</tr>
<tr>
<td>野火</td>
<td>2022/10/25</td>
</tr>
<tr>
<td>特殊的一天</td>
<td>2022/10/20</td>
</tr>
<tr>
<td>告诉蜜蜂</td>
<td>2022/10/24</td>
</tr>
<tr>
<td>布莱克书店第一季</td>
<td>2022/10/30</td>
</tr>
<tr>
<td>私に天使が舞い降りた!プレシャスフレンズ</td>
<td>2022/10/14</td>
</tr>
<tr>
<td>空王冠</td>
<td>2022/10/20</td>
</tr>
<tr>
<td>好家伙</td>
<td>2022/10/15</td>
</tr>
<tr>
<td>狼厅</td>
<td>2022/10/10</td>
</tr>
<tr>
<td>热天午后</td>
<td>2022/10/10</td>
</tr>
<tr>
<td>钻石与灰烬</td>
<td>2022/10/9</td>
</tr>
<tr>
<td>骗中骗</td>
<td>2022/10/8</td>
</tr>
</tbody></table>
<h2 id="特殊的一天"><a href="#特殊的一天" class="headerlink" title="特殊的一天"></a>特殊的一天</h2><p>好看的室内戏，就是演gay一点也不gay</p>
<h2 id="野火"><a href="#野火" class="headerlink" title="野火"></a>野火</h2><p>很好看，想起之前日本战争片都给我留下了好印象，我想我会抽一点时间认真研究下日本黑白电影和日本影像发行公司。</p>
<h2 id="钻石与灰烬"><a href="#钻石与灰烬" class="headerlink" title="钻石与灰烬"></a>钻石与灰烬</h2><p>好看</p>
<h2 id="热天午后"><a href="#热天午后" class="headerlink" title="热天午后"></a>热天午后</h2><p>好看</p>
<h2 id="骗中骗"><a href="#骗中骗" class="headerlink" title="骗中骗"></a>骗中骗</h2><p>好看</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>每月总结</category>
      </categories>
      <tags>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>月报(15)2022/09</title>
    <url>/WestRoute.github.io/2022/09/23/MonthlyRe15/</url>
    <content><![CDATA[<p>距离2023还有不到100天，我希望马上就加速到2023。<br>这个月相对平稳，不知不觉就过去了，唯一的遗憾是几乎没运动吧，过于平淡了些，能感到体力在不断地衰弱。</p>
<span id="more"></span>
<p>爸爸想让我做的程序到现在还没做完，拖延症持续中，我也不知道为什么。</p>
<h1 id="书-15"><a href="#书-15" class="headerlink" title="书(15)"></a>书(15)</h1><table>
<thead>
<tr>
<th>名字</th>
<th>作者</th>
</tr>
</thead>
<tbody><tr>
<td>什么也别说-一桩北爱尔兰谋杀案</td>
<td>帕特里克·拉登·基夫</td>
</tr>
<tr>
<td>不含传说的普鲁士</td>
<td>塞巴斯提安·哈夫纳</td>
</tr>
<tr>
<td>单行道</td>
<td>瓦尔特·本雅明</td>
</tr>
<tr>
<td>浮木</td>
<td>杨本芬</td>
</tr>
<tr>
<td>刀锋</td>
<td>毛姆</td>
</tr>
<tr>
<td>维特根斯坦传</td>
<td>瑞·蒙克</td>
</tr>
<tr>
<td>地理B一問一答</td>
<td>東進ブックス</td>
</tr>
<tr>
<td>文学课</td>
<td>胡里奥·科塔萨尔</td>
</tr>
<tr>
<td>谈修养</td>
<td>朱光潜</td>
</tr>
<tr>
<td>征服者（葡萄牙帝国的崛起）</td>
<td>罗杰·克劳利</td>
</tr>
<tr>
<td>奥斯特里茨</td>
<td>温弗里德·塞巴尔德</td>
</tr>
<tr>
<td>写在身体上</td>
<td>珍妮特·温特森</td>
</tr>
<tr>
<td>绝叫</td>
<td>叶真中显</td>
</tr>
<tr>
<td>城市与狗</td>
<td>(秘鲁)马里奥·巴尔加斯·略萨</td>
</tr>
<tr>
<td>政府与革命中的阿拉伯人</td>
<td>尤金·罗根</td>
</tr>
</tbody></table>
<h2 id="政府与革命中的阿拉伯人"><a href="#政府与革命中的阿拉伯人" class="headerlink" title="政府与革命中的阿拉伯人"></a>政府与革命中的阿拉伯人</h2><p>一边调查一边读完的，对我来说完全是个新领域，完完全全的新知识。看似写的模糊但是现实里的民族边境本来就是模糊的，抱着追求“民族的就一定是纯血的”“民族有他不可侵犯的神圣边界”心态来读估计就会读不懂吧。</p>
<h2 id="城市与狗"><a href="#城市与狗" class="headerlink" title="城市与狗"></a>城市与狗</h2><p>没有分段的长篇小说。<br>叙事方法也很不容易读，这就是反对西方文化侵蚀的人写下的带有民族特色的作品吗？对于民族之外的人来说简直是灾难。<br>但是故事立意很好。</p>
<h2 id="绝叫"><a href="#绝叫" class="headerlink" title="绝叫"></a>绝叫</h2><p>叙事十分清楚流畅，他恨不得把一切能发生的悲剧都让他发生，看到最后心已经彻底麻木了。很绝望的一本书。</p>
<h2 id="写在身体上"><a href="#写在身体上" class="headerlink" title="写在身体上"></a>写在身体上</h2><p>藏在她文字下的才智与疯狂是一场风暴。</p>
<h2 id="奥斯特里茨"><a href="#奥斯特里茨" class="headerlink" title="奥斯特里茨"></a>奥斯特里茨</h2><p>开头讨论建筑史的精彩绝伦的对话引我进入故事，但是不分段让人抓狂，之后根本读不下去。我知道这是一部很伟大的作品，而它拒绝像我这种只一心想尽快读完的人，没有办法，希望以后会有机会读吧。</p>
<p>没办法悠闲地读书确实是一个潜在的大问题，我内心清楚我是工作忙里偷闲地来看书，这份负罪感一天不消失我就一天也不能静下来读书吧。</p>
<h2 id="征服者——葡萄牙帝国的崛起"><a href="#征服者——葡萄牙帝国的崛起" class="headerlink" title="征服者——葡萄牙帝国的崛起"></a>征服者——葡萄牙帝国的崛起</h2><p>故事跨度很短，只写了两代人，出场人物少，故事清晰。</p>
<h2 id="文学课"><a href="#文学课" class="headerlink" title="文学课"></a>文学课</h2><p>一直以来无人为我解答的几个文学问题：<br>我不喜欢奇幻元素，他哪里有趣了？<br>我比较喜欢长篇小说，为什么我读不下短篇小说，短篇小说有什么魅力？<br>文学与性爱。为什么有性爱的小说在非阅读爱好的普通读者很受欢迎？</p>
<p>这本书虽然没有为这些问题给我提供答案，有的甚至解答了也没能说服我，但是这是我第一次坐下来不再逃避这些问题，仔细思考它们的一次。</p>
<h2 id="维特根斯坦传"><a href="#维特根斯坦传" class="headerlink" title="维特根斯坦传"></a>维特根斯坦传</h2><p>这个月我只吸了四天烟，就是读这本书的这四天；读一小时吸一根。之后一个星期嗓子一直疼。<br>很好很好。很牛。心满意足。不能言说的不必说。<br>十足的斯宾格勒主义者。</p>
<h2 id="刀锋"><a href="#刀锋" class="headerlink" title="刀锋"></a>刀锋</h2><p>和读的第一本毛姆的书《月亮与六便士》很像。对生活的漫不经心的人或许曾经是最热爱生活而失去一切的人。</p>
<h2 id="浮木"><a href="#浮木" class="headerlink" title="浮木"></a>浮木</h2><p>我喜欢看饥荒年代的纪实小说。<br>故事里的人们因为那个时代充满着死亡和绝望，不见尽头的恐怖让人们在亲人死去的时候只有麻木。<br>现代人偶尔也有麻木，当我们对身边的人注入太多感情时，或者看了太多让人焦虑的社会新闻时，我们都会陷入一种麻木。<br>当我每次陷入这种现代式的感情麻木时我会回想起这些饥荒纪实小说。<br>有人可能会说物质充足的现代人是无法理解饥荒时代的人的感情的。难道我们真的没资格麻木吗？<br>我觉得不是。我觉得两者处境上是一样的。</p>
<p>同样我看到一个人开始消沉，而他知道什么是自己什么是外界，我不会看不起他的理智上的消沉。<br>但如果一个人任由自己消沉下去，不考虑不改善，沉浸在自己的世界，看不到外面，那这样的人不配得到救赎。</p>
<h2 id="单行道"><a href="#单行道" class="headerlink" title="单行道"></a>单行道</h2><p>以散文的形式来写下思考的结晶。<br>并不是字数少就包含的东西就少，也不是情绪化的散文就一定是片面的见解。</p>
<h2 id="不含传说的普鲁士"><a href="#不含传说的普鲁士" class="headerlink" title="不含传说的普鲁士"></a>不含传说的普鲁士</h2><p>这本书不是一本正经的历史书，它更像是假定你已经了解普鲁士的传说和神话，而他通过他的见解来给你去祛魅————他反复说普鲁士的存在可有可无，强调普鲁士的成功是由巧合，幸运和鲁莽组成的。<br>全片强烈的作者的个人立场对一个对普鲁士和腓特烈二世充满憧憬的读者是一个很沉重的打击。<br>具体怎么定论，我还需要一段思考的时间。</p>
<h2 id="什么也别说-一桩北爱尔兰谋杀案"><a href="#什么也别说-一桩北爱尔兰谋杀案" class="headerlink" title="什么也别说-一桩北爱尔兰谋杀案"></a>什么也别说-一桩北爱尔兰谋杀案</h2><p>一起没有真相的杀人案，十分恐怖。<br>不可否认，我是从《少女革命》出发去了解世界上过去曾经发生过的“革命”。<br>因为我必须通过这些革命来冷静地看清自己逃离不了的现代的浪潮。</p>
<h1 id="影视-19"><a href="#影视-19" class="headerlink" title="影视(19)"></a>影视(19)</h1><table>
<thead>
<tr>
<th>名字</th>
<th>作者</th>
</tr>
</thead>
<tbody><tr>
<td>横滨蓝调</td>
<td>null</td>
</tr>
<tr>
<td>亨利八世的六位王后</td>
<td>null</td>
</tr>
<tr>
<td>幼女战记</td>
<td>null</td>
</tr>
<tr>
<td>水星领航人第一季</td>
<td>null</td>
</tr>
<tr>
<td>机动战舰抚子号</td>
<td>null</td>
</tr>
<tr>
<td>蝴蝶君</td>
<td>null</td>
</tr>
<tr>
<td>飞翔的魔女</td>
<td>null</td>
</tr>
<tr>
<td>口袋里的战争</td>
<td>null</td>
</tr>
<tr>
<td>梦戏巴黎</td>
<td>null</td>
</tr>
<tr>
<td>解放军在巴黎</td>
<td>null</td>
</tr>
<tr>
<td>鼹鼠</td>
<td>null</td>
</tr>
<tr>
<td>ONE PIECE FILM RED</td>
<td>null</td>
</tr>
<tr>
<td>高达00</td>
<td>null</td>
</tr>
<tr>
<td>圣血</td>
<td>null</td>
</tr>
<tr>
<td>魔女之旅</td>
<td>null</td>
</tr>
</tbody></table>
<p>电影没有特别好说的。</p>
<h1 id="CD"><a href="#CD" class="headerlink" title="CD"></a>CD</h1><p>开始听cd了，下个月开始统计。</p>
<p>2022/10/1:<br>九月最后一周去了公司，公司新来了一位同事。在国内的时候在网易，bilibili上过班，在上海疫情严重时决定出国，从他到决定出国到日本只用了一个月，我见到他时他才到日本20多天。<br>这一周的工期其实挺赶的，或许我本来也没时间去帮助他，但是我还是周六和他出门帮他买些家具。<br>他聊到编程时和他平常时是不一样的，平常时很谦虚也很礼貌，很为他人着想。但是聊到代码就会变得激动，表现出对代码的执着。<br>他还抱怨日本的假期太多，“刚结束两个三连休，怎么下周还是三连休？”</p>
<p>整段时间里，基本都是他在讲，最近从在宅转到去办公室上班体力不太好，他一直说我反而不需要说话了。挺好。<br>虽然是个三十岁的人但是说起话来完全不觉得有隔阂，很年轻的人。<br>我很认同的他说的外界函数是关于时间的函数。</p>
<p>2022/10/2：<br>去了公司，叔叔帮我看了程序，感觉可以继续写下去了。</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>每月总结</category>
      </categories>
      <tags>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>月报(14)2022/08</title>
    <url>/WestRoute.github.io/2022/08/28/MonthlyRe14/</url>
    <content><![CDATA[<p>今年最累的一个月。我直说，这个月没“看完”任何影视作品，但是关于书我有很多想说的。</p>
<span id="more"></span>

<h1 id="书"><a href="#书" class="headerlink" title="书"></a>书</h1><table>
<thead>
<tr>
<th>名字</th>
<th>日期</th>
<th>作者</th>
</tr>
</thead>
<tbody><tr>
<td>战争的余烬-法兰西殖民帝国的灭亡及美国对越南的干预</td>
<td>2022/8/30</td>
<td>弗雷德里克·罗格瓦尔</td>
</tr>
<tr>
<td>野蛮大陆-第二次世界大战后的欧洲</td>
<td>2022/8/23</td>
<td>基思·罗威</td>
</tr>
<tr>
<td>江城</td>
<td>2022/8/21</td>
<td>彼得·海斯勒</td>
</tr>
<tr>
<td>焚舟纪</td>
<td>2022/8/20</td>
<td>安吉拉·卡特</td>
</tr>
<tr>
<td>中国历代政治得失</td>
<td>2022/8/18</td>
<td>钱穆</td>
</tr>
<tr>
<td>伊莎贝勒-武士女王</td>
<td>2022/8/14</td>
<td>科斯丁•唐尼</td>
</tr>
<tr>
<td>万历十五年</td>
<td>2022/8/8</td>
<td>黄仁宇</td>
</tr>
<tr>
<td>鹿鳴館</td>
<td>2022/8/6</td>
<td>三岛由纪夫</td>
</tr>
</tbody></table>
<p>这个月读了约有3500页，甚至还制定了一直到明年1月份为止的书单。</p>
<h2 id="鹿鳴館"><a href="#鹿鳴館" class="headerlink" title="鹿鳴館"></a>鹿鳴館</h2><p>鹿鸣馆是明治时期外交的舞台，是奢华与上流的象征。<br>故事开始鹿鸣馆属于影山伯爵，影山伯爵爱上了新桥的艺伎朝子，将朝子娶进门之后朝子却从不愿意在上层社会的聚会里抛头露面————就是因为心里清楚影山伯爵如何位高权重，朝子明白自己会受到怎样的待遇。<br>尽管如此公爵之后、大德寺侯爵夫人季子对朝子的美貌与人品都十分崇拜，季子的女儿爱上了想要为革命殉身的自由民权活动家的清原久雄，季子带着女儿前来找朝子求救————<br>故事从前几页开始就十分引人入胜，角色台词句句珠玑，凝练有力，剧情环环相扣，几笔就能感受到三岛由纪夫的才气。</p>
<p>舞台剧剧情紧张刺激，剧情只会节节攀升，步步紧逼。这种工整的形式会带来古典的美感以及平衡的安全感。</p>
<p>比如当我们聊到电影《利兹与青鸟》，大多数人都更愿意承认青鸟是两个人，两人互为青鸟。<br>我告诉我的朋友：我认为青鸟应该是“为了对方压抑自己的向往”，美希在社交方面并没有为了霙不交朋友，全剧中美希在社交方面也没有经历过压抑-自由的过程，我不认为美希是青鸟。<br>朋友最后承认：他觉得两个人都是青鸟只是因为喜欢工整，不然美希太可怜了。小说里是明确讲了霙是青鸟。</p>
<p>权力的平衡和故事的收束只会在舞台剧中才会出现，舞台之外就显得生硬了。这就是古典昌久不衰的原因吧。</p>
<h2 id="历史书总评"><a href="#历史书总评" class="headerlink" title="历史书总评"></a>历史书总评</h2><p>————《通往权力之路(卡捷琳娜大帝)》、《无敌舰队》、《伊莎贝拉(武士女王)》、《万历十五年》、《战争的余烬》<br>现在积累了一定阅读量，我终于可以说出这些书的差别和各自的优缺点了。</p>
<p>除了这四本书之外还读过一本《海洋帝国》，但是这四本具备一个共同点就是他们的故事只围绕一个时代，《海洋帝国》讲的是围绕地中海的多个时代。</p>
<p>《通往权力之路(卡捷琳娜大帝)》和《万历十五年》属于历史人物传记，《伊莎贝拉(武士女王)》、《无敌舰队》和《战争的余烬》则属于历史群像剧————故事中心并不是一个人，或两个对手平分秋色，或一桌牌手尔虞我诈，不断地结盟与背叛。</p>
<p>他们各自的缺点：《通往权力之路(卡捷琳娜大帝)》略像偶像剧，《万历十五年》车轱辘话滚来滚去一件事翻来覆去讲了很多遍一看就是凑字数，《伊莎贝拉(武士女王)》作者对人物十分偏爱，两个君主的心里侧写几乎到了出格的地步，有的时候读起来像是历史小说而不是历史纪实，《无敌舰队》对行军打仗讲得十分详细，有的时候又过于详细显得枯燥，人物的诉求基本没有，每个将军或首领几乎就像是战争的棋子。</p>
<p>唯独《战争的余烬》好像是把以上几个缺点全都避开了，革命的动机、故事的发展、战争的残酷、军事的解说，作战的策略，对政治的反思都写得恰到好处。甚至让我对毛泽东的《论持久战》产生了巨大的兴趣，这是我打开这本书之前没有想到的。但是全篇的页数是让人不敢轻举妄动的997页。</p>
<p>历史书还会继续读下去，历史是重复的，我绝不会影视要求从历史书中寻求一些共同点，我想继续读历史是因为这里有虚构故事中摄取不到的养分。它可能是对理想世界的完善，可能是只是想从伟人身上学习一些智慧和哲学，这一点我还不太确定。</p>
<h2 id="江城"><a href="#江城" class="headerlink" title="江城"></a>江城</h2><p>很好，但又十分难推荐的书。难以言喻。不过我已经毫不犹豫地决定去读这个作者的《甲骨文》《埃及的革命考古学》了。</p>
<h2 id="中国历代政治得失"><a href="#中国历代政治得失" class="headerlink" title="中国历代政治得失"></a>中国历代政治得失</h2><p>想要了解一个事物，就是要把和他者对比才能更清楚地看到这个事物本身的特性。<br>这本书对比了各个朝代的农业，税务，中央集权和权力分配，军队，官员的录取制度等。不只是国内历代的竖向对比，还有和西方社会的横向对比，重新认识的知识很多。<br>书里反复提到，一个制度经理几百年之后必定会出现问题，需要不断地改进。这话说出来是多么的轻巧，实则牵一发而动全身，葬送的是一代人甚至几代人的幸福。</p>
<h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><p>去了冲绳，潜水和被绑在伞上升天了。</p>
<h2 id="关于纸质书的一些想法"><a href="#关于纸质书的一些想法" class="headerlink" title="关于纸质书的一些想法"></a>关于纸质书的一些想法</h2><p>我从来不执着于纸质书。如果可以的话我都会选择电子书。<br>一是轻便，二是当我读纸质书翻页的时候，我总会觉得一些思绪就会被打断，电子书可以竖着向下划，从第一页一直划到最后一页。</p>
<h3 id="关于晒书房的一些想法"><a href="#关于晒书房的一些想法" class="headerlink" title="关于晒书房的一些想法"></a>关于晒书房的一些想法</h3><p>我没有多少纸质书，没办法晒书房，但是我喜欢看别人晒书房，我会在照片里看别人读什么书判断这个人是怎样的人。偶尔也会看到一些自己的感兴趣的书然后记下来。</p>
<p>总之我喜欢看书柜的照片。<br>对比下来我发现中国人喜欢晒一些高大上的书，而且喜欢买全集。<br>中国的普通民众：一些国内义务教育语文课程内要求读的中外名著<br>中国的爱书民众：博尔赫斯全集，鲁迅全集，纳博科夫全集，中国古代哲学相关(老子孟子孔子)全集，资治通鉴啊史记啊都齐刷刷地摞起来，甚至还有专门买一个书架来放商务印书馆的汉译世界学术名著丛书系列的。</p>
<p>日本人看书就很杂了，而且有些莫名其妙简直就是浪费纸张的书。<br>日本的普通民众：漫画，轻小说，职业专业书<br>日本的爱书民众：料理书(非常多)，音乐书，儿童绘本，关于酒的关于咖啡的，侦探小说，一些哲学和西方历史(希腊罗马居多)，关于现代的书(日本社会问题，现代人的自我实现)比较多，一些现代诗人</p>
<p>还有就是日本作家的从业环境明显就是比国内好一些，日本书店的国内现代书是占了很大一个区域(轻小说也在其中)。<br>由此看出日本人看书比较随性，中国人比较钱多。</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>每月总结</category>
      </categories>
      <tags>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>月报(13)2022/07</title>
    <url>/WestRoute.github.io/2022/08/09/MonthlyRe13/</url>
    <content><![CDATA[<p>传说中的五月病。<br><br>新生活的刺激感已经消失殆尽，每天懒懒的，什么也不想干。<br><br>为了寻找刺激只有不负责任的乱花钱，空虚到不饿也点了一桌子菜的程度。<br></p>
<p>书：8本<br>影视：6部</p>
<span id="more"></span>
<h1 id="书"><a href="#书" class="headerlink" title="书"></a>书</h1><p>其实计算机相关的两本并没有看完</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>日期</th>
<th>作者</th>
</tr>
</thead>
<tbody><tr>
<td>灵韵与救赎</td>
<td>2022/7/31</td>
<td>于闽梅</td>
</tr>
<tr>
<td>算法竞赛</td>
<td>2022/7/29</td>
<td>渡部有隆</td>
</tr>
<tr>
<td>终将成为你外传 关于佐伯3</td>
<td>2022/7/25</td>
<td>如见人间</td>
</tr>
<tr>
<td>林肯传</td>
<td>2022/7/25</td>
<td>戴尔卡耐基</td>
</tr>
<tr>
<td>Unix系统编程（上）</td>
<td>2022/7/24</td>
<td>Michael Kerrisk</td>
</tr>
<tr>
<td>热带</td>
<td>2022/7/20</td>
<td>森见登美彦</td>
</tr>
<tr>
<td>忧郁的热带</td>
<td>2022/7/18</td>
<td>克劳德·李维史陀</td>
</tr>
<tr>
<td>登山手册</td>
<td>2022/7/10</td>
<td>克雷格·康纳利</td>
</tr>
<tr>
<td>通往权力之路</td>
<td>2022/7/6</td>
<td>罗伯特·K.迈锡</td>
</tr>
</tbody></table>
<h1 id="影视"><a href="#影视" class="headerlink" title="影视"></a>影视</h1><p>西蒙是这个月看过最好的，其次是新奥和半泽直树，这两个我认为可以看也可以不看。</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>日期</th>
<th>方式</th>
</tr>
</thead>
<tbody><tr>
<td>西蒙</td>
<td>2022/7/31</td>
<td>线上</td>
</tr>
<tr>
<td>回天と100人の棺桶</td>
<td>2022/7/20</td>
<td>线上</td>
</tr>
<tr>
<td>シンウルトラマン</td>
<td>2022/7/20</td>
<td>影院</td>
</tr>
<tr>
<td>半泽直树第二季</td>
<td>2022/7/19</td>
<td>线上</td>
</tr>
<tr>
<td>半泽直树第一季</td>
<td>2022/7/18</td>
<td>线上</td>
</tr>
<tr>
<td>ゆるキャン△剧场版</td>
<td>2022/7/17</td>
<td>影院</td>
</tr>
</tbody></table>
<h2 id="西蒙"><a href="#西蒙" class="headerlink" title="西蒙"></a>西蒙</h2><p>西蒙一部战争背景下的少女群像剧只看前几集会觉得设定幼稚，一定猜不到后来的走向，神秘而悲伤。<br><br>其中最喜欢奈维利尔，喜欢她身上忧郁又高贵的气质，喜欢她经过漫长烦恼之后做出抉择后的坚定和势不可挡。</p>
<h2 id="シンウルトラマン"><a href="#シンウルトラマン" class="headerlink" title="シンウルトラマン"></a>シンウルトラマン</h2><p>并没有创新什么，但是依然很好看。<br><br>故事中途是有点沉重，被昭和奥特曼的神性深深吸引住了，谢幕后米津玄师的M八七又好像是一只孤独又痛苦的手把你推出了电影院。</p>
<h1 id="非日常记录"><a href="#非日常记录" class="headerlink" title="非日常记录"></a>非日常记录</h1><p>画了几张画。<br><br>7/27 佐伯sayaka生日</p>
<div >
    <img src="/WestRoute.github.io/images/202207A.jpg" width="430" height="600">
</div>
<div >
    <img src="/WestRoute.github.io/images/202207B.jpg">
</div>
<br>
7/28 又有一位直播毕业了，打击很大。
<div >
    <img src="/WestRoute.github.io/images/202207C.jpg">
</div>

<p>去冲浪了还做了几周美食家。</p>
<div >
    <img src="/WestRoute.github.io/images/202207D.jpg">
</div>
之后就是新鲜感褪去之后一蹶不振。
可能有人觉得去了很多地方，经历了很多，看了很多书，一定会有很多东西可以拿出来和别人分享吧。<br>
其实并不是，这个月读完的《忧郁的热带》里就批评过现代化之后很多白人来到人烟稀少的地方，疯狂对着当地居民拍照，哪怕这些居民已经不是第一次接触到现代文明，白人旅行家也故意对他们家里的铁水桶视而不见，只拍下来他们原始的一面，回国之后大张旗鼓地那这些照片四处展览，吹嘘些成功学和地摊哲学。

<p>当然相反的，也有托克维尔托克维尔横穿美国大陆写下《论美国的民主》的事例。<br><br><br>两个事例综合在一起，我觉得确实多读书多到外面走一走是有好处的，但是还需要一个漫长痛苦的发酵时间，但并不是出门了就一定会有收获。这个月我做了很多事，但我现在大脑是空白的，我需要一些output把大脑里的东西倒出来。<br><br>没有想法的时候直说没有想法。以后会有的。</p>
<h1 id="日常记录"><a href="#日常记录" class="headerlink" title="日常记录"></a>日常记录</h1><p>不得不承认最近心灵强度退化了，只能靠傻白甜百合勉强度日了。原因是七月中旬爸爸坐飞机出远门被感染了新冠，回家之后把妈妈也传染了，两人都只发烧了两天就好了，症状很轻。归于此，我也开始在宅办公，十分清闲，不怎么和别人说话导致有些心情不好。</p>
<p>马上就创建博客一周年了，这个月报也已经第13期了。<br>和预期的相比，电影没怎么看，生活更充实了，书看的多了。<br>科技力并没有上升，但是打算长远地来提升。</p>
<p>本来10月份要考试的，其实并没有学习。</p>
<p>健身前一个月偷懒了。最近(8/9)又重新开始了。</p>
<p>帮老姨夫卖出了第一单，挣了不少，再接再厉，目标30退休。</p>
<p>接下来还要给爸爸写爬虫程序和网点自动登录商品的程序，很讨厌。</p>
<p>虽然很多事没有按当初的计划来进行，很多事都没有完成，但进步的轨迹还是清晰可见。</p>
<p>希望一年后还在继续写博客。</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>每月总结</category>
      </categories>
      <tags>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>月报(12)2022/06</title>
    <url>/WestRoute.github.io/2022/06/26/MonthlyRe12/</url>
    <content><![CDATA[<p>脑袋被工作占据，我像是一块icecream飘在海上，马上就要消失一样。其实这个月虽然没读书没看电影但也不是没有任何收获，</p>
<ol>
<li>参见了汉字鉴定准二级考试</li>
<li>学会了游泳</li>
<li>和表弟吃了很多美食</li>
<li>熟悉了站务开发流程，被派到新的开发工作</li>
<li>唱歌变得好听了，酒量上涨</li>
<li>已经决定好买什么自行车了</li>
<li>正在学跳舞机</li>
<li>去打了拳击</li>
<li>打台球</li>
</ol>
<span id="more"></span>

<h2 id="六月"><a href="#六月" class="headerlink" title="六月"></a>六月</h2><p>这个月看了</p>
<h3 id="第227本《一本书读懂财务报表》"><a href="#第227本《一本书读懂财务报表》" class="headerlink" title="第227本《一本书读懂财务报表》"></a>第227本《一本书读懂财务报表》</h3><p>上学时学过三个报表的基本用法，但从来没有具体实例用来分析过，财务本身是有些枯燥，配上野心和欲望才会让人想去学。</p>
<h3 id="第228本《数据结构与算法》"><a href="#第228本《数据结构与算法》" class="headerlink" title="第228本《数据结构与算法》"></a>第228本《数据结构与算法》</h3><p>比较基础没什么新知识</p>
<h3 id="第230本《刑法学讲义》"><a href="#第230本《刑法学讲义》" class="headerlink" title="第230本《刑法学讲义》"></a>第230本《刑法学讲义》</h3><p>和b站视频完全一个内容，可以用来复习</p>
<h3 id="第231本《通往权力之路——叶卡捷琳娜传》"><a href="#第231本《通往权力之路——叶卡捷琳娜传》" class="headerlink" title="第231本《通往权力之路——叶卡捷琳娜传》"></a>第231本《通往权力之路——叶卡捷琳娜传》</h3><p>很热闹的一本书，在那个年代你能看到很多熟人，这是一个神仙打架的传奇年代。</br>看着理想主义的大帝在现实面前和理想背道而驰，不免对那条想要让百姓们生活变得更好的贤哲之路感到更加的遥远与孤独。</br><br>7/10追加：安倍晋三于7/8遭枪击去世，让人想起《坂上之云》，想起古往今来满腔热血想要为自己国家尽一份力的人们。深感惋惜。<br></br></p>
<h3 id="第1347部《霹雳布袋戏》"><a href="#第1347部《霹雳布袋戏》" class="headerlink" title="第1347部《霹雳布袋戏》"></a>第1347部《霹雳布袋戏》</h3><p>故事流畅，好看，不错</p>
<h3 id="第1348部《伦敦故事》第1季＋第2季"><a href="#第1348部《伦敦故事》第1季＋第2季" class="headerlink" title="第1348部《伦敦故事》第1季＋第2季"></a>第1348部《伦敦故事》第1季＋第2季</h3><p>在操劳痛苦的现代社会里也能让人笑出声的好电视剧。无论多痛苦都要笑出来。<br></br><br>关于读书笔记啊，我实在懒得打字了，都是边读边截图，最后每个作品一个文件夹来保存图片，打算在博客上开这么一个相册或者是公开googledrive来共享读书截图。</p>
<h2 id="想做的事"><a href="#想做的事" class="headerlink" title="想做的事"></a>想做的事</h2><h3 id="想看的技术书："><a href="#想看的技术书：" class="headerlink" title="想看的技术书："></a>想看的技术书：</br></h3><p>アルゴリズム(7)&nbsp;–&gt;&nbsp;UNIX(7)&nbsp;–&gt;&nbsp;PIC(8)&nbsp;–&gt;&nbsp;设计模式(9)&nbsp;–&gt;&nbsp;网络安全(10)&nbsp;–&gt;&nbsp;嵌入式(11)</br></p>
<h3 id="要参加的考试："><a href="#要参加的考试：" class="headerlink" title="要参加的考试："></a>要参加的考试：</br></h3><p>10月&nbsp;-&nbsp;応用情報技術者試験</br><br>12月&nbsp;-&nbsp;NNCA</br></p>
<h3 id="想去做的事："><a href="#想去做的事：" class="headerlink" title="想去做的事："></a>想去做的事：</br></h3><p>6月&nbsp;-&nbsp;吃，水烟，学会游泳</br><br>7月&nbsp;-&nbsp;冲浪</br><br>8月&nbsp;-&nbsp;vocaloid演唱会</br><br>9月&nbsp;-&nbsp;蹦迪，PIC</br><br>10月&nbsp;-&nbsp;考试</br><br></br></br><br>上个月定制了很多计划，但是因为各种原因不能实现，把错过的东西的抛下，重振旗鼓，重新开始吧。</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>每月总结</category>
      </categories>
      <tags>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>每月总结(11) 2022年5月</title>
    <url>/WestRoute.github.io/2022/05/21/MonthlyRe11/</url>
    <content><![CDATA[<p>2022年5月，我工作的第三个月。<br>没有写记录的日子发生了很多，这些日子过得很新鲜、激情，来不及坐下来记录他们。大致填补一下这几个月的空白：</p>
<ol>
<li>从一月份开始了有计划的健身  体重&nbsp; 63kg&nbsp; –&gt;56kg</li>
<li>开始上班</li>
<li>吃喝玩乐</li>
<li>上海封城一个半月，俄罗斯乌克兰打仗三个月了，这本来是与我无关的事，但也不是全无关系。</li>
<li>梅丽莎宣布5月底毕业</li>
<li>离开字幕组我又可以动笔画画了</li>
</ol>
<span id="more"></span>

<br>

<h3 id="今年的黄金周："><a href="#今年的黄金周：" class="headerlink" title="今年的黄金周："></a>今年的黄金周：</h3><p>4/29 读了一天的书<br>4/30 打棒球<br>5/1 鹤见绿地<br>5/2 和教主吃饭 居酒屋-&gt; 男大妈-&gt;兔女郎酒吧-&gt;和爸妈<br>5/3 登山 比叡山<br>5/4 开车上高速去和歌山 和歌山城 marina city 花火<br>5/5 和平谷吃饭 長居公園 第一次凌晨回家<br>5/6 自行车逛京都半圈 两场照片展 枚方市蔦屋書店<br><br></p>
<h3 id="聊聊最近去过的艺术展："><a href="#聊聊最近去过的艺术展：" class="headerlink" title="聊聊最近去过的艺术展："></a>聊聊最近去过的艺术展：</h3><p>4/17 大阪 モディリアーニ<br>4/23 大阪 庵野秀明展<br>5/6 京都 京都国際写真展 GUY BOURDIN<br>&nbsp;&nbsp;&nbsp;&nbsp;平間至 写真展<br><br></p>
<h3 id="聊聊现在的愿望："><a href="#聊聊现在的愿望：" class="headerlink" title="聊聊现在的愿望："></a>聊聊现在的愿望：</h3><ol>
<li>已经申请了漢字検定準2級，6月19号考试，目前顺利。之后按顺序报名应用情报，toeic。</li>
<li>公司分配了些任务给我，刚进公司领导对我很满意，以后会忙，前途未知但充满希望</li>
<li>打算6/10买公路车</li>
<li>明年想考个骑马证书</li>
</ol>
<p>今天是我第三次去大阪城公园的弓道场，我下了很大的决心打算花费一年的时间去学习弓道，这是我最大限度的努力，至今我从没持续做一件事能坚持超过一年的。但是老师们的意思是“我们比较想招收愿意把弓道当作一辈子的爱好来学的人”————这种说法实在让我觉得生气，朋友觉得这种“传统武术”的终身师徒制有点PUA的味道————我经过一天的思考，我决定听从老师们的建议，放弃学习弓道，这一决定让我心里不太舒服，但也确实解决了我安排计划太紧凑的问题，我一直想重新捡起写点东西的习惯。毕竟工作学到了很多技术，最近读书看艺术展也颇有些感想，像整理提炼一下思想。</p>
<p>还有就是昨天是山神カルタ的3D披露会，好久没这么开心过了。虽然和5/14和周林喝到在梅田大吐特吐也很开心，每一天都很开心，过着这样的生活我很幸运。</p>
<p>我发现当我对写东西生疏的时候我自己会采用事无巨细全都流水账一样记录下来的方法来凑字数，但是无论我对自己的文字多么不满意，我今后是打算坚持写下去的。</p>
<h3 id="最近的生活routine"><a href="#最近的生活routine" class="headerlink" title="最近的生活routine"></a>最近的生活routine</h3><p>5：30 起床<br>6：00 出门 有氧<br>6：30 早饭 + 装便当<br>7：20 看书/背单词<br>7：40 穿衣服，无氧<br>8：00 出门<br>9：00 上班<br>12：00 午休，背单词<br>18：00 下班，吃饭<br>到家 准备便当<br>22：00 入睡</p>
<h3 id="大阪：モディリアーニ展"><a href="#大阪：モディリアーニ展" class="headerlink" title="大阪：モディリアーニ展"></a>大阪：モディリアーニ展</h3><p>这次我是0知识储备，对这个画家一点也没有了解的前提去看的，我还带了高中同学上田一起去的，只从海报上看能知道是个现代画家，从前天晚上到走进展会之前我都很忐忑，生怕我的朋友不喜欢现代美术：现代美术在视觉上画面上是没什么可以聊的，对于大多数人包括我在内是需要阅读别人的讲解的。就像《毕加索的成败》里说的那样，人们赞扬毕加索都是赞扬他的人格他的思想如何与众不同，可我们到底要怎么谈论他的画呢？<br>他作为一个人的价值是超过他的画。即使是现在我也依旧怀疑哲学与视觉是否真的可以不靠任何文字就能连接在一起。</p>
<p>就是这样一个作者大于作品的艺术展，他很贴心地用文字介绍了这位画家的生平，这位画家的心灵创伤，这位作家的需求……让我感到安心很多。</p>
<p>一圈下来我问上田最喜欢哪一幅，她选了一副和这次主题没有任何关系的水彩风景画。我运用我积累下来的经验，和她讲讲我对这此主题的看法，我很喜欢这个作家对眼睛的处理，把眼睛全涂黑来表达模特对自我的审视，我觉得她是真心在夸我聪明。<br>她问我什么时候还会画画，当时我说不知道。<br>虽然写下这一篇的时候我已经开始又重新画画了，但我仍觉得画画是一种对生活不满的时候才会出现的情绪，就像自古都是战乱出英雄一样，我认识的人也都是情绪不稳定的时候才会拿起笔。</p>
<h3 id="大阪：庵野秀明展"><a href="#大阪：庵野秀明展" class="headerlink" title="大阪：庵野秀明展"></a>大阪：庵野秀明展</h3><p>很搞笑。<br>我很喜欢庵野秀明，但我也对他没有滤镜。这次的展会说实在的有些尴尬，有点个人崇拜的地方，但是展会却好像没什么内容。毕竟一部好部作品也不是仅凭一人之力就能完成的。</p>
<h3 id="京都：京都国際写真展-GUYBOURDIN"><a href="#京都：京都国際写真展-GUYBOURDIN" class="headerlink" title="京都：京都国際写真展-GUYBOURDIN"></a>京都：京都国際写真展-GUYBOURDIN</h3><p>啊，原来照片这么好看，这么有趣，这么多的未知能让人如此激动不已。<br>人，是科学，艺术，哲学，一切的中心。世间一切都应该为心灵服务。</p>
<h3 id="聊聊vtuber"><a href="#聊聊vtuber" class="headerlink" title="聊聊vtuber"></a>聊聊vtuber</h3><p>很有趣一个现象，山神3D之后大家一起夸山神的舞蹈的时候，一个朋友说“山神真的很努力，穿着20cm的鞋也能跳的那么好”————他说的是“模型”山神穿着20cm的鞋跟，那个穿着动补服的中之人是肯定不会穿20cm的鞋跟的。<br>我还知道有些人没办法磕vtuber的cp，有的人可以，甚至很多人会在这之上进行二次创作————这也是一种不同，我觉得前者眼里看到的是有血有肉的现实生活里的人，后者则把vtuber当作消费的娱乐符号。</p>
<h3 id="领导聊上海"><a href="#领导聊上海" class="headerlink" title="领导聊上海"></a>领导聊上海</h3><p>资本。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>好久没写日记了今晚写了日记，这几个月看了些书去了几个展会觉得自己精神世界好丰富、觉得我自己一闭嘴一远眺就是艺术家就是哲学家就是思想的巨人，但是当把自己的想法写下来的时候，哦！你看看你写了什么！翻来覆去都是那么几句车轱辘话！最后当我把最近获得的新知识全都写下来的时候，我感觉身体像是被掏空了一样。动物们蜕皮重生，我写下的文字就是那个灰色的、死亡的、脆弱易碎的空壳。新生生命哪里去了？我不知道啊我眼前只能看到失去了生命的字母的排列组合。</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>每月总结</category>
      </categories>
      <tags>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>thegateofEroupe</title>
    <url>/WestRoute.github.io/2022/04/15/thegateofEroupe/</url>
    <content><![CDATA[<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>杂文</category>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>《大众文化与文化理论》(2)</title>
    <url>/WestRoute.github.io/2022/03/31/popularculture2/</url>
    <content><![CDATA[<h2 id="第六章-结构主义与后结构主义"><a href="#第六章-结构主义与后结构主义" class="headerlink" title="第六章 结构主义与后结构主义"></a>第六章 结构主义与后结构主义</h2><p>在对结构主义文化理论展开讨论之前，有必要先对索绪尔的语言学著作做一介绍，并引入对于理解结构主义而言至关重要的一系列关键概念。<br></p>
<span id="more"></span>

<h3 id="费尔迪南·德·索绪尔"><a href="#费尔迪南·德·索绪尔" class="headerlink" title="费尔迪南·德·索绪尔"></a>费尔迪南·德·索绪尔</h3><p>索绪尔认为语言是由两个部分组成的。当我写下英文单词“cat”的时候，我既在纸上制造出了“cat”这个词的形状，又在头脑中勾勒出了一个“猫”的概念或图像：长着四条腿的猫科动物。索绪尔将前者（字词）称为*<em>“能指”（signifier）</em>，将后者（概念）称为<em>“所指”（signified）</em>。能指和所指是密不可分的（就像硬币或纸张的正反两面），共同构成了“符号”（sign）。<br></p>
<p>结构主义者认为我们对现实的感知是被语言建构出来的，不同的语言会勾画出不同的现实地图。<br></p>
<p>索绪尔对结构主义的发展做出的另一重要贡献是他对<em>语言 （langue）</em>和<em>言语 （parole）</em>的区分。<br></p>
<p>索绪尔还对语言学的两种研究路径做出了划分：<em>历时性（diachronic）</em>方法分析既定语言的历史变迁，而<em>共时性（synchronic）</em>方法对某一特定历史时期的语言加以考察。索绪尔指出，若想建立一门“语言科学”，就必须采用共时性的研究路径。因此，可以说，结构主义的文化研究方法通常是一种共时性的方法。结构主义者普遍认为，若要对文本与实践做出充分的阐释，只需重点关注它们的结构特征即可。这就不可避免地引发了种种争议——其他流派的理论家对结构主义的批评主要集中于其非<em>历史（ahistorical）</em>的视角。【119】</p>
<h3 id="克劳德·列维-斯特劳斯、威尔·赖特与美国的西部电影"><a href="#克劳德·列维-斯特劳斯、威尔·赖特与美国的西部电影" class="headerlink" title="克劳德·列维-斯特劳斯、威尔·赖特与美国的西部电影"></a>克劳德·列维-斯特劳斯、威尔·赖特与美国的西部电影</h3><p><em>克劳德·列维-斯特劳斯</em>利用索绪尔的理论来发掘所谓“原始”社会文化的*<em>“无意识基础”</em>（Lévi-Strauss, 1968: 18）。他将烹饪、礼仪、服饰、审美活动以及其他文化与社会实践当作语言来进行研究，指出每项实践都是一种独特的传播途径与表达形式。<br></p>
<p>列维-斯特劳斯声称，一切神话都具有相似的结构，而且都对社会发挥着类似的社会文化功能。尽管这并不是他的首要观点，但给文化研究带来了重要启发。神话之所以存在，就是为了让世界变得易于理解，用神秘的力量化解社会中的种种冲突与问题，即如列维-斯特劳斯所指出的那样：“神话思想对于站在自己对立面的事物总是保持警觉并采取行动……其作用就在于提供一个合理的模型，消弭社会中的矛盾”（224, 229）。于是，神话故事就成了一种文化，这种文化使冲突销声匿迹，让世界变得易懂而宜居，进而也就在人类与其自身、与其存在之间营造了和平的氛围。<br></p>
<p>威尔·赖特在<em>《六把枪与社会》（Sixguns and Society ）</em>一书中应用列维-斯特劳斯的结构主义方法来分析好莱坞出产的西部影片。他指出，西部片的绝大多数叙事能量（narrative power）源自影片自身的二元对立结构。然而，与列维-斯特劳斯不同，赖特关注的问题“并非如何揭示影片的精神结构，而在于探寻社会神话是如何通过自身的结构向社会成员传播某种观念或秩序的”（Wright, 1975: 17）。简言之，列维-斯特劳斯最关心的是人类心灵的结构，而赖特将注意力集中于西部片怎样“用简单的符号来传达深奥的含义，进而将美国人的社会信仰概念化”（23）。他指出，西部片总共经历了三个发展阶段，分别是“经典时期”（其中包括一个被他称为“复仇片”的变种）、“过渡主题时期”和“专业化时期”。尽管每个时期出品的影片类型彼此相异，但在其背后均潜藏着一系列基本二元对立结构（参见表6.2）。赖特坚持认为，若想完全理解一则神话的社会意义，不但要分析二元对立结构，还要分析神话自身的叙事结构，即“事件的进展与冲突的化解”（24）。而这正是赖特超越列维-斯特劳斯之处。<br></p>
<p>每一种影片类型都接合了各自的神话形式，通过不同的方式展示了美国梦 的实现过程：<br></p>
<p>古典的剧情告诉人们：若想赢得友情、尊敬和荣誉，就必须使自己卓尔不群，以独立的姿态用自身的力量去帮助他人……而复仇片淡化了个体与社会之间的兼容性，这类影片往往表明，要想受人尊敬、被人爱慕，一方面必须挺身而出，以一己之力对抗众多强大的敌人，另一方面则要时刻提醒自己，不要背弃包括婚姻和谦逊在内的温和的价值观。“过渡主题”西部片呼唤新的社会价值观，声称若想拥有爱情和友情，必须付出代价，那就是将自己从社会中驱逐出去，坚定地站在正义的立场上，与社会的褊狭无知做无畏的斗争。最后，专业化西部片的情节……告诉我们，要想获得人们的支持和尊重，需将自己培养成身怀绝技的技术人员，跻身专业精英人士之列，任劳任怨且只忠于团队，与一切负面的社会及社区价值观划清界限（186-187）。【123】<br><br></p>
<h3 id="罗兰·巴尔特：《神话学》"><a href="#罗兰·巴尔特：《神话学》" class="headerlink" title="罗兰·巴尔特：《神话学》"></a>罗兰·巴尔特：《神话学》</h3><p><em>《神话学》（Mythologies ）</em>一书就以法国的大众文化为考察的对象。在这部著作中，巴尔特对诸多文化形态进行了讨论，包括角斗、肥皂粉与清洁剂、玩具、牛排与薯片、旅游，以及公众对科学的态度，等等。其主要原则就是质疑日常生活中的种种“虚假的显见”（the falsely obvious）（Barthes, 1973: 11），将隐藏于大众文化之文本与实践中的意涵揭示出来。巴尔特怀有政治意图，他抨击的目标就是所谓的“中产阶级规范”（9）。他在1957年版《神话学》的前言中写道：“我讨厌看见人们将自然和历史搞得混乱不堪，我要将那些隐而未言之物（what-goes-without-saying）统统展示在人们面前，戳穿意识形态侮辱世人的假面”（11）。《神话学》是将<em>符号学（semiology）</em>  方法应用于大众文化分析的最重要的著作，而首位阐释符号学的潜在价值的学者是索绪尔：<br></p>
<p>语言是一个用符号来表达观念的系统，因此语言与书写、手语、象征性仪式、礼节规范以及军事信号等系统都具有可比性……于是，我们可以设想一种专门研究社会中符号的存在的科学……我称之为“符号学”（Saussure, 1974: 16）。<br></p>
<p>巴尔特指出，为人们所消费的神话是在次级指意系统或内涵的层面上被生产出来的。在他看来，神话就是包含了一整套观念与实践的意识形态，其功能在于积极推行统治阶级的利益与价值观，维护既存的社会权力结构。若想深入理解巴尔特的上述观点，需首先认清符号的多义性（polysemic）特征，即一个符号具有指向多重意义的潜能。<br></p>
<p>人们会应用哪种代码对文本做出解读，取决于三个要素：文本所在的场所、读者所处的历史时期与读者的文化背景。<br></p>
<p>还有第四种解读立场，那就是巴尔特自己的立场——神话学家的立场。这种解读立场可以形成巴尔特所谓之“结构性描述”（structural description），深掘影像中包孕的意识形态意义，揭示神话将历史转化为自然的过程。巴尔特指出：“是符号学使我们了解到神话的历史意向，及其妄图将政治观念自然化的野心。在当下，这一过程指的就是中产阶级的意识形态”（同上）。在巴尔特眼中，“神话是在历史质地（historical quality）丧失的过程中被建构出来的；在神话中，事物全然失去了自己曾经是‘人造之物’的记忆”（同上）。他以*<em>“去政治化的演讲”（depoliticized speech）</em>来描述。<br></p>
<h3 id="后结构主义"><a href="#后结构主义" class="headerlink" title="后结构主义"></a>后结构主义</h3><p><em>后结构主义（post-structuralism）</em>认为意义的背后并不存在任何牢不可破的潜在结构。意义始终处于生成的过程之中，而绝无固定的落脚处；我们眼中的文本的“意义”只是永无止境的阐释链上的一个转瞬即逝的停顿。<br></p>
<p>巴尔特已经从结构主义者转变为后结构主义者，他在<em>《作者之死》（“The Death of the Author”）</em>一文中指出：文本“乃是一个多维空间，而各种各样的非原创性书写（writings）就在其内交相混杂、此消彼长。文本仿若一张写满引语的棉纸，从不计其数的文化中心汲取着成分”（Barthes, 1977c: 146）。只有解读者才能暂时将一个文本统为整体。与图书馆架子上和书店里的那些结构完备的著作不同，文本“只能在生产行为中被人们体验”（157）。也就是说，文本与读者做出各种解读行为的过程是密不可分的。<br></p>
<h3 id="雅克·德里达"><a href="#雅克·德里达" class="headerlink" title="雅克·德里达"></a>雅克·德里达</h3><p>在德里达看来，对于结构主义而言至关重要的“二元对立”并非简单的结构性关系，而是一种权力关系，是将一种宰制性的词语体系凌驾于其他词语体系之上。而这种“凌驾性”（或者说优先性、特权性）并非在符号与符号的关系中“自然而然”地生成的，而是在关系的建构过程中被生产出来的。<br></p>
<p>我们绝不能“仅仅调和对立双方的矛盾……个别词语控制了其他词语……占据着至高无上的地位。要想将二元对立彻底解构，我们必须颠覆整个等级制（hierarchy）”（1978b: 41）。与其接受教科部广告的“双重欺骗性”，不如对其进行“解构式”阅读，以此来摧毁二元对立结构，揭露支撑着这一结构的乃是特定“暴力”的真相；而这种暴力，其实是关于性别与性取向的一系列可疑的假设。【133】<br></p>
<h3 id="话语与权力：米歇尔·福柯"><a href="#话语与权力：米歇尔·福柯" class="headerlink" title="话语与权力：米歇尔·福柯"></a>话语与权力：米歇尔·福柯</h3><p>米歇尔·福柯关注的首要问题是知识与权力之间的关系，及其对话语（discourse）与话语构型（discursive formation）的操纵。福柯提出的“话语”的概念与阿尔都塞的“问题域”非常相似——两者都表示为人们所组织且本身也具有组织性的知识体；这些知识中包含着相应的法则与规范，在日常生活中支配着人们的特定实践（人的思维方式和行为方式）。<br></p>
<p>话语通过三种途径发挥作用，分别是赋权、限制和建构。福柯指出，话语乃是“系统地形构了人类言谈对象的实践”（Foucault, 1989: 49）。<br></p>
<p>“权力生产了知识……两者关系密切，相互依存……若离开了对相关知识领域的建构，权力关系将不复存在……所有的知识都在生成的过程中预示并建构了权力关系”（1979: 27）。<br></p>
<p>话语的存在并非仅仅意味着权力的强加。诚如福柯所言：“有权力的地方就有抵抗”（2009: <br></p>
<h3 id="全景敞视机制"><a href="#全景敞视机制" class="headerlink" title="全景敞视机制"></a>全景敞视机制</h3><p>在福柯看来：</p>
<p>全景敞视监狱的主要作用在于使置身其内的人自己意识到监视的无所不在，从而主动规范自己的行为，确保权力机制的自动运行……哪怕实际的监视行为只是断断续续进行的，也不妨碍在人们的观念中始终存在着监视的效果。一个完美的权力机制无须时时刻刻采取实际行动……置身于权力语境之内的成员会自觉遵守权力的规范……当一个人清楚地知道自己的一举一动都会暴露在别人的视线之下时，权力的限制性职责就开始发挥作用了，因为这个人会通过自我约束的方式将权力关系深深镌刻于内心深处。在上述权力关系中，人扮演着双重角色——既是控制者，又是被控制的对象（Foucault, 1979: 201, 202-203）。【137】<br></p>
<h3 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h3><p>Storey, John (ed.), Cultural Theory and Popular Culture: A Reader , 4th edition, Harlow: Pearson Education, 2009.该书是本书的配套阅读材料，其中收录了本书所涉之大多数重要文献。本书及其配套读本得到了互动式网站<a href="http://www.pearsoned.co.uk/storey%E7%9A%84%E6%94%AF%E6%8C%81%E3%80%82%E8%AF%A5%E7%BD%91%E7%AB%99%E4%B8%AD%E5%8C%85%E5%90%AB%E4%BA%86%E8%AE%B8%E5%A4%9A%E6%9C%89%E7%94%A8%E7%9A%84%E9%93%BE%E6%8E%A5%E4%B8%8E%E7%94%B5%E5%AD%90%E8%B5%84%E6%BA%90%E3%80%82%E3%80%90139%E3%80%91">www.pearsoned.co.uk/storey的支持。该网站中包含了许多有用的链接与电子资源。【139】</a></p>
<p>During, Simon, Foucault and Literature: Towards a Genealogy of Writing , London: Routledge, 1992.尽管本书主要关注文学，但其对福柯的介绍非常详尽。</p>
<p>Eagleton, Terry, Literary Theory: An Introduction , Oxford: Basil Blackwell, 1983.本书的“后结构主义”一章非常精彩。</p>
<p>Easthope, Antony, British Post-Structuralism , London: Routledge, 1988.作者试图为整个英国后结构主义领域勾勒地图，其中关于电影理论、文化研究、解构和历史研究的章节很有价值。</p>
<p>Hawkes, Terence, Structuralism and Semiotics , London: Methuen, 1977.一本关于结构主义和符号学的导论性著作，很有价值。</p>
<p>McNay, Lois, Foucault: A Critical Introduction , Cambridge: Polity Press, 1994.本书对福柯的理论进行了精彩的介绍。</p>
<p>Norris, Christopher, Derrida , London: Fontana, 1987.本书对德里达进行了清晰且趣味盎然的介绍。</p>
<p>Sarup, Madan, An Introductory Guide to Post-Structuralism and Postmodernism , 2nd edn, Harlow: Prentice Hall, 1993.本书对后结构主义进行了精彩的介绍。</p>
<p>Sheridan, Alan, Michel Foucault: The Will to Truth , London: Tavistock, 1980.本书是迄今为止关于福柯的可读性最强的著作。</p>
<p>Silverman, Kaja, The Subject of Semiotics , Oxford: Oxford University Press, 1983.本书对结构主义、符号学、精神分析、女性主义和后结构主义的讨论既有趣又易懂，其中对于巴尔特的介绍尤其有价值。</p>
<p>Sturrock, John (ed.), Structuralism and Since: From Lévi-Strauss to Derrida , Oxford: Oxford University Press, 1979.该文集收录了不少关于列维-斯特劳斯、巴尔特、福柯和德里达的介绍性文章。</p>
<p>Twaites, Tony, Lloyd Davis and Mules Warwick, Tools for Cultural Studies: An Introduction , Melbourne: Macmillan, 1994.本书阐述了符号学在文化研究中的地位，富有启发性。</p>
<p>Weedon, Chris, Feminist Practice and Poststructuralist Theory , Oxford: Basil Blackwell, 1987.本书从女性主义视角出发，对后结构主义做出了有趣的评介，尤其是就福柯进行了有益的讨论。</p>
<h2 id="第七章-性别与性取向"><a href="#第七章-性别与性取向" class="headerlink" title="第七章 性别与性取向"></a>第七章 性别与性取向</h2><h3 id="女性主义"><a href="#女性主义" class="headerlink" title="女性主义"></a>女性主义</h3><p>女性主义至少包括四个截然不同的流派，分别是激进女性主义、马克思主义女性主义、自由主义女性主义，以及西尔维娅·沃尔比（Sylvia Walby）（1990）所言之“双重系统理论”（dual-systems theory）。每一流派都从特定的角度揭示女性所受之社会压迫，并根据不同的原因提出相应的解决方案。激进女性主义认为造成女性受压迫地位的首恶是父权制，在这一社会系统内，男性群体得以将自己的权力凌驾于女性群体之上。马克思主义女性主义则将矛头指向资本主义，认为男性统治女性只不过是资本统治劳动力的结果。自由主义女性主义与前两者的不同之处在于其未将问题归咎于任何制度——父权制或资本主义制度，而倾向于在具体形式中探讨男性对女性的偏见，如在法律制度或日常表达中有意无意地将女性排除于特定生活领域之外，等等。“双重系统理论”则体现了激进女性主义和马克思主义女性主义的融合，指出女性所受压迫乃是父权制和资本主义互相勾结的产物。当然，女性主义流派不止上述四种，罗丝玛丽·佟恩（Rosemary Tong）（1992）就曾罗列出下述七种：自由主义、马克思主义、激进主义、精神分析、社会主义、存在主义以及后现代主义。<br></p>
<p>拉娜·莱考（Lana Rakow）发表过类似的观点：“在分析大众文化时，女性主义者往往从各自不同的理论立场出发，关注社会层面的深度剖析并带有明确的政治意图”（Rakow, 2009: 195）。此外，莱考还指出：<br></p>
<p>尽管当代女性主义理论家对大众文化的观点不尽相同，但她们共同持有两个主要假设：第一，在与大众文化的关系问题上，女性和男性截然不同……第二，女性若要掌控自己的身份、改变旧有的社会意识形态和社会关系，就必须充分理解大众文化在女性文化和父权制文化领域内所发挥的不同作用……女性主义者声称大众文化在父权制社会内扮演了重要角色，只有对这一角色进行深入剖析才能确保自身在讨论的持续进行中站稳立场（186）。<br></p>
<h3 id="电影中的女性形象"><a href="#电影中的女性形象" class="headerlink" title="电影中的女性形象"></a>电影中的女性形象</h3><p>墨维认为取代大众电影的应当是一种先锋性质的电影，此类电影“带有激进的政治色彩和美学意蕴，并对主流电影的基本假设构成挑战”（Mulvey, 1975: 7-8）。而包括洛琳·加曼（Lorraine Gamman）和玛格丽特·马什门特（Margaret Marshment）在内的女性主义理论家对墨维观点的“普适性”（Gamman and Marshment, 1988: 5）提出了质疑，反问“凝视是否总是男性的”，以及这种凝视“是否仅仅是‘宰制性’的”（同上）。毕竟，观看的方式多种多样，其中自然也应包括女性的凝视。二人坚持认为：【142】<br></p>
<p>仅仅将大众文化视为资本主义和父权制社会的辅助系统是不够的。大众文化并非只是向愚蠢的群氓兜售“虚假意识”的工具，它还是对意义展开争夺的和对宰制性意识形态进行破坏的场所（1）。<br></p>
<p>鉴于此，她们主张采取一种干预性的文化政治理念：“我们绝不能以‘事不关己’的姿态拒斥大众文化”（2）。<br></p>
<p>斯戴西将她们对电影的反应区分为三种话语类型，分别是<em>逃避现实 （escapism）</em>、<em>身份认同 （identification）</em>和<em>消费主义 （consumption）</em>。<br></p>
<h3 id="解读言情小说"><a href="#解读言情小说" class="headerlink" title="解读言情小说"></a>解读言情小说</h3><p>在《仇恋》（Loving with a Vengeance ）一书中，塔尼娅·莫德莱斯基（Tania Modleski）指出，那些撰写“女性叙事”的女性往往倾向于采取下列三种立场中的一种：“轻蔑、主要针对叙事文学的消费者的敌视，以及最为常见的无礼的嘲弄”（Modleski, 1982: 14）。为与之对抗，她声称：“是时候对女性阅读进行女性主义解读了”（34）。所谓“大众化生产的女性幻景”（包括言情小说）“体现着女性生活中种种真实的问题与张力”（14），而对于“现代女性主义者”而言，这些通过叙事来解决问题、缓和冲突的方式“绝难取得成功”（25）。不过，言情小说的读者和女性主义读者的确存有共同之处，那就是她们都对女性生活的现状心存不满。<br></p>
<p>詹妮丝·莱德威（Janice Radway）在其研究的一开始就指出言情小说之所以广受欢迎，在一定程度上是由于“图书的生产、发行、广告及市场策略发生了重大改变”（Radway, 1987: 13）。她对前人的论述提出质疑，指出言情小说的商业成功一方面当然是由于女性的阅读需求日益增长，另一方面也源于出版商日臻娴熟的推销技巧，两者具有同等重要性。<br></p>
<p>莱德威在“史密斯顿” （Smithton）展开了自己的调查研究，在史密斯顿女性的心目中，理想的言情小说情节应当是这样的：一位独立且富幽默感的知识女性，在经历了种种怀疑、猜忌，乃至残忍、暴力之后，终于被一个男子的爱情征服；在恋爱过程中，该男子由轻率粗鄙而日渐成熟，直至成长为一个关心 女性、甘愿供养 女性的好男人——这也正是传统意义上女性对男性的期许。莱德威如是解释：“浪漫幻景……并非关于发现一位格外有趣的生活伴侣的幻想，而是一种期望被关怀、被热爱、被肯定的特殊仪式”（83）。这是一种“回报式”幻想：男人对女人施予关注与爱护，而女人亦应投桃报李。不过，言情小说带来的幻景远不止这些。通过阅读这些小说，女性读者会忆起往昔的幸福时光，重返被“母性”之爱包容的年代。<br></p>
<p>莱德威援引南茜·乔多罗（Nancy Chodorow）（1978），指出言情小说营造的幻景是一种形式独特的回归，让读者在想象上和情感上重返“自己仍是被某位供养者所关注的焦点”的年代（84）。不过，这种回归并非如考沃德所言是以父亲为中心，而是以母亲为中心的。<br></p>
<p>莱德威还沿用了乔多罗对“自我”的界定，认为女性自我是一种时刻处于和他者关系之中的自我，而男性自我是独立而自洽的自我。乔多罗曾指出，男性自我与女性自我的不同源于两者与母亲的关系不同，而莱德威在乔多罗所言之心理学因素与理想言情小说的叙事类型之间建立了关联：在从身份危机到身份重建的旅程中，“女主角最终成功建立起理想化的叙事……建立起我们都熟悉的女性自我，即与他人关系中的自我”（139）。此外，莱德威还赞同乔多罗的另一观点，认为女性只要在俄狄浦斯情结中浮现，便立即身陷某种“牢固的三角形心理结构”，这意味着女性“既需与异性打交道，又要持续不断地以母性身份与供养及保护自己的人维系紧密的情感联系”（140）。为了体验这种母性情感完满的回归，女性有三种选择：同性恋、与男人建立两性关系，以及通过其他方式获取满足。我们文化的恐同性（homophobia）特征制约着第一种选择，男性气质制约着第二种，而阅读言情小说隶属于第三种选择。莱德威指出：<br></p>
<p>言情小说营造的幻景一方面来自渴望爱与被爱的俄狄浦斯情结，另一方面源于持续不断的前俄狄浦斯情结，该情结是女性内客体构成（inner-object configuration）的一部分，具体体现为期望重获母亲之爱，以及与之相关的一系列暗示——色欲带来的快感、共生的圆满，以及身份的确证（146）。<br></p>
<p>理想的言情小说为上述三角形结构提供了完美的解决方案：“父亲式的保护、母亲式的关怀，以及激情洋溢的成人之爱”（149）。<br></p>
<h3 id="《观看〈豪门恩怨〉》"><a href="#《观看〈豪门恩怨〉》" class="headerlink" title="《观看〈豪门恩怨〉》"></a>《观看〈豪门恩怨〉》</h3><h3 id="解读女性杂志"><a href="#解读女性杂志" class="headerlink" title="解读女性杂志"></a>解读女性杂志</h3><p>约克·赫米斯（Joke Hermes）的《解读女性杂志》（Reading Women‘s Magazines ）一书以对前辈女性主义学者所做之女性杂志研究的综述开篇。“我始终有种强烈的感觉，即女性主义的抗争应当以赢得尊敬为最终目标。或许正因如此，前人所做的绝大多数女性杂志研究都令我感觉极不舒服。这些研究仅仅表达了对女性杂志读者的‘关注’而非‘尊敬’”（Hermes, 1995: 1）。</p>
<h3 id="后女性主义"><a href="#后女性主义" class="headerlink" title="后女性主义"></a>后女性主义</h3><p>后女性主义（post-feminism）是一个复杂的概念，它既可被用于描述女性主义的一个分支，也可以指女性主义内部的一种理论立场，还可以代表当代大众文化的一种趋势。</p>
<p>将女性主义纳入后女性主义大众文化是霸权的一种典型的运作方式。除此之外，我们也可将这一过程视为一种马尔库塞所强调的“单向度生产”机制（参见第四章对这两种观点的讨论）。</p>
<h3 id="男性研究与男性气质"><a href="#男性研究与男性气质" class="headerlink" title="男性研究与男性气质"></a>男性研究与男性气质</h3><p>肖恩·尼克森（Sean Nixon）持有与伊索普相似的视角，指出“新男性”气质仿若某种“表征的政体”（regime of representation）。他将自己的分析聚焦于“文化流通的四个关键场所：电视广告、报刊广告、男装商场与男性杂志”（4）。</p>
<p>尽管女性主义者时常鼓励男人检视自身的男性气质，但甚少有人对男性研究产生兴趣。诚如乔伊丝·卡南（Joyce Canaan）和克莉丝汀·格里芬（Christine Griffin）所指明的那样：</p>
<p>毫无疑问，通过获知男人对于父权制如何被建构和转化为两性关系的宰制性系统的理解，女性主义者可以极大地拓宽自己的视野。但是，我们也担心女性对男性和男性气质的体验会因男性研究的存在而遭到歪曲、藐视乃至否定。因此，随着越来越多的男人投身于可与女性主义“分庭抗礼”的研究之中，女性主义者必须更加坚定地将男性和男性气质研究进行下去（Canaan and Griffin, 1990: 207-208）。【167】</p>
<h3 id="酷儿理论"><a href="#酷儿理论" class="headerlink" title="酷儿理论"></a>酷儿理论</h3><p>若想对“自然而然的”性别和异性恋霸权的虚构意识形态展开讨论，最佳方式莫过于从酷儿理论的奠基之著——茱迪丝·巴特勒（Judith Butler）那部影响深远的《性别麻烦》（Gender Trouble ）——入手。</p>
<p>巴特勒以“扮装” （drag）喻指性别操演的模式，进而对其机制做出解释，其原因并非如某些批评家所揣测的那样是由于“‘扮装’是颠覆性别的范例”（xxii），而是因为“‘扮装’过程使指意的模式戏剧化，进而确立了‘性别’自身”（xxviii）。经由“扮装”过程，社会性别的异性恋规范所维护的表面统一性和虚构连贯性得以昭示天下。诚如巴特勒所言：“在模拟性别的过程中，‘扮装’于不知不觉间揭示出性别自身的模拟式结构，同时展露了性别归属的偶然性”（175）。扮装并非对“原始”或“自然”性别身份的复制，而是对“原初性神话（myth of originality）本身的模拟” （176）。如她所言：</p>
<p>假如性别划分……并不是表达性（expressive）而是操演性（performative）的，那么此种划分行为与其说是揭露了性别身份，不如说是建构了性别身份。“表达”和“操演”之间存在天壤之别。如果说与性别相关的属性和行为——人类身体展现或生产文化意义的种种方式——全系“操演出来”的话，那便意味着根本不存在什么先天的性别身份，对性别属性与行为的衡量更是无从谈起，无谓真假，无谓曲直，而所谓“真正的”性别身份只不过是一系列虚构出来的行为规范。关于性别的一切“事实”都是在“社会表演”（social performance）中被“创造”出来的，无论“原初”的生理性别还是本真且永恒的两性气质都只不过是悲剧一场，一面掩盖着性别操演机制的本来面目，一面压抑着“另类”性别操演对异性恋意识形态的男性气质霸权的反抗（180）。 </p>
<p>“酷儿式”解读既非替代性解读、有意为之的误读，亦非“过度解读”。此种解读中蕴含的“反常性”纵然错综复杂，却时时刻刻存在于大众文化的文本与受众之中；而“酷儿”的使命，即是对上述“反常性”展开充分的认识与接合（83-84）。</p>
<h3 id="拓展阅读-1"><a href="#拓展阅读-1" class="headerlink" title="拓展阅读"></a>拓展阅读</h3><p>Storey, John (ed.), Cultural Theory and Popular Culture: A Reader , 4th edition, Harlow: Pearson Education, 2009.该书是本书的配套阅读材料，其中收录了本书所涉之大多数重要文献。本书及其配套读本得到了互动式网站<a href="http://www.pearsoned.co.uk/storey%E7%9A%84%E6%94%AF%E6%8C%81%E3%80%82%E8%AF%A5%E7%BD%91%E7%AB%99%E4%B8%AD%E5%8C%85%E5%90%AB%E4%BA%86%E8%AE%B8%E5%A4%9A%E6%9C%89%E7%94%A8%E7%9A%84%E9%93%BE%E6%8E%A5%E4%B8%8E%E7%94%B5%E5%AD%90%E8%B5%84%E6%BA%90%E3%80%82%E3%80%90173%E3%80%91">www.pearsoned.co.uk/storey的支持。该网站中包含了许多有用的链接与电子资源。【173】</a></p>
<p>Ang, Ien, Living Room Wars: Rethinking Media Audiences for a Postmodern World , London: Routledge, 1995.该领域内顶级学者洪美恩的论文集，十分精彩。</p>
<p>Barrett, Michèle, Women‘s Oppression Today: Problems in Marxist Feminist Analysis , London: Verson, 1980.本书的作者试图将马克思主义与女性主义的分析方法结合起来，为大众文化研究者提供了有用的参考。其第三章“意识形态与性别的文化产品”尤其有价值。</p>
<p>Brunt, Rosalind and Caroline Rowan (eds), Feminism, Culture and Politics , London: Lawrence &amp; Wishart, 1982.本书收录了一系列关于女性主义分析模式的论文。请重点阅读《女性主义与文化政治的定义》一文。</p>
<p>Burston, Paul and Colin Richardson (eds), A Queer Romance: Lesbians, Gay Men and Popular Culture , London: Routledge, 1995.本书是一部有趣的论文集。其收录的文章大多从酷儿理论的视角来看待大众文化问题。</p>
<p>Creekmur, Corey K.and Alexander Doty (eds), Out in Culture: Gay, Lesbian, and Queer Essays on Popular Culture , London: Cassell, 1995.本书是一部出色的论文集，站在“反恐同”和“反异性恋中心主义”的立场考察当代大众文化。</p>
<p>Easthope, Antony, What a Man‘s Gotta Do: The Masculine Myth in Popular Culture , London: Paladin, 1986.本书对男性气质在当代大众文化中的表征机制做出了一番有益且趣味盎然的论述。【174】</p>
<p>Franklin, Sarah, Celia Lury and Jackie Stacey (eds), Off Centre: Feminism and Cultural Studies , London: HarperCollins, 1991.本书收录了若干以女性主义理论从事文化研究的学者的论文。</p>
<p>Geraghty, Christine, Women and Soap Opera: A Study of Prime Time Soaps , Cambridge: Polity Press, 1991.本书对关于肥皂剧的女性主义分析做出了全面的介绍。</p>
<p>Jeffords, Susan, The Remasculinization of America: Gender and the Vietnam War , Bloomington and Indianapolis: Indiana University Press, 1989.本书对一系列大众文本中的男性气质表征进行考察，揭示了越南战争失利之后的美国文化如何走上困难重重的“重拾男子气”之路。</p>
<p>Macdonald, Myra, Representing Women: Myths of Femininity in Popular Media , London: Edward Arnold, 1995.本书论述了女性在大众传媒的言谈和视像中被建构的过程。</p>
<p>McRobbie, Angela, Feminism and Youth Culture , London: Macmillan, 1991.本书的作者是女性主义大众文化研究领域内的佼佼者。本书收录了她的若干重要论文。</p>
<p>Pribram, Deidre E.(ed.), Female Spectators: Looking at Film and Television , London: Verso, 1988.本书收录了一系列文章，从不同的视角对电影及电视大众文化进行考察。</p>
<p>Thornham, Sue, Passionate Detachments: An Introduction to Feminist Film Theory , London: Edward Arnold, 1997.关于女性主义对电影研究做出的贡献，本书进行了精彩的介绍。</p>
<h2 id="第八章-“种族”、种族主义与表征"><a href="#第八章-“种族”、种族主义与表征" class="headerlink" title="第八章 “种族”、种族主义与表征"></a>第八章 “种族”、种族主义与表征</h2><h3 id="“种族”与种族主义"><a href="#“种族”与种族主义" class="headerlink" title="“种族”与种族主义"></a>“种族”与种族主义</h3><p>斯图亚特·霍尔指出，在西方社会的历史上，“种族”概念的发展经历了三个关键时刻（Hall, 1997c），分别是奴隶制与奴隶贸易、殖民主义与帝国主义，以及伴随着20世纪50年代去殖民化的移民浪潮。</p>
<p>尽管种族主义以纯粹政治力所不及的能量塑造着人类的意识形态与行为方式，但我们仍需坚持不懈地将“种族”和种族主义现象置于社会与政治的框架之内加以评析（xx）。【177】</p>
<h3 id="种族主义意识形态的历史渊源"><a href="#种族主义意识形态的历史渊源" class="headerlink" title="种族主义意识形态的历史渊源"></a>种族主义意识形态的历史渊源</h3><p>源于<em>无知</em>与<em>恐惧</em>的*<em>“仇外情绪”（xenophobia）</em>由来已久，仿佛从不同族裔开始共存的那天起便始终存在。而“种族”和种族主义的历史，是极为特殊的。在英国，种族主义最早是为维护奴隶制与奴隶贸易的合法性而出现的。彼得·弗莱尔（Peter Fryer）指出：“当英国的奴隶贸易、英国的种植园奴隶制和英国的制造业三者开始联手追逐高额利润，那些古老的神话碎片与人种偏见便有了强悍的经济基础，逐渐转化为一套牢固的种族主义意识形态，也就是一系列关于种族的神话”（Fryer, 1984: 134）。换言之，种族主义起初是一种防御性意识形态，其传播意图在于维护奴隶制与奴隶贸易所带来的经济利益。</p>
<h3 id="东方主义"><a href="#东方主义" class="headerlink" title="东方主义"></a>东方主义</h3><p>爱德华·萨义德的《东方主义》（Orientalism ）是后殖民理论的奠基之著。在这部著作中，他深入考察了西方世界利用一种东方的话语来建构关于东方的“知识”的过程，探索相应而生的“权力—知识”体系如何在西方强权的利益中得到接合。在萨义德看来，“‘东方’完全是被欧洲人发明出来的”（Said, 1985: 1）。他用“东方主义”  这个表述来形容欧洲与东方的关系，尤其是“东方如何在影像、观念、性格和经验领域将欧洲（西方）界定为自己的对立面”（1-2）。此外，他还“竭力展现欧洲文化如何将自己乔扮成东方代理人，乃至东方的潜在自我，并从中获得力量与身份”（3）。</p>
<p>在讨论及分析东方主义时，可将其视为“处理”东方问题的某种组织机制（corporate institution），其具体方式包括：制造对东方的叙述、赋予某些关于东方的观点以权威性、描绘东方、教授东方的知识、对东方进行殖民、统治东方，等等。简言之，东方主义就是西方对东方加以宰制和重构，进而凌驾于东方之上的一种方式（同上）。</p>
<p>作为“虚构意识形态系统”（321）的东方主义其实与权力问题密切相关，是西方维系对东方霸权的诸多机制之一。在一定程度上，这种霸权是通过强调西方与东方的“绝对差异”而实现的：“西方……理性、发达且优秀，而东方……古怪、落后而贫瘠”（300）。</p>
<p>小说《黑暗之心》（Heart of Darkness ）和电影《现代启示录》（Apocalypse Now ）中的人物库尔茨（Kurtz）就属于这种类型。第二类故事则强调拥有“种族优越性”的白人对丛林及丛林栖息者的利用与征服。小说、电影和神话故事中常常出现的角色“人猿泰山”（Tarzan）是此类结构最典型的代表。在东方主义的视角下，上述两种叙事结构均包孕着帝国主义文化的欲望和焦虑，而不仅仅是对其他种族和异域土地的征服。</p>
<p>很多以越战为题材的好莱坞电影都可被视为东方主义叙事的经典案例。</p>
<p>福柯关于权力问题的一般观点也适用于解释好莱坞的话语权：</p>
<p>我们必须从现在开始停止用种种消极的语汇来描述权力效应；“排斥”“抑制”“掩饰”“隐瞒”等，这些表述应统统摒弃。事实上，权力是一种生产性的力量，它生产了现实，生产了客体领域，也生产了关于真理的种种仪式（Foucault, 1979: 194）。</p>
<p>此外，福柯还指出：“每个社会都有其独特的‘真理政体’和‘一般政治理念’；换言之，某些特定类型的话语为人们所广泛接受并发挥了真理的作用”（2002a: 131）。</p>
<ol>
<li>第一种叙事范式可以概括为“作为背叛的战争”（the war as betrayal）。</li>
<li>第二种叙事范式可被归纳为“黑白颠倒综合征”（the inverted firepower syndrome）。</li>
<li>第三种叙事范式是“战争的美国化”（the Americanization of the war）。这一表述的意味是：在好莱坞越战影片（当然还有其他美国文化产品）中，越南战争已经演变成一个纯粹的美国现象，与越南无关——我们可称之为“帝国式自恋”（imperial narcissism）。因此种情结作祟，美国成了世界的中心，越南和越南人民只不过作为美国悲剧的语境而存在，而越南人的粗蛮最终导致了美国式纯真的迷失。</li>
</ol>
<p>布什的演讲内容多数大同小异，折射出20世纪80年代美国主流话语对越战意义的解读：“越南战争是一个崇高的理想，却遭到了背叛，最后竟变成美国的悲剧。”例如，为了遏制越南综合征对美国政治的影响，罗纳德·里根（Ronald Reagan）在1980年的总统竞选中公开声称：“从今以后，我们应深刻地认识到越南战争是一个崇高的理想”（转引自John Carlos Rowe and Rick Berg, 1991: 10）。此外，他还坚称：“让我们告诉那些参加过战争的人：假若我们的政府害怕赢得战争，就绝不该将成批的有为青年推到战场上送死”（转引自Stephen Vlastos, 1991: 69）。1982年（最后一批美军撤离越南约10年之后），越战将士纪念碑在华盛顿揭幕，里根发现美国人“开始认识到越战的合理性了”（转引自Barbie Zelizer, 1995: 220）。1984年（最后一批美军撤离越南11年之后），越战无名英雄纪念碑正式奠基。在奠基仪式上，里根宣称：“一位美国英雄终于回到了祖国的怀抱……他接受了任务并完成了使命，其忠贞爱国的精神时刻感召着我们”（转引自Rowe and Berg, 1991: 10）。1985年（最后一批美军撤离越南12年之后），纽约举办了主题为“欢迎回家”的盛大游行，欢迎越战老兵。上述政治修辞行为和全民缅怀活动表明某种关于越战意义的新“共识”正在形成。这一过程从1980年里根在总统选举中大获全胜开始，至1991年布什在海湾战争中大获全胜而宣告完成。正因如此，布什才会在为战争做动员时号召美国人牢记越南战争——因为彼时的美国人已经将“作为勇气与背叛之战”的越南战争成功地内化为自己的“经验”，而好莱坞的越战影片于其中扮演了关键角色——它们通过排演、详述、阐释和重叙等方式为美国民众提供翔实的资料，最终建构了主流话语对越南战争的记忆与理解。【186】</p>
<p>不客气地说，美国在越南战场上投入的军事火力是人类社会有史以来强度最大的一次。在好莱坞的叙事中，我们决然看不到美军对越南广大区域展开的计划周密的袭击，看不到汽油弹轰炸和地毯式搜寻，更看不到对停火区的利用以及大规模炸弹空袭。在1972年的“圣诞炮轰”（Christmas Bombing）战役中，美国“向河内（Hanoi）与海防 （Haiphong）投掷的炸弹比德国在1940—1945年间向英国投掷的还要多”（Franklin, 1993: 79）。另据统计，在越战期间，美军向越南国土投掷炸弹的总数大约是整个第二次世界大战中投掷炸弹总数的3倍（Pilger, 1990）。</p>
<p>玛丽塔·斯特尔肯（Marita Sturken）观察到：“一些越战老兵声称完全不记得自己对战争的记忆究竟是从哪里来的。是亲身经历、纪实照片，还是好莱坞电影？”（Sturken, 1997: 20）例如，一位名叫威廉·亚当斯（William Adams）的越战老兵就曾发表过如下言论：</p>
<p>《野战排》上映之后，很多人跑来问我：“越南战争真的像电影里演的那样吗？”我始终不知该如何回答。一方面，或许因为无论多么栩栩如生、多么惟妙惟肖，电影终究只是电影，而真正的战争是不可再现的；而另一方面，在我的脑海中，关于战争的“真实”情况早已与人们对战争的谈论纠缠在一起，不再是纯粹的记忆。这真是一件怪事。在某些方面看来，这又令我十分痛苦。不过，我们的记忆机制也借此得到了检验。越南战争不再是一个确定的事件，而仿若一部流动的集体剧本，我们对自身的时而自相矛盾、时而变幻莫测的看法便于其中遭到随意的涂写、删减与篡改（转引自Sturken, 1997: 86）。</p>
<p>克拉克还痛心地指出：“越战记忆一度是对帝国主义野心的抗拒，而今却成了让帝国主义卷土重来的催化剂”（206）。</p>
<h3 id="白人性"><a href="#白人性" class="headerlink" title="白人性"></a>白人性</h3><p>简言之，“白色”只不过是表面上“自然”与“正常”而已。除非在广泛意义上将白色视为一种普通的种族特征，否则情况就不会有什么改变。</p>
<p>“白人性”的合法性依据并非仅仅来自社会阶级和性别（以及其他标识社会差异的标准）等维度。即使在“白人性”这个概念内部，也存在着观念的分野——在不同的历史时期，对于哪些人有资格被“划归”白人这个问题，往往有着截然不同的答案。</p>
<h3 id="反种族主义与文化研究"><a href="#反种族主义与文化研究" class="headerlink" title="反种族主义与文化研究"></a>反种族主义与文化研究</h3><p>两段引文分别来自斯图亚特·霍尔和保罗·吉尔罗伊。</p>
<p>文化研究的使命即在于将种种精神资源调动起来，帮助我们理解生活的构成与所处的社会，理解因差异的存在而显得极度惨无人道的世界。幸运的是，文化研究不仅是学者与知识分子的领地，而且是广大人民群众的武器……种族问题始终困扰着我们的世界，对此视而不见的知识分子绝不值得尊敬，对此漠然置之的学术机构也决然无法昂首挺胸踏入21世纪。对此，我深信不疑（Hall, 1996e: 343）。【189】</p>
<p>社会的差异性日益显著，个体的焦虑感与日俱增，我们究竟该以何种姿态面对人们对陌生事物的恐惧与敌视，又该借由什么方式迎接相应而生的种种挑战？我们需弄清楚衡量相似性与差异性的标准是否已经发生有益的转变，进而淡化了人与人之间的疏离感，强化了人们对亲缘性的认识与重视。此外，还应明白，对20世纪种族迫害史的亲历可以让我们深刻理解“他者”的遭遇与痛楚，进而在普遍人性的基础上缔建和平……总而言之，人与人之间的共同之处远远多于相异之处，我们有能力进行对话、互相尊重。如果我们不想再犯错误，就必须在普遍人性的规范下约束自己的行为（Gilroy, 2004: 3-4）。</p>
<h3 id="拓展阅读-2"><a href="#拓展阅读-2" class="headerlink" title="拓展阅读"></a>拓展阅读</h3><p>Storey, John (ed.), Cultural Theory and Popular Culture: A Reader , 4th edition, Harlow: Pearson Education, 2009.该书是本书的配套阅读材料，其中收录了本书所涉之大多数重要文献。本书及其配套读本得到了互动式网站<a href="http://www.pearsoned.co.uk/storey%E7%9A%84%E6%94%AF%E6%8C%81%E3%80%82%E8%AF%A5%E7%BD%91%E7%AB%99%E4%B8%AD%E5%8C%85%E5%90%AB%E4%BA%86%E8%AE%B8%E5%A4%9A%E6%9C%89%E7%94%A8%E7%9A%84%E9%93%BE%E6%8E%A5%E4%B8%8E%E7%94%B5%E5%AD%90%E8%B5%84%E6%BA%90%E3%80%82%E3%80%90190%E3%80%91">www.pearsoned.co.uk/storey的支持。该网站中包含了许多有用的链接与电子资源。【190】</a></p>
<p>Baker, Houston A.Jr, Manthia Diawara and Ruth H.Lindeborg (eds), Black British Cultural Studies: A Reader , Chicago: University of Chicago Press, 1996.一部很有趣的论文集。</p>
<p>Dent, Gina (ed.), Black Popular Culture , Seattle: Bay Press, 1992.一部非常有用的论文集。</p>
<p>Dittmar, Linda and Gene Michaud (eds), From Hanoi to Hollywood: The Vietnam War in American Film , New Brunswick and London: Rutgers University Press, 1990.本书是关于好莱坞越战影片的最出色的论文集。</p>
<p>Dyer, Richard, White: Essays on Race and Culture, London: Routledge, 1997.关于白人性和文化的经典论著。</p>
<p>Fryer, Peter, Staying Power: The History of Black People in Britain , London: Pluto, 1984.很精彩。【191】</p>
<p>Gandhi, Leela, Postcolonial Theory: A Critical Introduction , Edinburgh: Edingurgh University Press, 1998.一本优秀的后殖民主义概论性著作。</p>
<p>Gilroy, Paul, There Ain‘t No Black in the Union Jack , London: Routledge, 1987/2002.本书是对“种族”问题进行文化研究的经典之作。</p>
<p>Gilroy, Paul, The Black Atlantic , London: Verso, 1993.本书对“文化专制主义”做出了深刻的批判。</p>
<p>Markus, Hazel Rose and Paula M.L.Moya, Doing Race: 21 Essays for the 21st Century, New York: Norton, 2010.一本关于“做种族”的精彩论文集。</p>
<p>Pitcher, Ben, Consuming Race, London: Routledge, 2014.本书对“种族”在日常生活中扮演的角色展开了有趣的讨论。</p>
<p>Williams, Patrick and Laura Chrisman (eds), Colonial Discourse and Post-Colonial Theory: A Reader , Harlow: Prentice Hall, 1993.本书收录了若干关于后殖民理论的论文，值得关注。</p>
<h2 id="第九章-后现代主义"><a href="#第九章-后现代主义" class="headerlink" title="第九章 后现代主义"></a>第九章 后现代主义</h2><h3 id="后现代状况"><a href="#后现代状况" class="headerlink" title="后现代状况"></a>后现代状况</h3><p>室内装饰与建筑设计风格、电影叙事与唱片生产的构成、电视广告与文艺纪录片的“互文性”、时尚杂志与时政期刊的版面设计、反目的论的认识论倾向、对“在场的形而上学”的攻击、感觉的衰减、战后“婴儿潮一代” （baby boomers）面对中年危机时的病态与幻灭感、反思的“困境”、一系列修辞转喻、表层的增殖、商品拜物教的新阶段、对视觉影像的执迷、代码与风格、文化政治过程、存在主义的碎裂与危机、主体的“去中心化”、“对宏大叙事的质疑”、多元权力话语对单一权力轴心的取替、“意义的内爆”、文化阶层的崩溃、核武器的自我毁灭性对人类世界的威胁、大学的衰落、新式微型技术的功能与效果、“传媒社会”“消费社会”“跨国资本主义社会”“非地域”（placelessness）感的滋生与被摒弃（“批判性的地域主义”）、旧有时空坐标的改换——当上述领域都被贴上“后现代”的标签……“后现代主义”显然已经成为一句时髦的口号（Hebdige, 2009: 429）。【193】</p>
<p>后现代理论在英美两国的滥觞出现于20世纪50年代至60年代初期，是通过<em>让-弗朗索瓦·利奥塔（Jean-Franois Lyotard）</em>、<em>让·鲍德里亚（Jean Baudrillard）</em>与<em>弗雷德里克·詹明信</em>等学者的作品实现理论化的。在大众文化研究领域，我将举出流行音乐与电视作为后现代文化的案例加以讨论。在本章末尾，将对后现代主义的三个主要方面进行评述，分别是：</p>
<ol>
<li>绝对价值标准的崩溃</li>
<li>文化全球化</li>
<li>文化融合。</li>
</ol>
<h3 id="20世纪60年代的后现代主义"><a href="#20世纪60年代的后现代主义" class="headerlink" title="20世纪60年代的后现代主义"></a>20世纪60年代的后现代主义</h3><p>后现代主义哀叹于现代主义早已丧失社会批判的波希米亚式力量，无法像从前一般令粗鄙的中产阶级“既恨且怕”；那些曾在中产社会边缘角落奋起发力的文艺作品——如巴勃罗·毕加索（Pablo Picasso）、詹姆斯·乔伊斯（James Joyce）、艾略特（T.S.Eliot）、弗吉尼亚·伍尔夫（Virginia Woolf）、贝托尔特·布莱希特、伊戈尔·斯特拉文斯基（Igor Stravinsky）等人的作品——俨然已被奉为“经典”，其原初的震撼力与批判力早已消丧殆尽。换言之，现代主义文化已经蜕变为中产阶级文化，其颠覆性力量则被形形色色的学院与博物馆消弭。因此，当下的先锋文化应当将矛头对准现代主义，诚如詹明信所言：</p>
<p>这显然是解释后现代主义得以“横空出世”的最令人信服的理由，因为在20世纪60年代的年轻人眼中，一度站在“反抗者”立场上的现代主义俨然已成为僵死的“经典”。一如马克思（1977）在另一语境下所做的比喻：宛若生活的头脑中挥之不去的梦魇（Jameson, 1984: 56）。</p>
<p>对于大众文化研究者而言，后现代主义摒弃了“无论从历史角度看还是从人性角度看都已过时的马修·阿诺德的文化观”（Sontag, 1966: 299），其最重要的理念莫过于强调“‘高雅’文化与‘低俗’文化之间的界限正日益变得毫无意义”（302）。因此，后现代主义乃是一种旨在对抗现代主义的文化精英主义的思想观念。大众文化经常从现代主义中汲取成分，现代主义却始终对与大众有关的一切事物持深刻的怀疑态度，虽其始终自称与“俗不可耐的中产阶级”不共戴天，但毫无疑问，唯有诉求于阶级社会的精英主义文化观，现代主义才能“顺理成章”地“攻占”各大学院与博物馆。</p>
<p>在20世纪50年代和60年代，盛行于英美的波普艺术（pop art）体现出对“壁垒”的明确拒斥。波普艺术家鄙夷阿诺德将文化视为“世人所思、所表的最好之物”的观点（参见第二章），转而拥护威廉斯的“文化是全部生活方式”的社会定义（参见第三章）。在60年代早期的大萧条中，英国大众艺术家无不对美国心驰神往（美国被视为大众文化的发源地）。这场运动的第一位理论家劳伦斯·艾洛维（Lawrence Alloway）曾如是说：</p>
<p>我们感兴趣的是大众化生产的都市文化，包括电影、广告、科幻小说和流行音乐。我们感觉到大多数知识分子非但未曾对商业文化标准产生抵触情绪，反而能够坦然接受现实、讨论细节，并成为商业文化的狂热消费者。这场运动的一个成果即是将波普文化与“逃避现实”“纯粹娱乐”以及“消遣放松”剥离开来，进而赋予其艺术的严肃性（转引自Frith and Horne, 1987: 104）。</p>
<p>安迪·沃霍（Andy Warhol）是波普艺术理论化过程中的另一位关键人物。他声称，艺术只有在被受众接受的时候方能成为艺术：“沃霍将一摞子布瑞罗（Brillo）包装盒摆在博物馆里，并不意味着这些盒子就成了艺术品。然而，假若你在博物馆中看到这些时常在超市中见到的物什，你在下次逛超市的时候就会感觉自己是在经历一场艺术的冒险，于是你的生活得到了升华——这才是使盒子变成艺术品的关键过程。只要自愿，每个人都是艺术家”（120）。</p>
<p>而美国的反传统文化——反越战运动、黑人民权运动、反现代主义精英主义运动、第二波女性主义运动、同性恋解放运动、文化实验主义运动、迷幻摇滚运动以及“迷幻视角主义”（acid perspectivism）（Hebdige, 2009）——则成了“先锋主义传统的结束章”（Huyssen, 1986: 195）。</p>
<h3 id="让-弗朗索瓦·利奥塔"><a href="#让-弗朗索瓦·利奥塔" class="headerlink" title="让-弗朗索瓦·利奥塔"></a>让-弗朗索瓦·利奥塔</h3><p>让-弗朗索瓦·利奥塔对后现代主义最重要的理论贡献是其初版于1979年的《后现代状况》（The Postmodern Condition ）一书。</p>
<p>利奥塔认为，所谓的“后现代状况”指的是西方社会出现的一种知识地位的危机，具体体现为“对宏大叙事（metanarratives）的怀疑”以及“宏大叙事合法性机制的衰落”（Lyotard, 1984: xxiv）。</p>
<p>史蒂文·康纳（Steven Connor）认为，《后现代状况》可被视为“对学术知识与学术机构在当下世界中的状况的隐秘寓言”（Connor, 1989: 41）。在某种意义上，利奥塔“‘诊断’的并非所谓后现代状况，而是徒劳无益的当代知识分子”（同上）。在他看来，当代知识分子身上充满了“消极英雄主义”的色彩。“整个20世纪60年代对学术界的粗暴攻击和猛烈批评”导致知识分子丧失了原本的权威性（转引自Connor, 1989: 41）。</p>
<p>当文化领域吵嚷着要“改天换地”时，分散在非洲、加勒比地区和亚洲的人们的声音、实践与身份却从后帝国主义英国的边缘地带冉冉上升，试图对确凿无疑的“常识”和世所共知的“真理”进行重新定位，进而为这个暮气沉沉、群龙无首、“旧去新不来”（Gramsci, 1971）的历史时期找到观察世界、理解世界的新方法（Mercer, 1994: 2）。</p>
<h3 id="让·鲍德里亚"><a href="#让·鲍德里亚" class="headerlink" title="让·鲍德里亚"></a>让·鲍德里亚</h3><p>在《符号的政治经济学批判》（For a Critique of the Political Economy of the Sign ）一书中，鲍德里亚将此转化过程描述为“从冶金术（metallurgic）社会向符号创造术（semiurgic）社会的过渡”（Baudrillard, 1981: 185）。不过，在鲍德里亚看来，后现代主义与其说是简单的符号文化，不如说是一种关于“拟像”（simulacrum）的文化。【198】</p>
<p>所谓“拟像”，指的是与原本（original）一模一样的复制品，而原本自身并不存在。在第四章中我们对本雅明的观点进行了介绍,他认为机械复制技术的出现摧毁了艺术作品的“灵韵”；而鲍德里亚走得更远，直接宣称原本与复制品之间的界限早已不复存在——他将这一过程称为“仿真”（simulation）。我们可以举CD唱片与电影为例来对上述观点做出解释。例如，假若某人买了一张史蒂夫·厄尔（Steve Earle）的专辑CD《革命在即》（Revolution Starts Now ），你很难说这张“复制品”与“原本”有什么区别。</p>
<p>鲍德里亚称，仿真乃是“在真实或原本缺席的情况下对真实模型的衍生，是一种超级真实（hyperreality）”（Baudrillard, 1983: 2）；而这种“超级真实主义”（hyperrealism）是后现代性的典型运作机制。在超级真实的领域内，仿真与“真实”之间的界限毁于“内爆”（implosion），“真实界”与“想象界”也在相互作用之中不断坍塌。其结果便是：真实与仿真带给人们的体验别无二致，就像过山车一样绵延不绝，毫无差异。而且，仿真有时甚至比真实本身显得更加真实——“比实实在在的东西还棒”（U2）。</p>
<p>约翰·费斯克（John Fiske）的观点似乎给我们带来了一些启示。他认为，“后现代传媒”不再提供“关于现实的次级表征（secondary representation），而是在介入现实的过程中对现实进行着生产”（Fiske, 1994: xv）。</p>
<p>关于超级真实主义，鲍德里亚自己则举出了迪士尼乐园的例子。他将迪士尼乐园称为“纠结的仿真规则的完美范例”（Baudrillard, 1983: 23），并声称迪士尼乐园的成功之处并不在于为美国人提供了逃避现实的幻想，而是以难于察觉的方式使游览者经历了一个浓缩的“真实”的美国。【201】</p>
<p>迪士尼乐园之所以存在，就是为了掩饰其自身正是“真实的”美国的事实；而所谓“真实的”美国，其实就是迪士尼乐园（正如监狱之存在就是为了掩饰其自身就是整个社会一样，而陈腐不堪且无所不在的社会，其实就是监狱本身）。迪士尼乐园以虚构的面貌呈现在我们面前，其实意在使我们相信乐园之外的世界是真实的。可实际上，包裹着迪士尼乐园的洛杉矶乃至整个美国都已不再真实，早已变作“超级真实”与仿真的产物。对于现实的虚假表征（意识形态）早已不是问题，问题在于“真实”本身已然不再“真实”（25）。</p>
<p>鲍德里亚的分析支持了利奥塔关于后现代主义的观点，如确定性的崩溃，以及关于“真理”的宏大叙事的消解，等等。上帝、自然、科学、工人阶级等，均已丧失其作为确凿无疑的真理中心的权威性，再也无法成为个体安身立命的佐证。在鲍德里亚看来，<em>这并非意味着“真实”的坍塌，而是一个“真实”隐退至“超级真实”之中的过程</em>。他声称：“当‘真实’变得面目全非，‘怀旧’便肩负起表达‘真实’的使命。于是，起源神话与现实符号大量增殖……这些关于现实与指涉的衍生产品令人既恐慌又忧虑”（12-13）。上述过程构成了鲍德里亚所言之“第二次历史变迁”。在保罗·利科（Paul Ricoeur）看来，现代主义所处的时代乃是一个“怀疑的解释学”的时代，强调透过表面对深层事实的意义进行探索。马克思与弗洛伊德显然是现代主义思维方式的典范（参见第四章与第五章）；而“超级真实”将注意力集中于政治表征与文化表征的问题——假若在表面之下并不存在任何确凿无疑的“真实”，那么表征的有效性又体现在何处？例如，按照后现代的逻辑，“兰博”并非代表着 美国关于越南问题的一种思维方式，而根本就是 一种思维方式；表征并非与“事实”泾渭分明，更未对“真实”加以掩藏或扭曲，表征就是事实本身 。当然，在很多情况下，我们会认为由鲍德里亚的理论引发的思想革命将斗争的矛头对准了一切潜在的意义（意义的存在是一切意识形态分析的先决条件），不过，假如我们重新审视鲍德里亚关于迪士尼乐园和水门事件的相关论述，难道不也能发现其所做的工作只不过是一种更加复杂的意识形态分析，即发掘表面之下的“真相”吗？【202】</p>
<p>鲍德里亚的理论乃是一种典型的现代主义叙事——历史是线性的，衰亡过程是单向的。然而，20世纪早期的高级现代主义尚且梦想着通过先锋文艺与文化精英来保存旧文化的价值，以图在未来实现振兴，鲍德里亚却只为我们描绘了一幅行将就木且希望渺茫的世界图景。在他看来，事实如此，没什么道理可讲，因为“道理”本身便意味着理性仍然存在（Docker, 1994: 105）。</p>
<h3 id="弗雷德里克·詹明信"><a href="#弗雷德里克·詹明信" class="headerlink" title="弗雷德里克·詹明信"></a>弗雷德里克·詹明信</h3><p>弗雷德里克·詹明信是一位美国马克思主义文化批评家，曾撰写过大量关于后现代主义的著述，影响深远。他与其他理论家的不同之处在于其强调在马克思主义或新马克思主义的理论框架之内诠释后现代主义。</p>
<p>在詹明信看来，后现代主义绝不仅仅是一种独特的文化风格，而且是一个“分期概念”（Jameson,1985: 113）,是晚期资本主义或跨国资本主义的“文化统治”。这种观念来自欧内斯特·曼德尔（Ernest Mandel）对资本主义发展的三个阶段的划分：</p>
<ol>
<li>“市场资本主义”</li>
<li>“垄断资本主义”</li>
<li>“晚期或跨国资本主义”（Mandel, 1978）</li>
</ol>
<p>上述三个阶段“构成了……资本侵入非商品化领域的最纯粹的形式”（Jameson, 1984: 78）。詹明信以文化发展的三种类型——“现实主义”“现代主义”和“后现代主义”——来对应曼德尔提出的线性模式。此外，他还借用了威廉斯对既定文化形态的三种类型（“宰制性文化”“新兴文化”与“剩余文化”）（Williams, 1980）的区分。在威廉斯看来，人类社会从一个历史时期过渡到另一个历史时期并不意味着旧文化的必然崩溃和新文化的必然崛起，而往往只是改变原有文化之间的相互关系。因此，在既定文化形态之内，各种各样的文化完全可以共存，不过其中只有一种可以成为宰制性文化。正是基于这一思路，詹明信方提出后现代主义是晚期资本主义或跨国资本主义的“文化统治”的观点（现代主义是“剩余文化”，至于什么是“新兴文化”，尚未可知）。【203】</p>
<p>后现代文化并非一种质朴的原创性文化，而是一种引用的文化，意即后现代主义的文化产品是从以前的文化产品中生成的。 [2] 因此，后现代文化呈现出“平面化、无深度”的特征，“是一种新型的、名副其实的表面文章”（60）。基于影像和外表的后现代文化拒斥“深度”，其对自身的阐释力来自其他影像和其他外表，是在无穷无尽的互文（intertextuality）机制中完成的。在后现代的“混仿”世界里“绝无可能产生风格的革新，我们所见之一切都是对旧风格的模仿；文化在想象的博物馆中找寻风格，穿透面具并发出声音”（1985: 115）。</p>
<p>詹明信举出的最典型案例即是其所谓“怀旧影片”（nostalgia film）。这一类型涵盖了20世纪八九十年代的许多影片，如《回到未来》（Back to the Future ）系列、《佩姬·苏要出嫁》（Peggy Sue Got Married ）、《斗鱼》（Rumble Fish ）、《天使心》（Angel Heart ）和《蓝丝绒》（Blue Velvet ）等。在詹明信看来，这些怀旧气息浓郁的影片都旨在重现20世纪50年代美国的文化风格与社会氛围。他声称：“至少对于美国人来说，50年代始终是欲望迷失的主要时期——那个年代并不仅仅象征着美国治下的 和平、稳定与繁荣，而且包含反传统文化的原初动力，如早期摇滚乐与青年团体，等等”（1984: 67）。此外，詹明信还强调不可将怀旧影片与历史影片混为一谈，他将《星球大战》（Star Wars ）也归为“怀旧影片”便证明了这一点。在我们看来，一部描绘未来世界的科幻影片居然被贴上“怀旧”的标签，实在不可思议，但詹明信如是解释：“《星球大战》蕴含着某种怀旧的……隐喻……它并未直接描绘关于过去的总体性图景，却通过形构特有的艺术对象的感觉与形态，为我们营造出古老的、‘过去’的氛围”（1985: 116）。</p>
<p>后现代文化之所以尽失历史性，与詹明信所归纳的第二种风格特征密切相关，即“精神分裂症”（schizophrenia）。这一表述来自拉康（参见第五章），意指语言的失序与能指之间时态关系的错乱。在“精神分裂症”的作用下，时间并非不间断的连续体，而是一个周而复始的在场，只有在过去或某种未来的可能性的侵入之下，方可显现自身。人类失去了时间连续体中的自我的意义，却也同时得到了“奖赏”，即强化了关于“现时”的感受。詹明信如是说明：</p>
<p>请注意，尽管时间的连续性被打破，但我们对“现时”的体验变得更加强大、更富生机、更可感可触；在精神分裂症的作用下，世界的紧张感大大强化，承载着神秘且急迫的职责与影像，并因幻觉的能量而容光焕发。不过，那些我们更为期许的经验，如洞察力的增强、对刺激的渴望、改变现状的幻想、冲破藩篱的欲求，等等，便皆尽丧失了，因为它们都已变得“不真实”（1985: 120）。</p>
<p>之所以为后现代文化冠以“精神分裂症”之名，皆因其早已丧失了历史感（而且其未来感也迥异于现代感）。这种文化患上了“历史健忘症”，困身于永久在场且时断时续的细流之中。由是，现代主义的<strong>“时间”（temporal）文化*便让位给后现代主义的</strong>“空间”（spatial）文化*了。</p>
<p>吉姆·柯林斯（Jim Collins）在近年来的电影发展史中发现了一股类似的风潮，他称之为“新式范型”（Collins, 2009: 470），即电影创作者在自己的作品中有意识地“引用”、提及乃至“照搬”其他电影中的元素。柯林斯的观点比詹明信的观点更具说服力，原因在于其对“能动性”的强调。他声称，此类电影建构了一个*<em>“混搭爱好者”的受众群体</em>，这些受众从电影的混搭风格中获取了无穷的快感。</p>
<p>与其说昆汀·塔伦蒂诺的影片是“混仿”，不如说是“改写”或“重顾”，它们完全基于观影者的切身经验，在“更富流动性与多样性的历史语境下”对既定的“感觉结构”加以“激活”与“重构”（同上）。【205】</p>
<p>日常生活的彻底“文化化”（culturalization）与“美学化”（aestheticization）标志着后现代主义与此前的一切社会文化运动都截然不同。作为一种文化，后现代主义并未预留任何“评论的空间”，它声称什么“收编”“推举”都是毫无意义的概念，因为“收编”与“推举”赖以生存的批判空间早已不复存在。这无异于将法兰克福学派的悲观主义推向了极致（参见第四章）。对此，格罗斯伯格发表了简明扼要的批判性评论：</p>
<p>在詹明信看来……我们需要采用新的“地图”来帮助理解晚期资本主义的空间组织。可另一方面，广大受众始终处于被动与噤声的状态，依然扮演着被宰制性意识形态所欺瞒的“文化白痴”的角色。不仅如此，他们还心甘情愿地接受着批评家的领导，因为批评家是唯一有能力对意识形态进行解读并为抵抗行为架桥铺路的人。至多，大众得以成功表现出自己无力对批评家的领导权做出回应的样子。然而，假若没有了批评家，大众甚至连自己发出的绝望的呐喊都无法听见。大众是毫无希望的，且将持续毫无希望下去。或许直到某天，某人为他们提供了必需的“理解”的地图以及抵抗的批判模式，情况才会改变（Grossberg, 1988: 174）。</p>
<p>我们进入肯定性文化领域，消除疲劳、更新换代，以图继续千篇一律的日常生活。由是，“肯定性文化”创造了一种新的现实，“在文化内部营造出一种表面的统一与表面的自由，而种种异见与反抗则在‘安抚政策’之下噤声。总之，文化既维护又掩盖了社会生活的新状况”（96）。资本主义战胜封建主义之后的种种承诺，如社会平等、社会正义与社会进步等，都从日常生活世界退缩至“肯定性文化”的领域内。与马克思、恩格斯对宗教的看法类似，马尔库塞也指出：文化通过缓解存在之痛的方式使原本不堪忍受的情况变得可以忍受了：【207】</p>
<p>肯定性文化的一个最重要的社会使命即是化解难以容忍的恶劣状况与对幸福快乐的需求之间的冲突，其目的便是使“难以容忍”的状况变得可以忍受。在这种状况下，唯一的解决方式就是制造幻觉，即将艺术的美感以幻觉的方式精确地呈现在人们面前……不过，即便是幻觉，也仍然发挥着实际的功效，即在维持现状的前提下……生产出人们的满足感（118-124）。</p>
<p>对于那些在维持现状的前提下生产着满足感的文化，马克思主义者是绝对不惜将其送入坟墓的。不过，诚如詹明信所言，现代主义文化的毁灭真的会阻滞社会的社会主义转型吗？事实上，情况或许恰恰相反。</p>
<p>欧内斯托·拉克劳与尚塔尔·墨菲在一定程度上接受了詹明信对后现代主义的分析。他们与詹明信的不同之处，在于其认识到了行动者的重要性：</p>
<p>如今，个人并不仅仅以出卖劳动力的方式屈从于资本的统治，而且融入了许多其他的社会关系，如文化、业余时间、疾病、教育、性，乃至死亡。尽管无论个人经验还是集体生活都无法跳脱资本主义生产关系的束缚，但“消费社会”既不会如丹尼尔·贝尔（Daniel Bell）所言，导致意识形态的终结，也不会像马尔库塞所担心的那样，创造出“单向度的人”。恰恰相反，已经有不计其数的新型斗争对新型的压迫和剥削进行了抵抗，而这些抵抗大多来自新型社会的心脏部位（Laclau and Mouffe, 2001: 161）。</p>
<p>此外，拉克劳和墨菲还指出：“新的文化形态与大众传播的扩张有密切关联。大众传播……导致新兴大众文化的出现，进而极大地撼动了传统的深厚根基。不过，关于大众传播的效果也很难一言以蔽之，因其既带来了无可置疑的大众化与一致化，又蕴含着足以颠覆社会不平等的力量元素”（163）。尽管这并不意味着社会“物质”的分配已经变得更加平等，但是，</p>
<p>作为传媒发展所带来的必然结果，文化民主化（cultural democratization）包孕着对基于旧社会形态的种种特权的质疑。传媒将受众质询为平等的消费者，赋予其行动的能力，激励成千上万的群体奋起反抗持续存在的、真实的不平等现象。毫无疑问，此种“民主消费文化”促进了新斗争形式的诞生，鼓励人们反抗各种形式的剥削和压迫，而肇始于美国的黑人民权运动就是一个绝佳的案例。青年文化现象的崛起亦很耐人寻味，年轻人将毋庸置疑地在抵抗运动中扮演中流砥柱的角色。为获取新的生存必需品，他们被日益建构为一个特殊的消费人群；他们渴望并追寻经济上的自主权，而这一切是当下的社会所无法给予的（164）。【208】</p>
<h3 id="后现代流行音乐"><a href="#后现代流行音乐" class="headerlink" title="后现代流行音乐"></a>后现代流行音乐</h3><p>韦斯特明确反对詹明信的观点，拒绝将后现代流行音乐“贬视”为某种简单的“混仿”。说唱音乐的互文性特征及对其他文本的引用并不是美学枯竭的结果，支离破碎的现代主义与文艺衰亡之间也并不存在针锋相对的冲突。恰恰相反，后现代流行音乐将七零八落的碎片“撷录”在一起，并于满怀敌意的文化氛围中发出了振聋发聩的呐喊：反抗歧视，坚决斗争。</p>
<h3 id="后现代电视"><a href="#后现代电视" class="headerlink" title="后现代电视"></a>后现代电视</h3><p>柯林斯对《双峰镇》进行案例分析，对后现代主义与电视之间的关系的各种理论假说进行了综合。以《双峰镇》为例是因为该剧“简直就是后现代主义电视的完美缩影”（341）。他指出，该电视剧之所以呈现出后现代主义的特征，是由一系列相关因素共同作用而导致的，如大卫·林奇 [1] （David Lynch）作为电影导演的声誉、剧集自身的风格特征，当然还有其对商业互文性的运用（如开发并销售衍生产品）。</p>
<p>在经济层面上，《双峰镇》开启了一个电视受众观念的新时代。受众不再被视为高度同质化的乌合之众，而是被剧集策略性地建构为一个碎片化的群体，依年龄、阶级、性别、性向、地域、族裔与“种族”的差异而呈现出不同的层次，每一个层次都对应着相应的广告商利益。大众的诉求如今纠缠于不同的受众群体之间，被分门别类地“出售”给相应的广告市场。由是观之，《双峰镇》的重要性在于其体现了广播电视网试图在与有线电视、电影和录影带产业的竞争中重居上风的努力——简言之，就是要博得“雅皮士” [2] （yuppies）一代的青睐。为证实上述观点，柯林斯对《双峰镇》的推广营销策略进行了专门的考察。他认为，该剧显然迎合了知识阶层的口味——林奇被标榜为“作者电影” [3] （auteur films）导演，《双峰镇》亦被贴上“先锋电视”的标签。不过，除此之外，还有很多人是以观看肥皂剧的心态观看该剧的，因此《双峰镇》便具有双重身份，两者互相结合，共同建构了一种后现代式的结构程式，即将该剧“同时锁定为准先锋电影与准肥皂剧”（345）。</p>
<h3 id="后现代主义与价值多元主义"><a href="#后现代主义与价值多元主义" class="headerlink" title="后现代主义与价值多元主义"></a>后现代主义与价值多元主义</h3><p>布尔迪厄努力在日常生活的经验世界中对“价值”进行（重新）定位，他试图表明：我们为某个休假目的地或某种着装风格“赋予价值”所产生的效果，丝毫不亚于我们为艾略特的诗作、奥提斯·雷丁（Otis Redding）的歌曲、辛蒂·舍曼 （Cindy Sherman）的摄影以及盖文·布莱亚斯（Gavin Bryars）的音乐赋予价值所产生的效果。价值评判从来就不是简单的个人品位问题，文化价值不但标榜社会差异的存在，而且维系并支持着社会差异。文化间的区隔源自后天习得的消费模式，并被人们内化为“自然而然”的倾向、质询及动员为某种“自然而然”的能力，而所有这一切只有一个最终目标：<em>捍卫社会统治的合法性</em>。统治阶级的文化品位被赋予制度化的形式，并在巧妙的意识形态操纵下将制度化的文化（统治阶级的文化）装裱成统治阶级文化优越性及社会优越性的佐证。总之，文化区隔对社会区隔、社会疏离以及社会等级进行着生产与再生产，成为维护统治阶级与被统治阶级之间社会差异的工具。由是，文化空间的生产与再生产便导致了社会空间的生产与再生产。</p>
<p>对于大众文化研究者而言，后现代主义所带来的最重要的影响莫过于人们开始认识到高雅文化与大众文化之间并不存在绝对的界限。尽管人们会认为某些文化比其他文化“更好”（至于对谁而言、好在哪里，则另当别论），但若想找一个简单明了的评判标准供我们参考、自动帮我们“去芜存真”，却是难上加难。</p>
<h3 id="全球性的后现代"><a href="#全球性的后现代" class="headerlink" title="全球性的后现代"></a>全球性的后现代</h3><p>将全球化视为单一美国文化（一种中产阶级的白人文化）的观念正在变淡，变得不那么单一。原因是多种多样的，例如美国拥有全世界第三多的西班牙裔人口。另据推算，及至2076年，即美国建国300周年时，印第安裔、非洲裔、亚洲裔以及拉丁裔将成为美国人口的主体。</p>
<p>霍尔曾宣称，所谓后现代主义“不过是全世界的美国梦”（Hall, 1996b: 132）。若真如此，那我们每个人的梦也是各不相同的，会梦到什么取决于我们选择美国的哪些部分进行消费。假如梦的原料来自美国流行音乐，则地理学与几何学、价值、影像、神话与风格等将因其属于蓝调音乐、乡村音乐、舞曲、民歌、重金属、爵士乐、说唱、摇滚、60年代摇滚或灵魂乐而截然不同。归根结底，每种音乐类型都会依阶级、性别、种族、族裔、性取向与代际的差异而生产出相应的政治接合。理解了这一点，才能认识到一切文化——包括无比强大的美国文化——都不是单一的。诚如萨义德所言：“文化与文化总是彼此牵连，谁都不能‘独善其身’。一切文化都是混血的、异质的、独特的、多元的”（Said, 1993: xxix）。</p>
<p>全球化是一个复杂的过程，产生了矛盾重重的后果，并导致文化与权力关系的变迁。我们可以借用葛兰西的霸权理论对全球化机制加以把握。从后马克思主义文化研究的霸权理论出发，文化既非“本真文化”（从“底层”自然生发出来），亦非“自上而下”强加给人民的欺骗性文化，而是两者之间的“均势妥协”（Gramsci, 1971: 161）。因此，文化既是“自下而上的”又是“自上而下的”，既是“商业的”又是“本真的”，既是“本土的”又是“全球的”。文化同时包含着“抵抗”与“收编”，兼顾“结构”与“行动”。全球化也如此。诚如霍尔所言：</p>
<p>所谓的全球化并非一个席卷万物、消弭一切差异的系统性过程，而是通过“特殊性”来发挥作用的——缅怀某些特殊的空间、特殊的族裔，想方设法唤醒自己的特殊身份，诸如此类。因此，我们应坚持用辩证的目光看待“本土”与“全球”的关系（Hall, 1991: 62）。</p>
<p>霸权是一个错综复杂且自相矛盾的过程，并非向人民灌输“虚假意识”那么简单。霸权可不是“在洛杉矶打好包装，海运至地球村港口，再于天真无邪的心灵之中缓缓展开”（Liebes and Katz, 1993: xi）的。理解全球化过程的更好方式是对全球驱动力与本土驱动力给予同等重视。我们须在承认权力存在的前提下，认清将“本土”人民视为其自身无力理解的某些过程中的沉默被动的受害者的政治策略。这种政治策略认为个体在宏大总体面前是虚弱无力的，至多只能承认受众的某些行为带有“行动者”的色彩；其存在的目的，则是维护既存的宰制性全球权力。</p>
<h3 id="融合文化"><a href="#融合文化" class="headerlink" title="融合文化"></a>融合文化</h3><h3 id="拓展阅读-3"><a href="#拓展阅读-3" class="headerlink" title="拓展阅读"></a>拓展阅读</h3><p>Storey, John (ed.), Cultural Theory and Popular Culture: A Reader , 4th edition, Harlow: Pearson Education, 2009.该书是本书的配套阅读材料，其中收录了本书所涉之大多数重要文献。本书及其配套读本得到了互动式网站<a href="http://www.pearsoned.co.uk/storey%E7%9A%84%E6%94%AF%E6%8C%81%E3%80%82%E8%AF%A5%E7%BD%91%E7%AB%99%E4%B8%AD%E5%8C%85%E5%90%AB%E4%BA%86%E8%AE%B8%E5%A4%9A%E6%9C%89%E7%94%A8%E7%9A%84%E9%93%BE%E6%8E%A5%E4%B8%8E%E7%94%B5%E5%AD%90%E8%B5%84%E6%BA%90%E3%80%82">www.pearsoned.co.uk/storey的支持。该网站中包含了许多有用的链接与电子资源。</a></p>
<p>Appignansesi, Lisa (ed.), Postmodernism , London: ICA, 1986.本书是一本关于后现代主义哲学的论文集。推荐阅读麦克罗比的那篇《后现代主义与大众文化》。</p>
<p>Best, Steven, and Douglas Kellner, Postmodern Theory: Critical Interrogations , London: Macmillan, 1991.本书是关于后现代主义的优秀导论性著作。</p>
<p>Boyne, Roy and Ali Rattansi (eds), Postmodernism and Society , London: Macmillan, 1990.一部很有帮助的论文集，其导论部分对后现代主义的主要问题进行了精妙的介绍。</p>
<p>Brooker, Peter and Will Brooker (eds), Postmodern After-Images: A Reader in Film, Television and Video , London: Edward Arnold, 1997.本书是一部精彩的论文集，导论部分亦出色。</p>
<p>Champbell, Neil, Jude Davies, and George McKay, Issues in Americanization , Edinburgh: Edinburgh University Press, 2004.本书收录了一系列与美国化相关的优秀文章。导论部分相当精彩。</p>
<p>Collins, Jim, Uncommon Cultures: Popular Culture and Postmodernism , London: Routledge, 1989.本书非常有趣，将大众文化置于对后现代主义的讨论之中加以考察。</p>
<p>Connor, Steven, Postmodernist Culture: An Introduction to Theories of Contemporary , Oxford: Basil Blackwell, 1989.本书对后现代主义进行了全面的介绍，并围绕大众文化进行了有益的讨论。</p>
<p>Docker, John, Postmodernism and Popular Culture: A Cultural History , Cambridge: Cambridge University Press, 1994.本书旨在挑战持续了一个世纪的现代主义理论对20世纪大众文化的理解，兼具学术性、思辨性与可读性。</p>
<p>Featherstone, Mike, Consumer Culture and Postmodernism , London: Sage, 1991.本书从社会主义视角出发对消费文化与后现代主义进行讨论，推荐阅读。</p>
<p>Hebdige, Dick, Hiding in the Light , London: Comedia, 1988.本书收录了一系列关于后现代主义与大众文化问题的论文，推荐阅读。【224】</p>
<p>Jenkins, Henry, Convergence Culture: Where Old and New Media Collide , New York: New York University Press, 2006.本书是关于“融合文化”的重要文献。</p>
<p>Morris, Meaghan, The Pirate‘s Fiancée: Feminism, Reading, Postmodernism , London: Verso, 1988.本书收录的论文既有理论观照，又有案例分析，推荐阅读。</p>
<p>Ross, Andrew (ed), Universal Abandon: The Politic of Postmodernism , Minneapolis: University of Minnesota Press, 1988.本书是关于后现代主义的论文集，非常有帮助。其中涉及对大众文化的讨论。</p>
<p>Woods, Tim, Beginning Postmodernism , Manchester: Manchester University Press, 1999.本书或许是关于后现代主义的最佳导论性著作。</p>
<h2 id="第十章-大众文化的物质性"><a href="#第十章-大众文化的物质性" class="headerlink" title="第十章 大众文化的物质性"></a>第十章 大众文化的物质性</h2><h3 id="物质性"><a href="#物质性" class="headerlink" title="物质性"></a>物质性</h3><p>我们可以从不同的理论视角去思索大众文化的物质性。接下来，我会对下述三种理论视角进行扼要的评述：</p>
<ol>
<li>行动者网络理论（actor-network-theory）</li>
<li>文化研究</li>
<li>以及物质文化研究</li>
</ol>
<h3 id="作为行动者的物质性"><a href="#作为行动者的物质性" class="headerlink" title="作为行动者的物质性"></a>作为行动者的物质性</h3><p>行动者网络理论认为，大众文化并不只是人与人之间的行动与互动，还是人与物质之间、物质与物质之间的行动与互动。我们的很多行为都是在各种各样的物质体的介入下完成的。</p>
<h3 id="意义与物质性"><a href="#意义与物质性" class="headerlink" title="意义与物质性"></a>意义与物质性</h3><p>罗兰·巴尔特举例说明什么是大众文化的时候，他说所有这些例子都有一个共同特点，那就是它们都是符号（Barthes, 1995: 157）。“当我在街头漫步——或人生漫步——的时候，我遇到这些东西，我不假思索地对它们采取了同样的行动，那就是以某种特定的方式进行解读”（157）。换言之，巴尔特所面对的那些物质体，本身也是有待解读的符号；它们既有物质性，也承载着意义。文化研究与巴尔特在如下观点上不谋而合：“社会中存在的一切事物都有意义”（182），即这些事物被“人性赋予事物意义”这一事实所转化（179）。这样一来，环绕我们的物质世界并非自己生成意义，其意义是我们根据自己对它的思考、评价和使用给予的。</p>
<p>尽管物质体绝不仅仅是符号或对社会关系的符号再现，但对于我们来说，其存在总是令人不可思议地外在于将意义、物质性和社会实践混为一体的文化。</p>
<h3 id="没有意义的物质性"><a href="#没有意义的物质性" class="headerlink" title="没有意义的物质性"></a>没有意义的物质性</h3><p>丹尼尔·米勒（Daniel Miller）在其关于物质文化研究的小小宣言（Miller, 2009）中，以《皇帝的新装》 [1] 为例阐释了为何符号学（其实就是文化研究的代名词）根本无法实现对物质性的真正理解。</p>
<p>在米勒看来，符号学认为故事中的“华服”代表着“深深内在于我们的真实自我”（2009: 13）。他假定符号学将皇帝身上那件无中生有的衣服视为“成功或不成功地再现了真实存在的内核的表象”（同上）。米勒勇敢地挑战了关于内在自我的观念，指出这则寓言真正的意义如下所示：“衣服的缺位并非昭示了皇帝的内在自我，而是呈现出他的外在幻想”（同上）。因此，这其实是一个“关于自负和虚荣的道德故事”（同上）。我不知道哪些符号学家真的会去相信一件无中生有的衣服能够成为内在自我的代表，但从文化研究的视角出发，我确然相信我们完全有可能对安徒生的这篇作品做出不同的解读。</p>
<h3 id="全球化世界中的物质体"><a href="#全球化世界中的物质体" class="headerlink" title="全球化世界中的物质体"></a>全球化世界中的物质体</h3><p>文化让世界有意义。文化的重要性就体现为它能够帮助我们<em>组织和规范社会实践</em>。文化的这一含义并不否认物质性的存在，但我们要认识到<em>物质性本身是沉默的</em>，<em>无法自我彰显意义</em>，其意义只能通过人类的能动性获得，且始终与<em>权力关系</em>纠缠不清。尽管物质性会对事物指意的方式进行赋权和限制，但文化并非纯粹物质性的私产，而始终是意义、物质性和社会实践的复杂混合体。同一事物在不同的语境和社会实践中会拥有不同的意义。换言之，文化绝不仅仅等同于沉默的物质性；文化始终是社会的、物质的和符号的。</p>
<h3 id="拓展阅读-4"><a href="#拓展阅读-4" class="headerlink" title="拓展阅读"></a>拓展阅读</h3><p>Storey, John (ed.), Cultural Theory and Popular Culture: A Reader, 4th edition, Harlow: Routledge, 2009.该书是本书的配套阅读材料，其中收录了本书所涉之大多数重要文献。</p>
<p>Barthes, Roland, The Semiotic Challenge, Berkeley: University of California Press, 1995.本书收录了一些关于符号学和物质性的重要论文。</p>
<p>Baudrillard, Jean, The System of Objects, London: Verso, 2005.尽管我们在本章中未提及此书，但实际上该书对于物质体的论述产生了很大的影响。</p>
<p>Berger, Authur Asa, What Objects Mean, Walnut Creek, CA: Lest Coast Press, 2014.本书对物质性理论进行了很好的概述。</p>
<p>【238】Bryant, Levi R., The Democracy of Objects, Michigan: Open Humanities Press, 2011.本书对物质体进行了有趣的哲学探讨。</p>
<p>Dant, Tim, Material Culture in the Social World, Milton Keynes: Open University Press, 1999.本书对物质性与文化的相关问题进行了精彩的论述。</p>
<p>Latour, Bruno, Reassembling the Social, Oxford: Oxford University Press, 2007.本书对行动者网络理论做出了精彩论述，其作者就是该理论的创始人。</p>
<p>Marx, Karl, Early Writings, Harmondsworth: Penguin, 1992.马克思关于生产与物质生活的理论是文化研究关于物质性的绝大多数论述的基础。参见《〈政治经济学批判〉序言》。</p>
<p>Miller, Daniel, Stuff, Cambridge: Polity Press, 2009.本书对物质文化研究做出了清晰的介绍。</p>
<h2 id="第十一章"><a href="#第十一章" class="headerlink" title="第十一章"></a>第十一章</h2><h3 id="大众政治"><a href="#大众政治" class="headerlink" title="大众政治"></a>大众政治</h3><p>在《文化民粹主义》（Cultural Populism ）一书中，吉姆·麦克盖根（Jim McGuigan）声称：当代文化研究领域内的大众文化研究正痛苦挣扎于范式危机之中，最显著的标志就是“文化民粹主义”思潮的盛行。在麦克盖根看来，所谓文化民粹主义乃是“某些大众文化研究者提出的理论假设，认定普通人的符号经验与实践无论在分析层面还是政治层面都远较大写的‘文化’重要”（McGuigan, 1992: 4）。《文化民粹主义》一书批判的目标并非此种意义上的文化民粹主义，而是*<em>“大众文化研究中的不加批判 的民粹主义”（同上），即一味追求阐释策略而罔顾文化消费的历史与经济条件的思路</em>。他批评文化研究正日趋将自己的理论关注简化成“阐释的问题”，却未曾将这些问题置于权力的物质关系的语境下加以审视。</p>
<p>当下条件下，普通人大多利用唾手可得的符号资源来从事意义生产活动，这是一个既清晰明了，又须在新修正主义（不加批判的文化民粹主义）之下不断完善的过程。因此，在这个基本观念之下，无论人们是否意识到自己所处之困境，针对这些人的解放事业都变得疑窦重重。经济剥削、种族主义、性别压抑……种种遭遇，不胜枚举。然而，在约翰·费斯克和保罗·威利斯等学者的眼中，那些被压迫者、被剥削者和被疏远者不但能够极好地化解自身的困境，还能在此基础上对世界进行充分的理解，并从这一过程中汲取源源不断的快感。显然，日常生活的微观政治行为如此丰富，以至于一度为大众文化批评家心向往之的美好未来的乌托邦竟骤然丧失了全部可信性（171）。</p>
<h3 id="文化场域（cultural-field）"><a href="#文化场域（cultural-field）" class="headerlink" title="文化场域（cultural field）"></a>文化场域（cultural field）</h3><p>约翰·费斯克通常被视为丧失批判性的文化民粹主义的代表人物，麦克盖根便声称：“费斯克的立场……表明英国文化研究批判性的衰落”（85）。在他看来，费斯克坚持不懈地以牺牲经济与技术决定力的方式为阐释 营造空间，竭尽全力将文化研究改造为一种纯粹的阐释学。例如，电视研究就被费斯克简化成了“某种主观理想主义”（72），即为大众的解读行为赋予无上地位，认为其自始至终都是“进步的”，而性别歧视与种族主义根本不是问题，全然漠视经济与政治的关系。简言之，面对费斯克对大众文化毫无保留且毫无批判性的拥护，我们应当进行严厉的指责，他就是霸权理论衰落以及麦克盖根所谓之“新修正主义”崛起的负面典型，是将文化研究简化为关于消费的多种阐释模式的首恶。新修正主义主要关注大众的快感、权力、抵抗以及辨别力，代表着文化研究“从更具批判性的立场上全面退却”（75）。用政治学的语汇来说，费斯克的思路至多只是对自由主义关于“消费者主权”的应声附和，甚至是大行其道的“自由市场”意识形态的同谋。</p>
<p>费斯克可不会接受人们用“新修正主义”来描述他对大众文化问题的立场。此外，面对麦克盖根借以攻击其理论的两个主要假设，费斯克也提出了坚决的反对。首先，他拒斥下述观点，即“资本主义文化工业生产出来的产品虽然具有多样性，但这种多样性只是人们的幻觉，因其最终均维护着同样的资本主义意识形态”（Fiske, 1987: 309）。其次，他着重强调：一切基于“‘人民’是‘文化白痴’”的论调都不足信，“大众并非消极被动或孤立无援，他们有能力明辨是非，无须经济、文化和政治巨头的怜悯”（同上）。作为还击，费斯克指出：大众文化借以流通的商品同时在两种经济中运行，分别是金融经济与文化经济。【242】</p>
<p>金融经济的运行与文化要素并非完全等同，但我们仍需在具体研究工作中对其予以充分重视……文化商品无法完全用金融的形式来描述，流通过程对于其大众性的形成发挥了至关重要的作用。这一过程不但与金融经济体系密切相关，更平行发生于文化经济领域（311）。</p>
<p>金融经济主要关注交换价值，而文化经济更重视使用价值，即商品如何带来“意义、快感与社会身份”（同上）。</p>
<p>费斯克声称，在西方社会，无权者对有权者的抵抗往往采用两种形式，分别为<strong>“符号抵抗”*与</strong>“社会抵抗”*，前者首要关注意义、快感与社会身份，后者则呼吁社会经济系统的变革；“两者虽相对独立，却保持着密切的关系”（316）。大众文化主要在符号领域内运行，但“也不尽然”，它深深卷入“同质化与差异，或共识与冲突的斗争”（同上）。在此意义上，大众文化其实是一个符号的战场，受众则持续不断地投身于“收编”与“抵抗”的“符号游击战”之中（同上）。其中，自上而下的欺骗性意义、快感与身份和符号抵抗运动中生成的意义、快感与身份之间存在着尖锐的冲突，而“同质性的霸权力量时刻面对着异质性的抵抗”（1989a: 8）。在费斯克的符号战场上，两种经济各自站在冲突双方的背后：金融经济支持同质性的收编力量，文化经济则是异质性抵抗力量的坚实后盾。由是，符号抵抗击破了资本主义的意识形态企图，宰制性意义面临着前所未有的挑战，而统治阶级在精神与道德领域的领导权也就摇摇欲坠了。费斯克以饱满的自信清晰地表达了自己的立场：【243】</p>
<p>我……将大众文化视为战场。它既承载着宰制性力量，又对大众应对、规避以及抵抗统治阶级权威的种种策略青睐有加。事实上，与其对收编过程穷追不舍而罔顾其他，不如转而考察大众的活力与创造力——正因大众富有无穷的活力与创造力，统治阶级才认为必须对其进行持续的“收编”；与其将注意力集中于无所不在且用心险恶的宰制性意识形态实践，不如试着理解日常生活中的抵抗与规避行为如何努力阻滞意识形态的运行并促使其“不得不”竭尽全力维护自身的价值。上述视角无比乐观地将大众文化视为名副其实的进步（尽管不是激进）力量，努力在人民的气魄与活力中探求社会变迁的可能，并竭力挖掘其背后的驱动力（20-21）。</p>
<p>此外，费斯克还将大众文化置于皮埃尔·布尔迪厄所言之“文化场域”之内（Bourdieu, 1984: 113-120）。文化场域是宰制性文化或官方文化与大众文化博弈的场所。文化间的斗争是经济或技术力量的抽象产物，并最终由经济与技术力量共同决定。在尼古拉斯·加恩汉姆（Nicholas Garnham）与雷蒙德·威廉斯看来，布尔迪厄认为：</p>
<p>阶级与群体间为确保自身的再生产而竭力追逐利益最大化的斗争存在于所有社会之中。社会形态乃是一系列依等级制构建起来的场域的集合，人类行动者便卷入其内的各类斗争，以谋求对知识、教育及经济等场域内社会资源的最大控制……场域乃是一种等级森严的结构。各个阶级为抢夺物质资源的生产与分配展开激烈的斗争，而每一个分支场域都依自身的结构逻辑——阶级斗争的逻辑——进行着再生产（Garnham and Williams, 1980: 215）。【244】</p>
<p>诚如布尔迪厄所言：“若要描述‘纯粹’（pure）凝视，则必须对与之相对的‘天真’（naive）凝视加以界定”（32）。而所谓“天真”凝视，毫无疑问，指的就是大众审美的凝视.</p>
<p>纯粹凝视与大众/天真凝视之间的关系无须牵涉艺术自身的品质，而更多反映着统治与被统治的关系。</p>
<p>在一部深入讨论布尔迪厄理论的著作中，保罗·威利斯指出：对“艺术”的美学鉴赏经历了一个“内在的超级制度化”过程（Willis, 1990: 2）。在这一过程中，艺术脱离了生活，社会功能被忽视，而有能力“鉴赏”艺术的少数人就与“粗鲁的群氓”划清了界限。在这一过程中，审美与教育之间的关系，即美学鉴赏所需相关知识的生产和再生产，遭到了否认（无论是正式的还是非正式的），美学品位被呈现为与生俱来之物，无法通过后天教育习得。当然，这并不意味着必须关闭“大多数人”接受教育的大门，只不过，普通人即使经过教育也无法学会“鉴赏”高雅文化的符码；在接受教育的过程中，他们应当“认识到自己的无知与迟钝，认识到他们和那些脱离了低级趣味的‘上等人’根本就是两路人。当然，他们也绝对没有任何‘天赋’，只有少数精英才有能力展示或创造‘艺术’”（3）。由是，那些在日常生活中制造着文化的人反而被贴上了“没文化”的标签。为了与文化“内在的超级制度化”策略相对抗，威利斯提出了所谓的“扎根美学”（grounded aesthetics）理念，即普通人在日常生活中对世界的文化意义进行创造的方式：“人们通过何种途径将自然世界与社会世界变得富有人性，并在一定程度上（哪怕只是符号层面上）对其加以控制”（22）。</p>
<p>法国文化理论家米歇尔·德·赛图（Michel de Certeau）也对“消费者”这个概念进行了深入考察，以图对消费行为，或他所言之“次级生产”做出解释（de Certeau, 2009: 547）。在他看来，消费“极其狡狯，难以把握；但消费又无处不在，以令人难于察觉的方式反复迂回，这是因为其并非通过产品，而是在宰制性经济规则的压迫下借由‘使用’的方式来彰显自身”（546）。在德·赛图看来，文化场域内存在着持久的、令人难以察觉的冲突，交战的双方则分别是文化权力的战略（strategy）（生产）和文化使用的战术（tactics）（消费，或“次级生产”）。文化批评家须警惕“隐藏于……使用过程中的……生产……与……次级生产的异同” [6] （547）。德·赛图将积极的消费行为比喻为“盗猎”（poaching）：“读者就是旅行者，在不属于自己的土地上迁徙，就如同盗猎的流浪汉一样窃取着别人书写的内容”（1984: 174）。</p>
<p>将阅读等同于盗猎的观念显然拒绝了视文本“信息”为自上而下强加之物的理论假设。德·赛图指出，人们之所以会产生理解的误差，皆因未能认清消费过程的本质。这种“误解先天认为‘同化’（assimilating）必然意味着与自身汲取之物‘变得相似’；可实际上，消费者总是能够‘使某物变得与自身相似’，进而将商品加以改造、据为己有”（166）。</p>
<p>文本盗猎行为始终与文本生产者的“圣典经济”（scriptural economy）（131-176）发生着持续的冲突。而来自制度的声音（如专业批评家、学者等）往往维护作者与文本自身的权威性，制约着“非权威”意义的生产与流通，亦属盗猎行为反对的目标。如此，德·赛图的“盗猎”概念就对强调被动接受作者与文本意图的传统解读模式构成了挑战，阅读行为不再仅仅是简单的“对”或“错”。据他考察，很多文本都因蕴含着隐匿的意义而帮助维系了教学法中的权力关系：</p>
<p>小说总是将消费者置于被统治地位，因为这些消费者在沉默不语的“财富”面前始终显得既不贞又无知……虚构的“宝藏”就潜藏在作品之中，包孕着无比丰富的意义，起决定性作用的当然不是读者的生产性，而是综合决定了读者与文本之间关系的社会制度。阅读行为仿佛是（教师与学生之间）力量关系的翻版，最终也就变成了社会权力的工具（171）。</p>
<p>相应地，也就产生了一种独特的教学实践，即“学生……被轻蔑地赶回或骗回到教师所‘接受’的意义上” [7] （172）。这就是我们通常所谓之“文本决定论” [8] ，即认定事物的价值先天包含在其自身之中。在此观念体系下，某些特定的文本与实践就会被预先纳入学术性凝视的合法性关注范围内，而其他文化形式则被贬低或排除。我倒认为研究什么对象并不重要，重要的是通过什么方法来研究这个对象。【248】</p>
<p>在文化研究领域内对迷文化进行的最有趣的论述莫过于<em>亨利·詹金斯</em>的<em>《文本盗猎者》（Textual Poachers ）</em>。通过在某一社区（其绝大多数成员是中产阶级白人妇女）展开民族志研究，他得以同时从“学者（掌握大众文化理论、据有批判及民族志文献的人）与沉迷者（掌握该社区特定知识与传统的人）”两个角度对“迷”现象做出诠释（Jenkins, 1992: 5）。</p>
<p>沉迷者的阅读行为兼含智力性与情感性。“读者与文本的近距离接触非但未使读者被文本占有，反而促进了读者对文本的完全占有。只有将传媒内容融入日常生活，只有与文本的意义和资料保持紧密的联系，‘迷’们才能对小说进行充分的消费并将其转化为积极的动力”（62）。詹金斯同样反对文本决定论（文本决定了人们阅读的方式，进而将读者置于某种意识形态话语之中），他坚称：“读者并非被强行拽入业已构成的虚幻世界，而是拥有充分的自主性以创造新的文本资料。因此，读者脑中预存的价值观与叙事系统所传递的价值观在重要性上是难分伯仲的”（63）。【249】</p>
<p>对于文本，“迷”们并非一读了事，而是进行着持续的、翻来覆去的阅读，这便颠覆了文本与读者之间天然的关系。阅读行为破坏了巴尔特所谓之“阐释代码”（hermeneutic code）机制（文本通过设置悬念的方式诱发读者的阅读兴趣）。通过反复阅读，读者的注意力从“即将发生什么”转移到“事情如何发生”，开始关心人物关系、叙事主题以及社会知识与话语的生产过程。</p>
<p>尽管阅读实践在大多数情况下是一种私人化的单独行为，但“迷”们仍是作为社区的一分子来对文本进行消费的。究其实质，迷文化就是意义生产与阅读实践的公开展示与流通，形形色色的“迷”在彼此的交流之中创造着意义，而这些意义的公开展示与流通对于迷文化的再生产而言至关重要。诚如詹金斯所言：“组织化的沉迷现象最显著的特征在于其生成了一种理论与批评的惯例。迷文化仿若一个半结构空间，对文本的诸种阐释与评估机制便于其中交相辉映、互相冲突、交流妥协，读者亦时刻思索着大众传媒的天性及其与自身的关系”（86）。</p>
<p>“迷”们并不仅仅是狂热的读者，而且是积极的文化生产者。詹金斯对电视迷通过小说创作来改写自己喜爱的电视节目的10种方法做出了如下归纳：</p>
<ol>
<li>情境重置 （recontextualization）：生产简评与长短篇小说以填补广播叙事（broadcast narrative）的空白，进而对特定行为做出额外的解释。</li>
<li>扩充时间线 （expanding the series timeline）：生产简评与长短篇小说来为虚构人物提供历史背景，而非纠缠于广播叙事对人物发展前景的探索。</li>
<li>焦点重置 （refocalization）：将注意力从主要人物转移到次要人物身上。例如，将原本处于文本边缘位置的女性黑人置于舞台的正中央。</li>
<li>道德重组 （moral realignment）：与“焦点重置”类似，即对广播叙事中的道德标准进行转换（如坏人变好人）。在有些情况下，原有道德标准仍得以维系，但叙事的视角转移到“坏人”身上。</li>
<li>类型转换 （genre shifting）：例如，将原本用于科幻剧集的叙事移位到言情剧集或西部剧集之中。</li>
<li>交叉 （cross-overs）：让某一部电视剧中的人物出现在另一部电视剧中。例如，《神秘博士》中的人物有可能以同样的身份出现在《星球大战》里。</li>
<li>人物移位 （character dislocation）：人物以新的名字、新的身份出现在新的叙事里。</li>
<li>个人化 （personalization）：改写者将自己写入自己喜爱的电视节目中。例如，我可以写一部短篇小说，在情节中安排自己被神秘博士邀请一同进行时光旅行，去探寻曼联球队到24世纪时变成了什么模样。不过，詹金斯也指出，迷文化中的许多人都不喜欢这种改写方式。【250】</li>
<li>情感激化 （emotional intensification）：生产所谓“悲喜交加”的故事，如安排自己最喜爱的人物经历情感危机。</li>
<li>情色化 （eroticization）：探索虚构人物生活中情色的一面，最著名的例子莫过于描绘同性恋关系的同人小说。</li>
</ol>
<p>迷文化以抗争的方式，在“将许多美国人转化为旁观者的压迫力”中创造出“一种可供更多人分享的文化”（284）。在詹金斯看来，这是迷文化强大力量的集中体现。力量并非由商品自身产生，而是源自“迷”们对商品的消费与利用，如其所言：</p>
<p>需要声明，文本自身并不具备什么力量，力量是在“迷”们将文本吸收融入自己独特的生活体验的过程中产生的。迷文化所青睐的并非“奇异”的文本，而是“奇异”的解读方式（尽管读者的诠释性实践使得两者之间的界限模糊不清）（同上）。</p>
<p>克拉克提出，假若亚文化消费仍要留在文化研究的领域之内，就必须“突破其出发点的樊篱”（92），绝不能动不动就为其他文化扣上“收编”的帽子。文化研究最好也将注意力集中在“所有青年的行为之上，为文化与社会关系的延续与断裂找寻定位，并探索这些行为对青年自身而言具有何种意义”（95）。</p>
<h3 id="经济场域（economic-field）"><a href="#经济场域（economic-field）" class="headerlink" title="经济场域（economic field）"></a>经济场域（economic field）</h3><p>来自媒介与传播领域的人（在学术界，这些人几乎全为男性，而且完全是文化研究的门外汉）撰写了大量文章和会议论文，声嘶力竭地呼吁文化研究必须立刻无条件、全身心地拥抱政治经济学方法以维系自身的政治信誉。 [1] 麦克盖根就是这一观点早期的重要代表。</p>
<p>大家都小心翼翼地回避着经济问题，此举严重损害了文化研究的解释力，并导致政治批判功能的丧失（McGuigan, 1992: 40-41）。</p>
<p>尼古拉斯·加恩汉姆表达过相似的观点：“文化研究若要实现自己的政治理想，必须重建通往政治经济学的桥梁”（Garnham, 2009: 619）。当下的文化研究普遍高估消费者的力量，反而忽视了生产在约束消费可能性方面扮演的“决定性”角色。</p>
<p>请看彼得·戈尔丁（Peter Golding）与格雷厄姆·莫多克（Graham Murdock）对政治经济学的基本理论与方法所做的归纳：</p>
<p>批判政治经济学视角最显著的特征在于……其对公共传播（包括大众文化）领域内符号与经济维度之间互动关系的关注。掌握了政治经济学，便可理解被金钱与权力控制的文化产品如何通过各种各样的方式左右公共领域内的话语与表征，进而控制受众对上述话语与表征的介入 （Golding and Murdock, 1991: 15）。</p>
<p>政治经济学声称自己是考察大众文化的唯一“正道”不但大错特错，而且极有可能导致过分简化与扭曲，甚至扼杀文化研究的无穷活力。【258】</p>
<h3 id="后马克思主义文化研究：重顾霸权理论"><a href="#后马克思主义文化研究：重顾霸权理论" class="headerlink" title="后马克思主义文化研究：重顾霸权理论"></a>后马克思主义文化研究：重顾霸权理论</h3><p>后马克思主义霸权理论坚持认为在生产过程与消费行为之间始终存在密切的对话。消费者所面对的文本或实践是由生产条件决定的物质存在，而文本与实践所面对的消费者同时是将一系列潜在意义为我所用 的生产者。仅关注文本或实践的物质性，以及生产的意义与关系显然是远远不够的。</p>
<h3 id="群氓文化意识形态"><a href="#群氓文化意识形态" class="headerlink" title="群氓文化意识形态"></a>群氓文化意识形态</h3><p>我们已然认识到，在此时此地以及可预见的将来，自己都将生活在一个由跨国资本主义主宰的世界里，诚如葛兰西所言，这是一种“精神的悲观主义，理想的乐观主义”（Gramsci, 1971: 175）。我们每个人——不仅仅是先锋知识分子——都应当将自己视为文化的积极参与者。我们要通过选择、拒绝、制造意义、分配价值、抵抗，以及被蒙蔽、被控制等种种方式投入到文化中。不过，这并不意味着我们摒弃了“表征的政治”。对此，我赞同洪美恩的观点，坚信尽管快感是政治的，但绝不可将快感与政治混为一谈。</p>
<h3 id="拓展阅读-5"><a href="#拓展阅读-5" class="headerlink" title="拓展阅读"></a>拓展阅读</h3><p>Storey, John (ed.), Cultural Theory and Popular Culture: A Reader , 4th edition, Harlow: Pearson Education, 2009.该书是本书的配套阅读材料，其中收录了本书所涉之大多数重要文献。本书及其配套读本得到了互动式网站<a href="http://www.pearsoned.co.uk/storey%E7%9A%84%E6%94%AF%E6%8C%81%E3%80%82%E8%AF%A5%E7%BD%91%E7%AB%99%E4%B8%AD%E5%8C%85%E5%90%AB%E4%BA%86%E8%AE%B8%E5%A4%9A%E6%9C%89%E7%94%A8%E7%9A%84%E9%93%BE%E6%8E%A5%E4%B8%8E%E7%94%B5%E5%AD%90%E8%B5%84%E6%BA%90%E3%80%82">www.pearsoned.co.uk/storey的支持。该网站中包含了许多有用的链接与电子资源。</a></p>
<p>Bennett, Tony, Culture: A Reformer‘s Science , London: Sage, 1998.本书是一部论文集。作者系文化研究领域的领军人物之一，他对该领域的近史与相关实践进行了广泛的论述。</p>
<p>During, Simon, (ed.), The Culture Studies Reader , 2nd edn, London: Routledge, 1999.本书收录了许多文化研究领域大师的文章，十分有价值。</p>
<p>Gilroy, Paul, Lawrence Grossberg, and Angela McRobbie (eds), Without Guarantees: In Honour of Stuart Hall , London: Verso, 2000.本书收录了许多关于斯图亚特·霍尔的著作的论文。</p>
<p>Gray, Ann and Jim McGuigan (eds), Studying Culture: An Introductory Reader , London: Edward Arnold, 1993.本书是一部精彩的论文集，收录了许多文化研究大师的文章。</p>
<p>Grossberg, Lawrence, Bringing It all Back Home: Essays on Cultural Studies , Durham, North Carolina: Duke University Press, 1997.本书的作者是文化研究领域的佼佼者，书中收录了他的一些理论性文章。</p>
<p>Grossberg, Lawrence, Dancing in Spite of Myself: Essays on Popular Culture , Durham, North Carolina: Duke University Press, 1997.本书的作者是文化研究领域的佼佼者，书中收录了他关于大众文化的相关论文。</p>
<p>Grossberg, Lawrence, Cary Nelson and Paula Treichler (eds), Cultural Studies , London: Routledge, 1992.本书收录了40篇文章（大多配有相关讨论），是一部关于文化研究领域内相关争论的优秀的导论性著作。【263】</p>
<p>Morley, David and Kuan-Hsing Chen (eds), Stuart Hall: Critical Dialogues in Cultural Studies , London: Routledge, 1995.本书汇编了与斯图亚特·霍尔相关的文章与访谈录，总结过去，评述现在，展望未来，精彩纷呈。</p>
<p>Munns, Jessica and Gita Rajan, A Cultural Studies Reader: History, Theory, Practice , New York: Longman, 1995.本书体例科学，选文的编纂亦令人称道。</p>
<p>Storey, John (ed.), What is Cultural Studies: A Reader , London: Edward Arnold, 1996.本书收录了许多篇精彩的论文，从各个角度回答了“什么是文化研究”这一问题。</p>
<p>Storey, John, Inventing Popular Culture, Malden, MA: Blackwell, 2003.本书对大众文化的概念做出了历史性的考察。</p>
<p>Storey, John, Culture and Power in Cultural Studies: The Politics of Signification, Edinburgh: Edinburgh University Press, 2010.本书涉及的许多讨论都可以延展为具体的研究领域。</p>
<p>Storey, John, From Popular Culture to Everyday Life, London: Routledge, 2014.这本书将文化研究批判的焦点从大众文化转移到日常生活领域。</p>
<p>马克思曾指出：“一件衣服由于穿的行为才现实地成为衣服；一间房屋无人居住，事实上就不成其为现实的房屋；因此，产品不同于单纯的自然对象，它在消费中才证实自己是产品，才成为产品”（Marx, 1976a: 19）。这就是一本书和一个文本的区别——前者是被出版商生产出来的，而后者是被读者生产出来的。</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>杂文</category>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>《大众文化与文化理论》(1)</title>
    <url>/WestRoute.github.io/2022/03/30/popularculture/</url>
    <content><![CDATA[<h2 id="第一章-何谓大众文化"><a href="#第一章-何谓大众文化" class="headerlink" title="第一章 何谓大众文化"></a>第一章 何谓大众文化</h2><h3 id="文化"><a href="#文化" class="headerlink" title="文化"></a>文化</h3><p>文化=意识形态<br><br>雷蒙德·威廉斯（Raymond Williams）指出，文化乃是“英语之中最复杂的两三个词语之一”（Williams, 1983: 87）。他为文化下了三个范围宽泛的定义。第一，“文化”一词的第一种用法可以指“智力、精神和美学发展的一般过程”（90）。例如，在谈论西欧文化发展史的时候，我们可以仅仅涉及智力、精神和美学方面的成就，如伟大的哲学家、艺术家和诗人。这也是一种易于理解的解释方式。“文化”一词的第二种用法是指“一群人、一个时期或一个群体的某种特别的生活方式”（同上）。若想以这种用法来解读西欧文化发展史，我们便不能仅仅考虑智力和美学成就，还要了解诸如识字率、休闲方式、体育运动、宗教节日等内容。最后，威廉斯指出，文化可被用来指涉“智力，尤其是美学所创造的作品和实践”（同上）。换言之，此处的“文化”指的是一系列的文本与实践，而这些文本与实践的主要功能是对意义（meaning）进行指涉和生产，并为这一过程提供场所。文化的第三个含义与结构主义者以及后结构主义者所声称的“指意实践”（signifying practices）大体相同（参见第六章）。如果用第三种定义来看待文化，那么诗歌、小说、芭蕾、歌剧和美术都将被纳入考察的范畴。至于我们所要探讨的“大众文化”，则需灵活运用文化的第二个和第三个定义。</p>
<span id="more"></span>
<h3 id="意识形态"><a href="#意识形态" class="headerlink" title="意识形态"></a>意识形态</h3><p>第一，意识形态可以指“为某一特定人群所接合（articulate）的观念系统”。例如，我们常说的“专业意识形态”即指代表特定专业人群实践的那些观念。再比如，我们可以说“工党的意识形态”，意指体现了该党精神与实践的那些政治、经济和社会观念的集合。<br>第二种定义则将意识形态视为某种掩饰、扭曲或欺瞒，用来描述某些文本和实践如何呈现对现实加以歪曲的图景。有些时候，人们认为这些被歪曲的现实图景制造出“虚假意识”（false consciousness），并在权力者利益和无权者利益之间发挥作用。<br>第三种定义（在某种程度上依托于第二种定义并与之关系密切）用“意识形态”这一表述来指代“意识形态构成”（Marx, 1976a: 5）。这一定义关注文本（电视剧、流行音乐、小说、剧情片等）如何持续不断地呈现关于外部世界的图景。其理论前提是：“社会”的概念建立于互相冲突而非彼此赞成的基础之上，是围绕着不平等、剥削和压迫被建构出来的。在这场冲突中，文本有意无意地偏袒着某一方。德国剧作家贝托尔特·布莱希特 [1] （Bertolt Brecht）如是总结：“无论好剧还是坏剧，都包含着一幅世界的图景……世上不存在对观众的立场与观点毫无影响的戏剧和演出。艺术从来都伴随着某种后果”（Brecht, 1978: 150-151）。<br>正如斯图亚特·霍尔（Stuart Hall）声称的那样，大众文化是“创造总体性的社会观念”的场所，是“指意的政治”彼此争夺、诱使人们按照某些特定的方式观察世界的竞技场（Hall, 2009a: 122-123）。<br><br>意识形态的第四个定义与法国文化理论家罗兰·巴尔特（Roland Barthes）的早期作品有密切关联（在第六章会详细讨论）。巴尔特指出，意识形态（巴尔特本人称之为“神话”）主要在内涵（connotation）层面上发挥作用，是文本或实践所承载或可能承载的、间接的、常常是无意识的含义。在英国社会中，那些白种的、男性的、异性恋的、中产阶级的人是不言自明的“正常人”“普通人”“自然人”，而其他人则是这一“原型”的次等“变种”。<br><br>第五个定义在20世纪70年代和80年代早期十分盛行，其作者是法国马克思主义哲学家路易·阿尔都塞（Louis Arthusser）。在第四章中,阿尔都塞的主要观点是：意识形态并不是简单的观念的集合，而是一种物质实践，这意味着意识形态存在于日常生活的实践之中，而不仅仅存在于关于日常生活的观念之中。他还认为，一些仪式和风俗会通过某种方式起作用，将我们捆绑在社会秩序之上；而这所谓的社会秩序的标志，是财富、地位与权力的显著不平等。<br></p>
<h3 id="大众文化"><a href="#大众文化" class="headerlink" title="大众文化"></a>大众文化</h3><p>首先我们要弄清楚什么是“大众”（popular）。威廉斯认为“大众”一词有四种现行的含义：“为很多人所喜爱”；“质量低劣的作品”；“被特意用来赢取人们喜爱的作品”；“人们为自己而创造的文化”（Williams, 1983: 237）。<br><br>第一种定义所谓大众文化，是指那些被很多人热爱与喜好的文化。难以量化popular。<br><br>第二种定义认为，大众文化就是除了“高雅文化”之外的其他文化，是一个剩余的范畴，是那些无法满足“高雅”标准的文本和实践的“栖身之所”。持有这种观点的人很多，他们尤其强调“经典文本”的品质是划分高低文化的决定性因素。巨大的销量和商业的成功显然使得作曲家、演奏家和歌唱家成了大众文化的一分子。<br><br>霍尔指出，大众的形式在“文化电梯”里的上上下下并不是讨论的关键，重要问题在于“哪些力量与权力关系维系着这种分野和区隔……社会制度和制度化的社会过程……让文化的高低之分得以存在和维系”（Hall, 2009b: 514）。<br><br>第三种定义将“大众文化”等同于“群氓文化”。<br><br>这种文化本身是程式化的、极具操纵性的（由于不同的文化分析家具有不同的政治倾向，因此这种操纵性在政治上也有或左或右的差别），持续麻痹着本已麻木不仁的人群。然而，约翰·费斯克（John Fiske）举出了反例，他的研究表明，“80％—90％的新文化产品都在商业上失败了，尽管生产者做了海量的广告……但很多电影的票房收入甚至无法弥补其推广成本”（Fiske, 1989a: 31）。西蒙·弗里斯（Simon Frith）也指出，大约80％的单曲和唱片都是亏本生意（Frith, 1983: 147）。类似的统计数据清晰地表明，那些认为消费仅仅是一种机械性、被动性行为的观点是不尽准确的（参见第七章和第十一章）。<br><br>第四个定义认为大众文化是来源于 “人民”的文化。这一观点反对任何视大众文化为自上而下强加于 “人民”的文化的论断。鉴于此，“大众文化”一词仅指属于“人民”的“本真的”文化，就等于民间文化，乃是一种民治、民享的文化。该定义“时常将大众文化等同于一种极富浪漫色彩的工人阶级的文化，是当代资本主义内部的符号性抵抗的主要源泉”（Bennett, 1980: 27）。<br><br>第五个定义来自意大利马克思主义者安东尼奥·葛兰西（Antonio Gramsci）的政治分析，尤其与其对“霸权”这一概念的发展密切相关。葛兰西用“霸权”这个词来指涉社会统治集团如何通过控制“智力与道德的领导权”（Gramsci, 2009: 75）来赢取被统治集团的赞同（consent）。<br><br>正如托尼·本内特（Tony Bennett）所言：【10】<br><br><br>统治阶级试图赢取领导权，而被统治者通过种种方式与之对抗。正是这种关系构成了大众文化研究的领域。故而，大众文化既包括自上而下的、旨在维护统治阶级意识形态的欺骗性“群氓文化”和自发的、自下而上的对抗性文化，也包括两者之间彼此妥协的“区域”。在这个区域里（包含各种各样不同类型的大众文化），宰制性的、屈从性的与反抗性的文化及意识形态价值彼此“混杂”，互相转换（Bennett, 2009: 96）。<br>大众文化的第六个定义是从近来对后现代主义争论的思考中生发出的，我们将在第九章中详述。在此，我仅枚举关于后现代主义与大众文化之间关系的若干基本观点。后现代主义的核心观点是：后现代文化已不再具有高低之分。不难猜出，一些人会因此而雀跃于精英主义文化观的末日的到来，而另一些人会因商业最终战胜了文化而深感绝望。关于商业和文化互相渗透的现象（后现代主义模糊了“本真文化”与“商业文化”之间的区别），可以从电视广告和流行音乐的关系中一窥究竟。<br><br><br></p>
<h3 id="作为“他者”的大众文化"><a href="#作为“他者”的大众文化" class="headerlink" title="作为“他者”的大众文化"></a>作为“他者”的大众文化</h3><p>“大众文化”这个词界定困难在很大程度上是由“缺席的他者”造成的。</p>
<h3 id="意义的语境化"><a href="#意义的语境化" class="headerlink" title="意义的语境化"></a>意义的语境化</h3><h3 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h3><p>Storey, John (ed.), Cultural Theory and Popular Culture: A Reader , 4th edition, Harlow: Pearson Education, 2009.该书是本书的配套阅读材料，其中收录了本书所涉之大多数重要文献。本书及其配套读本得到了互动式网站<a href="http://www.pearsoned.co.uk/storey%E7%9A%84%E6%94%AF%E6%8C%81%E3%80%82%E8%AF%A5%E7%BD%91%E7%AB%99%E4%B8%AD%E5%8C%85%E5%90%AB%E4%BA%86%E8%AE%B8%E5%A4%9A%E6%9C%89%E7%94%A8%E7%9A%84%E9%93%BE%E6%8E%A5%E4%B8%8E%E7%94%B5%E5%AD%90%E8%B5%84%E6%BA%90%E3%80%82">www.pearsoned.co.uk/storey的支持。该网站中包含了许多有用的链接与电子资源。</a></p>
<p>Agger, Ben,Cultural Studies as Cultural Theory , London: Falmer Press, 1992.如标题所示，本书作者是用一种倾向于法兰克福学派的视角来探讨文化研究问题的。书中关于大众文化的某些评论很有用处，尤其推荐第二章“作为严肃商业的大众文化”。</p>
<p>Allen, Robert C.(ed.), Channels of Discourse, Reassembled , London: Routledge, 1992.尽管这主要是一部与电视研究相关的论文集，但其中收录的一些文章对大众文化研究者而言极富参考价值。</p>
<p>Bennett, Tony, Colin Mercer and Janet Woollacott (eds), Popular Culture and Social Relations, Milton Keynes: Open University Press, 1986.本书是一本值得关注的论文集，其中收录的文章既包括理论介绍，又包括具体分析。【17】</p>
<p>Brooker, Peter, A Concise Glossary of Cultural Theory , London: Edward Arnold, 1999.这是一部非常出色的文化理论关键词词典。</p>
<p>Day, Gary (ed.), Readings in Popular Culture , London: Macmillan, 1990.这是一本毁誉参半的论文集，收录了一些实用且有趣的文章，其中有些文章对大众文化研究的严肃性问题持犹疑态度。</p>
<p>Du Gay, Paul, Stuart Hall, Linda Janes, Hugh Mackay and Keith Negus, Doing Cultural Studies: The Story of the Sony Walkman , London: Sage, 1997.这是一部出类拔萃的著作，对文化研究的一些关键问题进行了评介。若想对“文化圈”的现象做出解释，此书值得一读。</p>
<p>Fiske, John, Reading the Popula r, London: Unwin Hyman, 1989.一部论文集，收录了作者对大众文化中不同现象的分析。</p>
<p>Fiske, John,Understanding Popular Culture , London: Unwin Hyman, 1989.本书是作者对其独具一格的大众文化研究路径的概述。</p>
<p>Goodall, Peter, High Culture, Popular Culture: The Long Debate, St.Leonards: Allen &amp; Unwin, 1995.本书回顾了高雅文化和大众文化之争的历程，并结合从18世纪至今的澳大利亚的实例和一些其他例子来支撑自己的观点。</p>
<p>Milner, Andrew, Contemporary Cultural Studies , 2nd edition, London: UCL Press, 1994.该著作对当代文化研究做了具有实用性的介绍。</p>
<p>Mukerji, Chandra and Michael Schudson (eds), Rethinking Popular Culture, Berkeley: University of California Press, 1991.这是一部论文集，附有一篇涉猎广泛且令人兴味盎然的导言。本书依据不同的研究路径——历史学、人类学、社会学与文化学——对大众文化研究的不同文献进行分类，有助于理解和阅读。</p>
<p>Naremore, James and Patrick Brantlinger, Modernity and Mass Culture , Bloomington and Indianapolis: Indiana University Press, 1991.这是一部既有趣又实用的关于文化理论与大众文化的论文集。</p>
<p>Storey, John, Inventing Popular Culture , Malden, MA: Blackwell, 2003.本书对大众文化的概念进行了历史性的梳理。</p>
<p>Strinati, Dominic, An Introduction to Theories of Popular Culture, London: Routledge, 1995.这是一部关于大众文化理论的清晰而全面的著作。</p>
<p>Tolson, Andrew,Mediations: Text and Discourse in Media Studies , London: Edward Arnold, 1996.这是一部关于大众传媒文化的优秀著作。</p>
<p>Turner, Graeme, British Cultural Studies , 3rd edition, London: Routledge, 2003.本书是目前为止对英国文化研究最翔实的介绍。</p>
<p>Walton, David, Introduction Cultural Studies: Learning through Practice , London: Sage, 2008.又一部优秀的文化研究概论性著作，实用、资料丰富且十分有趣。</p>
<h2 id="第二章-“文化与文明”传统"><a href="#第二章-“文化与文明”传统" class="headerlink" title="第二章 “文化与文明”传统"></a>第二章 “文化与文明”传统</h2><p>属于大多数人的大众文化始终与手握权力的少数人密切相关。有两个因素发挥了关键作用，即工业化和城市化。正是这两者的结合导致了大众文化的形成；而大众文化的诞生标志着旧式文化关系的终结。<br>英国历史上首次出现了专属于被统治阶级的独立文化，其发源地则是各大城市和工业中心。这一文化由两种来源构成：（1） 文化企业家以赢利为目的而生产出来的文化；（2） 思想激进的匠人、新兴城市无产阶级和倡导革新的中产阶级生产出来的、旨在鼓动政治变革的文化——E.P.汤普森（E.P.Thompson）在《英国工人阶级的构成》（The Making of the English Working Class ）一书中对这三类人有精到的描述（参见第三章）。这两种新文化来源从不同方面对文化的凝聚力和社会的稳定构成了威胁：前者通过将文化变成商品的方式瓦解了文化的凝聚力和权威性，后者则对所有形式的政治及文化权威形成了直接的挑战。</p>
<h3 id="马修·阿诺德"><a href="#马修·阿诺德" class="headerlink" title="马修·阿诺德"></a>马修·阿诺德</h3><p>阿诺德所著之《文化与无政府状态》（Culture and Anarchy ）一书（当然，讨论的范围并不局限于此），正是这部著作奠定了阿诺德作为卓越的文化批评家的历史地位。<br><br>在阿诺德看来，文化乃是：（1） 获知“最好之物”的能力；（2） “最好之物”本身；（3） 将“最好之物”运用于精神与灵魂；（4） 对“最好之物”的追求。<br><br>所谓的“无政府状态”在一定程度上成了大众文化的代名词，阿诺德正是用这个词来描述工人阶级的活文化先天具有的某种破坏性的特质的。<br><br>阿诺德这个文化理论的奠基人其实根本没有对“大众文化”这一概念展开讨论，他只是简单地将大众文化视为深刻的政治骚乱的同义词。《文化与无政府状态》一书的主题也不是文化，而是社会秩序与社会权威应如何赢取文化领导权，使被统治者温顺地臣服。<br>柯勒律治认为“文明”是一个国家整体的品质，而“教养”专属于少数人，即其所称的“知识阶层”。一个国家的文明进程需由有教养的知识阶层来引导：<br><br>全部秩序的最终目标和意图在于：保护好古老文明的店铺和财富，搭建现在和过去之间的桥梁；补充和完善现有的一切，借此建立现代和未来之间的联系；尤其要让社会中的每一个遵纪守法的人知晓，知识的数量和质量对于理解其所拥有的权利及其务必履行的义务而言，是不可或缺的（34）。<br></p>
<h3 id="利维斯主义"><a href="#利维斯主义" class="headerlink" title="利维斯主义"></a>利维斯主义</h3><p>利维斯主义的基本立场是：“文化始终是少数人的专利”（Leavis and Thompson, 1977: 3）。<br>埃德蒙·戈斯 [3] （Edmund Gosse）的话来阐明此种现状的严重性：<br></p>
<p>如我所见，民主思想的蔓延所带来的一个巨大威胁，即是文学鉴赏的传统和经典文本的权威已经被群氓的投票所成功篡改。目前，在世界各地，那些未曾接受教育或只接受过一丁点教育的乌合之众竟已成为文学读者的主体。<br><br>在利维斯主义者眼中，黄金时代的标志不是单纯的文化整体性，而是建立在权威制和等级制原则上的文化整体性。<br><br>利维斯主义所产生的“深刻的、难以预料的影响”主要体现在理查德·霍加特（Richard Hoggart）和雷蒙德·威廉斯的著作中。<br><br>格雷欣定律，即“劣币驱逐良币”（bad money drives out good）法则。<br></p>
<h3 id="美国的大众文化：一场战后大讨论"><a href="#美国的大众文化：一场战后大讨论" class="headerlink" title="美国的大众文化：一场战后大讨论"></a>美国的大众文化：一场战后大讨论</h3><p>安德鲁·罗斯认为，“大众”（mass）乃是“将美国与美国之外的世界正式区隔开来的关键概念”（Ross, 1989: 42）。他指出：“这种正式区隔背后的历史，在很大程度上就是现代民族文化形成的历史”（同上）。二战之后，在美国国内成功形成了一种文化与政治的共识，这种共识建立在自由主义、多元主义和对阶级概念的淡化的基础之上，而美国知识阶层所树立的文化权威是此共识的主要来源。后来，这一局面被接踵而至的黑人民权运动、反正统文化思潮 [2] 、反越战运动、妇女解放运动和同性恋人权运动所打破。罗斯称：“知识阶层将自己视为全民族的文化、道德和政治领袖，这在美国历史上也许是头一次”（43）。知识分子之所以一下子变得这么重要，在一定程度上归功于“那场持续了15年、直到50年代末才结束的关于‘大众文化’的激烈大讨论”（同上）。罗斯花费了很多精力，试图证明这场讨论与冷战时期的“遏制性”意识形态有关——之所以要讨论文化问题，原因在于美国试图建立一个从内（文化贫乏带来的危机）到外（共产主义苏联的威胁）都处于健康状态的国家（body politic）。他认为，知识分子在这场讨论中分属三大阵营：<br></p>
<p>1.审美自由主义（aesthetic-liberalism）阵营。这一阵营里的人哀叹：即使绝大多数民众有自由选择的权利，他们仍然更加青睐所谓二流和三流的文化文本与实践，而对高雅文化的文本和实践置之不理。<br></p>
<p>2.企业自由主义（corporate-liberalism）或进步主义—进化主义（progressive-evolutionism）阵营。这一阵营里的人认为，大众文化发挥着温和的社会化功能，它使人们逐渐适应由新兴资本主义消费社会带来的消费愉悦。<br></p>
<p>3.激进主义或社会主义阵营。激进主义者和社会主义者视大众文化为一种社会控制的形式或工具。<br></p>
<p>在20世纪50年代末之前，前两大阵营在争论中占尽优势，这体现了麦卡锡主义 [3] （McCarthyism）在关涉社会主义的问题上所制造的日益强大的压力。<br></p>
<p>若想理解这场讨论的实质，有一部文献是必须阅读的，那就是出版于1957年的论文集《大众文化：美国的流行艺术》（Mass Culture: The Popular Arts in America ）。<br></p>
<p>伯纳德·罗森伯格（Bernard Rosenberg）（他与大卫·曼宁·怀特［David Manning White］同为该书的主编）声称，富庶、安定的美国社会正在遭遇来自群氓文化的非人性的破坏。他最大的担忧在于：“最糟糕的是，群氓文化不仅威胁到我们的审美趣味，更会铺设一条通向冷酷无情的独裁主义的道路”（Rosenberg, 1957: 9）。他还认为，群氓文化既不是美国土生土长的文化，也不是民主制度的必然结果。其开创者不是资本主义，而是科技。因此，美国不应该为群氓文化的出现和蔓延负责。<br><br>怀特也发表了类似的观点，但出于不同的目的。他指出：“群氓文化的批评者对美国当代社会持有一种过度悲观的看法”（White, 1957: 13-14）。他通过将美国的（群氓）文化与过去的大众文化的某些方面做比较，来为当代文化辩护。他坚持认为，批评家是在通过美化过去的方式来对当下进行攻击，并谴责那些“视美国文化为洪水猛兽，却忘记了在莎翁剧作刚刚问世的那个时代日常文化的残暴现实的人”（同上）。<br></p>
<p>德怀特·麦克唐纳（Dwight Macdonald）是这场讨论中的关键人物。他在一篇题为《大众文化理论》（“A Theory of Mass Culture”）的著名文章中，对群氓文化展开了全方位的攻击。<br></p>
<p>欧内斯特·凡·登·海格（Ernest van den Haag）。他提出：大众文化是大众社会（mass society）和大众化生产（mass production）的必然结果。大众生产的商品尽管在一定程度上反映了所有人的品位，却决然无法让每一个人都完完全全得到满足。这便造成了侵犯，也就是“品位的蓄意贬值”理论未曾解释清楚的问题（Haag, 1957: 512）。<br><br>凡·登·海格还指出了另一个关键之处，那就是群氓文化对高雅文化的诱惑。群氓文化有两个地方非常吸引人：（1） 经济上的回报；（2） 巨大的潜在受众群。<br><br>凡·登·海格注意到美国消费文化的文本与实践的多元性；同时他发现高雅文化和民间文化正在被群氓文化所吞噬；其结果就是，人们开始如消费群氓文化一样消费它们。“没人阅读经典，这既不新鲜也不可怕；可怕的是如此多的人正在误读经典”（528）。最后，凡·登·海格不禁断言，群氓文化是一剂“削弱人们体验生活的能力的毒药”（529）。归根结底，群氓文化乃是枯竭的象征，它标志着生活的去个性化（de-individualization）。<br></p>
<p>爱德华·希尔斯（Edward Shils）可不像凡·登·海格那样疑虑重重。他认为，凡·登·海格所言之“工业文化使生活变得贫乏”简直是一派胡言：<br></p>
<p>尽管当下工人阶级和下层中产阶级所追求的快感毫无深刻的美学、道德与知识价值，但在那些从中世纪起一直到19世纪持续不断地给他们的欧洲祖先带来快感的邪恶之物 [9] 面前，这两个阶级没什么可羞耻的（Shils, 1978: 35）。<br></p>
<p>希尔斯认为：</p>
<p>那些指责大众文化为导致20世纪知识颓败的罪魁祸首的想法是完全错误的……事实上，在过去的那几个晦暗、残酷的世纪里，下层阶级所遭受的迫害远比今日的大众文化带来的多（36）。<br></p>
<p>希尔斯认为大众文化是无辜的，问题出在知识阶层对大众文化的反应上。<br></p>
<p>在《两头不讨好的中间派》（“The Middle against Both Ends”）一文中，莱斯利·菲德勒（Leslie Fiedler）提出了与其他人不尽相同的观点：<br></p>
<p>（大众文化）是一种美国特有的现象……并不是说……只有在美国才能发现大众文化，而是说无论哪个地方的大众文化都是从美国传过去的；而且，这些文化样式只有在美国才能得到充分的发展。对于世界上其他地方的人来说，我们的经验就是对古老贵族文化土崩瓦解的预演。这个过程是不可避免的，谁也逃不掉（Fiedler, 1957: 539）。<br></p>
<p>对菲德勒来说，大众文化就是流行文化，对这种文化应“不问出处”。他解释道：</p>
<p>当代的平民文化既野蛮又混乱。这种“准文化”乃是无数城市中那些惨遭驱逐且文化贫乏的居民的一种自发的表达。面对来自科学的威胁和无休止的战争恐慌，面对古老的忠贞与英雄主义早已毁灭殆尽的腐化堕落的世界，他们只能去创造一些无关痛痒的神话（540）。</p>
<p>菲德勒提出的问题是：美国大众文化究竟出了什么问题？对于国内外的一些批评家而言，美国就是罪魁祸首。但菲德勒认为，美国经验的不可避免性决定了这一说法是毫无意义的，除非这些人连工业化、大众教育和民主制度也一并批判。他指出，美国“身处一场奇怪的、拥有两条阵线的阶级战争之间”。社会的中央是“假斯文的中产精神”，其上是“冷嘲热讽的贵族意识”，其下则是“野蛮的群氓心态”（545）。对大众文化的攻击其实是胆怯的表现，更是一种旨在消弭文化差异的企图。“（中产阶级）对平民文化和高雅文化的恐惧在本质上是相同的，那就是对文化差异的恐惧，这体现了中产阶级旨在让所有文化都变成羞怯、伤感、无知、空幻、装模作样的中产阶级文化的企图”（547）。“假斯文的中产精神”想要的文化平等其实就等于中产阶级文化一家独大。这可不是利维斯主义者所鼓吹的“文化驯服”，而是要将文化差异坚决地推上绝路。故而，菲德勒称，美国的大众文化是有层次、多元化的，而非同质化、等级制的，这一切都让他欢欣鼓舞。</p>
<h3 id="其他人的文化"><a href="#其他人的文化" class="headerlink" title="其他人的文化"></a>其他人的文化</h3><p>“文化与文明”传统）在很大程度上是“有文化的人”对“没文化的人”的文化发表的看法……这些“有文化的人”在研究大众文化的时候采取了疏远和审慎的态度，他们只是大众文化的局外人，对大众文化既无好感，也绝不会参与其中。对于这些人来说，大众文化永远只是“其他人”的文化（同上）。</p>
<h3 id="拓展阅读-1"><a href="#拓展阅读-1" class="headerlink" title="拓展阅读"></a>拓展阅读</h3><p>Storey, John (ed.), Cultural Theory and Popular Culture: A Reader , 4th edition, Harlow: Pearson Education, 2009.该书是本书的配套阅读材料，其中收录了本书所涉之大多数重要文献。本书及其配套读本得到了互动式网站<a href="http://www.pearsoned.co.uk/storey%E7%9A%84%E6%94%AF%E6%8C%81%E3%80%82%E8%AF%A5%E7%BD%91%E7%AB%99%E4%B8%AD%E5%8C%85%E5%90%AB%E4%BA%86%E8%AE%B8%E5%A4%9A%E6%9C%89%E7%94%A8%E7%9A%84%E9%93%BE%E6%8E%A5%E4%B8%8E%E7%94%B5%E5%AD%90%E8%B5%84%E6%BA%90%E3%80%82">www.pearsoned.co.uk/storey的支持。该网站中包含了许多有用的链接与电子资源。</a></p>
<p>Baldick, Chris, The Social Mission of English 1848—1932 , Oxford: Clarendon Press, 1983.本书中有一些章节对阿诺德和利维斯主义进行了有趣而令人信服的介绍。【37】</p>
<p>Bilan, R.P., The Literary Criticism of F.R.Leavis, Cambridge: Cambridge University Press, 1979.尽管作者仅把利维斯当作一位文学批评家来研究，但书中仍涉及了利维斯关于高雅文化和大众文化的观点。</p>
<p>Bramson, Leon, The Political Context of Sociology , Princeton, NJ: Princeton University Press, 1961.书中有一章对美国的大众文化大讨论进行了介绍，极富启发性。</p>
<p>Gans, Herbert J., Popular Culture and High Culture: An Analysis and Evaluation of Taste , New York: Basic Books, 1974.该书尽管初版年份较晚，但仍是对美国大众文化大讨论的一种参与。书中对文化多元主义的支持十分具有说服力。</p>
<p>Johnson, Lesley, The Cultural Critics , London: Routledge &amp; Kegan Paul, 1979.书中一些章节对阿诺德和F.R.利维斯的介绍对研究者很有帮助。</p>
<p>Mulhern, Francis,The Moment of Scrutiny, London: New Left Books, 1979.这是一部关于利维斯主义的经典著作。</p>
<p>Ross, Andrew, No Respect: Intellectuals and Popular Culture , London: Routledge, 1989.这是一本读起来很有趣的书，其中有一章是关于美国大众文化大讨论的，提供了很多有用的信息。</p>
<p>Thrilling, Lionel, Matthew Arnold , London: Unwin University Press, 1949.本书是目前为止关于阿诺德的最好的介绍性读物。</p>
<p>Waites, Bernard, Tony Bennett and Graham Martin (eds), Popular Culture: Past and Present, London: Croom Helm, 1982.这本论文集通过许多不同的案例来展开对大众文化的讨论。第一章、第四章和第六章对大众文化以及催生了“文化与文明”传统的焦虑感的历史语境进行了考察。</p>
<p>Williams, Raymond, Culture and Society , Harmondsworth: Penguin, 1963.本书是对“文化与文明”传统展开批评的奠基之作，其中有些章节是关于阿诺德和F.R.利维斯的。</p>
<h2 id="第三章-文化主义"><a href="#第三章-文化主义" class="headerlink" title="第三章 文化主义"></a>第三章 文化主义</h2><h3 id="理查德·霍加特：《识字的用途》"><a href="#理查德·霍加特：《识字的用途》" class="headerlink" title="理查德·霍加特：《识字的用途》"></a>理查德·霍加特：《识字的用途》</h3><p>《识字的用途》一书包括两个部分。第一部分题为“古老秩序”，描绘了作者的童年时期，即20世纪30年代的工人阶级文化。第二部分题为“新的转变”，讲述传统工人阶级文化如何在20世纪50年代遭遇大众娱乐的威胁。这种行文方式其实已经揭示了作者看待问题的角度和期望得出的结论——一边是20世纪30年代的“活文化”传统，另一边则是50年代的文化衰落。<br>霍加特（在20世纪50年代）坚称：</p>
<p>我们正在进入群氓文化时代；而在某种程度上，代价就是一种“属于人民的”都市文化的毁灭。崭新的群氓文化远比被它赶走的那种“天然的文化”有害（24）。<br>《识字的用途》一书的前半部分对上述观点的阐述是很不充分的，其论证过程缺乏学术性，几乎就是一部充满怀乡之情的自传。很多人对此嗤之以鼻。而我认为，该书的致命之处在于霍加特未能以看待20世纪30年代大众文化的宽容态度来看待50年代的所谓群氓文化。</p>
<h3 id="雷蒙德·威廉斯：“文化分析”"><a href="#雷蒙德·威廉斯：“文化分析”" class="headerlink" title="雷蒙德·威廉斯：“文化分析”"></a>雷蒙德·威廉斯：“文化分析”</h3><p>威廉斯概括了“文化的三种定义类别”（Williams, 2009: 32）。第一种定义认为文化“是‘理想’的，意指人类的某种尽善尽美的状态或过程，以某种绝对真理或普世价值的状态存在”（同上）。<br>文化的第二种定义强调其“记录”的功能，意指某种文化的现存的文本与实践。<br>第三种定义“强调文化的‘社会性’：文化是对某种特定的生活方式的描述”（同上）。</p>
<p>某一社会的传统文化必然是与该社会的现行利益与价值观机制密切相关的，它并不是个确切的实体，而是始终处于持续不断的选择和阐释之中（2009: 38-39）。</p>
<h3 id="E-P-汤普森：《英国工人阶级的构成》"><a href="#E-P-汤普森：《英国工人阶级的构成》" class="headerlink" title="E.P.汤普森：《英国工人阶级的构成》"></a>E.P.汤普森：《英国工人阶级的构成》</h3><p>《英国工人阶级的构成》是“自下而上的历史”的典范之作。<br>在汤普森看来，英国工人阶级和其他阶级一样，是一种“历史 现象”。工人阶级既不是一种“结构”，也不是一个“范畴”，而是“原始物质经验和人类意识领域中所有异质的、貌似互不相干的大量事物的总和”，“生发于人与人的相互关系中”。<br>此外，工人阶级也不是一个特定的“事物”，而始终是“联合”与“差异”之间的某种历史关系，即，将一个阶级的全体成员联合起来，去反抗其他阶级。诚如汤普森所言：“阶级的形成是（继承或共享的）共同经验的结果。当拥有共同经验的人为捍卫其集体身份与利益而与那些拥有不同（常常是相反）利益的人展开斗争时，阶级就诞生了”（8-9）。某一阶级的共同经验“在很大程度上是由生产关系决定的；而每个人都隶属于某种生产关系，要么从降生便在其中，要么后天不知不觉地加入其中”（9）。但是，阶级意识和从经验到文化的转变过程则是由“亲历历史的人所主导的；而这，就是阶级的唯一定义”（10）。对汤普森而言，阶级“既是一种社会形式，也是一种文化形式；其形成则是一个漫长的历史过程”（11）。</p>
<h3 id="斯图亚特·霍尔与派迪·维诺：《大众艺术》"><a href="#斯图亚特·霍尔与派迪·维诺：《大众艺术》" class="headerlink" title="斯图亚特·霍尔与派迪·维诺：《大众艺术》"></a>斯图亚特·霍尔与派迪·维诺：《大众艺术》</h3><p>《大众艺术》的一个意图，在于通过培养大众对于大众文化和其他文化的分辨力来替代因早期理论家对大众文化的攻击所形成的“误导性的原则”。与其对大众文化的“影响力”忧心忡忡，不如“去培养更具鉴赏品位的受众”（35）。</p>
<h3 id="当代文化研究中心-霍加特"><a href="#当代文化研究中心-霍加特" class="headerlink" title="当代文化研究中心:霍加特"></a>当代文化研究中心:霍加特</h3><p>文化主义者研究文化文本与文化实践，旨在还原或重建特定群体或阶级或整个社会的“感知结构”，包括他们的经验、价值观，等等。其目的，就在于更好地理解那些亲历了文化的人们的生活。</p>
<h3 id="拓展阅读-2"><a href="#拓展阅读-2" class="headerlink" title="拓展阅读"></a>拓展阅读</h3><p>Storey, John (ed.), Cultural Theory and Popular Culture: A Reader , 4th edition, Harlow: Pearson Education, 2009.该书是本书的配套阅读材料，其中收录了本书所涉之大多数重要文献。本书及其配套读本得到了互动式网站<a href="http://www.pearsoned.co.uk/storey%E7%9A%84%E6%94%AF%E6%8C%81%E3%80%82%E8%AF%A5%E7%BD%91%E7%AB%99%E4%B8%AD%E5%8C%85%E5%90%AB%E4%BA%86%E8%AE%B8%E5%A4%9A%E6%9C%89%E7%94%A8%E7%9A%84%E9%93%BE%E6%8E%A5%E4%B8%8E%E7%94%B5%E5%AD%90%E8%B5%84%E6%BA%90%E3%80%82">www.pearsoned.co.uk/storey的支持。该网站中包含了许多有用的链接与电子资源。</a></p>
<p>Chambers, Iain, Popular Culture: The Metropolitan Experience , London: Routledge, 1986.这是一本有趣且内容丰富的概览性著作。作者的视角基本上是文化主义的，他所考察的对象是自19世纪80年代开始的城市大众文化的兴起过程。</p>
<p>Clarke, John, Chas Critcher and Richard Johnson (eds), Working Class Culture: Studies in History and Theory , London: Hutchinson, 1979.本书收录了一些从文化主义角度撰写的文章。请重点阅读理查德·约翰逊的《关于工人阶级文化理论要素的三点问题》。</p>
<p>Eagleton, Terry (ed.), Raymond Williams: Critical Perspective , Cambridge: Polity Press, 1989.本书收录了一些对威廉斯的著作进行批判性解读的文章。</p>
<p>Hall, Stuart and Tony Jefferson (eds), Resistance through Rituals , London: Hutchinson, 1976.本书是当代文化研究中心进行青年亚文化研究的代表性成果。本书的第一章就是一篇文化主义理论的经典论述。【60】</p>
<p>Hall, Stuart, Dorothy Hobson, Andrew Lowe and Paul Willis (eds), Culture, Media, Language , London: Hutchinson, 1980.本书是一部论文汇编，在时间上几乎涵盖了当代文化研究中心成立前十年里发表的所有成果。请阅读由霍尔撰写的第一章，题为“文化研究与当代文化研究中心：问题域与问题”。本文详述了当代文化研究中心的理论发展历程。</p>
<p>Jones, Paul, Raymond Williams‘ Sociology of Culture: A Critical Reconstruction , Basingstoke: Palgrave, 2004.这是一部很有趣的著作。只不过作者过于强调威廉斯对社会学的贡献，未能正确认识其在文化研究中的地位。</p>
<p>Kaye, Harvey J.and Keith McClelland (eds), E.P.Thompson: Critical Perspectives , Oxford: Polity Press, 1990.本书收集了多篇论文，评述汤普森为历史研究做出的贡献，为《英国工人阶级的构成》一书提供了一些有益的注脚。</p>
<p>O‘Connor, Alan (ed.), Raymond Williams: Writing, Culture, Politics , Oxford: Basil Blackwell, 1989.本书对威廉斯的著作进行了批判性的检视。此外，本书列出的参考文献十分有价值。</p>
<h2 id="第四章-马克思主义"><a href="#第四章-马克思主义" class="headerlink" title="第四章 马克思主义"></a>第四章 马克思主义</h2><h3 id="经典马克思主义"><a href="#经典马克思主义" class="headerlink" title="经典马克思主义"></a>经典马克思主义</h3><p>马克思本人有句名言：“哲学家们只是用不同的方式解释 世界，问题在于改变世界”（Marx, 1976b: 65）。<br>马克思主义强调世间万物归根结底都是政治的。</p>
<h3 id="威廉·莫里斯与英国马克思主义"><a href="#威廉·莫里斯与英国马克思主义" class="headerlink" title="威廉·莫里斯与英国马克思主义"></a>威廉·莫里斯与英国马克思主义</h3><p>换言之，在消除了异化的共产主义社会，全人类都可以如艺术家一样劳动：一切工作都是创造性的，因而最终都会在实际上生产出大众文化。</p>
<h3 id="法兰克福学派"><a href="#法兰克福学派" class="headerlink" title="法兰克福学派"></a>法兰克福学派</h3><p>学派的若干位知名学者，包括西奥多·阿多诺、瓦尔特·本雅明（Walter Benjamin）、马克斯·霍克海默（Max Horkheimer）、利奥·洛文塔尔（Leo Lowenthal）和赫伯特·马尔库塞（Herbert Marcuse）等，都对大众文化进行过专门的研究。<br>法兰克福学派学者眼中却只有人们对权力阶级的“遵从”：在这种情况下，“被蒙蔽的大多数”（133）被困在一个“循环往复的操纵性的怪圈里，而整个系统的一致性也就日益增强”（121）。</p>
<p>利奥·洛文塔尔认为，文化工业生产出来的文化具有“标准化、模式化、保守、虚幻等特征，是极具操纵性的消费品”（Lowenthal, 1961: 11）。</p>
<p>赫伯特·马尔库塞在《单向度的人》（One Dimensional Man ）一书中所论述的那样：</p>
<p>娱乐和信息工业（文化工业）生产出来的东西是令人难以抗拒的，因其蕴含着某种预设的观念和习俗，通过激发精神上或情感上的反应将“心甘情愿的”消费者和文化的生产者绑定在一起；进而，文化的受众也就被纳入了整个资本主义体系。这些文化产品向人们灌输着某种虚假意识，操纵着人们的思想，让大众无法看清其欺骗性……这已经成了一种生活方式。这是一种很“好”的生活方式，至少比以前好。在这种生活方式之下，绝不会发生任何质变。因此，就出现了一种单向度的思维与行为模式，那些试图超越既有话语和行为范畴的观念、愿望和理想，要么被摒弃，要么被纳入现存的体系（Marcuse, 1968a: 26-27）。</p>
<p>换言之，资本主义通过满足大众的某些需求而消解了人们心底的更为基本的愿望。在此，文化工业阻碍了政治理想的生发。</p>
<p>“同化作用是一种极不成熟的历史现象；它所建立的文化平等实际上维护了统治阶级的利益”（Marcuse 1968a: 64）。简言之，文化的民主化进程反而扼杀了充分的民主，成为现行社会秩序的卫道士。</p>
<p>《论流行音乐》（“On Popular Music”）做一番深入分析。在文章中，阿多诺指出流行音乐具有三个主要特征。第一，流行音乐是“标准化”的音乐。“标准化”使得“那些即使是最独特的东西也变得乏善可陈”（Adorno, 2009: 64）。一旦某种音乐或歌词风格受到欢迎，这种风格就会遭到商业的滥用，造成的结果就是“标准的结晶化”（同上）。歌</p>
<p>流行音乐的第二个特征是：它使得听音乐变成了一个消极被动的过程。前文曾经提到过，资本主义制度下的劳动是极为枯燥的，因此每个人都在想方设法逃避现实。但是，由于这种劳动使人非常疲惫，所以没有人真正有本事“逃出去”；也就是说，没有人有精力去追求什么“本真”文化。于是，流行音乐就成了人们心灵的庇护所。对流行音乐的消费是不得已而为之的，而且是日复一日没有止境的。这种消费确保世界始终保持着现状 。“</p>
<p>流行音乐的第三个特征，是它发挥了“社会黏合剂”的作用（72），其“社会心理功能”在消费者心中成功制造出了一种对既有权力结构需求的“心理适应性”（同上）。这种“适应性”主要体现为“两种主要的群体行为的社会心理类型，即‘节奏性’顺从型和‘情感型’”（同上）。前者使人们在一定的节奏中忽略自己所遭受的剥削和压迫，后者则让大众心甘情愿地忍受现实生存环境所带来的情感痛苦。</p>
<p>我们必须清楚，《论流行音乐》一文发表于1941年，而现在的情况与70年前不可同日而语:比如说，“个人化理论”是否可以解释1956年摇滚乐的诞生、1962年甲壳虫乐队（The Beatles）的横空出世，以及1965年反传统音乐文化的勃兴？又是否可以解释20世纪70年代的朋克摇滚 [3] （punk rock）和“摇滚对抗种族主义” [4] （Rock Against Racism）运动、80年代的迷幻豪斯 [5] （acid house）和独立流行乐 [6] （indie pop），以及90年代的锐舞派对 [7] （rave）和嘻哈音乐 [8] （hip hop）？</p>
<h3 id="阿尔都塞主义"><a href="#阿尔都塞主义" class="headerlink" title="阿尔都塞主义"></a>阿尔都塞主义</h3><p>从一开始，阿尔都塞就反对那些关于经济基础和上层建筑的机械式的误读，他把注意力集中在社会结构上。他指出，社会结构包括三种实践，分别是经济实践、政治实践和意识形态实践（1969）。</p>
<p>阿尔都塞症候式解读方法</p>
<p>皮埃尔·马施立所著之《文学生产理论》（A Theory of Literary Production ）无疑是采用阿尔都塞症候式解读方法对文化文本进行分析的典范。尽管如标题所示，马施立的主要分析对象是文学作品，但他对文本分析方法的发展引发了大众文化研究者的浓厚兴趣。<br>在他看来，文本并不是掩藏着一种意义的谜题，而是多重含义建构的结果。要想对文本进行“解释”，就必须认清这一点。这同时意味着文本并不是一个和谐的、从某个核心意图出发盘旋式前进的整体。恰恰相反，文学文本是“离心的”（decentred），是残缺不全的。<br>当然，这并不是说我们需要为文本添加一些东西而使之更加完整。马施立所谓的“离心”（不以某个权威的意图为中心）指的是文本之中往往包含了若干互相冲突的话语：明确的、隐含的、呈现的、缺席的。因此，批评实践的使命并不在于评析文本的内在一致性、和谐整体性和审美调和性，而在于阐释文本内部因意义冲突而产生的种种差异。</p>
<p>这种冲突并不是文本的缺陷；它揭示了在文学作品中存在着“他者”，而文本正是通过这种方式与自身的边缘和自身之外的世界维持着关联。对文学作品进行解读就是要揭示其非独立性，并时刻牢记在文本的物质实在之中包含着某种确定的缺席 的痕迹；这种缺席同样是文本自身不可或缺的特性之一。比如说，这本书所表达的观点并不仅仅体现在这本书自身之中，还隐含地包括了其他反对本书观点的著作的在场；文本是围绕着不可言传的缺席之物建立起来的，某些为文本所压抑的词句时刻威胁着文本，试图“卷土重来”。因此，这本书并不是某一种意义的延伸，而是包含了若干种意义的矛盾体；而正是通过这种剑拔弩张且连绵不断的矛盾、冲突，本书将自己与现实牢牢地绑在了一起（Macherey, 1978: 79-80）。【78】【79】</p>
<p>获取知识的行为并不似聆听业已存在的话语，也不似简单翻译一部纯粹的小说。这种行为更像是对某种新话语的发掘，或是打破某种缄默的状态。知识并不是对某一种潜在的、被遗忘或隐藏的意义的发现或重建，而是一种新生事物，是从头到尾对现实进行的补充（6）。</p>
<p>在对法国科幻小说家儒勒·凡尔纳 [2] （Jules Verne）的作品进行分析的时候，马施立察觉到那些小说中蕴含着19世纪晚期法兰西帝国主义的矛盾。他指出，凡尔纳的小说对帝国主义扩张和全球殖民的意识形态进行了精彩的 展示，每一个探险故事都体现了主人公对大自然（如某个神秘岛屿、月球、海底、地心，等等）的征服。</p>
<p>在阿尔都塞所下的第二个定义中，意识形态仍然是个体与真实的生存环境之间想象性关系的表征，但意识形态并不仅仅是一系列观念的集合，还是一种活的物质实践，是仪式、风俗、行为模式、思维方式的实践形态，是由意识形态国家机器（Ideological State Apparatuses, ISAs）生产出来的。而所谓意识形态国家机器，包括教育、宗教、家庭、政治、传媒、文化工业等范畴。在这一定义下，“一切意识形态都有将独特个体‘建构’成对象的功能（意识形态的概念正是被这一功能界定的）”（Althusser, 2009: 309）。意识形态的对象是通过“召唤”（hailing）和“质询”（interpellation）被生产出来的。阿尔都塞举了一个例子来做类比。</p>
<p>茱迪丝·威廉森（Judith Williamson）的那部影响深远的广告研究著作《解码广告》（Decoding Advertisements ）就是在阿尔都塞为意识形态所下的第二个定义的基础上展开的。她指出，所有广告都带有意识形态的意味，因为它们都展现了我们与真实生存环境之间的想象性关系。广告强调的并不是基于人们在生产过程中扮演不同角色而产生的阶级差异，而是人们在对特定产品进行消费的过程中产生的差异。于是，社会身份就成了我们消费什么的问题，而不是我们生产了什么的问题。如其他意识形态一样，广告也具有质询的功能：消费者受到质询之后，不但要生产意义，还要一而再再而三地购买和消费。</p>
<p>不过，阿尔都塞为意识形态所下的第二个定义及其在文化理论中的应用似乎显得过于理想化了。在阿尔都塞看来，由资本主义生产方式所决定的必需的意识形态习性对人类的再生产过程总是非常顺利的，绝对不会失败，更不会产生什么冲突、斗争和抵抗。不过单就大众文化领域而言，难道广告总是能够成功地将我们“质询”为消费的对象吗？更重要的是，纵使“质询”真的起作用，难道过去的“质询”就不会与当下的“质询”产生冲突吗？</p>
<h3 id="霸权"><a href="#霸权" class="headerlink" title="霸权"></a>霸权</h3><p>葛兰西对文化研究做出的最大贡献就是提出了“霸权”这个概念，他用这个概念来解释（在资本主义制度的剥削和压迫之下）为何西方资本主义民主国家之内无法产生社会主义革命。在葛兰西看来，所谓“霸权”指的是某种进行中的状况 ，它描述了统治阶级（连同其他相关阶级或阶级成分）通过操纵“精神及道德领导权”的方式对社会加以引导 而非统治 的过程（Gramsci, 2009: 75）。在霸权之中包含了一种特殊的共识，即某个社会群体想方设法将自己的特定利益展示为整个社会的整体利益。于是，尽管社会之中始终存在着剥削和压迫，但各个阶级之间达成了高度的共识，彼此和谐相处；被统治阶级似乎服膺于“共同的”价值、观念、目标，以及文化和政治内涵，并以此种方式被既有的权力结构“收编”（incorporate）。</p>
<p>霸权理论拓展了大众文化研究者的视野，很多用过去的分析方法无法阐释的问题如今迎刃而解。从此，大众文化不再是一成不变的自上而下强加的文化（法兰克福学派），不再是社会衰落与腐朽的象征（“文化与文明”传统），不再是自下而上自然生发出来的文化（文化主义的某些观点），也不再是主观强加于被动对象的表意机器（结构主义的某些观点）。在霸权理论的观照下，大众文化乃是一种“上”与“下”、“商业”与“本真”之间彼此“协商”产生的混合物，是平衡着“抵抗”与“收编”两股力量的不稳定的“场”。</p>
<h3 id="后马克思主义与文化研究"><a href="#后马克思主义与文化研究" class="headerlink" title="后马克思主义与文化研究"></a>后马克思主义与文化研究</h3><p>安吉拉·麦克罗比（Angela McRobbie）所指出的那样，马克思主义对文化研究的影响已经不及此前那样显著了：</p>
<p>马克思主义一度是英国文化研究最主要的理论体系，如今却面临着来自后现代主义批评家的质疑。他们认为马克思主义带有目的论色彩，质疑其宏大叙事、实在论、经济主义、欧洲中心主义，及其在整个启蒙运动中的地位（McRobbie, 1992: 719）。</p>
<p>不过她也声称：“弗雷德里克·詹明信和大卫·哈维（David Harvey）等批评家对‘回归后现代之前的马克思主义’的呼吁也是站不住脚的，因为这意味着将经济关系和经济决定论凌驾于文化与政治关系之上……”（同上）然而，正如霍尔指出的那样，在某种意义上，文化研究始终属于后马克思主义的范畴（Hall, 1992: 279）。</p>
<p>后马克思主义”这个概念至少有两种含义。欧内斯托·拉克劳（Ernesto Laclau）和尚塔尔·墨菲（Chantal Mouffe）合著之《霸权与社会主义战略：通向激进民主政治之路》（Hegemony and Socialist Strategy: Towards a Radical Democratic Politics ）对后马克思主义产生了深远的影响。在书中，作者指出：“如果说本书的主题是‘后 马克思主义’的，那它同时也必然是‘后马克思主义 ’的”（Laclau and Mouffe, 2001: 4）。前者意味着超越马克思主义，去寻找一套更好的理论体系；而后者主张对马克思主义进行修正，用女性主义、后现代主义、后结构主义和拉康精神分析学说等前沿理论成果来丰富马克思主义的内涵。</p>
<p>“话语”（discourse）这个概念在后马克思主义的发展过程中扮演了中心角色。诚如拉克劳所言：“这一论断的基本假设是，很有可能人们的一切感知、思维和行动都依赖于某一特定的意义领域的结构化形成，而这一领域先于一切即刻事实（factual immediacy）存在”（Laclau, 1993: 431）。</p>
<p>“接合”是后马克思主义文化研究的关键词。拉克劳与墨菲指出：“接合的实践存在于……对意义的局部固定（partial fixing）之中”（Laclau and Mouffe, 2001: 113）。霍尔（1996b）对这一概念进行了扩展，用以解释文化是如何为意识形态斗争提供场所的。像拉克劳与墨菲一样，霍尔也认为文本和实践并非先天就具有意义，意义的产生始终是接合活动的结果：“意义是一种社会产物，是一种实践；世界之所以有意义，完全是人为的结果 ”（Hall, 2009a: 121）。他还援引俄国理论家弗洛西诺夫（Valentin Voloinov）的观点，称文本和实践是“多重音的”（multi-accentual），即文本和实践可以被不同的人、在不同的社会情境之下、出于不同的政治目的、以不同的话语、操不同的“口音”来“言说”（Voloinov, 1973）。</p>
<h2 id="第五章-精神分析"><a href="#第五章-精神分析" class="headerlink" title="第五章 精神分析"></a>第五章 精神分析</h2><h3 id="弗洛伊德精神分析学说"><a href="#弗洛伊德精神分析学说" class="headerlink" title="弗洛伊德精神分析学说"></a>弗洛伊德精神分析学说</h3><p>西格蒙德·弗洛伊德（Sigmund Freud）认为文明的创造力必然导致人类本能的压抑。他还声称：“每一个新进入人类社会的个体都不得不为了整个社区的利益而一再牺牲对本能的满足”（Freud, 1973a: 47）。最重要的本能驱动力就是性，而文明的存在使得人类的性本能在无意识（unconscious）的过程中得到“升华”：</p>
<p>也就是说，那些原本出于性欲的目的而存在的本能发生了转变，变得更加“高尚”，失尽了性的因素。然而，这一机制是极不稳定的，因为性驱动力是很难被完全驯服的。当一个人下定决心通过自我压抑的方式融入社会文明，他的性本能却极有可能成为阻碍。对于社会来说，文明最大的敌人莫过于性本能的充分释放和回归（47-48）。 [1]</p>
<p>他第一次将人的心灵分成两个部分：“意识”和“无意识”。前者联结着个体与外部世界，后者则容纳了人类的种种本能的驱动和被压抑的欲望。在此基础上，弗洛伊德还提出了“前意识”（preconscious）的概念——当我们在特定时刻无法记得某件事情，但经过冥思苦想之后又可以回忆起来，那么这件事情就存在于我们的前意识当中。存在于无意识里的东西时刻处于审查与反抗的张力之中，只能通过扭曲的方式被表达出来，而我们是无法将无意识的内容原封不动地转移到意识里面的。 [2] 最终，弗洛伊德通过三个术语对人类的精神世界做出了划分：自我（ego）、超我（super-ego）和本我（id）。这三个词的德语原文分别是Ich（我）、über-Ich（超我）和es（它）。</p>
<p>本我是人类存在（being）中的最原始的部分，是“我们只遵循自然法则的非人格化的天性”（1984: 362），是“我们人性之中最黑暗、最艰于触摸的部分……无比混乱，仿佛是充满沸腾的刺激的巨大汽锅……尽管始终在激发蠢蠢欲动的本能之力，但不服从任何既定规则和集体意愿……它的一切目的就是遵循快乐原则（pleasure principle），想尽办法满足本能的需求”（1973b: 106）。</p>
<p>自我是本我的一个部分，是被外部世界直接影响并加以改造后的本我……更重要的是，自我借助外部世界的力量压抑本我，遏制其发展，并试图使现实原则（reality principle）凌驾于在本我内部滋生蔓延的快乐原则之上……自我在外部表现为我们常说的理性和常识，与激情四溢的本我形成鲜明的对比（363-364）。</p>
<p>超我是在俄狄浦斯情结（the Oedipus complex）（在后文中会详细讨论）消解的过程中出现的。起初，超我的出现是孩童对父母的权威——尤其是父亲的权威——加以内化（internalization）和内投（introjection）的结果。</p>
<p>弗洛伊德认为梦始终是一种“妥协结构”（compromise-structure）（48）。<br>梦主要活动在两个层面上，分别是潜在的梦幻意念（无意识）与外显的内容（做梦者醒来之后可以记得住的那一部分内容）。<br>梦的运作”（dream-work）（Freud, 2009: 246），其中包括四个步骤，分别是凝缩（condensation）、移情（displacement）、象征（symbolization）与次级修正（secondary revision）。<br>将弗洛伊德的精神分析学说应用于文本分析，至少可以有两种方式。第一种方式以作者为中心，将文本等同于作者的梦境。<br>第二种文本分析方式以读者为中心，可以被视为由“作者中心论”衍生出来的分析方法。</p>
<h3 id="拉康精神分析学说"><a href="#拉康精神分析学说" class="headerlink" title="拉康精神分析学说"></a>拉康精神分析学说</h3><p>拉康认为，我们从出生那天起，就处于 “匮乏”（lack）的状况之中，而我们终其一生都在不断地想方设法克服这一状况。</p>
<p>拉康指出，我们在成长过程中总共经历了三个重要阶段。最初是“镜像阶段”（mirror stage），之后是“去—来游戏”（“for-da”game），最后才是“俄狄浦斯情结”。</p>
<p>“俄狄浦斯情结”告诉我们：</p>
<p>儿童现在必须直面现实：已经永不可能与……禁忌的母体……产生任何直接的关联了……渡过俄狄浦斯危机之后，我们便永远不能企及这一珍贵的客体了，尽管我们会穷尽一生的光阴不断地寻找它。我们不得不“委身于”种种替代性的客体……想尽办法弥合自身存在之中的巨大罅隙，却只能一次又一次地徒劳而返。我们从一个替代物漂向另一个替代物，从一个隐喻漂向另一个隐喻，却永远无法重获纯粹的（哪怕是想象性的）自我认同与自我满足……在拉康的理论体系中，正是“母体”这一元客体的失落驱动着我们生命的叙事，促使我们在欲望的无尽的换喻活动中毕生追寻着失落天堂的替代物（Eagleton, 1983: 167, 168, 185）。【109】</p>
<p>比如说，在言情类艺术作品的话语中，“爱”是一切问题的终极解决途径；这一过程就可被视为人类无休止地追寻母体之替代物的例子。言情类艺术作品其实是一种话语的实践（参见第六章对福柯的讨论以及第四章对后马克思主义的讨论），这种话语将“爱情”视为完善人类自身存在的终极要素。</p>
<h3 id="电影精神分析"><a href="#电影精神分析" class="headerlink" title="电影精神分析"></a>电影精神分析</h3><p>劳拉·墨维（Laura Mulvey）的论文《视觉快感与叙事电影》（“Visual Pleasure and Narrative Cinema”）或许是从女性主义精神分析视角对大众电影进行研究的经典之作。</p>
<p>在电影中，女性的形象通常具有双重属性：第一，男性欲望的对象；第二，阉割恐惧的能指。</p>
<p>大众电影生产了两种互相矛盾的视觉快感。首先是窥视的快感，其次是自恋的快感。两者之间的矛盾体现为：“在电影中，前者暗示了充满性欲的观影主体与银幕上出现的种种客体的分离；而后者通过让观众着迷的方式，使其将银幕上的那些与自己具有相似性的客体认同为另一个理想化的自我”（10）。</p>
<p>墨维得出结论：必须摧毁大众电影带来的快感，将女性从种种剥削和压迫中解放出来，不再扮演“（主动）男性凝视之（被动）原料”的角色（17）。</p>
<h3 id="斯拉沃热·齐泽克与拉康式幻想"><a href="#斯拉沃热·齐泽克与拉康式幻想" class="headerlink" title="斯拉沃热·齐泽克与拉康式幻想"></a>斯拉沃热·齐泽克与拉康式幻想</h3><p>齐泽克指出：“‘现实’乃是被幻想建构出来的，这种建构掩盖了欲望的实在界”（iek, 1989: 45）。<br>他指出，幻想的功能并非满足欲望，而是展示欲望。</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>杂文</category>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>每月总结10(2022/01)</title>
    <url>/WestRoute.github.io/2022/02/05/MonthlyRe10/</url>
    <content><![CDATA[<p>观影30部，读书11本。</p>
<p>2021年我的观影量从600涨到了1300，我对电影的认识也发生了改变，我本以为电影和书会告诉我们人生大路该怎么走，教我们如何看透表象之下的本质，让我活得高人一等。<br><br><br>然而，特别是这个月所读的书所接触的知识来看，它们告诉我的反而是：<br></p>
<ol>
<li>看书不会让人聪明，但会让人变强</li>
<li>学知识不只是为了让自己变得更高，还是为了让世界变得更好<span id="more"></span></li>
</ol>
<p>最近生活挺充实的，最开始看电影的目的也是想摆脱不好的回忆，现在生活充满了期待和活力。不久以后我也不再需要看电影了吧。</p>
<h3 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h3><table>
<thead>
<tr>
<th>name</th>
<th>tag</th>
<th>compdate</th>
<th>num</th>
</tr>
</thead>
<tbody><tr>
<td>呼喊</td>
<td>2006/日本/黑泽清</td>
<td>2022/2/4</td>
<td>1330</td>
</tr>
<tr>
<td>真情电波</td>
<td>2003/美国/迈克尔托林</td>
<td>2022/2/3</td>
<td>1329</td>
</tr>
<tr>
<td>法兰西特派</td>
<td>2021/法国/韦斯·安德森</td>
<td>2022/2/2</td>
<td>1328</td>
</tr>
<tr>
<td>网中的太阳</td>
<td>1963/捷克/斯特凡·乌赫尔</td>
<td>2022/1/29</td>
<td>1327</td>
</tr>
<tr>
<td>下班后</td>
<td>1985/美国/马丁·斯科塞斯</td>
<td>2022/1/28</td>
<td>1326</td>
</tr>
<tr>
<td>人造天堂</td>
<td>2002/日本/青山真治</td>
<td>2022/1/27</td>
<td>1325</td>
</tr>
<tr>
<td>随心所欲</td>
<td>1962/法国/让-吕克·戈尔达</td>
<td>2022/1/26</td>
<td>1324</td>
</tr>
<tr>
<td>任逍遥</td>
<td>2002/中国/贾樟柯</td>
<td>2022/1/25</td>
<td>1323</td>
</tr>
<tr>
<td>正义联盟</td>
<td>2021/美国/扎克·施奈德</td>
<td>2022/1/24</td>
<td>1322</td>
</tr>
<tr>
<td>火星救援</td>
<td>2015/英国/雷德利·斯科特</td>
<td>2022/1/23</td>
<td>1321</td>
</tr>
<tr>
<td>爱的挽歌</td>
<td>2001/法国/让-吕克·戈尔达</td>
<td>2022/1/23</td>
<td>1320</td>
</tr>
<tr>
<td>兹山鱼谱</td>
<td>2021/韩国/李</td>
<td>2022/1/20</td>
<td>1319</td>
</tr>
<tr>
<td>人·鬼·情</td>
<td>1987/中国大陆/黄蜀芹</td>
<td>2022/1/20</td>
<td>1318</td>
</tr>
<tr>
<td>坂上之云</td>
<td>2009/日本/柴田岳志</td>
<td>2022/1/19</td>
<td>1317</td>
</tr>
<tr>
<td>朦胧的欲望</td>
<td>1977/法国/路易斯·布努埃尔</td>
<td>2022/1/19</td>
<td>1316</td>
</tr>
<tr>
<td>夜与雾</td>
<td>1956/法国/阿伦·雷乃</td>
<td>2022/1/18</td>
<td>1315</td>
</tr>
<tr>
<td>猎鹿人</td>
<td>1978/美国/迈克尔·西米诺</td>
<td>2022/1/18</td>
<td>1314</td>
</tr>
<tr>
<td>潜行者</td>
<td>1979/苏联/安德烈·塔可夫斯基</td>
<td>2022/1/17</td>
<td>1313</td>
</tr>
<tr>
<td>热情如火</td>
<td>1959/美国/比利·怀德</td>
<td>2022/1/17</td>
<td>1312</td>
</tr>
<tr>
<td>最后的决斗</td>
<td>2021/美国/雷德利·斯科特</td>
<td>2022/1/16</td>
<td>1311</td>
</tr>
<tr>
<td>魔法满屋</td>
<td>2021/美国/杰拉德·布什</td>
<td>2022/1/15</td>
<td>1310</td>
</tr>
<tr>
<td>夜以继日</td>
<td>2018/日本/滨口龙介</td>
<td>2022/1/15</td>
<td>1309</td>
</tr>
<tr>
<td>法兰西</td>
<td>2021/法国/布鲁诺·杜蒙</td>
<td>2022/1/15</td>
<td>1308</td>
</tr>
<tr>
<td>恐惧的代价</td>
<td>1953/法国/亨利-乔治·克鲁佐</td>
<td>2022/1/14</td>
<td>1307</td>
</tr>
<tr>
<td>独自在夜晚的海边</td>
<td>2017/韩国/洪常秀</td>
<td>2022/1/14</td>
<td>1306</td>
</tr>
<tr>
<td>北村的方向</td>
<td>2011/韩国/洪常秀</td>
<td>2022/1/14</td>
<td>1305</td>
</tr>
<tr>
<td>自由之丘</td>
<td>2014/韩国/洪常秀</td>
<td>2022/1/13</td>
<td>1304</td>
</tr>
<tr>
<td>喜剧之王</td>
<td>1982/美国/斯科塞斯</td>
<td>2022/1/13</td>
<td>1303</td>
</tr>
<tr>
<td>我们的善熙</td>
<td>2013/韩国/洪常秀</td>
<td>2022/1/11</td>
<td>1302</td>
</tr>
<tr>
<td>在异国</td>
<td>2012/韩国/洪常秀</td>
<td>2022/1/5</td>
<td>1301</td>
</tr>
</tbody></table>
<h3 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h3><table>
<thead>
<tr>
<th>name</th>
<th>compdate</th>
<th>num</th>
</tr>
</thead>
<tbody><tr>
<td>羊脂球</td>
<td>2022/1/17</td>
<td>181</td>
</tr>
<tr>
<td>野性的呼唤</td>
<td>2022/1/16</td>
<td>180</td>
</tr>
<tr>
<td>事件</td>
<td>2022/1/15</td>
<td>179</td>
</tr>
<tr>
<td>热爱生活</td>
<td>2022/1/14</td>
<td>178</td>
</tr>
<tr>
<td>十二把椅子</td>
<td>2022/1/13</td>
<td>177</td>
</tr>
<tr>
<td>毕加索的成败</td>
<td>2022/1/12</td>
<td>176</td>
</tr>
<tr>
<td>十二国记图南之翼</td>
<td>2022/1/10</td>
<td>175</td>
</tr>
<tr>
<td>殺しの双曲線</td>
<td>2022/1/8</td>
<td>174</td>
</tr>
<tr>
<td>电影批评</td>
<td>2022/1/6</td>
<td>173</td>
</tr>
<tr>
<td>观看之道</td>
<td>2022/1/3</td>
<td>172</td>
</tr>
</tbody></table>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>每月总结</category>
      </categories>
      <tags>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>port总是被占用</title>
    <url>/WestRoute.github.io/2022/01/20/port%E6%80%BB%E6%98%AF%E8%A2%AB%E5%8D%A0%E7%94%A8/</url>
    <content><![CDATA[<p>过一两周port就会被占用，每一次都记不住，每次都要到处搜，很麻烦。<br>显示所有进程</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">netstat -nao</span></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>系统操作</category>
        <category>Windows</category>
      </categories>
  </entry>
  <entry>
    <title>每月总结09 (2021/11-2021/12)</title>
    <url>/WestRoute.github.io/2021/12/31/MonthlyRe09/</url>
    <content><![CDATA[<p>11月12月合并版。<br>11月观影22部，读书1部，时间都去做课题了，写了33个文件，没有偷懒。<br>22部虽然少，但是很幸运看了不少感触很深的。<br>12月观影38部，读书4部</p>
<span id="more"></span>

<h3 id="11月电影"><a href="#11月电影" class="headerlink" title="11月电影"></a>11月电影</h3><table>
<thead>
<tr>
<th>name</th>
<th>compdate</th>
<th>num</th>
</tr>
</thead>
<tbody><tr>
<td>血色将至</td>
<td>2021/12/1</td>
<td>1264</td>
</tr>
<tr>
<td>第五共和国</td>
<td>2021/11/30</td>
<td>1263</td>
</tr>
<tr>
<td>无休无止</td>
<td>2021/11/30</td>
<td>1262</td>
</tr>
<tr>
<td>第四十一</td>
<td>2021/11/29</td>
<td>1261</td>
</tr>
<tr>
<td>大地之歌</td>
<td>2021/11/28</td>
<td>1260</td>
</tr>
<tr>
<td>圣母</td>
<td>2021/11/27</td>
<td>1259</td>
</tr>
<tr>
<td>Titane</td>
<td>2021/11/27</td>
<td>1258</td>
</tr>
<tr>
<td>红高粱</td>
<td>2021/11/26</td>
<td>1257</td>
</tr>
<tr>
<td>冰血暴</td>
<td>2021/11/25</td>
<td>1256</td>
</tr>
<tr>
<td>桃色公寓</td>
<td>2021/11/24</td>
<td>1255</td>
</tr>
<tr>
<td>安德烈·卢布廖夫</td>
<td>2021/11/23</td>
<td>1254</td>
</tr>
<tr>
<td>影迷</td>
<td>2021/11/23</td>
<td>1253</td>
</tr>
<tr>
<td>天堂之门</td>
<td>2021/11/22</td>
<td>1252</td>
</tr>
<tr>
<td>双重赔偿</td>
<td>2021/11/21</td>
<td>1251</td>
</tr>
<tr>
<td>呼喊与细语</td>
<td>2021/11/20</td>
<td>1250</td>
</tr>
<tr>
<td>M就是凶手</td>
<td>2021/11/19</td>
<td>1249</td>
</tr>
<tr>
<td>第七封印</td>
<td>2021/11/17</td>
<td>1248</td>
</tr>
<tr>
<td>楢山节考</td>
<td>2021/11/16</td>
<td>1247</td>
</tr>
<tr>
<td>仲夏夜惊魂</td>
<td>2021/11/13</td>
<td>1246</td>
</tr>
<tr>
<td>五人归来：好莱坞与第二次世界大战 Five Came Back</td>
<td>2021/11/10</td>
<td>1245</td>
</tr>
<tr>
<td>士兵之歌</td>
<td>2021/11/7</td>
<td>1244</td>
</tr>
<tr>
<td>潜行者</td>
<td>2021/11/6</td>
<td>1243</td>
</tr>
<tr>
<td>穆谢特</td>
<td>2021/11/5</td>
<td>1242</td>
</tr>
</tbody></table>
<h3 id="12月电影"><a href="#12月电影" class="headerlink" title="12月电影"></a>12月电影</h3><table>
<thead>
<tr>
<th>name</th>
<th>compdate</th>
<th>num</th>
</tr>
</thead>
<tbody><tr>
<td>惊魂记</td>
<td>2022/1/6</td>
<td>1301</td>
</tr>
<tr>
<td>一个国家的诞生</td>
<td>2021/12/31</td>
<td>1300</td>
</tr>
<tr>
<td>玉女风流</td>
<td>2021/12/30</td>
<td>1299</td>
</tr>
<tr>
<td>你自己与你所有</td>
<td>2021/12/29</td>
<td>1298</td>
</tr>
<tr>
<td>这时对，那时错</td>
<td>2021/12/28</td>
<td>1297</td>
</tr>
<tr>
<td>党同伐异</td>
<td>2021/12/28</td>
<td>1296</td>
</tr>
<tr>
<td>引见</td>
<td>2021/12/27</td>
<td>1295</td>
</tr>
<tr>
<td>杀人短片</td>
<td>2021/12/27</td>
<td>1294</td>
</tr>
<tr>
<td>我是古巴</td>
<td>2021/12/26</td>
<td>1293</td>
</tr>
<tr>
<td>五支歌</td>
<td>2021/12/25</td>
<td>1292</td>
</tr>
<tr>
<td>蜂巢幽灵</td>
<td>2021/12/24</td>
<td>1291</td>
</tr>
<tr>
<td>死囚越狱</td>
<td>2021/12/24</td>
<td>1290</td>
</tr>
<tr>
<td>中国轮盘</td>
<td>2021/12/23</td>
<td>1289</td>
</tr>
<tr>
<td>逃走的女人</td>
<td>2021/12/22</td>
<td>1288</td>
</tr>
<tr>
<td>玛丽娅布劳恩的婚姻</td>
<td>2021/12/21</td>
<td>1287</td>
</tr>
<tr>
<td>灰烬与钻石</td>
<td>2021/12/20</td>
<td>1286</td>
</tr>
<tr>
<td>不是任何人女儿的海媛</td>
<td>2021/12/19</td>
<td>1285</td>
</tr>
<tr>
<td>驾驶我的车</td>
<td>2021/12/18</td>
<td>1284</td>
</tr>
<tr>
<td>山河故人</td>
<td>2021/12/18</td>
<td>1283</td>
</tr>
<tr>
<td>海上传奇</td>
<td>2021/12/17</td>
<td>1282</td>
</tr>
<tr>
<td>二十四城</td>
<td>2021/12/16</td>
<td>1281</td>
</tr>
<tr>
<td>无用</td>
<td>2021/12/15</td>
<td>1280</td>
</tr>
<tr>
<td>东</td>
<td>2021/12/15</td>
<td>1279</td>
</tr>
<tr>
<td>白</td>
<td>2021/12/14</td>
<td>1278</td>
</tr>
<tr>
<td>红</td>
<td>2021/12/13</td>
<td>1277</td>
</tr>
<tr>
<td>蓝</td>
<td>2021/12/12</td>
<td>1276</td>
</tr>
<tr>
<td>世界</td>
<td>2021/12/11</td>
<td>1275</td>
</tr>
<tr>
<td>公路之王</td>
<td>2021/12/10</td>
<td>1274</td>
</tr>
<tr>
<td>小武</td>
<td>2021/12/9</td>
<td>1273</td>
</tr>
<tr>
<td>丈夫、太太与情人</td>
<td>2021/12/8</td>
<td>1272</td>
</tr>
<tr>
<td>钱</td>
<td>2021/12/7</td>
<td>1271</td>
</tr>
<tr>
<td>三峡好人</td>
<td>2021/12/6</td>
<td>1270</td>
</tr>
<tr>
<td>江边旅馆</td>
<td>2021/12/5</td>
<td>1269</td>
</tr>
<tr>
<td>留给女儿的信</td>
<td>2021/12/5</td>
<td>1268</td>
</tr>
<tr>
<td>鲁邦三世:卡里奥斯特罗城</td>
<td>2021/12/4</td>
<td>1267</td>
</tr>
<tr>
<td>无因的反叛</td>
<td>2021/12/3</td>
<td>1266</td>
</tr>
<tr>
<td>关公大战外星人</td>
<td>2021/12/2</td>
<td>1265</td>
</tr>
<tr>
<td>血色将至</td>
<td>2021/12/1</td>
<td>1264</td>
</tr>
</tbody></table>
<h3 id="读书（11月12月合并）"><a href="#读书（11月12月合并）" class="headerlink" title="读书（11月12月合并）"></a>读书（11月12月合并）</h3><table>
<thead>
<tr>
<th>name</th>
<th>tagg</th>
<th>compdate</th>
<th>num</th>
</tr>
</thead>
<tbody><tr>
<td>伟大的电影</td>
<td>罗杰·伊伯特</td>
<td>2021/12/31</td>
<td>170</td>
</tr>
<tr>
<td>蛤蟆先生去看心理医生</td>
<td>罗伯特·戴伯德</td>
<td>2021/12/31</td>
<td>169</td>
</tr>
<tr>
<td>卡拉马佐夫兄弟</td>
<td>陀思妥耶夫斯基</td>
<td>2021/12/31</td>
<td>168</td>
</tr>
<tr>
<td>罪与罚</td>
<td>陀思妥耶夫斯基</td>
<td>2021/12/31</td>
<td>167</td>
</tr>
<tr>
<td>白痴</td>
<td>陀思妥耶夫斯基</td>
<td>2021/11/30</td>
<td>166</td>
</tr>
</tbody></table>
<h4 id="《观看之道》"><a href="#《观看之道》" class="headerlink" title="《观看之道》"></a>《观看之道》</h4><p>关于复制，关于裸体，关于油画，关于广告</p>
<h2 id="记录生活"><a href="#记录生活" class="headerlink" title="记录生活"></a>记录生活</h2><p>偷懒了</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>每月总结</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>opencvface</title>
    <url>/WestRoute.github.io/2021/12/22/opencvface/</url>
    <content><![CDATA[<h4 id="人脸识别"><a href="#人脸识别" class="headerlink" title="人脸识别"></a>人脸识别</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import aicommon<span class="selector-class">.initAI</span>()</span><br><span class="line"></span><br><span class="line">cap=cv2<span class="selector-class">.VideoCapture</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> cap<span class="selector-class">.isOpened</span>() is True:</span><br><span class="line">      while True:</span><br><span class="line">            ret, frame =cap<span class="selector-class">.read</span>()</span><br><span class="line"></span><br><span class="line">            face= cascade<span class="selector-class">.detectMultiScale</span>(frame)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> len(face) &gt; <span class="number">0</span>:</span><br><span class="line">                  <span class="keyword">for</span> x,y,w,h <span class="keyword">in</span> face:</span><br><span class="line">                        cv2<span class="selector-class">.rectangele</span>(frame,(x,y),(x+w,y+h),(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),thickness=<span class="number">2</span>)</span><br><span class="line">                        face_cut = <span class="selector-tag">img</span><span class="selector-attr">[y:y+h, x:x+w]</span></span><br><span class="line">                  cv2<span class="selector-class">.imshow</span>(<span class="string">&#x27;camera&#x27;</span>,frame)</span><br><span class="line">            <span class="keyword">if</span> cv2<span class="selector-class">.waitKey</span>(<span class="number">1</span>)==<span class="number">27</span>:</span><br><span class="line">                  break</span><br><span class="line">            cv2<span class="selector-class">.imwrite</span>(<span class="string">&#x27;face_cut.jpg&#x27;</span>, face_cut)</span><br><span class="line">cap<span class="selector-class">.release</span>()</span><br><span class="line">cv2<span class="selector-class">.destoryAllWindows</span>()</span><br><span class="line">                  </span><br></pre></td></tr></table></figure>

<h4 id="圆的识别"><a href="#圆的识别" class="headerlink" title="圆的识别"></a>圆的识别</h4><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>openCV</category>
      </categories>
  </entry>
  <entry>
    <title>Matplotlib01</title>
    <url>/WestRoute.github.io/2021/12/22/Matplotlib01/</url>
    <content><![CDATA[<h4 id="sinグラフ"><a href="#sinグラフ" class="headerlink" title="sinグラフ"></a>sinグラフ</h4><figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">import numpy <span class="meta">as</span> np</span><br><span class="line">import matplotlib.pyplot <span class="meta">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="meta">x</span> = np.<span class="meta">arange(</span>-5, 5, 0.1) #-5から5まで0.1区切りで配列を作る</span><br><span class="line">y = np<span class="meta">.sin(</span><span class="meta">x</span>) #配列<span class="meta">x</span>の値に関してそれぞ<span class="meta">れsin(</span><span class="meta">x</span>)を求めてy軸の配列を生成</span><br><span class="line"></span><br><span class="line">plt.plot(<span class="meta">x</span>,y) # この場合のplot関数の第一引数<span class="meta">x</span>は、<span class="meta">x</span>軸に対応し、第二引数のyがy軸にあたります。</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<br>

<h4 id="折れ線グラフ"><a href="#折れ線グラフ" class="headerlink" title="折れ線グラフ"></a>折れ線グラフ</h4><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">import</span> matplotlib.pyplot as plt</span><br><span class="line"><span class="attribute">data</span> =<span class="meta"> [2, 4, 6, 3, 5, 8, 4, 5]</span></span><br><span class="line"><span class="attribute">plt</span>.plot(data)</span><br><span class="line"><span class="attribute">plt</span>.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#r--は赤の点線 b--は青の点線 g-- は緑の点線</span></span><br><span class="line"><span class="attribute">plt</span>.plot([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>],<span class="string">&quot;r--&quot;</span>) # 引数にオプションを渡さずに 色 に -- をつけると色 + 点線で表現できます</span><br><span class="line"><span class="attribute">plt</span>.show()</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>Matplotlib</category>
      </categories>
  </entry>
  <entry>
    <title>c++11newfunction</title>
    <url>/WestRoute.github.io/2021/12/19/c++11newfunction/</url>
    <content><![CDATA[<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><ol>
<li><p> 缩窄<br>char c1 {66}；</p>
</li>
<li><p>std::initializer_list用于函数参数<br>#include <initializer_list></p>
</li>
</ol>
<span id="more"></span>

<h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><ol>
<li>auto用于简写声明</li>
<li>int n;<br>double x;<br>decltype(x*n) q;</li>
<li>模板别名using=<br>using itType = std::vector<a href="std::string">std::string</a>::iterator;<br>也可以用于模板具体化，但decltype不能<br>template<typename T> using arr12 = std::&lt;T,12&gt;</li>
<li>nullptr</li>
</ol>
<h4 id="智能指针unique-ptr-shared-ptr，weak-ptr"><a href="#智能指针unique-ptr-shared-ptr，weak-ptr" class="headerlink" title="智能指针unique_ptr,shared_ptr，weak_ptr"></a>智能指针unique_ptr,shared_ptr，weak_ptr</h4><h4 id="作用域内枚举"><a href="#作用域内枚举" class="headerlink" title="作用域内枚举"></a>作用域内枚举</h4><p>enum class New1{never,sometimes,often,always};<br>enum struct New2{never,lever,server};</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>C++PrimerPlus</category>
      </categories>
  </entry>
  <entry>
    <title>ping</title>
    <url>/WestRoute.github.io/2021/12/17/ping/</url>
    <content><![CDATA[<h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="built_in">import</span> pings</span><br><span class="line"></span><br><span class="line"><span class="attr">p</span> = pings.Ping(<span class="attr">quiet=False)</span></span><br><span class="line"><span class="attr">res</span> = p.ping(<span class="string">&quot;google.com&quot;</span>)  <span class="comment"># googleを監視</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="用python实现发送原生ping包"><a href="#用python实现发送原生ping包" class="headerlink" title="用python实现发送原生ping包"></a>用python实现发送原生ping包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    A pure python ping implementation using raw socket.</span></span><br><span class="line"><span class="string">    Note that ICMP messages can only be sent from processes running as root.</span></span><br><span class="line"><span class="string">    Derived from ping.c distributed in Linux&#x27;s netkit. That code is</span></span><br><span class="line"><span class="string">    copyright (c) 1989 by The Regents of the University of California.</span></span><br><span class="line"><span class="string">    That code is in turn derived from code written by Mike Muuss of the</span></span><br><span class="line"><span class="string">    US Army Ballistic Research Laboratory in December, 1983 and</span></span><br><span class="line"><span class="string">    placed in the public domain. They have my thanks.</span></span><br><span class="line"><span class="string">    Bugs are naturally mine. I&#x27;d be glad to hear about them. There are</span></span><br><span class="line"><span class="string">    certainly word - size dependenceies here.</span></span><br><span class="line"><span class="string">    Copyright (c) Matthew Dixon Cowles, &lt;http://www.visi.com/~mdc/&gt;.</span></span><br><span class="line"><span class="string">    Distributable under the terms of the GNU General Public License</span></span><br><span class="line"><span class="string">    version 2. Provided with no warranties of any sort.</span></span><br><span class="line"><span class="string">    Original Version from Matthew Dixon Cowles:</span></span><br><span class="line"><span class="string">      -&gt; ftp://ftp.visi.com/users/mdc/ping.py</span></span><br><span class="line"><span class="string">    Rewrite by Jens Diemer:</span></span><br><span class="line"><span class="string">      -&gt; http://www.python-forum.de/post-69122.html#69122</span></span><br><span class="line"><span class="string">    Revision history</span></span><br><span class="line"><span class="string">    ~~~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="string">    March 11, 2010</span></span><br><span class="line"><span class="string">    changes by Samuel Stauffer:</span></span><br><span class="line"><span class="string">    - replaced time.clock with default_timer which is set to</span></span><br><span class="line"><span class="string">      time.clock on windows and time.time on other systems.</span></span><br><span class="line"><span class="string">    May 30, 2007</span></span><br><span class="line"><span class="string">    little rewrite by Jens Diemer:</span></span><br><span class="line"><span class="string">     -  change socket asterisk import to a normal import</span></span><br><span class="line"><span class="string">     -  replace time.time() with time.clock()</span></span><br><span class="line"><span class="string">     -  delete &quot;return None&quot; (or change to &quot;return&quot; only)</span></span><br><span class="line"><span class="string">     -  in checksum() rename &quot;str&quot; to &quot;source_string&quot;</span></span><br><span class="line"><span class="string">    November 22, 1997</span></span><br><span class="line"><span class="string">    Initial hack. Doesn&#x27;t do much, but rather than try to guess</span></span><br><span class="line"><span class="string">    what features I (or others) will want in the future, I&#x27;ve only</span></span><br><span class="line"><span class="string">    put in what I need now.</span></span><br><span class="line"><span class="string">    December 16, 1997</span></span><br><span class="line"><span class="string">    For some reason, the checksum bytes are in the wrong order when</span></span><br><span class="line"><span class="string">    this is run under Solaris 2.X for SPARC but it works right under</span></span><br><span class="line"><span class="string">    Linux x86. Since I don&#x27;t know just what&#x27;s wrong, I&#x27;ll swap the</span></span><br><span class="line"><span class="string">    bytes always and then do an htons().</span></span><br><span class="line"><span class="string">    December 4, 2000</span></span><br><span class="line"><span class="string">    Changed the struct.pack() calls to pack the checksum and ID as</span></span><br><span class="line"><span class="string">    unsigned. My thanks to Jerome Poincheval for the fix.</span></span><br><span class="line"><span class="string">    Januari 27, 2015</span></span><br><span class="line"><span class="string">    Changed receive response to not accept ICMP request messages.</span></span><br><span class="line"><span class="string">    It was possible to receive the very request that was sent.</span></span><br><span class="line"><span class="string">    Last commit info:</span></span><br><span class="line"><span class="string">    ~~~~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="string">    $LastChangedDate: $</span></span><br><span class="line"><span class="string">    $Rev: $</span></span><br><span class="line"><span class="string">    $Author: $</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> os, sys, socket, struct, select, time</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> sys.platform == <span class="string">&quot;win32&quot;</span>:</span><br><span class="line">    <span class="comment"># On Windows, the best timer is time.clock()</span></span><br><span class="line">    default_timer = time.clock</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># On most other platforms the best timer is time.time()</span></span><br><span class="line">    default_timer = time.time</span><br><span class="line"> </span><br><span class="line"><span class="comment">#From /usr/include/linux/icmp.h; your milage may vary.</span></span><br><span class="line">ICMP_ECHO_REQUEST = <span class="number">8</span> <span class="comment"># Seems to be the same on Solaris.</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checksum</span>(<span class="params">source_string</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    I&#x27;m not too confident that this is right but testing seems</span></span><br><span class="line"><span class="string">    to suggest that it gives the same answers as in_cksum in ping.c</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    countTo = (<span class="built_in">len</span>(source_string)/<span class="number">2</span>)*<span class="number">2</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> count&lt;countTo:</span><br><span class="line">        thisVal = <span class="built_in">ord</span>(source_string[count + <span class="number">1</span>])*<span class="number">256</span> + <span class="built_in">ord</span>(source_string[count])</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + thisVal</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> &amp; <span class="number">0xffffffff</span> <span class="comment"># Necessary?</span></span><br><span class="line">        count = count + <span class="number">2</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> countTo&lt;<span class="built_in">len</span>(source_string):</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + <span class="built_in">ord</span>(source_string[<span class="built_in">len</span>(source_string) - <span class="number">1</span>])</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> &amp; <span class="number">0xffffffff</span> <span class="comment"># Necessary?</span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">sum</span> = (<span class="built_in">sum</span> &gt;&gt; <span class="number">16</span>)  +  (<span class="built_in">sum</span> &amp; <span class="number">0xffff</span>)</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + (<span class="built_in">sum</span> &gt;&gt; <span class="number">16</span>)</span><br><span class="line">    answer = ~<span class="built_in">sum</span></span><br><span class="line">    answer = answer &amp; <span class="number">0xffff</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">#Swap bytes. Bugger me if I know why.</span></span><br><span class="line">    answer = answer &gt;&gt; <span class="number">8</span> | (answer &lt;&lt; <span class="number">8</span> &amp; <span class="number">0xff00</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">receive_one_ping</span>(<span class="params">my_socket, ID, timeout</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    receive the ping from the socket.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    timeLeft = timeout</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        startedSelect = default_timer()</span><br><span class="line">        whatReady = select.select([my_socket], [], [], timeLeft)</span><br><span class="line">        howLongInSelect = (default_timer() - startedSelect)</span><br><span class="line">        <span class="keyword">if</span> whatReady[<span class="number">0</span>] == []: <span class="comment"># Timeout</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">        timeReceived = default_timer()</span><br><span class="line">        recPacket, addr = my_socket.recvfrom(<span class="number">1024</span>)</span><br><span class="line">        icmpHeader = recPacket[<span class="number">20</span>:<span class="number">28</span>]</span><br><span class="line">        <span class="built_in">type</span>, code, checksum, packetID, sequence = struct.unpack(</span><br><span class="line">            <span class="string">&quot;bbHHh&quot;</span>, icmpHeader</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#Filters out the echo request itself. </span></span><br><span class="line">        <span class="comment">#This can be tested by pinging 127.0.0.1 </span></span><br><span class="line">        <span class="comment">#You&#x27;ll see your own request</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span> != <span class="number">8</span> <span class="keyword">and</span> packetID == ID:</span><br><span class="line">            bytesInDouble = struct.calcsize(<span class="string">&quot;d&quot;</span>)</span><br><span class="line">            timeSent = struct.unpack(<span class="string">&quot;d&quot;</span>, recPacket[<span class="number">28</span>:<span class="number">28</span> + bytesInDouble])[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">return</span> timeReceived - timeSent</span><br><span class="line"> </span><br><span class="line">        timeLeft = timeLeft - howLongInSelect</span><br><span class="line">        <span class="keyword">if</span> timeLeft &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_one_ping</span>(<span class="params">my_socket, dest_addr, ID</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Send one ping to the given &gt;dest_addr&lt;.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    dest_addr  =  socket.gethostbyname(dest_addr)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#Header is type (8), code (8), checksum (16), id (16), sequence (16)</span></span><br><span class="line">    my_checksum = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">#Make a dummy heder with a 0 checksum.</span></span><br><span class="line">    header = struct.pack(<span class="string">&quot;bbHHh&quot;</span>, ICMP_ECHO_REQUEST, <span class="number">0</span>, my_checksum, ID, <span class="number">1</span>)</span><br><span class="line">    bytesInDouble = struct.calcsize(<span class="string">&quot;d&quot;</span>)</span><br><span class="line">    data = (<span class="number">192</span> - bytesInDouble) * <span class="string">&quot;Q&quot;</span></span><br><span class="line">    data = struct.pack(<span class="string">&quot;d&quot;</span>, default_timer()) + data</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#Calculate the checksum on the data and the dummy header.</span></span><br><span class="line">    my_checksum = checksum(header + data)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#Now that we have the right checksum, we put that in. It&#x27;s just easier</span></span><br><span class="line">    <span class="comment">#to make up a new header than to stuff it into the dummy.</span></span><br><span class="line">    header = struct.pack(</span><br><span class="line">        <span class="string">&quot;bbHHh&quot;</span>, ICMP_ECHO_REQUEST, <span class="number">0</span>, socket.htons(my_checksum), ID, <span class="number">1</span></span><br><span class="line">    )</span><br><span class="line">    packet = header + data</span><br><span class="line">    my_socket.sendto(packet, (dest_addr, <span class="number">1</span>)) <span class="comment"># Don&#x27;t know about the 1</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_one</span>(<span class="params">dest_addr, timeout</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Returns either the delay (in seconds) or none on timeout.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    icmp = socket.getprotobyname(<span class="string">&quot;icmp&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        my_socket = socket.socket(socket.AF_INET, socket.SOCK_RAW, icmp)</span><br><span class="line">    <span class="keyword">except</span> socket.error, (errno, msg):</span><br><span class="line">        <span class="keyword">if</span> errno == <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># Operation not permitted</span></span><br><span class="line">            msg = msg + (</span><br><span class="line">                <span class="string">&quot; - Note that ICMP messages can only be sent from processes&quot;</span></span><br><span class="line">                <span class="string">&quot; running as root.&quot;</span></span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">raise</span> socket.error(msg)</span><br><span class="line">        <span class="keyword">raise</span> <span class="comment"># raise the original error</span></span><br><span class="line"> </span><br><span class="line">    my_ID = os.getpid() &amp; <span class="number">0xFFFF</span></span><br><span class="line"> </span><br><span class="line">    send_one_ping(my_socket, dest_addr, my_ID)</span><br><span class="line">    delay = receive_one_ping(my_socket, my_ID, timeout)</span><br><span class="line"> </span><br><span class="line">    my_socket.close()</span><br><span class="line">    <span class="keyword">return</span> delay</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verbose_ping</span>(<span class="params">dest_addr, timeout = <span class="number">2</span>, count = <span class="number">4</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Send &gt;count&lt; ping to &gt;dest_addr&lt; with the given &gt;timeout&lt; and display</span></span><br><span class="line"><span class="string">    the result.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(count):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;ping %s...&quot;</span> % dest_addr,</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            delay  =  do_one(dest_addr, timeout)</span><br><span class="line">        <span class="keyword">except</span> socket.gaierror, e:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;failed. (socket error: &#x27;%s&#x27;)&quot;</span> % e[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> delay  ==  <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;failed. (timeout within %ssec.)&quot;</span> % timeout</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            delay  =  delay * <span class="number">1000</span></span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;get ping in %0.4fms&quot;</span> % delay</span><br><span class="line">    <span class="built_in">print</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    verbose_ping(<span class="string">&quot;heise.de&quot;</span>)</span><br><span class="line">    verbose_ping(<span class="string">&quot;google.com&quot;</span>)</span><br><span class="line">    verbose_ping(<span class="string">&quot;192.168.90.126&quot;</span>)</span><br><span class="line">    verbose_ping(<span class="string">&quot;192.168.1.1&quot;</span>)</span><br></pre></td></tr></table></figure>


<h3 id="ICMP协议编程实践：实现ping命令-Python语言"><a href="#ICMP协议编程实践：实现ping命令-Python语言" class="headerlink" title="ICMP协议编程实践：实现ping命令(Python语言)"></a>ICMP协议编程实践：实现ping命令(Python语言)</h3><p>转载自<a herf="https://network.fasionchan.com/zh_CN/latest/practices/ping-by-icmp-py.html">ICMP协议编程实践：实现ping命令(Python语言)</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- encoding=utf8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">FileName:   ping.py</span></span><br><span class="line"><span class="string">Author:     Fasion Chan</span></span><br><span class="line"><span class="string">@contact:   fasionchan@gmail.com</span></span><br><span class="line"><span class="string">@version:   $Id$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Description:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Changelog:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_checksum</span>(<span class="params">icmp</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(icmp) % <span class="number">2</span>:</span><br><span class="line">        icmp += <span class="string">b&#x27;\00&#x27;</span></span><br><span class="line"></span><br><span class="line">    checksum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(icmp)//<span class="number">2</span>):</span><br><span class="line">        word, = struct.unpack(<span class="string">&#x27;!H&#x27;</span>, icmp[<span class="number">2</span>*i:<span class="number">2</span>*i+<span class="number">2</span>])</span><br><span class="line">        checksum += word</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        carry = checksum &gt;&gt; <span class="number">16</span></span><br><span class="line">        <span class="keyword">if</span> carry:</span><br><span class="line">            checksum = (checksum &amp; <span class="number">0xffff</span>) + carry</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    checksum = ~checksum &amp; <span class="number">0xffff</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&#x27;!H&#x27;</span>, checksum)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_checksum</span>(<span class="params">icmp</span>):</span></span><br><span class="line">    highs = icmp[<span class="number">0</span>::<span class="number">2</span>]</span><br><span class="line">    lows = icmp[<span class="number">1</span>::<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    checksum = ((<span class="built_in">sum</span>(highs) &lt;&lt; <span class="number">8</span>) + <span class="built_in">sum</span>(lows))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        carry = checksum &gt;&gt; <span class="number">16</span></span><br><span class="line">        <span class="keyword">if</span> carry:</span><br><span class="line">            checksum = (checksum &amp; <span class="number">0xffff</span>) + carry</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    checksum = ~checksum &amp; <span class="number">0xffff</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&#x27;!H&#x27;</span>, checksum)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pack_icmp_echo_request</span>(<span class="params">ident, seq, payload</span>):</span></span><br><span class="line">    pseudo = struct.pack(</span><br><span class="line">        <span class="string">&#x27;!BBHHH&#x27;</span>,</span><br><span class="line">        <span class="number">8</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        ident,</span><br><span class="line">        seq,</span><br><span class="line">    ) + payload</span><br><span class="line">    checksum = calculate_checksum(pseudo)</span><br><span class="line">    <span class="keyword">return</span> pseudo[:<span class="number">2</span>] + checksum + pseudo[<span class="number">4</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unpack_icmp_echo_reply</span>(<span class="params">icmp</span>):</span></span><br><span class="line">    _<span class="built_in">type</span>, code, _, ident, seq, = struct.unpack(</span><br><span class="line">        <span class="string">&#x27;!BBHHH&#x27;</span>,</span><br><span class="line">        icmp[:<span class="number">8</span>]</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> _<span class="built_in">type</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> code != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    payload = icmp[<span class="number">8</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ident, seq, payload</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_routine</span>(<span class="params">sock, addr, ident, magic, stop</span>):</span></span><br><span class="line">    <span class="comment"># first sequence no</span></span><br><span class="line">    seq = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> stop:</span><br><span class="line">        <span class="comment">#currrent time</span></span><br><span class="line">        sending_ts = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#packet current time to payload</span></span><br><span class="line">        <span class="comment">#in order to calculate round trip time from reply</span></span><br><span class="line">        payload = struct.pack(<span class="string">&#x27;!d&#x27;</span>, sending_ts) + magic</span><br><span class="line"></span><br><span class="line">        <span class="comment">#pack icmp packet</span></span><br><span class="line">        icmp = pack_icmp_echo_request(ident, seq, payload)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#send it</span></span><br><span class="line">        sock.sendto(icmp, <span class="number">0</span>, (addr, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        seq += <span class="number">1</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recv_routine</span>(<span class="params">sock, ident, magic</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment">#wait for another icmp packet</span></span><br><span class="line">        ip, (src_addr, _) = sock.recvfrom(<span class="number">1500</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#unpack it</span></span><br><span class="line">        result = unpack_icmp_echo_reply(ip[<span class="number">20</span>:])</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#print info</span></span><br><span class="line">        _ident, seq, payload = result</span><br><span class="line">        <span class="keyword">if</span> _ident != ident:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        sending_ts, = struct.unpack(<span class="string">&#x27;!d&#x27;</span>, payload[:<span class="number">8</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s seq=%d %5.2fms&#x27;</span> % (</span><br><span class="line">            src_addr,</span><br><span class="line">            seq,</span><br><span class="line">            (time.time()-sending_ts) * <span class="number">1000</span>,</span><br><span class="line">        ))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ping</span>(<span class="params">addr</span>):</span></span><br><span class="line">    <span class="comment">#create socket for sending and receiving icmp packet</span></span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_ICMP)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#id field</span></span><br><span class="line">    ident = os.getpid()</span><br><span class="line">    <span class="comment">#magic string to pad</span></span><br><span class="line">    magic = <span class="string">b&#x27;1234567890&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#sender thread stop flag</span></span><br><span class="line">    <span class="comment">#append anything to stop</span></span><br><span class="line">    sender_stop = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">#start sender thread</span></span><br><span class="line">    <span class="comment">#call send_routine function to send icmp forever</span></span><br><span class="line">    args = (sock, addr, ident, magic, sender_stop,)</span><br><span class="line">    sender = threading.Thread(target=send_routine, args=args)</span><br><span class="line">    sender.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#receive icmp reply forever</span></span><br><span class="line">        recv_routine(sock, ident, magic)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#tell sender thread to stop</span></span><br><span class="line">    sender_stop.append(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#clean sender thread</span></span><br><span class="line">    sender.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ping(sys.argv[<span class="number">1</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>网络通讯</category>
        <category>A-Top-Down-Approach</category>
      </categories>
  </entry>
  <entry>
    <title>openCV02</title>
    <url>/WestRoute.github.io/2021/12/16/openCV02/</url>
    <content><![CDATA[<h5 id="添加文字"><a href="#添加文字" class="headerlink" title="添加文字"></a>添加文字</h5><blockquote>
<p>cv2.putText(img, text, org, fontFace, fontScale, color, thinkness, lineType, bottomLeftOrigin)</p>
</blockquote>
<blockquote>
<p>fontScale：字体大小，该值和基础大小相乘得到字体大小<br>bottomLeftOrigin：默认0或False，1表示反转</p>
</blockquote>
<span id="more"></span>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">import</span> numpy as np</span><br><span class="line"><span class="attribute">import</span> cv<span class="number">2</span></span><br><span class="line"> </span><br><span class="line"><span class="attribute">img</span> = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), dtype=np.uint<span class="number">8</span>)  # 设置窗口尺寸和数据类型</span><br><span class="line"><span class="attribute">font</span> = cv<span class="number">2</span>.FONT_HERSHEY_SIMPLEX</span><br><span class="line"><span class="attribute">cv2</span>.putText(img, &#x27;OpenCV&#x27;, (<span class="number">10</span>, <span class="number">300</span>), font, <span class="number">4</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>, cv<span class="number">2</span>.LINE_AA, <span class="number">0</span>)</span><br><span class="line"><span class="attribute">cv2</span>.putText(img, &#x27;OpenCV&#x27;, (<span class="number">10</span>, <span class="number">300</span>), font, <span class="number">4</span>, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">2</span>, cv<span class="number">2</span>.LINE_AA, <span class="number">1</span>)</span><br><span class="line"><span class="attribute">WindowsName</span> = &#x27;example&#x27;</span><br><span class="line"><span class="attribute">cv2</span>.namedWindow(WindowsName)</span><br><span class="line"><span class="attribute">cv2</span>.imshow(WindowsName, img)</span><br><span class="line"><span class="attribute">cv2</span>.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="attribute">cv2</span>.destroyWindow(WindowsName)</span><br></pre></td></tr></table></figure>

<h4 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h4><p><strong>鼠标回调函数</strong></p>
<blockquote>
<p>cv2.setMouseCallback(windowName, onMouse, param=None) </p>
</blockquote>
<blockquote>
<p>windowName：窗口名称<br>onMouse：鼠标响应函数<br>param：响应函数传递的的参数<br><strong>鼠标响应函数</strong><br>onMouse(event, x, y, flags, param)</p>
</blockquote>
<blockquote>
<p>event：鼠标事件，可用参数对应值代替<br>x：鼠标x坐标<br>y：鼠标y坐标<br>flags：鼠标状态，可用参数对应值代替<br>param：param是用户定义的传递到setMouseCallback函数调用的参数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">drawing = <span class="literal">False</span>  <span class="comment"># 当鼠标按下变为True</span></span><br><span class="line">mode = <span class="literal">True</span>  <span class="comment"># 按下‘m’变成False，true为绘制矩形，false为画笔</span></span><br><span class="line">ix, iy = -<span class="number">1</span>, -<span class="number">1</span>  <span class="comment"># 初始化鼠标位置</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onmouse</span>(<span class="params">event, x, y, flags, param</span>):</span>  <span class="comment"># 创建回调函数</span></span><br><span class="line">    <span class="keyword">global</span> ix, iy, drawing, mode</span><br><span class="line">    <span class="keyword">if</span> event == cv2.EVENT_LBUTTONDOWN:  <span class="comment"># 按下左键</span></span><br><span class="line">        drawing = <span class="literal">True</span>  <span class="comment"># 开始绘制</span></span><br><span class="line">        ix, iy = x, y  <span class="comment"># 赋予按下时的鼠标坐标</span></span><br><span class="line">    <span class="keyword">elif</span> event == cv2.EVENT_MOUSEMOVE <span class="keyword">and</span> flags == cv2.EVENT_FLAG_LBUTTON:  <span class="comment"># 当按下左键拖拽鼠标时</span></span><br><span class="line">        <span class="keyword">if</span> drawing <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> mode <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">                cv2.rectangle(img, (ix, iy), (x, y), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">1</span>)  <span class="comment"># 当模式为True时画矩形</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cv2.circle(img, (x, y), <span class="number">3</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), -<span class="number">1</span>)  <span class="comment"># 当模式为False时画线</span></span><br><span class="line">    <span class="keyword">elif</span> event == cv2.EVENT_MOUSEWHEEL:</span><br><span class="line">        <span class="keyword">if</span> drawing <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> mode <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">                cv2.circle(img, (x, y), <span class="number">50</span>, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), -<span class="number">1</span>)  <span class="comment"># 滚轮画实心圆</span></span><br><span class="line">    <span class="keyword">elif</span> event == cv2.EVENT_LBUTTONDBLCLK:</span><br><span class="line">        <span class="keyword">if</span> drawing <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> mode <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">                cv2.circle(img, (x, y), <span class="number">50</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">3</span>)  <span class="comment"># 双击左键画空心圆</span></span><br><span class="line">    <span class="keyword">elif</span> event == cv2.EVENT_LBUTTONUP:  <span class="comment"># 当鼠标松开停止绘画</span></span><br><span class="line">        drawing <span class="keyword">is</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> mode <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">            cv2.rectangle(img, (ix, iy), (x, y), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">5</span>)  <span class="comment"># 松开鼠标后画一个蓝色矩形</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">img = np.zeros((<span class="number">600</span>, <span class="number">800</span>, <span class="number">3</span>), np.uint8)  <span class="comment"># 创建空图像</span></span><br><span class="line">cv2.namedWindow(<span class="string">&#x27;image&#x27;</span>)  <span class="comment"># 创建空窗口</span></span><br><span class="line">cv2.setMouseCallback(<span class="string">&#x27;image&#x27;</span>, onmouse)  <span class="comment"># 将回调函数与窗口绑定</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;image&#x27;</span>, img)</span><br><span class="line">    k = cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="built_in">ord</span>(<span class="string">&#x27;m&#x27;</span>):  <span class="comment"># 按m更换模式</span></span><br><span class="line">        mode = <span class="keyword">not</span> mode</span><br><span class="line">    <span class="keyword">elif</span> k == <span class="number">27</span>:  <span class="comment"># 按ESC退出</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>
<br>

<h4 id="滑动条"><a href="#滑动条" class="headerlink" title="滑动条"></a>滑动条</h4><p><strong>滑动条</strong></p>
<blockquote>
<p>cv2.createTrackbar(trackbarName, windowName, value, count, onChange)</p>
</blockquote>
<blockquote>
<p>trackbarName：滑动条名称<br>windowName：所在窗口名<br>value：初始值<br>count：最大值<br>onChange：回调函数名称</p>
</blockquote>
<p><strong>获取滑动条数据</strong></p>
<blockquote>
<p>cv2.getTrackbar(trackbarname, winname)</p>
</blockquote>
<blockquote>
<p>trackbarname：滑动条名称<br>winname：所在窗口名</p>
</blockquote>
<p>实现功能:</p>
<p>调节两张图片透明度<br>调整图片和绘图图层之间的透明度<br>左键拖动画矩形<br>双击右键画圆<br>按m键后画线<br>调节RGB可改变要画图形的颜色</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nothing</span>(<span class="params">x</span>):</span>  <span class="comment"># 滑动条的回调函数</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#当鼠标按下时变为 True</span></span><br><span class="line">drawing = <span class="literal">False</span>  <span class="comment"># 如果 mode 为 true 绘制矩形。按下&#x27;m&#x27; 变成绘制曲线。</span></span><br><span class="line">mode = <span class="literal">True</span></span><br><span class="line">ix, iy = -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line"><span class="comment">#创建回调函数</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onmouse</span>(<span class="params">event, x, y, flags, param</span>):</span>  <span class="comment"># 鼠标事件的回调函数</span></span><br><span class="line">    r = cv2.getTrackbarPos(<span class="string">&#x27;R&#x27;</span>, WindowName)  <span class="comment"># 获取滑动条R值</span></span><br><span class="line">    g = cv2.getTrackbarPos(<span class="string">&#x27;G&#x27;</span>, WindowName)  <span class="comment"># 获取滑动条G值</span></span><br><span class="line">    b = cv2.getTrackbarPos(<span class="string">&#x27;B&#x27;</span>, WindowName)  <span class="comment"># 获取滑动条B值</span></span><br><span class="line">    color = (b, g, r)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">global</span> ix, iy, drawing, mode</span><br><span class="line">    <span class="keyword">if</span> event == cv2.EVENT_LBUTTONDOWN:  <span class="comment"># 按下左键</span></span><br><span class="line">        drawing = <span class="literal">True</span>  <span class="comment"># 开始绘制</span></span><br><span class="line">        ix, iy = x, y  <span class="comment"># 赋予按下时的鼠标坐标</span></span><br><span class="line">    <span class="keyword">elif</span> event == cv2.EVENT_MOUSEMOVE <span class="keyword">and</span> flags == cv2.EVENT_FLAG_LBUTTON:  <span class="comment"># 当按下左键拖拽鼠标时</span></span><br><span class="line">        <span class="keyword">if</span> drawing <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> mode <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">                cv2.rectangle(img, (ix, iy), (x, y), color, -<span class="number">1</span>)  <span class="comment"># 当模式为True时画矩形</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cv2.circle(img, (x, y), <span class="number">3</span>, color, -<span class="number">1</span>)  <span class="comment"># 当模式为False时画线</span></span><br><span class="line">    <span class="keyword">elif</span> event == cv2.EVENT_RBUTTONDBLCLK:</span><br><span class="line">        <span class="keyword">if</span> drawing <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> mode <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">                cv2.circle(img, (x, y), <span class="number">50</span>, color, <span class="number">3</span>)  <span class="comment"># 双击右键画空心圆</span></span><br><span class="line">    <span class="keyword">elif</span> event == cv2.EVENT_LBUTTONUP:  <span class="comment"># 当鼠标松开停止绘画</span></span><br><span class="line">        drawing <span class="keyword">is</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> mode <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">            cv2.rectangle(img, (ix, iy), (x, y), (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">5</span>)   <span class="comment"># 松开鼠标后画一个白色矩形</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">top = cv2.imread(<span class="string">&#x27;test3.jpg&#x27;</span>)  <span class="comment"># 图片1</span></span><br><span class="line">bottom = cv2.imread(<span class="string">&#x27;test2.jpg&#x27;</span>)  <span class="comment"># 图片2</span></span><br><span class="line">img = np.zeros(top.shape, np.uint8)  <span class="comment"># 以图片1的尺寸建立空的绘图图层</span></span><br><span class="line">WindowName = <span class="string">&#x27;example&#x27;</span>  <span class="comment"># 窗口名</span></span><br><span class="line">cv2.namedWindow(WindowName, cv2.WINDOW_AUTOSIZE)  <span class="comment"># 建立空窗口</span></span><br><span class="line"> </span><br><span class="line">cv2.createTrackbar(<span class="string">&#x27;a1&#x27;</span>, WindowName, <span class="number">0</span>, <span class="number">100</span>, nothing)  <span class="comment"># 两张图片间转换</span></span><br><span class="line">cv2.createTrackbar(<span class="string">&#x27;a2&#x27;</span>, WindowName, <span class="number">0</span>, <span class="number">100</span>, nothing)  <span class="comment"># 图片与绘图间转换</span></span><br><span class="line">cv2.createTrackbar(<span class="string">&#x27;R&#x27;</span>, WindowName, <span class="number">0</span>, <span class="number">255</span>, nothing)  <span class="comment"># 绘图颜色R</span></span><br><span class="line">cv2.createTrackbar(<span class="string">&#x27;G&#x27;</span>, WindowName, <span class="number">0</span>, <span class="number">255</span>, nothing)  <span class="comment"># 绘图颜色G</span></span><br><span class="line">cv2.createTrackbar(<span class="string">&#x27;B&#x27;</span>, WindowName, <span class="number">0</span>, <span class="number">255</span>, nothing)  <span class="comment"># 绘图颜色B</span></span><br><span class="line"> </span><br><span class="line">cv2.setMouseCallback(WindowName, onmouse)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    a1 = cv2.getTrackbarPos(<span class="string">&#x27;a1&#x27;</span>, WindowName)  <span class="comment"># 获取a1滑动条值</span></span><br><span class="line">    a2 = cv2.getTrackbarPos(<span class="string">&#x27;a2&#x27;</span>, WindowName)  <span class="comment"># 获取a2滑动条值</span></span><br><span class="line">    overlap = cv2.addWeighted(bottom, <span class="number">1</span>-a1/<span class="number">100</span>, top, a1/<span class="number">100</span>, <span class="number">0</span>)  <span class="comment"># 将两张图片相加</span></span><br><span class="line">    adds = cv2.addWeighted(overlap, <span class="number">1</span>-a2/<span class="number">100</span>, img, a2/<span class="number">100</span>, <span class="number">0</span>)</span><br><span class="line">    cv2.imshow(WindowName, adds)</span><br><span class="line">    k = cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="built_in">ord</span>(<span class="string">&#x27;m&#x27;</span>):</span><br><span class="line">        mode = <span class="keyword">not</span> mode</span><br><span class="line">    <span class="keyword">elif</span> k == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>
<br>

<h4 id="获取图像的属性"><a href="#获取图像的属性" class="headerlink" title="获取图像的属性"></a>获取图像的属性</h4><blockquote>
<p>img.shape    //可以获取图像的形状。他的返回值是一个包含行数（高），列数（宽）， 通道数的元组。</p>
</blockquote>
<blockquote>
<p>img.size    //可以返回图像的像素数目</p>
</blockquote>
<blockquote>
<p>img.dtype     //可以返回返回图像的数据类型</p>
</blockquote>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"> </span><br><span class="line">sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding=<span class="string">&#x27;utf8&#x27;</span>)  <span class="comment"># 改变默认输出的标准编码</span></span><br><span class="line"> </span><br><span class="line">img = cv2.imread(<span class="string">&#x27;test.jpg&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#获取图像属性</span></span><br><span class="line">shape = img.shape</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;图像的形状为： &#x27;</span>, shape)  <span class="comment"># 打印图像形状，包括行、列、通道</span></span><br><span class="line">size = img.size</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;图像的像素数目为： &#x27;</span>, size)  <span class="comment"># 打印图像的像素数目</span></span><br><span class="line">dtype = img.dtype</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;图像的数据类型为： &#x27;</span>, dtype)  <span class="comment"># 打印图像的数据类型</span></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>openCV</category>
      </categories>
  </entry>
  <entry>
    <title>c++10 file operator</title>
    <url>/WestRoute.github.io/2021/12/16/c++10stream/</url>
    <content><![CDATA[<h3 id="流和缓冲区"><a href="#流和缓冲区" class="headerlink" title="流和缓冲区"></a>流和缓冲区</h3><p>C++把输入和输出看作字节流，程序从字节流抽取字节<br>| 数据类型     | 描述                                                                       |<br>|———-|————————————————————————–|<br>| ofstream | 该数据类型表示输出文件流，用于创建文件并向文件写入信息。                                             |<br>| ifstream | 该数据类型表示输入文件流，用于从文件读取信息。                                                  |<br>| fstream  | 该数据类型通常表示文件流，且同时具有 ofstream 和 ifstream 两种功能，这意味着它可以创建文件，向文件写入信息，从文件读取信息。 |</p>
<span id="more"></span>

<p>iostream自动创建8个流对象</p>
<ol>
<li>cin标准输入流</li>
<li>cout标准输出流</li>
<li>cerr标准错误流，显示错误消息，直接发送，不会被缓冲</li>
<li>clog标准错误流，被缓冲</li>
<li>对象代表流</li>
</ol>
<h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><p>输出到文件</p>
<h4 id="重载-lt-lt"><a href="#重载-lt-lt" class="headerlink" title="重载&lt;&lt;"></a>重载&lt;&lt;</h4><p>C:左位移<br>C++：插入运算符<br>cout&lt;&lt;“putlock”返回的是cout对象，因此可以通过插入来连接输出<br>&lt;&lt;用来显示字符，put，write用来显示字符串<br>cout.put(‘W’);<br>cout.put(‘W’).put(‘W’);</p>
<h4 id="刷新输出缓冲区"><a href="#刷新输出缓冲区" class="headerlink" title="刷新输出缓冲区"></a>刷新输出缓冲区</h4><ol>
<li><p>修改显示计数系统</p>
<details><summary>manip.cpp (可点开查看)</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// manip.cpp -- using format manipulators </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span> </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Enter an integer: &quot;</span>;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;n n*n\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; n &lt;&lt; <span class="string">&quot;	&quot;</span> &lt;&lt; n * n &lt;&lt; <span class="string">&quot; (decimal)\n&quot;</span>;</span><br><span class="line">	<span class="comment">// set to hex mode </span></span><br><span class="line">	cout &lt;&lt; hex;</span><br><span class="line">	cout &lt;&lt; n &lt;&lt; <span class="string">&quot;	&quot;</span>;</span><br><span class="line">	cout &lt;&lt; n * n &lt;&lt; <span class="string">&quot; (hexadecimal)\n&quot;</span>;</span><br><span class="line">	<span class="comment">// set to octal mode</span></span><br><span class="line">	cout &lt;&lt; oct &lt;&lt; n &lt;&lt; <span class="string">&quot;	&quot;</span> &lt;&lt; n * n &lt;&lt; <span class="string">&quot; (octal)\n&quot;</span>;</span><br><span class="line">	<span class="comment">// alternative way to call a manipulator dec &lt; cout);</span></span><br><span class="line">	cout &lt;&lt; n &lt;&lt; <span class="string">&quot;	&quot;</span> &lt;&lt; n * n &lt;&lt; <span class="string">&quot; (decimal)\n&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<br></li>
<li><p>调整字段宽度</p>
<details><summary>width.cpp(可点开查看)</summary>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// width.cpp -- using the width method </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> std::cout;</span><br><span class="line">	<span class="keyword">int</span> w = cout.<span class="built_in">width</span>(<span class="number">30</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;default field width = &quot;</span> &lt;&lt; w &lt;&lt; <span class="string">&quot;:\n&quot;</span>;</span><br><span class="line">	cout.<span class="built_in">width</span>(<span class="number">5</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;N&quot;</span> &lt;&lt; <span class="string">&quot;:&quot;</span>;</span><br><span class="line">	cout.<span class="built_in">width</span>(<span class="number">8</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;N * N&quot;</span> &lt;&lt; <span class="string">&quot;:\n&quot;</span>;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i *= <span class="number">10</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout.<span class="built_in">width</span>(<span class="number">5</span>);</span><br><span class="line">		cout &lt;&lt; i &lt;&lt; <span class="string">&quot;:&quot;</span>;</span><br><span class="line">		cout.<span class="built_in">width</span>(<span class="number">8</span>);</span><br><span class="line">		cout &lt;&lt; i * i &lt;&lt; <span class="string">&quot;:\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details><br></li>
<li><p>填充字符</p>
<details><summary>fill.cpp(可点开查看)</summary>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fill.cpp -- changing fill character for fields </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> std::cout;</span><br><span class="line">	cout.<span class="built_in">fill</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">char</span> * staff[<span class="number">2</span>] = &#123; <span class="string">&quot;Waldo Whipsnade&quot;</span>, <span class="string">&quot;Wilmarie Wooper&quot;</span> &#125;;</span><br><span class="line">	<span class="keyword">long</span> bonus[<span class="number">2</span>] = &#123; <span class="number">900</span>, <span class="number">1350</span> &#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; staff[i] &lt;&lt; <span class="string">&quot;: $&quot;</span>;</span><br><span class="line">		cout.<span class="built_in">width</span>(<span class="number">7</span>);</span><br><span class="line">		cout &lt;&lt; bonus[i] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details><br></li>
<li><p>设置浮点数</p>
<details><summary>precise.cpp(可点开查看)</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//precise.cpp -- setting the precision</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> std::cout;</span><br><span class="line">	<span class="keyword">float</span> pricel = <span class="number">20.40</span>;</span><br><span class="line">	<span class="keyword">float</span> price2 = <span class="number">1.9</span> + <span class="number">8.0</span> / <span class="number">9.0</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;V&#x27;Furry Friends\&quot; is S&quot;</span> &lt;&lt; pricel &lt;&lt; <span class="string">&quot;!\n &quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\&quot;Fiery Fiends\&quot; is $&quot;</span> &lt;&lt; price2 &lt;&lt; <span class="string">&quot;!\n&quot;</span>;</span><br><span class="line">	cout.<span class="built_in">precision</span>(<span class="number">2</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\&quot;Furry Friends\&quot; is $&quot;</span> &lt;&lt; pricel &lt;&lt; <span class="string">&quot;!\n &quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\&quot;Fiery Fiends\&quot; is $&quot;</span> &lt;&lt; price2 &lt;&lt; <span class="string">&quot;!\n&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details><br></li>
<li><p>setf</p>
<details><summary>setf.cpp(可点开查看)</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//setf.cpp -- using setf() to control formatting</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">	<span class="keyword">int</span> temperature = <span class="number">63</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Today&#x27;s water temperature:&quot;</span>;</span><br><span class="line">		cout.<span class="built_in">setf</span>(ios_base::showpos);	<span class="comment">// show plus sign</span></span><br><span class="line">	cout &lt;&lt; temperature &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;For our programming friends, that&#x27;s\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; std::hex &lt;&lt; temperature &lt;&lt; endl; <span class="comment">// use hex</span></span><br><span class="line">	cout.<span class="built_in">setf</span>(ios_base::uppercase);	<span class="comment">// use uppercase in hex</span></span><br><span class="line">	cout.<span class="built_in">setf</span>(ios_base::showbase);	<span class="comment">// use OX prefix for hex</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;or\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; temperature &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;How &quot;</span> &lt;&lt; <span class="literal">true</span> &lt;&lt; <span class="string">&quot;! oops -- How &quot;</span>;</span><br><span class="line">	cout.<span class="built_in">setf</span>(ios_base::boolalpha);</span><br><span class="line">	cout &lt;&lt; <span class="literal">true</span> &lt;&lt; <span class="string">&quot;!\n&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details><br>
<details><summary>setf2.cpp(可点开查看)</summary>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// setf2.cpp -- using setf() with 2 arguments to control formatting </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">	<span class="comment">// use left justification, show the plus sign, show trailing</span></span><br><span class="line">	<span class="comment">// zeros, with a precision of 3 </span></span><br><span class="line">	cout.<span class="built_in">setf</span>(ios_base::left, ios_base::adjustfield);</span><br><span class="line">	cout.<span class="built_in">setf</span>(ios_base::showpos); </span><br><span class="line">cout.<span class="built_in">setf</span>(ios_base::showpoint); </span><br><span class="line">cout.<span class="built_in">precision</span>(<span class="number">3</span>);</span><br><span class="line">	<span class="comment">// use e-notation and save old format setting</span></span><br><span class="line">ios_base::fmtflags old = cout.<span class="built_in">setf</span>(ios_base::scientific, ios_base::floatfield);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Left Justification:\n&quot;</span>;</span><br><span class="line"><span class="keyword">long</span> n;</span><br><span class="line"><span class="keyword">for</span> (n = <span class="number">1</span>; n &lt;= <span class="number">41</span>; n += <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">	cout.<span class="built_in">width</span>(<span class="number">4</span>);</span><br><span class="line">	cout &lt;&lt; n &lt;&lt; <span class="string">&quot;|&quot;</span>;</span><br><span class="line">	cout.<span class="built_in">width</span>(<span class="number">12</span>);</span><br><span class="line">	cout &lt;&lt; <span class="built_in">sqrt</span>(<span class="built_in"><span class="keyword">double</span></span>(n)) &lt;&lt; <span class="string">&quot;|\n&quot;</span>;</span><br><span class="line">	<span class="comment">// change to internal justification</span></span><br><span class="line">	cout.<span class="built_in">setf</span>(ios_base::internal, ios_base::adjustfield);</span><br><span class="line">	<span class="comment">// restore default floating-point display style </span></span><br><span class="line">	cout.<span class="built_in">setf</span>(old, ios_base::floatfield);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Internal Justification:\n&quot;</span>; <span class="keyword">for</span> (n = <span class="number">1</span>; n &lt;= <span class="number">41</span>; n += <span class="number">10</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout.<span class="built_in">width</span>(<span class="number">4</span>); cout &lt;&lt; n &lt;&lt; cout.<span class="built_in">width</span>(<span class="number">12</span>);</span><br><span class="line">		cout &lt;&lt; <span class="built_in">sqrt</span>(<span class="built_in"><span class="keyword">double</span></span>(n)) &lt;&lt; <span class="string">&quot;|\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// use right justification, fixed notation</span></span><br><span class="line">	cout.<span class="built_in">setf</span>(ios_base::right, ios_base::adjustfield);</span><br><span class="line">	cout.<span class="built_in">setf</span>(ios_base::fixed, ios_base::floatfield);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Right Justification:\n&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (n = <span class="number">1</span>; n &lt;= <span class="number">41</span>; n += <span class="number">10</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout.<span class="built_in">width</span>(<span class="number">4</span>);</span><br><span class="line">		cout &lt;&lt; n &lt;&lt; <span class="string">&quot; |&quot;</span>;</span><br><span class="line">		cout.<span class="built_in">width</span>(<span class="number">12</span>);</span><br><span class="line">		cout &lt;&lt; <span class="built_in">sqrt</span>(<span class="built_in"><span class="keyword">double</span></span>(n)) &lt;&lt; <span class="string">&quot;|\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details><br></li>
<li><p>标准控制符</p>
<img src="/WestRoute.github.io/images/charactercontrol.png"></li>
<li><p>头文件iomanip<br>setrecision()设置精度<br>setfill()设置填充字符<br>setw()设置字段宽度</p>
</li>
</ol>
<h3 id="使用cin进行输入"><a href="#使用cin进行输入" class="headerlink" title="使用cin进行输入"></a>使用cin进行输入</h3><h4 id="流状态-iostate"><a href="#流状态-iostate" class="headerlink" title="流状态(iostate)"></a>流状态(iostate)</h4><p>eofbit() 如果达到文件尾，设置为1<br>badfit() 如果流被破坏，则设置为1<br>failbit()<br>goodbit() 表示0<br>good()<br>eof() 如果eofbit被设置，则返回true<br>bad() 如果badbit被设置，则返回true<br>fail() 如果badbit 或 fail比他 被设置，则返回true<br>exception() 返回一个掩码，指出那些标记异常被引发<br>exception(isostate ex)<br>设置状态<br>clear(iostate s)<br>setstate(iostate s)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// cinexcp.cpp -- having cin throw an exception </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">	<span class="comment">// have failbit cause an exception to be thrown</span></span><br><span class="line">	cin.<span class="built_in">exceptions</span>(ios_base::failbit);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Enter numbers: &quot;</span>;</span><br><span class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> input;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="keyword">while</span> (cin &gt;&gt; input)</span><br><span class="line">		&#123;</span><br><span class="line">			sum += input;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in"><span class="keyword">catch</span></span> (ios_base::failure &amp; bf)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; bf.<span class="built_in">what</span>() &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;0! the horror!\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Last value entered = &quot;</span> &lt;&lt; input &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Sum = &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="其他istream方法"><a href="#其他istream方法" class="headerlink" title="其他istream方法"></a>其他istream方法</h4><p>get(char&amp;)get(void)提供不跳过空格的但字符输入功能<br>get(char&amp;,int,char)和getline(char&amp;,int,char)在默认情况下读取整行而不是一个单词<br>char line[50];<br>cin.get(line,50);将在第49位或空格停止输入。<br>get()将分界字符留在输入队列中，getline()不保留</p>
<details><summary>setf2.cpp(可点开查看)</summary>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// get_fun.cpp -- using get() and getline()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Limit = <span class="number">255</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> std::cout;</span><br><span class="line">	<span class="keyword">using</span> std::cin;</span><br><span class="line">	<span class="keyword">using</span> std::endl;</span><br><span class="line">	<span class="keyword">char</span> input[Limit];</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Enter a string for getlineO processing:\n&quot;</span>;</span><br><span class="line">	cin.<span class="built_in">getline</span>(input, Limit, <span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Here is your input:\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; input &lt;&lt; <span class="string">&quot;\nDone with phase 1\n&quot;</span>;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">char</span> ch;</span><br><span class="line">	cin.<span class="built_in">get</span>(ch);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;The next input character is &quot;</span> &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">if</span> (ch != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">		cin.<span class="built_in">ignore</span>(Limit, <span class="string">&#x27;\n&#x27;</span>);	<span class="comment">// discard rest of line</span></span><br><span class="line"> </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Enter a string for get() processing:\n&quot;</span>;</span><br><span class="line">	cin.<span class="built_in">get</span>(input, Limit, <span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Here is your input:\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; input &lt;&lt; <span class="string">&quot;\nDone with phase 2\n&quot;</span>;</span><br><span class="line">	cin.<span class="built_in">get</span>(ch);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;The next input character is &quot;</span> &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details><br>
read()读取指定字节，并将它们储存到指定位置上
peek()返回输入中的下一个字节，但不抽取输入流
gcount()
putback()

<h3 id="文件输入和输出"><a href="#文件输入和输出" class="headerlink" title="文件输入和输出"></a>文件输入和输出</h3><p>输出:</p>
<ol>
<li>创建一个ofstream对象来管理输出流</li>
<li>将该对象与特定的文件关联起来</li>
<li>使用count的方式使用该对象，唯一的区别是输出将进入文件，而不是屏幕<br>输入也一样</li>
</ol>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//fileio.cpp -- saving to a file</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span> <span class="comment">// not needed for many systems </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">	string filename;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Enter name for new file: &quot;</span>;</span><br><span class="line">	cin &gt;&gt; filename;</span><br><span class="line">	<span class="comment">// create output stream object for new file and call it fout </span></span><br><span class="line">	<span class="function">ofstream <span class="title">fout</span><span class="params">(filename.c_str())</span></span>;</span><br><span class="line">	fout &lt;&lt; <span class="string">&quot;For your eyes only!\n&quot;</span>;	<span class="comment">// write to file</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Enter your secret number: &quot;</span>;<span class="comment">// write to screen</span></span><br><span class="line">	<span class="keyword">float</span> secret; cin &gt;&gt; secret;</span><br><span class="line">	fout &lt;&lt; <span class="string">&quot;Your secret number is &quot;</span> &lt;&lt; secret &lt;&lt; endl;</span><br><span class="line">	fout.<span class="built_in">close</span>();	<span class="comment">// close file</span></span><br><span class="line">	<span class="comment">// create input stream object for new file and call it fin </span></span><br><span class="line">	<span class="function">ifstream <span class="title">fin</span><span class="params">(filename.c_str())</span></span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Here are the contents of &quot;</span> &lt;&lt; filename &lt;&lt; <span class="string">&quot;:\n&quot;</span>; <span class="keyword">char</span> ch;</span><br><span class="line">	<span class="keyword">while</span> (fin.<span class="built_in">get</span>(ch))	<span class="comment">// read character from file and</span></span><br><span class="line">		cout &lt;&lt; ch;	<span class="comment">// write it to screen</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Done\n&quot;</span>;</span><br><span class="line">	fin.<span class="built_in">close</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>试图打开一个不存在的文件进行输入时，将设置failbit位<br>fin.open(argv[file]);<br>if(fin.fail()){<br>    ….<br>}<br>也可以这样做<br>fin.open(argv[file]);<br>if(!fin){<br>    ….<br>}<br>也可以<br>if(!fin.is_open()){<br>    ….<br>}<br>打开多个文件<br>fin.open(“one.txt”);<br>fin.close();<br>fin.clear();<br>fin.open(“two.txt”);<br><br><br>argc是命令行参数个数，是数组</p>
<table>
<thead>
<tr>
<th>模式标志</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>ios::app</td>
<td>追加模式。所有写入都追加到文件末尾。</td>
</tr>
<tr>
<td>ios::ate</td>
<td>文件打开后定位到文件末尾。</td>
</tr>
<tr>
<td>ios::in</td>
<td>打开文件用于读取。</td>
</tr>
<tr>
<td>ios::out</td>
<td>打开文件用于写入。</td>
</tr>
<tr>
<td>ios::trunc</td>
<td>如果该文件已经存在，其内容将在打开文件之前被截断，即把文件长度设为 0。</td>
</tr>
</tbody></table>
<p>二进制输入<br>二进制文件更精准更简洁，但可移植性较差<br>read()和write()支持二进制<br>ofstream fout(“planets.dat”,ios_base::out|ios_base::app|ios_base::binary);<br>fout.write((char*) &amp;pl,sizeof pl);</p>
<h4 id="随机存取"><a href="#随机存取" class="headerlink" title="随机存取"></a>随机存取</h4><p>文件读取整个文件后，并设置eofbit元素，禁止对文件进一步读写。使用clear()方法重置流状态，并打开eofbit后，程序便可以再次访问该文件，else处理其他原因引起的停止读取的情况。<br>seekg()和seekp()函数提供对文件的随机存取<br>tellg()和tellp()方法报告当前的文件位置</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// random.cpp -- random access to a binary file</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span> <span class="comment">// not required by most systems </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span>	<span class="comment">// for exit()</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LIM = <span class="number">20</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">planet</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">char</span> name[LIM];<span class="comment">// name of planet </span></span><br><span class="line">	<span class="keyword">double</span> population;<span class="comment">// its population</span></span><br><span class="line">	<span class="keyword">double</span> g;<span class="comment">// its acceleration of gravity</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * file = <span class="string">&quot;planets.dat&quot;</span>;	<span class="comment">// ASSUMED TO EXIST (binary.cpp example)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">eatline</span><span class="params">()</span> </span>&#123; <span class="keyword">while</span> (std::cin.<span class="built_in">get</span>() != <span class="string">&#x27;\n&#x27;</span>) <span class="keyword">continue</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">	planet pl;</span><br><span class="line">	cout &lt;&lt; fixed;</span><br><span class="line">	<span class="comment">// show initial contents</span></span><br><span class="line">	fstream finout;	<span class="comment">// read and write streams</span></span><br><span class="line">	finout.<span class="built_in">open</span>(file, ios_base::in | ios_base::out | ios_base::binary);</span><br><span class="line">	<span class="comment">//<span class="doctag">NOTE:</span> Some Unix systems require omitting - ios::binary </span></span><br><span class="line">	<span class="keyword">int</span> ct = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (finout.<span class="built_in">is_open</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		finout.<span class="built_in">seekg</span>(<span class="number">0</span>);<span class="comment">// go to beginning</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Here are tRe current contents of the  &quot;</span> &lt;&lt; file &lt;&lt; <span class="string">&quot; file: \n&quot;</span>;</span><br><span class="line">		<span class="keyword">while</span> (finout.<span class="built_in">read</span>((<span class="keyword">char</span> *)&amp;pl, <span class="keyword">sizeof</span> pl))</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; ct++ &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; <span class="built_in">setw</span>(LIM) &lt;&lt; pl.name &lt;&lt; <span class="string">&quot;: &quot;</span></span><br><span class="line">				&lt;&lt; <span class="built_in">setprecision</span>(<span class="number">0</span>) &lt;&lt; <span class="built_in">setw</span>(<span class="number">-12</span>) &lt;&lt; pl.population</span><br><span class="line">				&lt;&lt; <span class="built_in">setprecision</span>(<span class="number">2</span>) &lt;&lt; <span class="built_in">setw</span>(<span class="number">6</span>) &lt;&lt; pl.g &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (finout.<span class="built_in">eof</span>())</span><br><span class="line">			finout.<span class="built_in">clear</span>(); <span class="comment">// clear eof flag</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			cerr &lt;&lt; <span class="string">&quot;Error in reading &quot;</span> &lt;&lt; file &lt;&lt; <span class="string">&quot;.\n&quot;</span>;</span><br><span class="line">			<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cerr &lt;&lt; file &lt;&lt; <span class="string">&quot; could not be opened -- bye.\n&quot;</span>;</span><br><span class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// &quot;&quot;&quot;change a record&quot;&quot;&quot;</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Enter the record number you wish to change: &quot;</span>;</span><br><span class="line">	<span class="keyword">long</span> rec;</span><br><span class="line">	cin &gt;&gt; rec;</span><br><span class="line">	<span class="built_in">eatline</span>();	<span class="comment">// get rid of newline</span></span><br><span class="line">	<span class="keyword">if</span> (rec &lt; <span class="number">0</span> || rec &gt;= ct)</span><br><span class="line">	&#123;</span><br><span class="line">		cerr &lt;&lt; <span class="string">&quot;Invalid record number -- bye\n&quot;</span>;</span><br><span class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">	&#125;</span><br><span class="line">	streampos place = rec * <span class="keyword">sizeof</span> pl; <span class="comment">// convert to streampos type</span></span><br><span class="line">	finout.<span class="built_in">seekg</span>(place);	<span class="comment">// random access</span></span><br><span class="line">	<span class="keyword">if</span> (finout.<span class="built_in">fail</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		cerr &lt;&lt; <span class="string">&quot;Error on attempted seek\n&quot;</span>;</span><br><span class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	finout.<span class="built_in">read</span>((<span class="keyword">char</span> *)&amp;pl, <span class="keyword">sizeof</span> pl);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Your selection:\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; rec &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; <span class="built_in">setw</span>(LIM) &lt;&lt; pl.name &lt;&lt; <span class="string">&quot;: &quot;</span></span><br><span class="line">		&lt;&lt; <span class="built_in">setprecision</span>(<span class="number">0</span>) &lt;&lt; <span class="built_in">setw</span>(<span class="number">12</span>) &lt;&lt; pl.population</span><br><span class="line">		&lt;&lt; <span class="built_in">setprecision</span>(<span class="number">2</span>) &lt;&lt; <span class="built_in">setw</span>(<span class="number">6</span>) &lt;&lt; pl.g &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// clear eof flag</span></span><br><span class="line">	<span class="keyword">if</span> (finout.<span class="built_in">eof</span>())</span><br><span class="line">		finout.<span class="built_in">clear</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Enter planet name: &quot;</span>;</span><br><span class="line">	cin.<span class="built_in">get</span>(pl.name, LIM);</span><br><span class="line">	<span class="built_in">eatline</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Enter planetary population: &quot;</span>;</span><br><span class="line">	cin &gt;&gt; pl.population;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Enter planet&#x27;s acceleration of gravity: &quot;</span>;</span><br><span class="line">	cin &gt;&gt; pl.g;</span><br><span class="line">	finout.<span class="built_in">seekp</span>(place);	<span class="comment">// go back</span></span><br><span class="line">	finout.<span class="built_in">write</span>((<span class="keyword">char</span> *)&amp;pl, <span class="keyword">sizeof</span> pl) &lt;&lt; flush;</span><br><span class="line">	<span class="keyword">if</span> (finout.<span class="built_in">fail</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		cerr &lt;&lt; <span class="string">&quot;Error on attempted write\n&quot;</span>;</span><br><span class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// show revised file ct = 0;</span></span><br><span class="line">	finout.<span class="built_in">seekg</span>(<span class="number">0</span>);	<span class="comment">// go to beginning of file</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Here are the new contents of the &quot;</span> &lt;&lt; file &lt;&lt; <span class="string">&quot;file:\n&quot;</span>;</span><br><span class="line">	<span class="keyword">while</span> (finout.<span class="built_in">read</span>((<span class="keyword">char</span> *)&amp;pl, <span class="keyword">sizeof</span> pl))</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; ct++ &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; <span class="built_in">setw</span>(LIM) &lt;&lt; pl.name &lt;&lt; <span class="string">&quot;: &quot;</span></span><br><span class="line">			&lt;&lt; <span class="built_in">setprecision</span>(<span class="number">0</span>) &lt;&lt; <span class="built_in">setw</span>(<span class="number">12</span>) &lt;&lt; pl.population</span><br><span class="line">			&lt;&lt; <span class="built_in">setprecision</span>(<span class="number">2</span>) &lt;&lt; <span class="built_in">setw</span>(<span class="number">6</span>) &lt;&lt; pl.g &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	finout.<span class="built_in">close</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Done.\n&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="内核格式化"><a href="#内核格式化" class="headerlink" title="内核格式化"></a>内核格式化</h3><p>iostream族支持程序与终端之间的I/O<br>fstream族使用相同的接口提供程序和文件之间的I/O<br>sstream族使用相同的接口提供程序和string对象之间的I/O</p>
<p>读取string对象中的格式化信息或将格式化信息写入string对象中被称为内核格式化(incore formatting)<br><br></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// strin.cpp -- formatted reading from a char array </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span> </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">	string lit = <span class="string">&quot;t was a dark and stormy day, and the full moon glowed brilliantly. &quot;</span>;</span><br><span class="line">	<span class="function">istringstream <span class="title">instr</span><span class="params">(lit)</span></span>; <span class="comment">// use buf for input </span></span><br><span class="line">	string <span class="keyword">word</span>;</span><br><span class="line">	<span class="keyword">while</span> (instr &gt;&gt; <span class="keyword">word</span>)<span class="comment">// read a word a time</span></span><br><span class="line">		cout &lt;&lt; <span class="keyword">word</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>C++PrimerPlus</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络编程作业 02</title>
    <url>/WestRoute.github.io/2021/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%BD%9C%E4%B8%9A02/</url>
    <content><![CDATA[<p>参考来自：<a href="https://github.com/jzplp/Computer-Network-A-Top-Down-Approach-Answer">Computer Network A Top-Down Approach Practice Answer-github</a></p>
<h2 id="chapter3"><a href="#chapter3" class="headerlink" title="chapter3"></a>chapter3</h2><p>RTT （Round Trip Time）<br>GBN协议：发送报文段9次，ACK8次<br>SR协议：发送报文段6次，ACK5次<br>TCP协议：发送报文段6次，ACK5次</p>
<span id="more"></span>
<p>复习：<br><strong>因特网协议栈中的5个层次</strong><br>应用层：提供了一些网络应用程序和应用层协议。<br>运输层：在应用程序端点之间传输运输层报文。主要有TCP和UDP两种协议。<br>网络层：负责将分组从一台主机移动到另一台主机。<br>链路层：沿着路经将数据报传递给下一层结点。<br>物理层：将整个帧从一个网络元素移动到邻近的网络元素。</p>
<table>
<thead>
<tr>
<th>OSI 7</th>
<th>TCP/IP</th>
</tr>
</thead>
<tbody><tr>
<td>应用层</td>
<td>应用层</td>
</tr>
<tr>
<td>表示层</td>
<td>-</td>
</tr>
<tr>
<td>会话层</td>
<td>-</td>
</tr>
<tr>
<td>运输层</td>
<td>运输层</td>
</tr>
<tr>
<td>网络层</td>
<td>网际层IP</td>
</tr>
<tr>
<td>数据连接层</td>
<td>网络连接层</td>
</tr>
<tr>
<td>物理层</td>
<td>-</td>
</tr>
</tbody></table>
<h3 id="关于nmap的小实验"><a href="#关于nmap的小实验" class="headerlink" title="关于nmap的小实验"></a>关于nmap的小实验</h3><p>1.windows没有nmap工具，需要手动下载：<a href="https://nmap.org/">https://nmap.org/</a><br>2.检测目标主机某端口的TCP是否开放</p>
<p>无法到达指定的端口，可能是由于防火墙</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -sT -p<span class="number">80</span> <span class="number">192.168.2.220</span></span><br><span class="line"><span class="attribute">Starting</span> Nmap <span class="number">7</span>.<span class="number">80</span> ( https://nmap.org ) at <span class="number">2019</span>-<span class="number">12</span>-<span class="number">07</span> <span class="number">14</span>:<span class="number">48</span> ?D<span class="number">1</span>ú±ê×?ê±??</span><br><span class="line"><span class="attribute">Nmap</span> scan report for MI<span class="number">9</span>-jzphone.lan (<span class="number">192.168.2.220</span>)</span><br><span class="line"><span class="attribute">Host</span> is up (<span class="number">0</span>.<span class="number">074</span>s latency).</span><br><span class="line"></span><br><span class="line"><span class="attribute">PORT</span>   STATE    SERVICE</span><br><span class="line"><span class="attribute">80</span>/tcp filtered http</span><br><span class="line"><span class="attribute">MAC</span> Address: A<span class="number">8</span>:<span class="number">9</span>C:ED:A<span class="number">7</span>:D<span class="number">9</span>:EC (Xiaomi Communications)</span><br><span class="line"></span><br><span class="line"><span class="attribute">Nmap</span> done: <span class="number">1</span> IP address (<span class="number">1</span> host up) scanned in <span class="number">2</span>.<span class="number">33</span> seconds</span><br></pre></td></tr></table></figure>
<p>端口打开</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -sT -p<span class="number">80</span> <span class="number">192.168.2.1</span></span><br><span class="line"><span class="attribute">Starting</span> Nmap <span class="number">7</span>.<span class="number">80</span> ( https://nmap.org ) at <span class="number">2019</span>-<span class="number">12</span>-<span class="number">07</span> <span class="number">14</span>:<span class="number">51</span> ?D<span class="number">1</span>ú±ê×?ê±??</span><br><span class="line"><span class="attribute">Nmap</span> scan report for phicomm.me (<span class="number">192.168.2.1</span>)</span><br><span class="line"><span class="attribute">Host</span> is up (<span class="number">0</span>.<span class="number">0024</span>s latency).</span><br><span class="line"></span><br><span class="line"><span class="attribute">PORT</span>   STATE SERVICE</span><br><span class="line"><span class="attribute">80</span>/tcp open  http</span><br><span class="line"><span class="attribute">MAC</span> Address: <span class="number">68</span>:DB:<span class="number">54</span>:CC:<span class="number">6</span>B:BE (Phicomm (Shanghai))</span><br><span class="line"></span><br><span class="line"><span class="attribute">Nmap</span> done: <span class="number">1</span> IP address (<span class="number">1</span> host up) scanned in <span class="number">1</span>.<span class="number">47</span> seconds</span><br></pre></td></tr></table></figure>

<p>端口关闭</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -sT -p<span class="number">80</span> <span class="number">192.168.2.239</span></span><br><span class="line"><span class="attribute">Starting</span> Nmap <span class="number">7</span>.<span class="number">80</span> ( https://nmap.org ) at <span class="number">2019</span>-<span class="number">12</span>-<span class="number">07</span> <span class="number">14</span>:<span class="number">56</span> ?D<span class="number">1</span>ú±ê×?ê±??</span><br><span class="line"><span class="attribute">Nmap</span> scan report for LAPTOP-<span class="number">3</span>CP<span class="number">7</span>H<span class="number">0</span>GM.lan (<span class="number">192.168.2.239</span>)</span><br><span class="line"><span class="attribute">Host</span> is up (<span class="number">1</span>.<span class="number">0</span>s latency).</span><br><span class="line"></span><br><span class="line"><span class="attribute">PORT</span>   STATE  SERVICE</span><br><span class="line"><span class="attribute">80</span>/tcp closed http</span><br><span class="line"></span><br><span class="line"><span class="attribute">Nmap</span> done: <span class="number">1</span> IP address (<span class="number">1</span> host up) scanned in <span class="number">3</span>.<span class="number">38</span> seconds</span><br></pre></td></tr></table></figure>

<h2 id="chapter4"><a href="#chapter4" class="headerlink" title="chapter4"></a>chapter4</h2><h3 id="ICMP-ping"><a href="#ICMP-ping" class="headerlink" title="ICMP ping"></a>ICMP ping</h3><blockquote><p>Ping是一个网络应用程序，用于测试某个主机在IP网络中是否可访问。它也用于测试计算机的网卡或测试网络延迟。它通过向目标主机发送ICMP“回显”包并监听ICMP“回显”应答来工作。“回显”有时称为”pong”。ping程序测量往返时间，记录数据包丢失，并输出接收到的回显包的统计摘要（往返时间的最小值、最大值和平均值，以及在某些版本中的平均值的标准差）。 您的任务是用python开发自己的Ping程序。您的程序将使用ICMP，但为了保持简单，将不完全遵循RFC 1739中的正式规范。请注意，您只需要编写程序的客户端，因为服务器端所需的功能几乎内置于所有操作系统中。 您的Ping程序能将ping请求发送到指定的主机，间隔大约一秒钟。每个消息包含一个带有时间戳的数据包。每个数据包发送完后，程序最多等待一秒，用于接收响应。如果一秒后服务器没有响应，那么客户端应假设ping数据包或pong数据包在网络中丢失（或者服务器已关闭）。</p>
</blockquote>
<details><summary>代理服务器的Python代码框架(可点开查看)</summary>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">from socket <span class="built_in">import</span> *</span><br><span class="line"><span class="built_in">import</span> os</span><br><span class="line"><span class="built_in">import</span> sys</span><br><span class="line"><span class="built_in">import</span> struct</span><br><span class="line"><span class="built_in">import</span> time</span><br><span class="line"><span class="built_in">import</span> select</span><br><span class="line"><span class="built_in">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="attr">ICMP_ECHO_REQUEST</span> = <span class="number">8</span></span><br><span class="line"></span><br><span class="line">def checksum(str):</span><br><span class="line">    <span class="attr">csum</span> = <span class="number">0</span></span><br><span class="line">    <span class="attr">countTo</span> = (len(str) / <span class="number">2</span>) * <span class="number">2</span></span><br><span class="line">    <span class="attr">count</span> = <span class="number">0</span></span><br><span class="line">    while count &lt; countTo:</span><br><span class="line">        <span class="attr">thisVal</span> = ord(str[count+<span class="number">1</span>]) * <span class="number">256</span> + ord(str[count])</span><br><span class="line">        <span class="attr">csum</span> = csum + thisVal</span><br><span class="line">        <span class="attr">csum</span> = csum &amp; <span class="number">0</span>xffffffffL</span><br><span class="line">        <span class="attr">count</span> = count + <span class="number">2</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> countTo &lt; len(str):</span><br><span class="line">        <span class="attr">csum</span> = csum + ord(str[len(str) - <span class="number">1</span>])</span><br><span class="line">        <span class="attr">csum</span> = csum &amp; <span class="number">0</span>xffffffffL</span><br><span class="line"></span><br><span class="line">    <span class="attr">csum</span> = (csum &gt;&gt; <span class="number">16</span>) + (csum &amp; <span class="number">0</span>xffff)</span><br><span class="line">    <span class="attr">csum</span> = csum + (csum &gt;&gt; <span class="number">16</span>)</span><br><span class="line">    <span class="attr">answer</span> = ~csum</span><br><span class="line">    <span class="attr">answer</span> = answer &amp; <span class="number">0</span>xffff</span><br><span class="line">    <span class="attr">answer</span> = answer &gt;&gt; <span class="number">8</span> | (answer &lt;&lt; <span class="number">8</span> &amp; <span class="number">0</span>xff00)</span><br><span class="line">    return answer</span><br><span class="line"></span><br><span class="line">def receiveOnePing(mySocket, ID, timeout, destAddr):</span><br><span class="line">    <span class="attr">timeLeft</span> = timeout</span><br><span class="line"></span><br><span class="line">    while <span class="number">1</span>:</span><br><span class="line">        <span class="attr">startedSelect</span> = time.time()</span><br><span class="line">        <span class="attr">whatReady</span> = select.select([mySocket], [], [], timeLeft)</span><br><span class="line">        <span class="attr">howLongInSelect</span> = (time.time() - startedSelect)</span><br><span class="line">        <span class="keyword">if</span> whatReady[<span class="number">0</span>] == []: <span class="comment"># Timeout</span></span><br><span class="line">            return <span class="string">&quot;Request timed out.&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">timeReceived</span> = time.time()</span><br><span class="line">        recPacket, <span class="attr">addr</span> = mySocket.recvfrom(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#Fill in start</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#Fetch the ICMP header from the IP packet</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#Fill in end</span></span><br><span class="line">        </span><br><span class="line">        <span class="attr">timeLeft</span> = timeLeft - howLongInSelect</span><br><span class="line">        <span class="keyword">if</span> timeLeft &lt;= <span class="number">0</span>:</span><br><span class="line">        	return <span class="string">&quot;Request timed out.&quot;</span></span><br><span class="line"></span><br><span class="line">def sendOnePing(mySocket, destAddr, ID):</span><br><span class="line">    <span class="comment"># Header is type (8), code (8), checksum (16), id (16), sequence (16)</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">myChecksum</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment"># Make a dummy header with a 0 checksum.</span></span><br><span class="line">    <span class="comment"># struct -- Interpret strings as packed binary data</span></span><br><span class="line">    <span class="attr">header</span> = struct.pack(<span class="string">&quot;bbHHh&quot;</span>, ICMP_ECHO_REQUEST, <span class="number">0</span>, myChecksum, ID, <span class="number">1</span>)</span><br><span class="line">    <span class="attr">data</span> = struct.pack(<span class="string">&quot;d&quot;</span>, time.time())</span><br><span class="line">    <span class="comment"># Calculate the checksum on the data and the dummy header.</span></span><br><span class="line">    <span class="attr">myChecksum</span> = checksum(header + data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get the right checksum, and put in the header</span></span><br><span class="line">    <span class="keyword">if</span> sys.<span class="attr">platform</span> == &#x27;darwin&#x27;:</span><br><span class="line">        <span class="attr">myChecksum</span> = socket.htons(myChecksum) &amp; <span class="number">0</span>xffff</span><br><span class="line">        <span class="comment">#Convert 16-bit integers from host to network byte order.</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="attr">myChecksum</span> = socket.htons(myChecksum)</span><br><span class="line">    </span><br><span class="line">    <span class="attr">header</span> = struct.pack(<span class="string">&quot;bbHHh&quot;</span>, ICMP_ECHO_REQUEST, <span class="number">0</span>, myChecksum, ID, <span class="number">1</span>)</span><br><span class="line">    <span class="attr">packet</span> = header + data</span><br><span class="line">    </span><br><span class="line">    mySocket.sendto(packet, (destAddr, <span class="number">1</span>)) <span class="comment"># AF_INET address must be tuple, not str</span></span><br><span class="line">    <span class="comment">#Both LISTS and TUPLES consist of a number of objects</span></span><br><span class="line">    <span class="comment">#which can be referenced by their position number within the object</span></span><br><span class="line"></span><br><span class="line">def doOnePing(destAddr, timeout):</span><br><span class="line">    <span class="attr">icmp</span> = socket.getprotobyname(<span class="string">&quot;icmp&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#SOCK_RAW is a powerful socket type. For more details see: http://sock-raw.org/papers/sock_raw</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#Fill in start</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#Create Socket here</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#Fill in end</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">myID</span> = os.getpid() &amp; <span class="number">0</span>xFFFF <span class="comment">#Return the current process i</span></span><br><span class="line">    sendOnePing(mySocket, destAddr, myID)</span><br><span class="line">    <span class="attr">delay</span> = receiveOnePing(mySocket, myID, timeout, destAddr)</span><br><span class="line"></span><br><span class="line">    mySocket.close()</span><br><span class="line">    return delay</span><br><span class="line"></span><br><span class="line">def ping(host, <span class="attr">timeout=1):</span></span><br><span class="line">    <span class="comment">#timeout=1 means: If one second goes by without a reply from the server,</span></span><br><span class="line">    <span class="comment">#the client assumes that either the client’s ping or the server’s pong is lost</span></span><br><span class="line">    <span class="attr">dest</span> = socket.gethostbyname(host)</span><br><span class="line">    print <span class="string">&quot;Pinging &quot;</span> + dest + <span class="string">&quot; using Python:&quot;</span></span><br><span class="line">    print <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment">#Send ping requests to a server separated by approximately one second</span></span><br><span class="line">    while <span class="number">1</span> :</span><br><span class="line">        <span class="attr">delay</span> = doOnePing(dest, timeout)</span><br><span class="line">        print delay</span><br><span class="line">        time.sleep(<span class="number">1</span>)<span class="comment"># one second</span></span><br><span class="line">    return delay</span><br><span class="line"></span><br><span class="line">ping(<span class="string">&quot;www.poly.edu&quot;</span>)</span><br></pre></td></tr></table></figure>
</details>

<p>1.在“receiveOnePing”方法中，你需要获得ICMP_ECHO_REPLY结构并取出您需要的信息，如校验和、序列号、生存时间（TTL）等。在尝试完成“receiveOnePing”方法之前先研究“sendOnePing”方法。<br>2.您不必关心校验和，因为它已经在代码中给出了。<br>3.这个作业要求使用原始的sockets。在某些操作系统中，您可能需要管理员/root权限才能运行你的Ping程序。<br>4.有关ICMP的更多信息，请参见此编程练习的结尾部分。<br>5.首先，通过发送数据包到本地主机来测试你的客户端，主机地址：127.0.0.1。然后，你应该看看你的Ping程序如何通过在不同大洲的pinging服务器在网络中工作。<br><br></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对代码进行了少部分改动</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">import</span> socket</span><br><span class="line"><span class="built_in">import</span> os</span><br><span class="line"><span class="built_in">import</span> sys</span><br><span class="line"><span class="built_in">import</span> struct</span><br><span class="line"><span class="built_in">import</span> time</span><br><span class="line"><span class="built_in">import</span> select</span><br><span class="line"><span class="built_in">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="attr">ICMP_ECHO_REQUEST</span> = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def checksum(strCheck):</span><br><span class="line">    <span class="attr">csum</span> = <span class="number">0</span></span><br><span class="line">    <span class="attr">countTo</span> = (len(strCheck) / <span class="number">2</span>) * <span class="number">2</span></span><br><span class="line">    <span class="attr">count</span> = <span class="number">0</span></span><br><span class="line">    while count &lt; countTo:</span><br><span class="line">        <span class="attr">thisVal</span> = strCheck[count + <span class="number">1</span>] * <span class="number">256</span> + strCheck[count]</span><br><span class="line">        <span class="attr">csum</span> = csum + thisVal</span><br><span class="line">        <span class="attr">csum</span> = csum &amp; <span class="number">0</span>xffffffff</span><br><span class="line">        <span class="attr">count</span> = count + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> countTo &lt; len(strCheck):</span><br><span class="line">        <span class="attr">csum</span> = csum + strCheck[len(strCheck) - <span class="number">1</span>]</span><br><span class="line">        <span class="attr">csum</span> = csum &amp; <span class="number">0</span>xffffffff</span><br><span class="line"></span><br><span class="line">    <span class="attr">csum</span> = (csum &gt;&gt; <span class="number">16</span>) + (csum &amp; <span class="number">0</span>xffff)</span><br><span class="line">    <span class="attr">csum</span> = csum + (csum &gt;&gt; <span class="number">16</span>)</span><br><span class="line">    <span class="attr">answer</span> = ~csum</span><br><span class="line">    <span class="attr">answer</span> = answer &amp; <span class="number">0</span>xffff</span><br><span class="line">    <span class="attr">answer</span> = answer &gt;&gt; <span class="number">8</span> | (answer &lt;&lt; <span class="number">8</span> &amp; <span class="number">0</span>xff00)</span><br><span class="line">    return answer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def receiveOnePing(mySocket, ID, timeout, destAddr):</span><br><span class="line">    <span class="attr">timeLeft</span> = timeout</span><br><span class="line"></span><br><span class="line">    while <span class="number">1</span>:</span><br><span class="line">        <span class="attr">startedSelect</span> = time.time()</span><br><span class="line">        <span class="attr">whatReady</span> = select.select([mySocket], [], [], timeLeft)</span><br><span class="line">        <span class="attr">howLongInSelect</span> = (time.time() - startedSelect)</span><br><span class="line">        <span class="keyword">if</span> whatReady[<span class="number">0</span>] == []:  <span class="comment"># Timeout</span></span><br><span class="line">            return <span class="string">&quot;Request timed out.&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">timeReceived</span> = time.time()</span><br><span class="line">        recPacket, <span class="attr">addr</span> = mySocket.recvfrom(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">        <span class="attr">header</span> = recPacket[<span class="number">20</span>:<span class="number">28</span>]</span><br><span class="line">        header_type, header_code, header_checksum, header_packet_ID, <span class="attr">header_sequence</span> = struct.unpack(<span class="string">&quot;bbHHh&quot;</span>, header)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(header_type != <span class="number">0</span> <span class="literal">or</span> header_code != <span class="number">0</span> <span class="literal">or</span> header_packet_ID != ID <span class="literal">or</span> header_sequence != <span class="number">1</span>):</span><br><span class="line">            return <span class="string">&quot;Receive error.&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">timeLeft</span> = timeLeft - howLongInSelect</span><br><span class="line">        <span class="keyword">if</span> timeLeft &lt;= <span class="number">0</span>:</span><br><span class="line">            return <span class="string">&quot;Request timed out.&quot;</span></span><br><span class="line">        return timeLeft</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def sendOnePing(mySocket, destAddr, ID):</span><br><span class="line">    <span class="comment"># Header is type (8), code (8), checksum (16), id (16), sequence (16)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">myChecksum</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment"># Make a dummy header with a 0 checksum.</span></span><br><span class="line">    <span class="comment"># 创建一个带有0校验和的伪头。</span></span><br><span class="line">    <span class="comment"># struct -- Interpret strings as packed binary data</span></span><br><span class="line">    <span class="comment"># struct-将字符串解释为打包的二进制数据</span></span><br><span class="line">    <span class="attr">header</span> = struct.pack(<span class="string">&quot;bbHHh&quot;</span>, ICMP_ECHO_REQUEST, <span class="number">0</span>, myChecksum, ID, <span class="number">1</span>)</span><br><span class="line">    <span class="attr">data</span> = struct.pack(<span class="string">&quot;d&quot;</span>, time.time())</span><br><span class="line">    <span class="comment"># Calculate the checksum on the data and the dummy header.</span></span><br><span class="line">    <span class="comment"># 计算数据和虚拟头的校验和。</span></span><br><span class="line">    <span class="attr">myChecksum</span> = checksum(header + data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get the right checksum, and put in the header</span></span><br><span class="line">    <span class="keyword">if</span> sys.<span class="attr">platform</span> == &#x27;darwin&#x27;:</span><br><span class="line">        <span class="attr">myChecksum</span> = socket.htons(myChecksum) &amp; <span class="number">0</span>xffff</span><br><span class="line">        <span class="comment"># Convert 16-bit integers from host to network byte order.</span></span><br><span class="line">        <span class="comment"># 将主机的16位整数转换为网络字节顺序。</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="attr">myChecksum</span> = socket.htons(myChecksum)</span><br><span class="line"></span><br><span class="line">    <span class="attr">header</span> = struct.pack(<span class="string">&quot;bbHHh&quot;</span>, ICMP_ECHO_REQUEST, <span class="number">0</span>, myChecksum, ID, <span class="number">1</span>)</span><br><span class="line">    <span class="attr">packet</span> = header + data</span><br><span class="line"></span><br><span class="line">    mySocket.sendto(packet, (destAddr, <span class="number">1</span>))  <span class="comment"># AF_INET address must be tuple, not str</span></span><br><span class="line">    <span class="comment"># Both LISTS and TUPLES consist of a number of objects</span></span><br><span class="line">    <span class="comment"># which can be referenced by their position number within the object</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def doOnePing(destAddr, timeout):</span><br><span class="line">    <span class="attr">icmp</span> = socket.getprotobyname(<span class="string">&quot;icmp&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="attr">mySocket</span> = socket.socket(socket.AF_INET, socket.SOCK_RAW, icmp)</span><br><span class="line"></span><br><span class="line">    <span class="attr">myID</span> = os.getpid() &amp; <span class="number">0</span>xFFFF  <span class="comment"># Return the current process i</span></span><br><span class="line">    sendOnePing(mySocket, destAddr, myID)</span><br><span class="line">    <span class="attr">delay</span> = receiveOnePing(mySocket, myID, timeout, destAddr)</span><br><span class="line"></span><br><span class="line">    mySocket.close()</span><br><span class="line">    return delay</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def ping(host, <span class="attr">timeout=1):</span></span><br><span class="line">    <span class="comment"># timeout=1 means: If one second goes by without a reply from the server,</span></span><br><span class="line">    <span class="comment"># the client assumes that either the client’s ping or the server’s pong is lost</span></span><br><span class="line">    <span class="comment"># timeout = 1 表示：如果一秒钟没有收到服务器的答复，则客户端会认为客户端的ping或服务器的pong丢失了</span></span><br><span class="line">    <span class="attr">dest</span> = socket.gethostbyname(host)</span><br><span class="line">    print(<span class="string">&quot;Pinging &quot;</span> + dest + <span class="string">&quot; using Python:&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="comment"># Send ping requests to a server separated by approximately one second</span></span><br><span class="line">    <span class="comment"># 将ping请求发送到间隔约一秒钟的服务器</span></span><br><span class="line">    while <span class="number">1</span>:</span><br><span class="line">        <span class="attr">delay</span> = doOnePing(dest, timeout)</span><br><span class="line">        print(<span class="number">1</span> - delay)</span><br><span class="line">        time.sleep(<span class="number">1</span>)  <span class="comment"># one second</span></span><br><span class="line"></span><br><span class="line">ping(<span class="string">&quot;baidu.com&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>可选练习</strong><br>1.目前，程序计算每个包的往返时间，并逐个打印出来。修改此命令以符合标准ping程序的工作方式。你需要在所有ping完成后，报告最小，最大和平均RTT，以及数据包丢失率（百分比）。</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对代码进行了少部分改动</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">import</span> socket</span><br><span class="line"><span class="built_in">import</span> os</span><br><span class="line"><span class="built_in">import</span> sys</span><br><span class="line"><span class="built_in">import</span> struct</span><br><span class="line"><span class="built_in">import</span> time</span><br><span class="line"><span class="built_in">import</span> select</span><br><span class="line"><span class="built_in">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="attr">ICMP_ECHO_REQUEST</span> = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def checksum(strCheck):</span><br><span class="line">    <span class="attr">csum</span> = <span class="number">0</span></span><br><span class="line">    <span class="attr">countTo</span> = (len(strCheck) / <span class="number">2</span>) * <span class="number">2</span></span><br><span class="line">    <span class="attr">count</span> = <span class="number">0</span></span><br><span class="line">    while count &lt; countTo:</span><br><span class="line">        <span class="attr">thisVal</span> = strCheck[count + <span class="number">1</span>] * <span class="number">256</span> + strCheck[count]</span><br><span class="line">        <span class="attr">csum</span> = csum + thisVal</span><br><span class="line">        <span class="attr">csum</span> = csum &amp; <span class="number">0</span>xffffffff</span><br><span class="line">        <span class="attr">count</span> = count + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> countTo &lt; len(strCheck):</span><br><span class="line">        <span class="attr">csum</span> = csum + strCheck[len(strCheck) - <span class="number">1</span>]</span><br><span class="line">        <span class="attr">csum</span> = csum &amp; <span class="number">0</span>xffffffff</span><br><span class="line"></span><br><span class="line">    <span class="attr">csum</span> = (csum &gt;&gt; <span class="number">16</span>) + (csum &amp; <span class="number">0</span>xffff)</span><br><span class="line">    <span class="attr">csum</span> = csum + (csum &gt;&gt; <span class="number">16</span>)</span><br><span class="line">    <span class="attr">answer</span> = ~csum</span><br><span class="line">    <span class="attr">answer</span> = answer &amp; <span class="number">0</span>xffff</span><br><span class="line">    <span class="attr">answer</span> = answer &gt;&gt; <span class="number">8</span> | (answer &lt;&lt; <span class="number">8</span> &amp; <span class="number">0</span>xff00)</span><br><span class="line">    return answer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def receiveOnePing(mySocket, ID, timeout, destAddr):</span><br><span class="line">    <span class="attr">timeLeft</span> = timeout</span><br><span class="line"></span><br><span class="line">    while <span class="number">1</span>:</span><br><span class="line">        <span class="attr">startedSelect</span> = time.time()</span><br><span class="line">        <span class="attr">whatReady</span> = select.select([mySocket], [], [], timeLeft)</span><br><span class="line">        <span class="attr">howLongInSelect</span> = (time.time() - startedSelect)</span><br><span class="line">        <span class="keyword">if</span> whatReady[<span class="number">0</span>] == []:  <span class="comment"># Timeout</span></span><br><span class="line">            return <span class="string">&quot;Request timed out.&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">timeReceived</span> = time.time()</span><br><span class="line">        recPacket, <span class="attr">addr</span> = mySocket.recvfrom(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">        <span class="attr">header</span> = recPacket[<span class="number">20</span>:<span class="number">28</span>]</span><br><span class="line">        header_type, header_code, header_checksum, header_packet_ID, <span class="attr">header_sequence</span> = struct.unpack(<span class="string">&quot;bbHHh&quot;</span>, header)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(header_type != <span class="number">0</span> <span class="literal">or</span> header_code != <span class="number">0</span> <span class="literal">or</span> header_packet_ID != ID <span class="literal">or</span> header_sequence != <span class="number">1</span>):</span><br><span class="line">            return <span class="string">&quot;Receive error.&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">timeLeft</span> = timeLeft - howLongInSelect</span><br><span class="line">        <span class="keyword">if</span> timeLeft &lt;= <span class="number">0</span>:</span><br><span class="line">            return <span class="string">&quot;Request timed out.&quot;</span></span><br><span class="line">        return <span class="number">1</span> - timeLeft</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def sendOnePing(mySocket, destAddr, ID):</span><br><span class="line">    <span class="comment"># Header is type (8), code (8), checksum (16), id (16), sequence (16)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">myChecksum</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment"># Make a dummy header with a 0 checksum.</span></span><br><span class="line">    <span class="comment"># 创建一个带有0校验和的伪头。</span></span><br><span class="line">    <span class="comment"># struct -- Interpret strings as packed binary data</span></span><br><span class="line">    <span class="comment"># struct-将字符串解释为打包的二进制数据</span></span><br><span class="line">    <span class="attr">header</span> = struct.pack(<span class="string">&quot;bbHHh&quot;</span>, ICMP_ECHO_REQUEST, <span class="number">0</span>, myChecksum, ID, <span class="number">1</span>)</span><br><span class="line">    <span class="attr">data</span> = struct.pack(<span class="string">&quot;d&quot;</span>, time.time())</span><br><span class="line">    <span class="comment"># Calculate the checksum on the data and the dummy header.</span></span><br><span class="line">    <span class="comment"># 计算数据和虚拟头的校验和。</span></span><br><span class="line">    <span class="attr">myChecksum</span> = checksum(header + data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get the right checksum, and put in the header</span></span><br><span class="line">    <span class="keyword">if</span> sys.<span class="attr">platform</span> == &#x27;darwin&#x27;:</span><br><span class="line">        <span class="attr">myChecksum</span> = socket.htons(myChecksum) &amp; <span class="number">0</span>xffff</span><br><span class="line">        <span class="comment"># Convert 16-bit integers from host to network byte order.</span></span><br><span class="line">        <span class="comment"># 将主机的16位整数转换为网络字节顺序。</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="attr">myChecksum</span> = socket.htons(myChecksum)</span><br><span class="line"></span><br><span class="line">    <span class="attr">header</span> = struct.pack(<span class="string">&quot;bbHHh&quot;</span>, ICMP_ECHO_REQUEST, <span class="number">0</span>, myChecksum, ID, <span class="number">1</span>)</span><br><span class="line">    <span class="attr">packet</span> = header + data</span><br><span class="line"></span><br><span class="line">    mySocket.sendto(packet, (destAddr, <span class="number">1</span>))  <span class="comment"># AF_INET address must be tuple, not str</span></span><br><span class="line">    <span class="comment"># Both LISTS and TUPLES consist of a number of objects</span></span><br><span class="line">    <span class="comment"># which can be referenced by their position number within the object</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def doOnePing(destAddr, timeout):</span><br><span class="line">    <span class="attr">icmp</span> = socket.getprotobyname(<span class="string">&quot;icmp&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="attr">mySocket</span> = socket.socket(socket.AF_INET, socket.SOCK_RAW, icmp)</span><br><span class="line"></span><br><span class="line">    <span class="attr">myID</span> = os.getpid() &amp; <span class="number">0</span>xFFFF  <span class="comment"># Return the current process i</span></span><br><span class="line">    sendOnePing(mySocket, destAddr, myID)</span><br><span class="line">    <span class="attr">delay</span> = receiveOnePing(mySocket, myID, timeout, destAddr)</span><br><span class="line"></span><br><span class="line">    mySocket.close()</span><br><span class="line">    return delay</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def ping(host, <span class="attr">timeout=1):</span></span><br><span class="line">    <span class="comment"># timeout=1 means: If one second goes by without a reply from the server,</span></span><br><span class="line">    <span class="comment"># the client assumes that either the client’s ping or the server’s pong is lost</span></span><br><span class="line">    <span class="comment"># timeout = 1 表示：如果一秒钟没有收到服务器的答复，则客户端会认为客户端的ping或服务器的pong丢失了</span></span><br><span class="line">    <span class="attr">dest</span> = socket.gethostbyname(host)</span><br><span class="line">    print(<span class="string">&quot;正在 Ping&quot;</span>, host, <span class="string">&quot;[&quot;</span>, dest, <span class="string">&quot;] :&quot;</span>)</span><br><span class="line">    <span class="comment"># Send ping requests to a server separated by approximately one second</span></span><br><span class="line">    <span class="comment"># 将ping请求发送到间隔约一秒钟的服务器</span></span><br><span class="line">    <span class="attr">num</span> = <span class="number">4</span></span><br><span class="line">    <span class="attr">lost</span> = <span class="number">0</span></span><br><span class="line">    <span class="attr">delayList</span> = []</span><br><span class="line">    for i <span class="keyword">in</span> range(num):</span><br><span class="line">        <span class="attr">delay</span> = doOnePing(dest, timeout)</span><br><span class="line">        <span class="keyword">if</span>(type(delay) == str):</span><br><span class="line">            print(delay)</span><br><span class="line">            <span class="attr">lost</span> = lost + <span class="number">1</span></span><br><span class="line">            continue</span><br><span class="line">        <span class="attr">delay</span> = int(delay * <span class="number">1000</span>)</span><br><span class="line">        delayList.append(delay)</span><br><span class="line">        print(<span class="string">&quot;来自&quot;</span>, dest, <span class="string">&quot;的回复: 时间=&quot;</span>, delay, <span class="string">&quot;ms&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)  <span class="comment"># one second</span></span><br><span class="line">    print(dest, <span class="string">&quot;的 Ping 统计信息:&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;\t数据包: 已发送 =&quot;</span>, num, <span class="string">&quot;，已接收 =&quot;</span>, num - lost, <span class="string">&quot;，丢失 =&quot;</span>, lost, <span class="string">&quot;(&quot;</span>, lost/num * <span class="number">100</span>, <span class="string">&quot;% 丢失)&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(delayList):</span><br><span class="line">        print(<span class="string">&quot;往返行程的估计时间(以毫秒为单位):&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;\t最短 =&quot;</span>, min(delayList), <span class="string">&quot;ms，最长 =&quot;</span>, max(delayList), <span class="string">&quot;ms，平均 =&quot;</span>, sum(delayList)/len(delayList), <span class="string">&quot;ms&quot;</span>)</span><br><span class="line"></span><br><span class="line">ping(<span class="string">&quot;qq.com&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>2.你的程序只能检测ICMP超时。修改Ping程序，解析ICMP响应错误代码，并向用户显示相应的错误结果。ICMP响应错误码示例有0：目标网络无法到达可达，1：目标主机无法到达。</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对代码进行了少部分改动</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">import</span> socket</span><br><span class="line"><span class="built_in">import</span> os</span><br><span class="line"><span class="built_in">import</span> sys</span><br><span class="line"><span class="built_in">import</span> struct</span><br><span class="line"><span class="built_in">import</span> time</span><br><span class="line"><span class="built_in">import</span> select</span><br><span class="line"><span class="built_in">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="attr">ICMP_ECHO_REQUEST</span> = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def checksum(strCheck):</span><br><span class="line">    <span class="attr">csum</span> = <span class="number">0</span></span><br><span class="line">    <span class="attr">countTo</span> = (len(strCheck) / <span class="number">2</span>) * <span class="number">2</span></span><br><span class="line">    <span class="attr">count</span> = <span class="number">0</span></span><br><span class="line">    while count &lt; countTo:</span><br><span class="line">        <span class="attr">thisVal</span> = strCheck[count + <span class="number">1</span>] * <span class="number">256</span> + strCheck[count]</span><br><span class="line">        <span class="attr">csum</span> = csum + thisVal</span><br><span class="line">        <span class="attr">csum</span> = csum &amp; <span class="number">0</span>xffffffff</span><br><span class="line">        <span class="attr">count</span> = count + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> countTo &lt; len(strCheck):</span><br><span class="line">        <span class="attr">csum</span> = csum + strCheck[len(strCheck) - <span class="number">1</span>]</span><br><span class="line">        <span class="attr">csum</span> = csum &amp; <span class="number">0</span>xffffffff</span><br><span class="line"></span><br><span class="line">    <span class="attr">csum</span> = (csum &gt;&gt; <span class="number">16</span>) + (csum &amp; <span class="number">0</span>xffff)</span><br><span class="line">    <span class="attr">csum</span> = csum + (csum &gt;&gt; <span class="number">16</span>)</span><br><span class="line">    <span class="attr">answer</span> = ~csum</span><br><span class="line">    <span class="attr">answer</span> = answer &amp; <span class="number">0</span>xffff</span><br><span class="line">    <span class="attr">answer</span> = answer &gt;&gt; <span class="number">8</span> | (answer &lt;&lt; <span class="number">8</span> &amp; <span class="number">0</span>xff00)</span><br><span class="line">    return answer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def receiveOnePing(mySocket, ID, timeout, destAddr):</span><br><span class="line">    <span class="attr">timeLeft</span> = timeout</span><br><span class="line"></span><br><span class="line">    while <span class="number">1</span>:</span><br><span class="line">        <span class="attr">startedSelect</span> = time.time()</span><br><span class="line">        <span class="attr">whatReady</span> = select.select([mySocket], [], [], timeLeft)</span><br><span class="line">        <span class="attr">howLongInSelect</span> = (time.time() - startedSelect)</span><br><span class="line">        <span class="keyword">if</span> whatReady[<span class="number">0</span>] == []:  <span class="comment"># Timeout</span></span><br><span class="line">            return <span class="string">&quot;Request timed out.&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">timeReceived</span> = time.time()</span><br><span class="line">        recPacket, <span class="attr">addr</span> = mySocket.recvfrom(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">        <span class="attr">header</span> = recPacket[<span class="number">20</span>:<span class="number">28</span>]</span><br><span class="line">        header_type, header_code, header_checksum, header_packet_ID, <span class="attr">header_sequence</span> = struct.unpack(<span class="string">&quot;bbHHh&quot;</span>, header)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(header_type != <span class="number">0</span> <span class="literal">or</span> header_code != <span class="number">0</span> <span class="literal">or</span> header_packet_ID != ID <span class="literal">or</span> header_sequence != <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span>(<span class="attr">header_type</span> == <span class="number">3</span> <span class="literal">and</span> <span class="attr">header_code</span> == <span class="number">0</span>):</span><br><span class="line">                return <span class="string">&quot;目的网络不可达&quot;</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="attr">header_type</span> == <span class="number">3</span> <span class="literal">and</span> <span class="attr">header_code</span> == <span class="number">1</span>):</span><br><span class="line">                return <span class="string">&quot;目的主机不可达&quot;</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="attr">header_type</span> == <span class="number">3</span> <span class="literal">and</span> <span class="attr">header_code</span> == <span class="number">2</span>):</span><br><span class="line">                return <span class="string">&quot;目的协议不可达&quot;</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="attr">header_type</span> == <span class="number">3</span> <span class="literal">and</span> <span class="attr">header_code</span> == <span class="number">3</span>):</span><br><span class="line">                return <span class="string">&quot;目的端口不可达&quot;</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="attr">header_type</span> == <span class="number">3</span> <span class="literal">and</span> <span class="attr">header_code</span> == <span class="number">6</span>):</span><br><span class="line">                return <span class="string">&quot;目的网络未知&quot;</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="attr">header_type</span> == <span class="number">3</span> <span class="literal">and</span> <span class="attr">header_code</span> == <span class="number">7</span>):</span><br><span class="line">                return <span class="string">&quot;目的主机未知&quot;</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="attr">header_type</span> == <span class="number">4</span> <span class="literal">and</span> <span class="attr">header_code</span> == <span class="number">0</span>):</span><br><span class="line">                return <span class="string">&quot;源抑制&quot;</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="attr">header_type</span> == <span class="number">12</span> <span class="literal">and</span> <span class="attr">header_code</span> == <span class="number">0</span>):</span><br><span class="line">                return <span class="string">&quot;IP首部损坏&quot;</span></span><br><span class="line">            return <span class="string">&quot;Request error.&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">timeLeft</span> = timeLeft - howLongInSelect</span><br><span class="line">        <span class="keyword">if</span> timeLeft &lt;= <span class="number">0</span>:</span><br><span class="line">            return <span class="string">&quot;Request timed out.&quot;</span></span><br><span class="line">        return <span class="number">1</span> - timeLeft</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def sendOnePing(mySocket, destAddr, ID):</span><br><span class="line">    <span class="comment"># Header is type (8), code (8), checksum (16), id (16), sequence (16)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">myChecksum</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment"># Make a dummy header with a 0 checksum.</span></span><br><span class="line">    <span class="comment"># 创建一个带有0校验和的伪头。</span></span><br><span class="line">    <span class="comment"># struct -- Interpret strings as packed binary data</span></span><br><span class="line">    <span class="comment"># struct-将字符串解释为打包的二进制数据</span></span><br><span class="line">    <span class="attr">header</span> = struct.pack(<span class="string">&quot;bbHHh&quot;</span>, ICMP_ECHO_REQUEST, <span class="number">0</span>, myChecksum, ID, <span class="number">1</span>)</span><br><span class="line">    <span class="attr">data</span> = struct.pack(<span class="string">&quot;d&quot;</span>, time.time())</span><br><span class="line">    <span class="comment"># Calculate the checksum on the data and the dummy header.</span></span><br><span class="line">    <span class="comment"># 计算数据和虚拟头的校验和。</span></span><br><span class="line">    <span class="attr">myChecksum</span> = checksum(header + data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get the right checksum, and put in the header</span></span><br><span class="line">    <span class="keyword">if</span> sys.<span class="attr">platform</span> == &#x27;darwin&#x27;:</span><br><span class="line">        <span class="attr">myChecksum</span> = socket.htons(myChecksum) &amp; <span class="number">0</span>xffff</span><br><span class="line">        <span class="comment"># Convert 16-bit integers from host to network byte order.</span></span><br><span class="line">        <span class="comment"># 将主机的16位整数转换为网络字节顺序。</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="attr">myChecksum</span> = socket.htons(myChecksum)</span><br><span class="line"></span><br><span class="line">    <span class="attr">header</span> = struct.pack(<span class="string">&quot;bbHHh&quot;</span>, ICMP_ECHO_REQUEST, <span class="number">0</span>, myChecksum, ID, <span class="number">1</span>)</span><br><span class="line">    <span class="attr">packet</span> = header + data</span><br><span class="line"></span><br><span class="line">    mySocket.sendto(packet, (destAddr, <span class="number">1</span>))  <span class="comment"># AF_INET address must be tuple, not str</span></span><br><span class="line">    <span class="comment"># Both LISTS and TUPLES consist of a number of objects</span></span><br><span class="line">    <span class="comment"># which can be referenced by their position number within the object</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def doOnePing(destAddr, timeout):</span><br><span class="line">    <span class="attr">icmp</span> = socket.getprotobyname(<span class="string">&quot;icmp&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="attr">mySocket</span> = socket.socket(socket.AF_INET, socket.SOCK_RAW, icmp)</span><br><span class="line"></span><br><span class="line">    <span class="attr">myID</span> = os.getpid() &amp; <span class="number">0</span>xFFFF  <span class="comment"># Return the current process i</span></span><br><span class="line">    sendOnePing(mySocket, destAddr, myID)</span><br><span class="line">    <span class="attr">delay</span> = receiveOnePing(mySocket, myID, timeout, destAddr)</span><br><span class="line"></span><br><span class="line">    mySocket.close()</span><br><span class="line">    return delay</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def ping(host, <span class="attr">timeout=1):</span></span><br><span class="line">    <span class="comment"># timeout=1 means: If one second goes by without a reply from the server,</span></span><br><span class="line">    <span class="comment"># the client assumes that either the client’s ping or the server’s pong is lost</span></span><br><span class="line">    <span class="comment"># timeout = 1 表示：如果一秒钟没有收到服务器的答复，则客户端会认为客户端的ping或服务器的pong丢失了</span></span><br><span class="line">    <span class="attr">dest</span> = socket.gethostbyname(host)</span><br><span class="line">    print(<span class="string">&quot;正在 Ping&quot;</span>, host, <span class="string">&quot;[&quot;</span>, dest, <span class="string">&quot;] :&quot;</span>)</span><br><span class="line">    <span class="comment"># Send ping requests to a server separated by approximately one second</span></span><br><span class="line">    <span class="comment"># 将ping请求发送到间隔约一秒钟的服务器</span></span><br><span class="line">    <span class="attr">num</span> = <span class="number">4</span></span><br><span class="line">    <span class="attr">lost</span> = <span class="number">0</span></span><br><span class="line">    <span class="attr">delayList</span> = []</span><br><span class="line">    for i <span class="keyword">in</span> range(num):</span><br><span class="line">        <span class="attr">delay</span> = doOnePing(dest, timeout)</span><br><span class="line">        <span class="keyword">if</span>(type(delay) == str):</span><br><span class="line">            print(delay)</span><br><span class="line">            <span class="attr">lost</span> = lost + <span class="number">1</span></span><br><span class="line">            continue</span><br><span class="line">        <span class="attr">delay</span> = int(delay * <span class="number">1000</span>)</span><br><span class="line">        delayList.append(delay)</span><br><span class="line">        print(<span class="string">&quot;来自&quot;</span>, dest, <span class="string">&quot;的回复: 时间=&quot;</span>, delay, <span class="string">&quot;ms&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)  <span class="comment"># one second</span></span><br><span class="line">    print(dest, <span class="string">&quot;的 Ping 统计信息:&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;\t数据包: 已发送 =&quot;</span>, num, <span class="string">&quot;，已接收 =&quot;</span>, num - lost, <span class="string">&quot;，丢失 =&quot;</span>, lost, <span class="string">&quot;(&quot;</span>, lost/num * <span class="number">100</span>, <span class="string">&quot;% 丢失)&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(delayList):</span><br><span class="line">        print(<span class="string">&quot;往返行程的估计时间(以毫秒为单位):&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;\t最短 =&quot;</span>, min(delayList), <span class="string">&quot;ms，最长 =&quot;</span>, max(delayList), <span class="string">&quot;ms，平均 =&quot;</span>, sum(delayList)/len(delayList), <span class="string">&quot;ms&quot;</span>)</span><br><span class="line"></span><br><span class="line">ping(<span class="string">&quot;www.12306.cn&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><br><br><br>因特网控制报文协议（ICMP）<br>ICMP Header</p>
<p>ICMP报头从IP报头的第160位开始（使用IP选项除外）。<br><img src="/WestRoute.github.io/images/icmp.png"><br>Type - ICMP 类型。<br>Code - 给定ICMP类型的子类型。<br>Checksum - 用ICMP头和ICMP数据计算出来的错误校验和，计算时将本字段值作为0输入。<br>ID - ID值，应在回显的情况下返回。<br>Sequence - 序列值，应在回显的情况下返回。<br>Echo Request</p>
<p>回显请求是一个ICMP消息，其数据将在回显（”pong”）中接收回来。主机必须响应所有回显请求，并在回显响应中包含从请求消息中接收到的所有数据。</p>
<ol>
<li><p>Type必须置为8。</p>
</li>
<li><p>Code必须置为0。</p>
</li>
<li><p>客户机可以使用ID值和Sequence值来匹配响应和请求。实际上，大多数Linux系统都为每一个ping进程使用唯一ID值，Sequence值在该进程中是不断递增的。Windows使用一个固定ID值，该标识符在Windows版本之间变化，并且只在启动时重置Sequence值。</p>
</li>
<li><p>接收到的回显响应必须完全包含回显请求中的数据。<br>Echo Reply 回显响应是用于响应回显请求而生成的ICMP消息，所有主机和路由器都必须实现该功能。</p>
</li>
<li><p>Type和Code必须置为0。</p>
</li>
<li><p>ID值和Sequence值用于让客户端匹配回显请求和回显响应。</p>
</li>
<li><p>回显响应必须完全包含接收到的回显请求中的数据。</p>
</li>
</ol>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>网络通讯</category>
        <category>A-Top-Down-Approach</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络编程作业 01</title>
    <url>/WestRoute.github.io/2021/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%BD%9C%E4%B8%9A01/</url>
    <content><![CDATA[<p>参考来自：<a href="https://github.com/jzplp/Computer-Network-A-Top-Down-Approach-Answer">Computer Network A Top-Down Approach Practice Answer-github</a></p>
<span id="more"></span>
<h2 id="chapter01"><a href="#chapter01" class="headerlink" title="chapter01"></a>chapter01</h2><p><strong>因特网协议栈中的5个层次</strong><br>应用层：提供了一些网络应用程序和应用层协议。<br>运输层：在应用程序端点之间传输运输层报文。主要有TCP和UDP两种协议。<br>网络层：负责将分组从一台主机移动到另一台主机。<br>链路层：沿着路经将数据报传递给下一层结点。<br>物理层：将整个帧从一个网络元素移动到邻近的网络元素。</p>
<table>
<thead>
<tr>
<th>OSI</th>
<th>TCP/IP</th>
</tr>
</thead>
<tbody><tr>
<td>应用层</td>
<td>应用层</td>
</tr>
<tr>
<td>表示层</td>
<td>-</td>
</tr>
<tr>
<td>会话层</td>
<td>-</td>
</tr>
<tr>
<td>运输层</td>
<td>运输层</td>
</tr>
<tr>
<td>网络层</td>
<td>网际层IP</td>
</tr>
<tr>
<td>数据连接层</td>
<td>网络连接层</td>
</tr>
<tr>
<td>物理层</td>
<td>-</td>
</tr>
</tbody></table>
<br>

<p><strong>R12. 与分组交换网络相比，电路交换网络有哪些优点？在电路交换网络中，TDM比FDM有哪些优点？</strong></p>
<p>答案：<br>电路交换网络适合实时服务。交付质量高。<br>TDM比FDM的优点如下：（来源于网络）</p>
<ol>
<li>当发生拥塞等网络问题时，TDM中的数据丢失可能只会是一部分，而FDM中就可能是大部分或全部。</li>
<li>TDM适合数字信号传输，而FDM适合模拟信号传输，因为现在通信网络多是传输数字信号，所以TDM比FDM好。</li>
<li>因为频分复用连接建立后，当中途没有数据传输时，他所占有的频段带宽不能被其他连接使用，故可能存在空置，而在时分复用的统计时分模式下，连接建立后，当某个连接暂时不用传输数据时可以少分时间片或者不分，即其时隙的分配时“按需分配”，这样就让出了相应的传输时间给其他连接。<br></li>
</ol>
<p><strong>R16. 考虑从某源主机跨越一条固定路由向某目的主机发送一分组。列出端到端时延组成部分。这些时延中的哪些是固定的，哪些是变化的？</strong></p>
<p>答案：<br>端到端时延组成部分有：结点处理时延，排队时延，传输时延，传播时延。<br>时延中固定的部分有：传输时延 传播时延<br>时延中变化的部分有：结点处理时延 排队时延<br><br><br>怎么查看自己电脑的IP地址：ipconfig/all<br><br><br></p>
<h2 id="chapter-02"><a href="#chapter-02" class="headerlink" title="chapter 02"></a>chapter 02</h2><h3 id="套接字编程作业1：Web服务器"><a href="#套接字编程作业1：Web服务器" class="headerlink" title="套接字编程作业1：Web服务器"></a>套接字编程作业1：Web服务器</h3><p>开发一个处理一个HTTP请求的Web服务器。</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment">#import socket module</span></span><br><span class="line"><span class="built_in">from</span> <span class="built_in">socket</span> import *</span><br><span class="line">serverSocket = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM)</span><br><span class="line"><span class="comment">#Prepare a sever socket</span></span><br><span class="line">serverPort = <span class="number">80</span></span><br><span class="line">serverSocket.bind((<span class="string">&quot;&quot;</span>, serverPort))</span><br><span class="line">serverSocket.listen(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    <span class="comment">#Establish the connection</span></span><br><span class="line">    print(<span class="string">&#x27;Ready to serve...&#x27;</span>)</span><br><span class="line">    connectionSocket, addr = serverSocket.accept()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        message = connectionSocket.recv(<span class="number">1024</span>)</span><br><span class="line">        filename = message.<span class="built_in">split</span>()[<span class="number">1</span>]</span><br><span class="line">        f = <span class="built_in">open</span>(filename[<span class="number">1</span>:])</span><br><span class="line">        outputdata = f.<span class="built_in">read</span>()</span><br><span class="line">        f.<span class="built_in">close</span>()</span><br><span class="line">        <span class="comment">#Send one HTTP header line into socket</span></span><br><span class="line">        outputdata = <span class="string">&#x27;HTTP/1.1 200 OK\r\n\r\n&#x27;</span> + outputdata</span><br><span class="line">        <span class="comment">#Send the content of the requested file to the client</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="built_in">len</span>(outputdata)):</span><br><span class="line">            connectionSocket.<span class="built_in">send</span>(outputdata[i].encode())</span><br><span class="line">        connectionSocket.<span class="built_in">close</span>()</span><br><span class="line">        print(<span class="string">&quot;OK!&quot;</span>)</span><br><span class="line">    except IOError:</span><br><span class="line">        <span class="comment">#Send response message for file not found</span></span><br><span class="line">        outputdata = <span class="string">&#x27;HTTP/1.1 404 Not Found\r\n\r\n&#x27;</span></span><br><span class="line">        <span class="comment">#Close client socket</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="built_in">len</span>(outputdata)):</span><br><span class="line">            connectionSocket.<span class="built_in">send</span>(outputdata[i].encode())</span><br><span class="line">        connectionSocket.<span class="built_in">close</span>()</span><br><span class="line">serverSocket.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure>
<p><br><br></p>
<p><strong>可选练习</strong><br>目前，这个Web服务器一次只处理一个HTTP请求。请实现一个能够同时处理多个请求的多线程服务器。使用线程，首先创建一个主线程，在固定端口监听客户端请求。当从客户端收到TCP连接请求时，它将通过另一个端口建立TCP连接，并在另外的单独线程中为客户端请求提供服务。这样在每个请求/响应对的独立线程中将有一个独立的TCP连接。<br><br><br><br>不使用浏览器，编写自己的HTTP客户端来测试你的服务器。您的客户端将使用一个TCP连接用于连接到服务器，向服务器发送HTTP请求，并将服务器响应显示出来。您可以假定发送的HTTP请求将使用GET方法。 客户端应使用命令行参数指定服务器IP地址或主机名，服务器正在监听的端口，以及被请求对象在服务器上的路径。以下是运行客户端的输入命令格式。<br><br></p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="title">client</span>.py server_host server_<span class="keyword">port</span> filename</span><br></pre></td></tr></table></figure>

<p>Answer:</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment">#import socket module</span></span><br><span class="line"><span class="built_in">from</span> <span class="built_in">socket</span> import *</span><br><span class="line">import threading</span><br><span class="line">def webProcess(connectionSocket):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        message = connectionSocket.recv(<span class="number">1024</span>)</span><br><span class="line">        filename = message.<span class="built_in">split</span>()[<span class="number">1</span>]</span><br><span class="line">        f = <span class="built_in">open</span>(filename[<span class="number">1</span>:], <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">        outputdata = f.<span class="built_in">read</span>()</span><br><span class="line">        outputdata = outputdata.decode()</span><br><span class="line">        f.<span class="built_in">close</span>()</span><br><span class="line">        <span class="comment">#Send one HTTP header line into socket</span></span><br><span class="line">        outputdata = <span class="string">&#x27;HTTP/1.1 200 OK\r\n\r\n&#x27;</span> + outputdata</span><br><span class="line">        <span class="comment">#Send the content of the requested file to the client</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="built_in">len</span>(outputdata)):</span><br><span class="line">            connectionSocket.<span class="built_in">send</span>(outputdata[i].encode())</span><br><span class="line">        connectionSocket.<span class="built_in">close</span>()</span><br><span class="line">        print(<span class="string">&quot;OK!&quot;</span>)</span><br><span class="line">    except IOError:</span><br><span class="line">        <span class="comment">#Send response message for file not found</span></span><br><span class="line">        outputdata = <span class="string">&#x27;HTTP/1.1 404 Not Found\r\n\r\n&#x27;</span></span><br><span class="line">        <span class="comment">#Close client socket</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="built_in">len</span>(outputdata)):</span><br><span class="line">            connectionSocket.<span class="built_in">send</span>(outputdata[i].encode())</span><br><span class="line">        connectionSocket.<span class="built_in">close</span>()</span><br><span class="line"></span><br><span class="line">serverSocket = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM)</span><br><span class="line"><span class="comment">#Prepare a sever socket</span></span><br><span class="line">serverPort = <span class="number">80</span></span><br><span class="line">serverSocket.bind((<span class="string">&quot;&quot;</span>, serverPort))</span><br><span class="line">serverSocket.listen(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    <span class="comment">#Establish the connection</span></span><br><span class="line">    print(<span class="string">&#x27;Ready to serve...&#x27;</span>)</span><br><span class="line">    connectionSocket, addr = serverSocket.accept()</span><br><span class="line">    thread = threading.Thread(target = webProcess, args = (connectionSocket, ))</span><br><span class="line">    thread.<span class="built_in">start</span>()</span><br><span class="line">serverSocket.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure>
<h3 id="套接字编程作业2：UDPping程序"><a href="#套接字编程作业2：UDPping程序" class="headerlink" title="套接字编程作业2：UDPping程序"></a>套接字编程作业2：UDPping程序</h3><p>客户端向服务器发送10次ping。因为UDP是不可靠的协议，所以从客户端发送到服务器的数据包可能在网络中丢失。因此，客户端不能无限期地等待ping消息的回复。客户等待服务器回答的时间至多为一秒，如果在一秒内没有收到回复，您的客户端程序应该假定数据包在网络传输期间丢失。<br><br>您需要查找Python文档，以了解如何在数据报套接字上设置超时值。</p>
<p>具体来说，您的客户端程序应该<br>1.使用UDP发送ping消息（注意：不同于TCP，您不需要首先建立连接，因为UDP是无连接协议。）<br>2.从服务器输出响应消息<br>3.如果从服务器受到响应，则计算并输出每个数据包的往返时延（RTT）（以秒为单位），<br>4.否则输出“请求超时”<br>在开发过程中，您应该先在计算机上运行UDPPingerServer.py，并通过向localhost（或127.0.0.1）发送数据包来测试客户端。调试完成代码后，您应该能看到ping服务器和ping客户端在不同机器上通过网络进行通信。<br><br></p>
<p><strong>其他阅读链接：</strong><a href="/WestRoute.github.io/2021/12/17/ping/" title="ping">ping</a><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#UDPPingerClient.py</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">serverName = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">serverPort = <span class="number">12000</span></span><br><span class="line">clientSocket = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    time1 = time.time()</span><br><span class="line">    outputdata = <span class="string">&#x27;Ping &#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>(time1)</span><br><span class="line">    <span class="comment"># 设置超时 单位秒</span></span><br><span class="line">    clientSocket.settimeout(<span class="number">1</span>)</span><br><span class="line">    clientSocket.sendto(outputdata.encode(), (serverName, serverPort))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        modifiedMessage, serverAddress = clientSocket.recvfrom(<span class="number">2048</span>)</span><br><span class="line">        timeDiff = time.time() - time1</span><br><span class="line">        <span class="built_in">print</span>(modifiedMessage.decode() + <span class="string">&quot; RTT: &quot;</span> + <span class="built_in">str</span>(timeDiff))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;lost &quot;</span> + <span class="built_in">str</span>(i))</span><br></pre></td></tr></table></figure>
<p><strong>可选练习</strong><br><br><br>1.目前，程序计算每个数据包的往返时间（RTT），并单独打印出来。请按照标准ping程序的模式修改。您需要在客户端每次ping后显示最小，最大和平均RTT。另外，还需计算丢包率（百分比）。<br><br></p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="meta">#UDPPingerClient.py</span></span><br><span class="line"><span class="keyword">from</span> socket import *</span><br><span class="line">import <span class="built_in">time</span></span><br><span class="line"><span class="built_in">serverName</span> = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">serverPort = <span class="number">12000</span></span><br><span class="line">clientSocket = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    time1 = <span class="built_in">time</span>.<span class="built_in">time</span>()</span><br><span class="line">    outputdata = <span class="string">&#x27;Heartbeat &#x27;</span> + <span class="built_in">str</span>(time1)</span><br><span class="line">    clientSocket.sendto(outputdata.encode(), (<span class="built_in">serverName</span>, serverPort))</span><br><span class="line">    <span class="built_in">time</span>.<span class="built_in">sleep</span>(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<br>
2.UDP Ping的另一个类似的应用是UDP Heartbeat。<br><br>心跳可用于检查应用程序是否已启动并运行，并报告单向丢包。客户端在UDP数据包中将一个序列号和当前时间戳发送给正在监听客户端心跳的服务器。服务器收到数据包后，计算时差，报告丢包（若发生）。如果心跳数据包在指定的一段时间内丢失，我们可以假设客户端应用程序已经停止。实现UDP Heartbeat（客户端和服务器端）。<br><br>您需要修改给定的UDPPingerServer.py和您自己的UDP ping客户端。
<br><br>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment">#改为Python3格式</span></span><br><span class="line"><span class="comment">#UDPPingerServer.py</span></span><br><span class="line"><span class="comment">#We will need the following module to generate randomized lost packets</span></span><br><span class="line">import <span class="built_in">time</span></span><br><span class="line"><span class="built_in">from</span> <span class="built_in">socket</span> import *</span><br><span class="line"></span><br><span class="line"><span class="comment">#Create a UDP socket</span></span><br><span class="line"><span class="comment">#Notice the use of SOCK_DGRAM for UDP packets</span></span><br><span class="line">serverSocket = <span class="built_in">socket</span>(AF_INET, SOCK_DGRAM)</span><br><span class="line"><span class="comment">#Assign IP address and port number to socket</span></span><br><span class="line">serverSocket.bind((<span class="string">&#x27;&#x27;</span>, <span class="number">12000</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    message, address = serverSocket.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    message = message.decode()</span><br><span class="line">    message = message.<span class="built_in">split</span>()[<span class="number">1</span>]</span><br><span class="line">    timeDiff = <span class="built_in">time</span>.<span class="built_in">time</span>() - float(message)</span><br><span class="line">    print(<span class="string">&quot;receive RTT:&quot;</span>, timeDiff)</span><br></pre></td></tr></table></figure>

<h3 id="套接字编程作业3：邮件客户端"><a href="#套接字编程作业3：邮件客户端" class="headerlink" title="套接字编程作业3：邮件客户端"></a>套接字编程作业3：邮件客户端</h3><p>您的任务是开发一个简单的邮件客户端，将邮件发送给任意收件人。您的客户端将需要连接到邮件服务器，使用SMTP协议与邮件服务器进行对话，并向邮件服务器发送电子邮件。 Python提供了一个名为smtplib的模块，它内置了使用SMTP协议发送邮件的方法。但是我们不会在本实验中使用此模块，因为它隐藏了SMTP和套接字编程的细节。<br><br><br><br>为了限制垃圾邮件，一些邮件服务器不接受来源随意的TCP连接。对于下面所述的实验，您可能需要尝试连接到您的大学邮件服务器和流行的Webmail服务器（如AOL邮件服务器）。您也可以尝试从您的家和您的大学校园进行连接。<br><br></p>
<details><summary>邮件客户端的Python代码框架(可点开查看)</summary>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">from <span class="keyword">socket</span> import *</span><br><span class="line">msg = <span class="string">&quot;\r\n I love computer networks!&quot;</span></span><br><span class="line">endmsg = <span class="string">&quot;\r\n.\r\n&quot;</span></span><br><span class="line"><span class="comment"># Choose a mail server (e.g. Google mail server) and call it mailserver </span></span><br><span class="line">mailserver = <span class="comment">#Fill in start   #Fill in end</span></span><br><span class="line"><span class="comment"># Create socket called clientSocket and establish a TCP connection with mailserver</span></span><br><span class="line"><span class="comment">#Fill in start</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Fill in end</span></span><br><span class="line"><span class="keyword">recv</span> = clientSocket.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="keyword">recv</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] != <span class="string">&#x27;220&#x27;</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&#x27;220 reply not received from server.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send HELO command and print server response.</span></span><br><span class="line">heloCommand = <span class="string">&#x27;HELO Alice\r\n&#x27;</span></span><br><span class="line">clientSocket.send(heloCommand)</span><br><span class="line">recv1 = clientSocket.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">print</span> recv1</span><br><span class="line"><span class="keyword">if</span> recv1[:<span class="number">3</span>] != <span class="string">&#x27;250&#x27;</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&#x27;250 reply not received from server.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send MAIL FROM command and print server response.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send RCPT TO command and print server response.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send DATA command and print server response.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send message data.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Message ends with a single period.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send QUIT command and get server response.</span></span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>
</details>
<br>答案
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#改为Python3格式</span></span><br><span class="line">from <span class="keyword">socket</span> import *</span><br><span class="line">import base64</span><br><span class="line"><span class="comment"># Choose a mail server (e.g. Google mail server) and call it mailserver</span></span><br><span class="line">mailserver = <span class="string">&quot;smtp.163.com&quot;</span></span><br><span class="line">mailUser = <span class="string">&#x27;jz163wy&#x27;</span></span><br><span class="line">mailFromAddress = <span class="string">&#x27;jz163wy@163.com&#x27;</span></span><br><span class="line">mailPassWord = <span class="string">&#x27;******&#x27;</span></span><br><span class="line">mailToAddress = <span class="string">&#x27;ecnujz@qq.com&#x27;</span></span><br><span class="line"></span><br><span class="line">msg = <span class="string">&#x27;FROM: &#x27;</span> + mailFromAddress + <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">msg += <span class="string">&#x27;TO: &#x27;</span> + mailToAddress +  <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">msg += <span class="string">&#x27;Subject: &#x27;</span> + <span class="string">&#x27;test&#x27;</span> +  <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">msg += <span class="string">&quot;\r\n I love computer networks!&quot;</span></span><br><span class="line">endmsg = <span class="string">&quot;\r\n.\r\n&quot;</span></span><br><span class="line"><span class="comment">#Create socket called clientSocket and establish a TCP connection with mailserver</span></span><br><span class="line">clientSocket = <span class="keyword">socket</span>(AF_INET, SOCK_STREAM)</span><br><span class="line">clientSocket.connect((mailserver, <span class="number">25</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">recv</span> = clientSocket.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">recv</span> = recv.decode()</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] != <span class="string">&#x27;220&#x27;</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&#x27;220 reply not received from server.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Send HELO command and print server response.</span></span><br><span class="line">heloCommand = <span class="string">&#x27;HELO mailserver\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocket.send(heloCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;250&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#登录过程</span></span><br><span class="line">loginCommand = <span class="string">&#x27;auth login\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocket.send(loginCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;334&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#邮箱账户经过base64编码</span></span><br><span class="line">userCommand = base64.b64encode(mailUser.encode()) + b<span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocket.send(userCommand)</span><br><span class="line">    <span class="keyword">recv</span> = clientSocket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;334&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#邮箱密码经过base64编码 这里不展示密码了</span></span><br><span class="line">passCommand = base64.b64encode(mailPassWord.encode()) + b<span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocket.send(passCommand)</span><br><span class="line">    <span class="keyword">recv</span> = clientSocket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;235&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send MAIL FROM command and print server response.</span></span><br><span class="line">MFCommand = <span class="string">&#x27;MAIL FROM: &lt;&#x27;</span>+ mailFromAddress + <span class="string">&#x27;&gt;\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocket.send(MFCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;250&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send RCPT TO command and print server response.</span></span><br><span class="line">RTCommand = <span class="string">&#x27;RCPT TO: &lt;&#x27;</span>+ mailToAddress + <span class="string">&#x27;&gt;\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocket.send(RTCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;250&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send DATA command and print server response.</span></span><br><span class="line">DATACommand = <span class="string">&#x27;DATA\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocket.send(DATACommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;354&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send message data.</span></span><br><span class="line">clientSocket.send(msg.encode())</span><br><span class="line"></span><br><span class="line"><span class="comment">#Message ends with a single period.</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocket.send(endmsg.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;250&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send QUIT command and get server response.</span></span><br><span class="line">QUITCommand = <span class="string">&#x27;QUIT\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocket.send(QUITCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;221&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<br>

<p><strong>可选练习</strong><br>1.类似Google邮件的服务器（如地址：smtp.gmail.com，端口：587））要求您的客户端在发送MAIL FROM命令之前，需要为了身份验证和安全原因添加传输层安全（TLS）或安全套接字层（SSL）。将TLS / SSL命令添加到现有的命令中，并使用上述地址和端口为Google邮件服务器实现客户端。<br><br><br></p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#改为Python3格式</span></span><br><span class="line">from <span class="keyword">socket</span> import *</span><br><span class="line">import base64</span><br><span class="line">import ssl</span><br><span class="line"></span><br><span class="line"><span class="comment">#Choose a mail server (e.g. Google mail server) and call it mailserver</span></span><br><span class="line">mailserver = <span class="string">&quot;smtp.163.com&quot;</span></span><br><span class="line">mailUser = <span class="string">&#x27;jz163wy&#x27;</span></span><br><span class="line">mailFromAddress = <span class="string">&#x27;jz163wy@163.com&#x27;</span></span><br><span class="line">mailPassWord = <span class="string">&#x27;******&#x27;</span></span><br><span class="line">mailToAddress = <span class="string">&#x27;ecnujz@qq.com&#x27;</span></span><br><span class="line"></span><br><span class="line">msg = <span class="string">&#x27;FROM: &#x27;</span> + mailFromAddress + <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">msg += <span class="string">&#x27;TO: &#x27;</span> + mailToAddress +  <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">msg += <span class="string">&#x27;Subject: &#x27;</span> + <span class="string">&#x27;test&#x27;</span> +  <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">msg += <span class="string">&quot;\r\n I love computer networks!&quot;</span></span><br><span class="line">endmsg = <span class="string">&quot;\r\n.\r\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Create socket called clientSocket and establish a TCP connection with mailserver</span></span><br><span class="line">context = ssl.create_default_context()</span><br><span class="line">clientSocket = <span class="keyword">socket</span>(AF_INET, SOCK_STREAM)</span><br><span class="line">clientSocket.connect((mailserver, <span class="number">465</span>))</span><br><span class="line">clientSocketSSL = context.wrap_socket(clientSocket, server_hostname=mailserver)</span><br><span class="line"></span><br><span class="line"><span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">recv</span> = recv.decode()</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] != <span class="string">&#x27;220&#x27;</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&#x27;220 reply not received from server.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Send HELO command and print server response.</span></span><br><span class="line">heloCommand = <span class="string">&#x27;HELO mailserver\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(heloCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;250&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#登录过程</span></span><br><span class="line">loginCommand = <span class="string">&#x27;auth login\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(loginCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;334&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#邮箱账户经过base64编码</span></span><br><span class="line">userCommand = base64.b64encode(mailUser.encode()) + b<span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(userCommand)</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;334&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#邮箱密码经过base64编码 这里不展示密码了</span></span><br><span class="line">passCommand = base64.b64encode(mailPassWord.encode()) + b<span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(passCommand)</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;235&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send MAIL FROM command and print server response.</span></span><br><span class="line">MFCommand = <span class="string">&#x27;MAIL FROM: &lt;&#x27;</span>+ mailFromAddress + <span class="string">&#x27;&gt;\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(MFCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;250&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send RCPT TO command and print server response.</span></span><br><span class="line">RTCommand = <span class="string">&#x27;RCPT TO: &lt;&#x27;</span>+ mailToAddress + <span class="string">&#x27;&gt;\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(RTCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;250&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send DATA command and print server response.</span></span><br><span class="line">DATACommand = <span class="string">&#x27;DATA\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(DATACommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;354&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send message data.</span></span><br><span class="line">clientSocketSSL.send(msg.encode())</span><br><span class="line"></span><br><span class="line"><span class="comment">#Message ends with a single period.</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(endmsg.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;250&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send QUIT command and get server response.</span></span><br><span class="line">QUITCommand = <span class="string">&#x27;QUIT\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(QUITCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;221&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">clientSocketSSL.close()</span><br></pre></td></tr></table></figure>
<br>
2.您当前的SMTP邮件客户端只能在电子邮件正文中发送文本消息。修改您的客户端，使其可以发送包含文本和图像的电子邮件。
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#改为Python3格式</span></span><br><span class="line">from <span class="keyword">socket</span> import *</span><br><span class="line">import base64</span><br><span class="line">import ssl</span><br><span class="line"></span><br><span class="line"><span class="comment">#Choose a mail server (e.g. Google mail server) and call it mailserver</span></span><br><span class="line">mailserver = <span class="string">&quot;smtp.163.com&quot;</span></span><br><span class="line">mailUser = <span class="string">&#x27;jz163wy&#x27;</span></span><br><span class="line">mailFromAddress = <span class="string">&#x27;jz163wy@163.com&#x27;</span></span><br><span class="line">mailPassWord = <span class="string">&#x27;******&#x27;</span></span><br><span class="line">mailToAddress = <span class="string">&#x27;ecnujz@qq.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#transfer image and html</span></span><br><span class="line">with <span class="keyword">open</span>(<span class="string">&quot;timg.jpg&quot;</span>,<span class="string">&quot;rb&quot;</span>) as f:</span><br><span class="line">    image_data = base64.b64encode(f.read())</span><br><span class="line">with <span class="keyword">open</span>(<span class="string">&quot;hello.html&quot;</span>,<span class="string">&quot;rb&quot;</span>) as f:</span><br><span class="line">    html_data = base64.b64encode(f.read())</span><br><span class="line"></span><br><span class="line"><span class="comment">#构造邮件正文</span></span><br><span class="line">msg = <span class="string">&#x27;FROM: &#x27;</span> + mailFromAddress + <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">msg += <span class="string">&#x27;TO: &#x27;</span> + mailToAddress +  <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">msg += <span class="string">&#x27;Subject: &#x27;</span> + <span class="string">&#x27;text and picture&#x27;</span> +  <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">msg += <span class="string">&#x27;Content-Type:multipart/related; boundary=&quot;----=_NextPart_000_0012345JZ&quot;\r\n&#x27;</span></span><br><span class="line">msg += <span class="string">&#x27;MIME-Version: 1.0\r\n&#x27;</span></span><br><span class="line">msg += <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line">msg = msg.encode()</span><br><span class="line">msg += <span class="string">&#x27;------=_NextPart_000_0012345JZ\r\n&#x27;</span>.encode()</span><br><span class="line">msg += <span class="string">&#x27;Content-Type: text/html; charset=UTF-8\r\n&#x27;</span>.encode()</span><br><span class="line">msg += <span class="string">&#x27;Content-Transfer-Encoding: base64\r\n&#x27;</span>.encode()</span><br><span class="line">msg += <span class="string">&#x27;\r\n&#x27;</span>.encode()</span><br><span class="line">msg += html_data</span><br><span class="line">msg += <span class="string">&#x27;\r\n&#x27;</span>.encode()</span><br><span class="line">msg += <span class="string">&#x27;\r\n&#x27;</span>.encode()</span><br><span class="line">msg += <span class="string">&#x27;------=_NextPart_000_0012345JZ\r\n&#x27;</span>.encode()</span><br><span class="line">msg += <span class="string">&#x27;Content-Type: image/jpeg; name=&quot;timg.jpg&quot;\r\n&#x27;</span>.encode()</span><br><span class="line">msg += <span class="string">&#x27;Content-Transfer-Encoding: base64\r\n&#x27;</span>.encode()</span><br><span class="line">msg += <span class="string">&#x27;Content-ID: JZJZJZJZJZJZJZJZ&#x27;</span>.encode()</span><br><span class="line">msg += <span class="string">&#x27;\r\n&#x27;</span>.encode()</span><br><span class="line">msg += image_data + <span class="string">&quot;\r\n&quot;</span>.encode()</span><br><span class="line">msg += <span class="string">&#x27;\r\n&#x27;</span>.encode()</span><br><span class="line">msg += <span class="string">&#x27;------=_NextPart_000_0012345JZ--\r\n&#x27;</span>.encode()</span><br><span class="line">endmsg = <span class="string">&quot;\r\n.\r\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Create socket called clientSocket and establish a TCP connection with mailserver</span></span><br><span class="line">context = ssl.create_default_context()</span><br><span class="line">clientSocket = <span class="keyword">socket</span>(AF_INET, SOCK_STREAM)</span><br><span class="line">clientSocket.connect((mailserver, <span class="number">465</span>))</span><br><span class="line">clientSocketSSL = context.wrap_socket(clientSocket, server_hostname=mailserver)</span><br><span class="line"></span><br><span class="line"><span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">recv</span> = recv.decode()</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] != <span class="string">&#x27;220&#x27;</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&#x27;220 reply not received from server.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Send HELO command and print server response.</span></span><br><span class="line">heloCommand = <span class="string">&#x27;HELO mailserver\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(heloCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;250&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#登录过程</span></span><br><span class="line">loginCommand = <span class="string">&#x27;auth login\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(loginCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;334&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#邮箱账户经过base64编码</span></span><br><span class="line">userCommand = base64.b64encode(mailUser.encode()) + b<span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(userCommand)</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;334&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#邮箱密码经过base64编码 这里不展示密码了</span></span><br><span class="line">passCommand = base64.b64encode(mailPassWord.encode()) + b<span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(passCommand)</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;235&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send MAIL FROM command and print server response.</span></span><br><span class="line">MFCommand = <span class="string">&#x27;MAIL FROM: &lt;&#x27;</span>+ mailFromAddress + <span class="string">&#x27;&gt;\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(MFCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;250&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send RCPT TO command and print server response.</span></span><br><span class="line">RTCommand = <span class="string">&#x27;RCPT TO: &lt;&#x27;</span>+ mailToAddress + <span class="string">&#x27;&gt;\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(RTCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;250&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send DATA command and print server response.</span></span><br><span class="line">DATACommand = <span class="string">&#x27;DATA\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(DATACommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;354&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send message data.</span></span><br><span class="line">clientSocketSSL.send(msg)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Message ends with a single period.</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(endmsg.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;250&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Send QUIT command and get server response.</span></span><br><span class="line">QUITCommand = <span class="string">&#x27;QUIT\r\n&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    clientSocketSSL.send(QUITCommand.encode())</span><br><span class="line">    <span class="keyword">recv</span> = clientSocketSSL.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">recv</span> = recv.decode()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">recv</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">recv</span>[:<span class="number">3</span>] == <span class="string">&#x27;221&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">clientSocketSSL.close()</span><br></pre></td></tr></table></figure> 
<br>

<h3 id="套接字编程作业4：多线程Web代理服务器"><a href="#套接字编程作业4：多线程Web代理服务器" class="headerlink" title="套接字编程作业4：多线程Web代理服务器"></a>套接字编程作业4：多线程Web代理服务器</h3><p>客户端通过代理服务器请求对象。代理服务器将客户端的请求转发到Web服务器。然后，Web服务器将生成响应消息并将其传递给代理服务器，代理服务器又将其发送给客户端。</p>
<h4 id="运行代理服务器"><a href="#运行代理服务器" class="headerlink" title="运行代理服务器"></a>运行代理服务器</h4><p>使用命令行模式运行您的代理服务器程序，然后从您的浏览器发送一个网页请求，将IP地址和端口号指向代理服务器。 例如：<a href="http://localhost:8888/www.google.com">http://localhost:8888/www.google.com</a> 为了在独立的计算机上使用浏览器和代理服务器， 因此，在运行代理服务器时，您需要将“localhost”更换为代理服务器的所在机器的IP地址。您还需要将“8888”替换您在代理服务程序中使用的端口号。</p>
<h4 id="配置浏览器"><a href="#配置浏览器" class="headerlink" title="配置浏览器"></a>配置浏览器</h4><p>您还可以直接配置您的Web浏览器以使用您的代理服务。 具体取决于您的浏览器。在Internet Explorer中，您可以在 工具 &gt; Internet选项 &gt; 连接选项卡 &gt; LAN设置 中设置代理。 在Netscape（包括衍生浏览器，如Mozilla）中，您可以在 工具 &gt; 选项 &gt; 高级选项 &gt; 网络选项 &gt; 连接设置 中设置代理。 在这两种情况下你都需要给出代理服务器的地址和端口号。你首先要毫无问题地在同一台计算机上运行代理服务器和浏览器。这种方式下，使用代理服务器获取网页就只需提供页面的URL。 例如 <a href="http://www.google.com/">http://www.google.com</a><br><br><br></p>
<details><summary>代理服务器的Python代码框架(可点开查看)</summary>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt;= <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Usage : &quot;python ProxyServer.py server_ip&quot;\n[server_ip : It is the IP Address Of Proxy Server&#x27;</span></span><br><span class="line">	sys.exit(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># Create a server socket, bind it to a port and start listening</span></span><br><span class="line">tcpSerSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"><span class="comment"># Fill in start.</span></span><br><span class="line"><span class="comment"># Fill in end.</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">	<span class="comment"># Strat receiving data from the client</span></span><br><span class="line">	<span class="built_in">print</span> <span class="string">&#x27;Ready to serve...&#x27;</span></span><br><span class="line">	tcpCliSock, addr = tcpSerSock.accept()</span><br><span class="line">	<span class="built_in">print</span> <span class="string">&#x27;Received a connection from:&#x27;</span>, addr</span><br><span class="line">	message = <span class="comment"># Fill in start. # Fill in end.</span></span><br><span class="line">	<span class="built_in">print</span> message</span><br><span class="line">	<span class="comment"># Extract the filename from the given message</span></span><br><span class="line">	<span class="built_in">print</span> message.split()[<span class="number">1</span>]</span><br><span class="line">	filename = message.split()[<span class="number">1</span>].partition(<span class="string">&quot;/&quot;</span>)[<span class="number">2</span>]</span><br><span class="line">	<span class="built_in">print</span> filename</span><br><span class="line">	fileExist = <span class="string">&quot;false&quot;</span></span><br><span class="line">	filetouse = <span class="string">&quot;/&quot;</span> + filename</span><br><span class="line">	<span class="built_in">print</span> filetouse</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		<span class="comment"># Check wether the file exist in the cache</span></span><br><span class="line">		f = <span class="built_in">open</span>(filetouse[<span class="number">1</span>:], <span class="string">&quot;r&quot;</span>)</span><br><span class="line">		outputdata = f.readlines()</span><br><span class="line">		fileExist = <span class="string">&quot;true&quot;</span></span><br><span class="line">		<span class="comment"># ProxyServer finds a cache hit and generates a response message</span></span><br><span class="line">		tcpCliSock.send(<span class="string">&quot;HTTP/1.0 200 OK\r\n&quot;</span>)</span><br><span class="line">		tcpCliSock.send(<span class="string">&quot;Content-Type:text/html\r\n&quot;</span>)</span><br><span class="line">		<span class="comment"># Fill in start.</span></span><br><span class="line">		<span class="comment"># Fill in end.</span></span><br><span class="line">			<span class="built_in">print</span> <span class="string">&#x27;Read from cache&#x27;</span></span><br><span class="line">	<span class="comment"># Error handling for file not found in cache</span></span><br><span class="line">	<span class="keyword">except</span> IOError:</span><br><span class="line">		<span class="keyword">if</span> fileExist == <span class="string">&quot;false&quot;</span>:</span><br><span class="line">			<span class="comment"># Create a socket on the proxyserver</span></span><br><span class="line">			c = <span class="comment"># Fill in start. # Fill in end.</span></span><br><span class="line">			hostn = filename.replace(<span class="string">&quot;www.&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">1</span>) </span><br><span class="line">			<span class="built_in">print</span> hostn</span><br><span class="line">			<span class="keyword">try</span>:</span><br><span class="line">				<span class="comment"># Connect to the socket to port 80</span></span><br><span class="line">				<span class="comment"># Fill in start.</span></span><br><span class="line">				<span class="comment"># Fill in end.</span></span><br><span class="line">				<span class="comment"># Create a temporary file on this socket and ask port 80</span></span><br><span class="line">				<span class="keyword">for</span> the file requested by the client</span><br><span class="line">				fileobj = c.makefile(<span class="string">&#x27;r&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">				fileobj.write(<span class="string">&quot;GET &quot;</span>+<span class="string">&quot;http://&quot;</span> + filename + <span class="string">&quot; HTTP/1.0\n\n&quot;</span>)</span><br><span class="line">				<span class="comment"># Read the response into buffer</span></span><br><span class="line">				<span class="comment"># Fill in start.</span></span><br><span class="line">				<span class="comment"># Fill in end.</span></span><br><span class="line">				<span class="comment"># Create a new file in the cache for the requested file.</span></span><br><span class="line">				<span class="comment"># Also send the response in the buffer to client socket and the corresponding file in the cache</span></span><br><span class="line">				tmpFile = <span class="built_in">open</span>(<span class="string">&quot;./&quot;</span> + filename,<span class="string">&quot;wb&quot;</span>)</span><br><span class="line">				<span class="comment"># Fill in start.</span></span><br><span class="line">				<span class="comment"># Fill in end.</span></span><br><span class="line">			<span class="keyword">except</span>:</span><br><span class="line">				<span class="built_in">print</span> <span class="string">&quot;Illegal request&quot;</span></span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="comment"># HTTP response message for file not found</span></span><br><span class="line">			<span class="comment"># Fill in start.</span></span><br><span class="line">			<span class="comment"># Fill in end.</span></span><br><span class="line">	<span class="comment"># Close the client and the server sockets</span></span><br><span class="line">	tcpCliSock.close()</span><br><span class="line"><span class="comment"># Fill in start.</span></span><br><span class="line"><span class="comment"># Fill in end.</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>
</details>
<br><br>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#改为Python3格式</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt;= <span class="number">1</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;Usage : &quot;python ProxyServer.py server_ip&quot;\n[server_ip : It is the IP Address Of Proxy Server&#x27;</span>)</span><br><span class="line">	sys.exit(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#Create a server socket, bind it to a port and start listening</span></span><br><span class="line">tcpSerSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">tcpSerPort = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">tcpSerSock.bind((<span class="string">&quot;&quot;</span>, tcpSerPort))</span><br><span class="line"><span class="built_in">print</span>(tcpSerPort)</span><br><span class="line">tcpSerSock.listen(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">	<span class="comment"># Strat receiving data from the client</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;Ready to serve...&#x27;</span>)</span><br><span class="line">	tcpCliSock, addr = tcpSerSock.accept()</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;Received a connection from:&#x27;</span>, addr)</span><br><span class="line">	message = tcpCliSock.recv(<span class="number">1024</span>)</span><br><span class="line">	message = message.decode()</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;message:&quot;</span>, message)</span><br><span class="line">	<span class="keyword">if</span>(message == <span class="string">&#x27;&#x27;</span>):</span><br><span class="line">		<span class="keyword">continue</span></span><br><span class="line">	<span class="comment"># Extract the filename from the given message</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;message.split()[1]:&quot;</span>, message.split()[<span class="number">1</span>])</span><br><span class="line">	filename = message.split()[<span class="number">1</span>].partition(<span class="string">&quot;/&quot;</span>)[<span class="number">2</span>]</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;filename:&quot;</span>, filename)</span><br><span class="line">	fileExist = <span class="string">&quot;false&quot;</span></span><br><span class="line">	filetouse = <span class="string">&quot;/&quot;</span> + filename</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;filetouse:&quot;</span>, filetouse)</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		<span class="comment"># Check wether the file exist in the cache</span></span><br><span class="line">		f = <span class="built_in">open</span>(<span class="string">&quot;WEB/&quot;</span> + filetouse[<span class="number">1</span>:], <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">		outputdata = f.read()</span><br><span class="line">		f.close()</span><br><span class="line">		fileExist = <span class="string">&quot;true&quot;</span></span><br><span class="line">		<span class="comment">#ProxyServer finds a cache hit and generates a response message</span></span><br><span class="line">		tcpCliSock.send(<span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span>.encode())</span><br><span class="line">		tcpCliSock.send(<span class="string">&quot;Content-Type:text/html\r\n\r\n&quot;</span>.encode())</span><br><span class="line">		tcpCliSock.send(outputdata)</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;Read from cache&#x27;</span>)</span><br><span class="line">	<span class="comment">#Error handling for file not found in cache</span></span><br><span class="line">	<span class="keyword">except</span> IOError:</span><br><span class="line">		<span class="keyword">if</span> fileExist == <span class="string">&quot;false&quot;</span>:</span><br><span class="line">			<span class="comment">#Create a socket on the proxyserver</span></span><br><span class="line">			c = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">			hostn = filename.replace(<span class="string">&quot;www.&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">1</span>)</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;hostn:&quot;</span>, hostn)</span><br><span class="line">			<span class="keyword">try</span>:</span><br><span class="line">				<span class="comment">#Connect to the socket to port 80</span></span><br><span class="line">				serverName = hostn.partition(<span class="string">&quot;/&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">				serverPort = <span class="number">80</span></span><br><span class="line">				<span class="built_in">print</span>((serverName, serverPort))</span><br><span class="line">				c.connect((serverName, serverPort))</span><br><span class="line">				askFile = <span class="string">&#x27;&#x27;</span>.join(filename.partition(<span class="string">&#x27;/&#x27;</span>)[<span class="number">1</span>:])</span><br><span class="line">				<span class="built_in">print</span>(<span class="string">&quot;askFile:&quot;</span>, askFile)</span><br><span class="line">				<span class="comment">#Create a temporary file on this socket and ask port 80</span></span><br><span class="line">				<span class="comment">#for the file requested by the client</span></span><br><span class="line">				fileobj = c.makefile(<span class="string">&#x27;rwb&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">				fileobj.write(<span class="string">&quot;GET &quot;</span>.encode() + askFile.encode() + <span class="string">&quot; HTTP/1.0\r\nHost: &quot;</span>.encode() + serverName.encode() + <span class="string">&quot;\r\n\r\n&quot;</span>.encode())</span><br><span class="line">				<span class="comment">#Read the response into buffer</span></span><br><span class="line">				serverResponse = fileobj.read()</span><br><span class="line">				<span class="comment">#Create a new file in the cache for the requested file.</span></span><br><span class="line">				<span class="comment">#Also send the response in the buffer to client socket and the corresponding file in the cache</span></span><br><span class="line">				filename = <span class="string">&quot;WEB/&quot;</span> + filename</span><br><span class="line">				filesplit = filename.split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">				<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(filesplit) - <span class="number">1</span>):</span><br><span class="line">					<span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;/&quot;</span>.join(filesplit[<span class="number">0</span>:i+<span class="number">1</span>])):</span><br><span class="line">						os.makedirs(<span class="string">&quot;/&quot;</span>.join(filesplit[<span class="number">0</span>:i+<span class="number">1</span>]))</span><br><span class="line">				tmpFile = <span class="built_in">open</span>(filename, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">				<span class="built_in">print</span>(serverResponse)</span><br><span class="line">				serverResponse = serverResponse.split(<span class="string">b&#x27;\r\n\r\n&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">				<span class="built_in">print</span>(serverResponse)</span><br><span class="line">				tmpFile.write(serverResponse)</span><br><span class="line">				tmpFile.close()</span><br><span class="line">				tcpCliSock.send(<span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span>.encode())</span><br><span class="line">				tcpCliSock.send(<span class="string">&quot;Content-Type:text/html\r\n\r\n&quot;</span>.encode())</span><br><span class="line">				tcpCliSock.send(serverResponse)</span><br><span class="line">			<span class="keyword">except</span>:</span><br><span class="line">				<span class="built_in">print</span>(<span class="string">&quot;Illegal request&quot;</span>)</span><br><span class="line">			c.close()</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="comment">#HTTP response message for file not found</span></span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;NET ERROR&quot;</span>)</span><br><span class="line">	<span class="comment">#Close the client and the server sockets</span></span><br><span class="line">	tcpCliSock.close()</span><br><span class="line">tcpSerSock.close()</span><br></pre></td></tr></table></figure>
<br><br>
**可选练习**
1.目前代理服务器不能处理错误。这可能会导致一些问题，当客户端请求一个不可用的对象时，由于“404 Not Found”响应通常没有响应正文，而代理服务器会假设有正文并尝试读取它。当前代理服务器只支持HTTP GET方法。通过添加请求体来增加对POST的支持。
<br>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#改为Python3格式</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt;= <span class="number">1</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;Usage : &quot;python ProxyServer.py server_ip&quot;\n[server_ip : It is the IP Address Of Proxy Server&#x27;</span>)</span><br><span class="line">	sys.exit(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#Create a server socket, bind it to a port and start listening</span></span><br><span class="line">tcpSerSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">tcpSerPort = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">tcpSerSock.bind((<span class="string">&quot;&quot;</span>, tcpSerPort))</span><br><span class="line"><span class="built_in">print</span>(tcpSerPort)</span><br><span class="line">tcpSerSock.listen(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">	<span class="comment"># Strat receiving data from the client</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;Ready to serve...&#x27;</span>)</span><br><span class="line">	tcpCliSock, addr = tcpSerSock.accept()</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;Received a connection from:&#x27;</span>, addr)</span><br><span class="line">	message = tcpCliSock.recv(<span class="number">1024</span>)</span><br><span class="line">	message = message.decode()</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;message:&quot;</span>, message)</span><br><span class="line">	<span class="keyword">if</span>(message == <span class="string">&#x27;&#x27;</span>):</span><br><span class="line">		<span class="keyword">continue</span></span><br><span class="line">	<span class="comment"># Extract the filename from the given message</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;message.split()[1]:&quot;</span>, message.split()[<span class="number">1</span>])</span><br><span class="line">	filename = message.split()[<span class="number">1</span>].partition(<span class="string">&quot;/&quot;</span>)[<span class="number">2</span>]</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;filename:&quot;</span>, filename)</span><br><span class="line">	fileExist = <span class="string">&quot;false&quot;</span></span><br><span class="line">	filetouse = <span class="string">&quot;/&quot;</span> + filename</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;filetouse:&quot;</span>, filetouse)</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		<span class="comment"># Check wether the file exist in the cache</span></span><br><span class="line">		f = <span class="built_in">open</span>(<span class="string">&quot;WEB/&quot;</span> + filetouse[<span class="number">1</span>:], <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">		outputdata = f.read()</span><br><span class="line">		f.close()</span><br><span class="line">		fileExist = <span class="string">&quot;true&quot;</span></span><br><span class="line">		<span class="comment">#ProxyServer finds a cache hit and generates a response message</span></span><br><span class="line">		tcpCliSock.send(<span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span>.encode())</span><br><span class="line">		tcpCliSock.send(<span class="string">&quot;Content-Type:text/html\r\n\r\n&quot;</span>.encode())</span><br><span class="line">		tcpCliSock.send(outputdata)</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;Read from cache&#x27;</span>)</span><br><span class="line">	<span class="comment">#Error handling for file not found in cache</span></span><br><span class="line">	<span class="keyword">except</span> IOError:</span><br><span class="line">		<span class="keyword">if</span> fileExist == <span class="string">&quot;false&quot;</span>:</span><br><span class="line">			<span class="comment">#Create a socket on the proxyserver</span></span><br><span class="line">			c = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">			hostn = filename.replace(<span class="string">&quot;www.&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">1</span>)</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;hostn:&quot;</span>, hostn)</span><br><span class="line">			<span class="keyword">try</span>:</span><br><span class="line">				<span class="comment">#Connect to the socket to port 80</span></span><br><span class="line">				serverName = hostn.partition(<span class="string">&quot;/&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">				serverPort = <span class="number">80</span></span><br><span class="line">				<span class="built_in">print</span>((serverName, serverPort))</span><br><span class="line">				c.connect((serverName, serverPort))</span><br><span class="line">				askFile = <span class="string">&#x27;&#x27;</span>.join(filename.partition(<span class="string">&#x27;/&#x27;</span>)[<span class="number">1</span>:])</span><br><span class="line">				<span class="built_in">print</span>(<span class="string">&quot;askFile:&quot;</span>, askFile)</span><br><span class="line">				<span class="comment">#Create a temporary file on this socket and ask port 80</span></span><br><span class="line">				<span class="comment">#for the file requested by the client</span></span><br><span class="line">				fileobj = c.makefile(<span class="string">&#x27;rwb&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">				fileobj.write(<span class="string">&quot;GET &quot;</span>.encode() + askFile.encode() + <span class="string">&quot; HTTP/1.0\r\nHost: &quot;</span>.encode() + serverName.encode() + <span class="string">&quot;\r\n\r\n&quot;</span>.encode())</span><br><span class="line">				<span class="comment">#Read the response into buffer</span></span><br><span class="line">				serverResponse = fileobj.read()</span><br><span class="line">				<span class="comment">#Create a new file in the cache for the requested file.</span></span><br><span class="line">				<span class="comment">#Also send the response in the buffer to client socket and the corresponding file in the cache</span></span><br><span class="line">				filename = <span class="string">&quot;WEB/&quot;</span> + filename</span><br><span class="line">				filesplit = filename.split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">				<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(filesplit) - <span class="number">1</span>):</span><br><span class="line">					<span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;/&quot;</span>.join(filesplit[<span class="number">0</span>:i+<span class="number">1</span>])):</span><br><span class="line">						os.makedirs(<span class="string">&quot;/&quot;</span>.join(filesplit[<span class="number">0</span>:i+<span class="number">1</span>]))</span><br><span class="line">				tmpFile = <span class="built_in">open</span>(filename, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">				<span class="built_in">print</span>(serverResponse)</span><br><span class="line">				serverResponse = serverResponse.split(<span class="string">b&#x27;\r\n\r\n&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">				<span class="built_in">print</span>(serverResponse)</span><br><span class="line">				tmpFile.write(serverResponse)</span><br><span class="line">				tmpFile.close()</span><br><span class="line">				tcpCliSock.send(<span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span>.encode())</span><br><span class="line">				tcpCliSock.send(<span class="string">&quot;Content-Type:text/html\r\n\r\n&quot;</span>.encode())</span><br><span class="line">				tcpCliSock.send(serverResponse)</span><br><span class="line">			<span class="keyword">except</span>:</span><br><span class="line">				<span class="built_in">print</span>(<span class="string">&quot;Illegal request&quot;</span>)</span><br><span class="line">			c.close()</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="comment">#HTTP response message for file not found</span></span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;NET ERROR&quot;</span>)</span><br><span class="line">	<span class="comment">#Close the client and the server sockets</span></span><br><span class="line">	tcpCliSock.close()</span><br><span class="line">tcpSerSock.close()</span><br></pre></td></tr></table></figure>

<br>
3.缓存：<br>
每当客户端发出特定请求时，典型的代理服务器会缓存网页。缓存的基本功能如下：当代理获得一个请求时，它将检查请求的对象是否已经在缓存中，如果是，则从缓存返回对象，从而不用联系服务器。<br><br>
如果对象未被缓存，则代理从服务器获取该对象，向客户端返回该对象，并缓存一个拷贝以备将来的请求。在实际环境下，代理服务器必须验证被缓存的响应是否仍然有效，并且它们能对客户端正确响应。您可以在RFC 2068中阅读有关缓存及其在HTTP中实现方式的更多细节。<br><br>
添加上述简单的缓存功能。您不需要实现任何替换或验证策略。然而您需要实现的是，将请求和响应写入磁盘（即缓存）并能从磁盘中获取它们，用于缓存被请求命中时。为此，您需要在代理中实现一些内部数据结构，以便跟踪哪些请求处于缓存中时，以及它们在磁盘上的位置。您也可以将此数据结构保存在内存中，因为没有必要关机之后持续保存这些数据。
<br>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment">#找不到网站测试</span></span><br><span class="line"><span class="comment">#改为Python3格式</span></span><br><span class="line"><span class="built_in">from</span> <span class="built_in">socket</span> import *</span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt;= <span class="number">1</span>:</span><br><span class="line">	print(<span class="string">&#x27;Usage : &quot;python ProxyServer.py server_ip&quot;\n[server_ip : It is the IP Address Of Proxy Server&#x27;</span>)</span><br><span class="line">	sys.exit(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#Create a server socket, bind it to a port and start listening</span></span><br><span class="line">tcpSerSock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM)</span><br><span class="line">tcpSerPort = int(sys.argv[<span class="number">1</span>])</span><br><span class="line">tcpSerSock.bind((<span class="string">&quot;&quot;</span>, tcpSerPort))</span><br><span class="line">print(tcpSerPort)</span><br><span class="line">tcpSerSock.listen(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="comment">#Strat receiving data from the client</span></span><br><span class="line">    print(<span class="string">&#x27;Ready to serve...&#x27;</span>)</span><br><span class="line">    tcpCliSock, addr = tcpSerSock.accept()</span><br><span class="line">    print(<span class="string">&#x27;Received a connection from:&#x27;</span>, addr)</span><br><span class="line">    message = tcpCliSock.recv(<span class="number">1024</span>)</span><br><span class="line">    message = message.decode()</span><br><span class="line">    print(<span class="string">&quot;message:&quot;</span>, message)</span><br><span class="line">    <span class="keyword">if</span>(message == <span class="string">&#x27;&#x27;</span>):</span><br><span class="line">        continue</span><br><span class="line">    <span class="comment">#Extract the filename from the given message</span></span><br><span class="line">    print(<span class="string">&quot;message.split()[1]:&quot;</span>, message.<span class="built_in">split</span>()[<span class="number">1</span>])</span><br><span class="line">    filename = message.<span class="built_in">split</span>()[<span class="number">1</span>].partition(<span class="string">&quot;/&quot;</span>)[<span class="number">2</span>]</span><br><span class="line">    print(<span class="string">&quot;filename:&quot;</span>, filename)</span><br><span class="line">    fileExist = <span class="string">&quot;false&quot;</span></span><br><span class="line">    filetouse = <span class="string">&quot;/&quot;</span> + filename</span><br><span class="line">    print(<span class="string">&quot;filetouse:&quot;</span>, filetouse)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#Check wether the file exist in the cache</span></span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&quot;WEB/&quot;</span> + filetouse[<span class="number">1</span>:], <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">        outputdata = f.<span class="built_in">read</span>()</span><br><span class="line">        f.<span class="built_in">close</span>()</span><br><span class="line">        fileExist = <span class="string">&quot;true&quot;</span></span><br><span class="line">        <span class="comment"># ProxyServer finds a cache hit and generates a response message</span></span><br><span class="line">        tcpCliSock.<span class="built_in">send</span>(<span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span>.encode())</span><br><span class="line">        tcpCliSock.<span class="built_in">send</span>(<span class="string">&quot;Content-Type:text/html\r\n\r\n&quot;</span>.encode())</span><br><span class="line">        tcpCliSock.<span class="built_in">send</span>(outputdata)</span><br><span class="line">        print(<span class="string">&#x27;Read from cache&#x27;</span>)</span><br><span class="line">    <span class="comment">#Error handling for file not found in cache</span></span><br><span class="line">    except IOError:</span><br><span class="line">        <span class="keyword">if</span> fileExist == <span class="string">&quot;false&quot;</span>:</span><br><span class="line">            <span class="comment">#Create a socket on the proxyserver</span></span><br><span class="line">            c = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM)</span><br><span class="line">            hostn = filename.<span class="built_in">replace</span>(<span class="string">&quot;www.&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">1</span>)</span><br><span class="line">            print(<span class="string">&quot;hostn:&quot;</span>, hostn)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment">#Connect to the socket to port 80</span></span><br><span class="line">                serverName = hostn.partition(<span class="string">&quot;/&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">                serverPort = <span class="number">80</span></span><br><span class="line">                print((serverName, serverPort))</span><br><span class="line">                c.connect((serverName, serverPort))</span><br><span class="line">                askFile = <span class="string">&#x27;&#x27;</span>.join(filename.partition(<span class="string">&#x27;/&#x27;</span>)[<span class="number">1</span>:])</span><br><span class="line">                print(<span class="string">&quot;askFile:&quot;</span>, askFile)</span><br><span class="line">                <span class="comment">#Create a temporary file on this socket and ask port 80</span></span><br><span class="line">                <span class="comment">#for the file requested by the client</span></span><br><span class="line">                fileobj = c.makefile(<span class="string">&#x27;rwb&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">if</span>(message.<span class="built_in">split</span>()[<span class="number">0</span>] == <span class="string">&#x27;GET&#x27;</span>):</span><br><span class="line">                    fileobj.<span class="built_in">write</span>(<span class="string">&quot;GET &quot;</span>.encode() + askFile.encode() + <span class="string">&quot; HTTP/1.0\r\nHost: &quot;</span>.encode() + serverName.encode() + <span class="string">&quot;\r\n\r\n&quot;</span>.encode())</span><br><span class="line">                <span class="keyword">else</span>: <span class="comment">#POST</span></span><br><span class="line">                    fileobj.<span class="built_in">write</span>(</span><br><span class="line">                        <span class="string">&quot;POST &quot;</span>.encode() + askFile.encode() + <span class="string">&quot; HTTP/1.0\r\nHost: &quot;</span>.encode() + serverName.encode() + <span class="string">&quot;\r\n\r\n&quot;</span>.encode())</span><br><span class="line">                    fileobj.<span class="built_in">write</span>(message.<span class="built_in">split</span>(<span class="string">&quot;\r\n\r\n&quot;</span>)[<span class="number">1</span>].encode())</span><br><span class="line">                <span class="comment">#Read the response into buffer</span></span><br><span class="line">                serverResponse = fileobj.<span class="built_in">read</span>()</span><br><span class="line">                <span class="keyword">if</span> serverResponse.<span class="built_in">split</span>()[<span class="number">0</span>] != b<span class="string">&#x27;404&#x27;</span>:</span><br><span class="line">                    print(<span class="string">&#x27;404&#x27;</span>)</span><br><span class="line">                    tcpCliSock.<span class="built_in">send</span>(<span class="string">&quot;HTTP/1.1 404 Not Found\r\n\r\n&quot;</span>.encode())</span><br><span class="line">                    tcpCliSock.<span class="built_in">close</span>()</span><br><span class="line">                    continue</span><br><span class="line">                <span class="comment">#Create a new file in the cache for the requested file.</span></span><br><span class="line">                <span class="comment">#Also send the response in the buffer to client socket and the corresponding file in the cache</span></span><br><span class="line">                filename = <span class="string">&quot;WEB/&quot;</span> + filename</span><br><span class="line">                filesplit = filename.<span class="built_in">split</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="built_in">len</span>(filesplit) - <span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;/&quot;</span>.join(filesplit[<span class="number">0</span>:i+<span class="number">1</span>])):</span><br><span class="line">                        os.makedirs(<span class="string">&quot;/&quot;</span>.join(filesplit[<span class="number">0</span>:i+<span class="number">1</span>]))</span><br><span class="line">                tmpFile = <span class="built_in">open</span>(filename, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">                print(serverResponse)</span><br><span class="line">                serverResponse = serverResponse.<span class="built_in">split</span>(b<span class="string">&#x27;\r\n\r\n&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">                print(serverResponse)</span><br><span class="line">                tmpFile.<span class="built_in">write</span>(serverResponse)</span><br><span class="line">                tmpFile.<span class="built_in">close</span>()</span><br><span class="line">                tcpCliSock.<span class="built_in">send</span>(<span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span>.encode())</span><br><span class="line">                tcpCliSock.<span class="built_in">send</span>(<span class="string">&quot;Content-Type:text/html\r\n\r\n&quot;</span>.encode())</span><br><span class="line">                tcpCliSock.<span class="built_in">send</span>(serverResponse)</span><br><span class="line">            except:</span><br><span class="line">                print(<span class="string">&quot;Illegal request&quot;</span>)</span><br><span class="line">            c.<span class="built_in">close</span>()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#HTTP response message for file not found</span></span><br><span class="line">            print(<span class="string">&quot;NET ERROR&quot;</span>)</span><br><span class="line">    <span class="comment">#Close the client and the server sockets</span></span><br><span class="line">    tcpCliSock.<span class="built_in">close</span>()</span><br><span class="line">tcpSerSock.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>网络通讯</category>
        <category>A-Top-Down-Approach</category>
      </categories>
  </entry>
  <entry>
    <title>「コネクタオリジナルレシピ」を読んで</title>
    <url>/WestRoute.github.io/2021/12/09/%E3%80%8C%E3%82%B3%E3%83%8D%E3%82%AF%E3%82%BF%E3%82%AA%E3%83%AA%E3%82%B8%E3%83%8A%E3%83%AB%E3%83%AC%E3%82%B7%E3%83%94%E3%80%8D%E3%82%92%E8%AA%AD%E3%82%93%E3%81%A7/</url>
    <content><![CDATA[<h3 id="「コネクタオリジナルレシピ-初級編」を読んでのノートです。"><a href="#「コネクタオリジナルレシピ-初級編」を読んでのノートです。" class="headerlink" title="「コネクタオリジナルレシピ 初級編」を読んでのノートです。"></a>「コネクタオリジナルレシピ 初級編」を読んでのノートです。</h3><blockquote>
<p>ダウンロード:<a herf="https://ac-blog.panasonic.co.jp/ebook/connector_lp/">コネクタ初級編</a></p>
</blockquote>
<span id="more"></span> 
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>機器内接続のコネクタには、主に以下のようなコネクタが挙げられます。</p>
<h4 id="１．-カードエッジコネクタ"><a href="#１．-カードエッジコネクタ" class="headerlink" title="１． カードエッジコネクタ"></a>１． カードエッジコネクタ</h4><img src="/WestRoute.github.io/images/cardconnecter.png">
基板から簡単にケーブル出しができ、使い勝手がよいというメリットがありますが、基板の反りや加工公差を考慮しなくてはならず実装が難しいという難点があります。

<h4 id="２．-フラットケーブルコネクタ-flat-cable"><a href="#２．-フラットケーブルコネクタ-flat-cable" class="headerlink" title="２． フラットケーブルコネクタ(flat cable)"></a>２． フラットケーブルコネクタ(flat cable)</h4><img src="/WestRoute.github.io/images/flatcable.png">
ノイズを拾いやすいという難点

<h4 id="３．-2ピーススタッキングコネクタ"><a href="#３．-2ピーススタッキングコネクタ" class="headerlink" title="３． 2ピーススタッキングコネクタ"></a>３． 2ピーススタッキングコネクタ</h4><p>省スペース<br>基板対基板接続用コネクタ/基板対FPC接続用コネクタ</p>
<h4 id="４．-FPC・FFCコネクタ"><a href="#４．-FPC・FFCコネクタ" class="headerlink" title="４． FPC・FFCコネクタ"></a>４． FPC・FFCコネクタ</h4><p>FPCとはFlexible Printed Circuitの略です。<br>FFCとはFlexible Flat Cableの略です。<br><img src="/WestRoute.github.io/images/fpc1.png"><br><br><br><br></p>
<h3 id="「コネクタオリジナルレシピはじめての高速伝送編」を読んでのノートです。"><a href="#「コネクタオリジナルレシピはじめての高速伝送編」を読んでのノートです。" class="headerlink" title="「コネクタオリジナルレシピはじめての高速伝送編」を読んでのノートです。"></a>「コネクタオリジナルレシピはじめての高速伝送編」を読んでのノートです。</h3><blockquote>
<p>ダウンロード:<a herf="https://ac-blog.panasonic.co.jp/ebook/connectorhighspeed_lp/">高速伝送編</a></p>
</blockquote>
<h4 id="インピーダンス"><a href="#インピーダンス" class="headerlink" title="インピーダンス"></a>インピーダンス</h4><p>インピーダンスがそろっていないと、このように信号に乱れが生じてしまいます。<br>この信号の乱れにより、信号が正しく・早く伝えられなくなって<br>下の表2は代表的な伝送規格におけるインピーダンスの値一覧です。</p>
<img src="/WestRoute.github.io/images/tansport.png">
ノイズには、大きく2種類あります。一つ目が伝導ノイズ、もう一つが放射ノイズです。前者は、電線やプリント回路を伝わっていくノイズで、後者は空気中を伝わっていくノイズです。

<h4 id="ノイズ"><a href="#ノイズ" class="headerlink" title="ノイズ"></a>ノイズ</h4><p>ノイズに影響されない＝EMS（電磁気妨害感受：Electromagnetic Susceptibility）<br>ノイズを発生しない＝EMI（電磁気妨害：Electromagnetic Interference）<br>EMC（電磁的両立性：Electromagnetic Compatibility）</p>
<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p><strong>周波数特性</strong><br>1 インサーションロス :入力した信号のうち、出力時にどれくらい減衰したかを示します<br>3 クロストーク :入力した信号のうち、どれくらい出力されずに反射して返ってきたかを示します。<br>2 リターンロス :差動伝送で、隣りあう端子にどれくらい信号が伝わってしまったか（乗り移ってしまったか）を示します。入力側の端子に伝わった信号分を、<br>NEXT（Near End Cross Talk：近い端子への信号の乗り移り）といいます。<br>対して、出力側の端子に伝わった信号分を、<br>FEXT（Far End CrossTalk：遠い端子への信号の乗り移り）といいます</p>
<p><strong>時間軸特性</strong><br>4 スキュー :スキューとは、差動伝送で伝送しているペア信号同士の伝送時間のずれを示します<br><img src="/WestRoute.github.io/images/seque.png"><br>「0」か「1」か読み取れない エラーの原因になる<br>5 ジッタ<br><img src="/WestRoute.github.io/images/jitta.png"></p>
<p>アイパターン</p>
<h4 id="コーディングでのデータ変換"><a href="#コーディングでのデータ変換" class="headerlink" title="コーディングでのデータ変換"></a>コーディングでのデータ変換</h4><p>変換方式は以下のように様々な方法があります。<br>● 8B10B ：8ビットのデータを10ビットへ置き換える<br>● 64B66B ：64ビットのデータを66ビットへ置き換える<br>● 128B130B ：128ビットのデータを130ビットへ置き換える</p>
<h4 id="パラシリ変換・SerDes"><a href="#パラシリ変換・SerDes" class="headerlink" title="パラシリ変換・SerDes"></a>パラシリ変換・SerDes</h4><p>そもそも、データ伝送は使用する信号線の数によって、下記の2種類の伝送方式に分けられます。<br>実際に、様々な基板や機器を接続する場合、伝送経路内でシリアル通信とパラレル通信が混在する場<br>合がでてきます。<br>その際に行うのが、<strong>SerDes変換（パラシリ変換）</strong>です。<br><strong>パラレル通信</strong><br>複数の信号線や回線を使って、一度に多くのデータを伝送します。<br><strong>シリアル通信</strong><br>ひとつの信号線や回線を使って、データを1ビットずつ順番に伝送する方法。<br><br><br>このSerDes変換に必要になるのが、シリアライザー・デシリアライザーと呼ばれる、ICです。<br>シリアライザー ：パラレル通信→シリアル通信<br>デシリアライザー：シリアル通信→パラレル通信</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>硬件</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>openCV学习 01</title>
    <url>/WestRoute.github.io/2021/12/09/openCV01/</url>
    <content><![CDATA[<p>openCV主体分为五个模块，其中四个如下所示<br>CV   MLL   HighGUI<br>↓    ↓       ↓<br>CXCORE</p>
<span id="more"></span>
<h4 id="读取、保存图片"><a href="#读取、保存图片" class="headerlink" title="读取、保存图片"></a>读取、保存图片</h4><blockquote>
<p><b>cv2.IMREAD_COLOR()</b></p>
</blockquote>
<blockquote>
<p><b>v2.IMREAD_GRAYSCALE()</b>加载一张灰度</p>
</blockquote>
<blockquote>
<p><b>cv2.IMREAD_UNCHANGED()</b>加载图像，包括它的Alpha通道。</p>
</blockquote>
<p>4通道由R G B A组成，A（alpha）表示透明度通道，往往windows的bmp图像有时候是一个4通道图像。<br><br>2通道图像不常见，通常在程序处理中会用到，如傅里叶变换，可能会用到，一个通道为实数，一个通道为虚数。<br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">    img = cv2.imread(<span class="string">&#x27;test2.png&#x27;</span>, i) <span class="comment"># 选择自己的图片</span></span><br><span class="line">    WindowName = <span class="string">&#x27;image&#x27;</span> + <span class="built_in">str</span>(i) <span class="comment"># 使每个窗口名不同</span></span><br><span class="line">    cv2.namedWindow(WindowName, cv2.WINDOW_AUTOSIZE)  <span class="comment"># 建立空窗口</span></span><br><span class="line">    cv2.imshow(WindowName, img)</span><br><span class="line">    <span class="comment"># cv2.resizeWindow(WindowName, 500, 312) # 定义窗口大小</span></span><br><span class="line">    k = cv2.waitKey(<span class="number">0</span>)  <span class="comment"># 始终检测键盘</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">27</span>:  <span class="comment"># 按ESC退出</span></span><br><span class="line">        cv2.destroyAllWindows()</span><br><span class="line">    <span class="keyword">elif</span> k == <span class="built_in">ord</span>(<span class="string">&#x27;s&#x27;</span>):  <span class="comment"># 按s保存</span></span><br><span class="line">        cv2.imwrite(WindowName+<span class="string">&#x27;.png&#x27;</span>, img)</span><br><span class="line">        cv2.destroyAllWindows()</span><br><span class="line">    <span class="keyword">elif</span> k == <span class="built_in">ord</span>(<span class="string">&#x27;p&#x27;</span>):  <span class="comment"># 按p用matplotlib打开</span></span><br><span class="line">        rgb =  cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  <span class="comment"># 将opencv用的的BGR通道顺序变为plt用的RGB顺序</span></span><br><span class="line">        plt.imshow(rgb)</span><br><span class="line">        plt.xticks([]), plt.yticks([])</span><br><span class="line">        plt.show()</span><br></pre></td></tr></table></figure>
<br>

<p><strong>关于waitkey</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">if</span> cv<span class="number">2</span>.waitKey(<span class="number">0</span>) &amp; <span class="number">0</span>xFF == ord(&#x27;q&#x27;):</span><br><span class="line">    <span class="attribute">break</span></span><br></pre></td></tr></table></figure>
<p>这里0xFF=0b11111111<br>这样可以只取最后8位bit<br><br>27 = escape in ASCII<br></p>
<h4 id="视频的捕获、保存与播放"><a href="#视频的捕获、保存与播放" class="headerlink" title="视频的捕获、保存与播放"></a>视频的捕获、保存与播放</h4><blockquote>
<p><b>cv2.VideoCapture(设备索引号)</b>：创建一个VideoCapture 对象，他的参数可以是设备的索引号，或者是一个视频文件。设备索引号就是在指定要使用的摄像头。 一般的笔记本电脑都有内置摄像头。参数是 0。</p>
</blockquote>
<blockquote>
<p><b>cap.read()</b>： 返回一个布尔值（True/False）。如果帧读取的是正确的，就是 True。所以最后你可以通过检查他的返回值来查看视频文件是否已经到 了结尾。</p>
</blockquote>
<blockquote>
<p><b>cap.isOpened()</b>： 返回一个布尔值（True/False）。用于检查摄像头是否初始化成功，Ture表示成功，否则要使用cap.open()进行初始化</p>
</blockquote>
<blockquote>
<p><b>cap.get(参数)</b>：用于获得视频的一些参数信息</p>
</blockquote>
<blockquote>
<p><b>cap.set(参数，值)</b>：用于设置视频的一些参数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"> </span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line">ret = cap.<span class="built_in">set</span>(<span class="number">3</span>, <span class="number">320</span>)  <span class="comment"># 设置帧宽</span></span><br><span class="line">ret = cap.<span class="built_in">set</span>(<span class="number">4</span>, <span class="number">240</span>)  <span class="comment"># 设置帧高</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> cap.isOpened() <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">        ret, frame = cap.read()</span><br><span class="line">        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)  <span class="comment"># 转换为灰色通道</span></span><br><span class="line">        cv2.imshow(<span class="string">&#x27;frame&#x27;</span>, gray)</span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    cap.release()</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;cap is not opened!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<br>

<h5 id="保存视频"><a href="#保存视频" class="headerlink" title="保存视频"></a>保存视频</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"> </span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line">fourcc = cv2.VideoWriter_fourcc(*<span class="string">&#x27;XVID&#x27;</span>)  <span class="comment"># 设置视频编码格式</span></span><br><span class="line">out = cv2.VideoWriter(<span class="string">&#x27;output.avi&#x27;</span>, fourcc, <span class="number">20.0</span>, (<span class="number">640</span>, <span class="number">480</span>))  <span class="comment"># 名称， 格式， 帧率， 帧大小</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> cap.isOpened() <span class="keyword">is</span> <span class="literal">True</span>:  <span class="comment"># 如果摄像头已被初始化返回True</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">        ret, frame = cap.read()  <span class="comment"># 如果帧读取正确则返回True</span></span><br><span class="line">        <span class="keyword">if</span> ret <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">            frame = cv2.flip(frame, <span class="number">1</span>)  <span class="comment"># 反转图像，0：垂直反转，1：水平翻转，2：水平垂直反转</span></span><br><span class="line">            out.write(frame)</span><br><span class="line">            cv2.imshow(<span class="string">&#x27;frame&#x27;</span>, frame)</span><br><span class="line">            <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    out.release()</span><br><span class="line">    cap.release()</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;cap is not opened!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<br>

<h5 id="播放视频"><a href="#播放视频" class="headerlink" title="播放视频"></a>播放视频</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"> </span><br><span class="line">cap = cv2.VideoCapture(<span class="string">&#x27;output.avi&#x27;</span>)  <span class="comment"># 选择要播放的视频</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> cap.isOpened() <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">        ret, frame = cap.read()</span><br><span class="line">        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)  <span class="comment"># 输出灰色图像</span></span><br><span class="line">        cv2.imshow(<span class="string">&#x27;frame&#x27;</span>, gray)</span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">25</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):  <span class="comment"># 改变cv2.waitKey()中的值可以改变播放速度</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    cap.release()</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;cap is not opened!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<br>

<h4 id="简单的绘图函数"><a href="#简单的绘图函数" class="headerlink" title="简单的绘图函数"></a>简单的绘图函数</h4><h5 id="设置空白画布"><a href="#设置空白画布" class="headerlink" title="设置空白画布"></a>设置空白画布</h5><p>本质是创建了一个512x512x3的0矩阵，用于存储512x512的3通道图像，数据类型为uint8。<br>lineType：线性，默认为8：8联通，另外有4：4联通，还有cv2.LINE_AA ：表示抗锯齿，比较平滑</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">import</span> numpy as np</span><br><span class="line"><span class="attribute">import</span> cv<span class="number">2</span></span><br><span class="line"> </span><br><span class="line"><span class="attribute">img</span> = np.zeros((<span class="number">512</span>,<span class="number">512</span>,<span class="number">3</span>), np.uint<span class="number">8</span>)</span><br></pre></td></tr></table></figure>
<br>

<h5 id="画线"><a href="#画线" class="headerlink" title="画线"></a>画线</h5><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">import</span> numpy as np</span><br><span class="line"><span class="attribute">import</span> cv<span class="number">2</span></span><br><span class="line"> </span><br><span class="line"><span class="attribute">img</span> = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), dtype=np.uint<span class="number">8</span>)  # 设置窗口尺寸和数据类型</span><br><span class="line"><span class="attribute">cv2</span>.line(img, (<span class="number">200</span>, <span class="number">100</span>), (<span class="number">300</span>, <span class="number">200</span>), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">1</span>)</span><br><span class="line"><span class="attribute">cv2</span>.line(img, (<span class="number">200</span>, <span class="number">200</span>), (<span class="number">300</span>, <span class="number">300</span>), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">5</span>, <span class="number">4</span>)</span><br><span class="line"><span class="attribute">cv2</span>.line(img, (<span class="number">200</span>, <span class="number">300</span>), (<span class="number">300</span>, <span class="number">400</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">10</span>, cv<span class="number">2</span>.LINE_AA)</span><br><span class="line"><span class="attribute">WindowsName</span> = &#x27;example&#x27;</span><br><span class="line"><span class="attribute">cv2</span>.namedWindow(WindowsName)</span><br><span class="line"><span class="attribute">cv2</span>.imshow(WindowsName, img)</span><br><span class="line"><span class="attribute">cv2</span>.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="attribute">cv2</span>.destroyWindow(WindowsName)</span><br></pre></td></tr></table></figure>
<br>

<h5 id="画矩形"><a href="#画矩形" class="headerlink" title="画矩形"></a>画矩形</h5><br>

<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">import</span> numpy as np</span><br><span class="line"><span class="attribute">import</span> cv<span class="number">2</span></span><br><span class="line"> </span><br><span class="line"><span class="attribute">img</span> = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), dtype=np.uint<span class="number">8</span>)  # 设置窗口尺寸和数据类型</span><br><span class="line"><span class="attribute">cv2</span>.rectangle(img, (<span class="number">350</span>, <span class="number">255</span>), (<span class="number">511</span>, <span class="number">511</span>), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">1</span>)</span><br><span class="line"><span class="attribute">cv2</span>.rectangle(img, (<span class="number">350</span>, <span class="number">255</span>), (<span class="number">511</span>, <span class="number">511</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), -<span class="number">1</span>, shift=<span class="number">1</span>)</span><br><span class="line"><span class="attribute">WindowsName</span> = &#x27;example&#x27;</span><br><span class="line"><span class="attribute">cv2</span>.namedWindow(WindowsName)</span><br><span class="line"><span class="attribute">cv2</span>.imshow(WindowsName, img)</span><br><span class="line"><span class="attribute">cv2</span>.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="attribute">cv2</span>.destroyWindow(WindowsName)</span><br></pre></td></tr></table></figure>
<br>

<h5 id="画圆"><a href="#画圆" class="headerlink" title="画圆"></a>画圆</h5><br>

<blockquote>
<p>cv2.circle(img,center,radius,color,thinkness,lineType,shift)<br>center：圆心<br>radius：半径</p>
</blockquote>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">import</span> numpy as np</span><br><span class="line"><span class="attribute">import</span> cv<span class="number">2</span></span><br><span class="line"> </span><br><span class="line"><span class="attribute">img</span> = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), dtype=np.uint<span class="number">8</span>)</span><br><span class="line"><span class="attribute">cv2</span>.circle(img, (<span class="number">255</span>, <span class="number">255</span>), <span class="number">63</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), -<span class="number">1</span>)</span><br><span class="line"><span class="attribute">cv2</span>.circle(img, (<span class="number">255</span>, <span class="number">255</span>), <span class="number">63</span>, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">1</span>, shift=<span class="number">1</span>)</span><br><span class="line"><span class="attribute">WindowsName</span> = &#x27;example&#x27;</span><br><span class="line"><span class="attribute">cv2</span>.namedWindow(WindowsName)</span><br><span class="line"><span class="attribute">cv2</span>.imshow(WindowsName, img)</span><br><span class="line"><span class="attribute">cv2</span>.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="attribute">cv2</span>.destroyWindow(WindowsName)</span><br></pre></td></tr></table></figure>
<h5 id="画椭圆"><a href="#画椭圆" class="headerlink" title="画椭圆"></a>画椭圆</h5><br>

<blockquote>
<p>cv2.ellipse(img,center,axes,angle,startAngle,endAngle,color,thinkness,lineType,shift)<br>center：椭圆中心<br>axes：（长轴，短轴）<br>angle：椭圆绕中心顺时针旋转度数（例如90°）<br>startAngle：绕中心绘制起始角<br>endAngle：绕中心绘制结束角</p>
</blockquote>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">import</span> numpy as np</span><br><span class="line"><span class="attribute">import</span> cv<span class="number">2</span></span><br><span class="line"> </span><br><span class="line"><span class="attribute">img</span> = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), dtype=np.uint<span class="number">8</span>)  # 设置窗口尺寸和数据类型</span><br><span class="line"><span class="attribute">cv2</span>.ellipse(img, (<span class="number">160</span>, <span class="number">256</span>), (<span class="number">100</span>, <span class="number">50</span>), <span class="number">0</span>, <span class="number">0</span>, <span class="number">240</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line"><span class="attribute">cv2</span>.ellipse(img, (<span class="number">400</span>, <span class="number">256</span>), (<span class="number">100</span>, <span class="number">50</span>), <span class="number">60</span>, <span class="number">0</span>, <span class="number">240</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line"><span class="attribute">WindowsName</span> = &#x27;example&#x27;</span><br><span class="line"><span class="attribute">cv2</span>.namedWindow(WindowsName)</span><br><span class="line"><span class="attribute">cv2</span>.imshow(WindowsName, img)</span><br><span class="line"><span class="attribute">cv2</span>.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="attribute">cv2</span>.destroyWindow(WindowsName)</span><br></pre></td></tr></table></figure>
<h5 id="画多边形"><a href="#画多边形" class="headerlink" title="画多边形"></a>画多边形</h5><blockquote>
<p>cv2.polylines(img,pts,isClosed,color,thinkness,lineType,shift)<br>cv2.fillPoly(img,pts,color,thinkness,lineType,shift,offset)</p>
</blockquote>
<p>pts：多边形端点<br>isClosed：是否封闭<br>thinkness：线宽无法使用-1表示填充，可以用fillPloy函数填充<br><br></p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import cv2</span><br><span class="line"> </span><br><span class="line">img = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), dtype=np.uint8)  # 设置窗口尺寸和数据类型</span><br><span class="line">a = np.array([[[<span class="number">10</span>, <span class="number">10</span>], [<span class="number">100</span>, <span class="number">10</span>], [<span class="number">100</span>, <span class="number">100</span>], [<span class="number">10</span>, <span class="number">100</span>]]], dtype=np.int32)</span><br><span class="line">b = np.array([[[<span class="number">150</span>, <span class="number">100</span>], [<span class="number">250</span>, <span class="number">230</span>], [<span class="number">200</span>, <span class="number">200</span>], [<span class="number">150</span>, <span class="number">220</span>]]], dtype=np.int32)</span><br><span class="line">c = np.array([[[<span class="number">300</span>, <span class="number">300</span>], [<span class="number">400</span>, <span class="number">430</span>], [<span class="number">350</span>, <span class="number">400</span>], [<span class="number">300</span>, <span class="number">420</span>]]], dtype=np.int32)</span><br><span class="line">cv2.fillPoly(img, a, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">cv2.polylines(img, b, <span class="number">0</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>))  # <span class="number">0</span>或<span class="symbol">False</span>表示不封闭</span><br><span class="line">cv2.polylines(img, c, <span class="number">1</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>))  # <span class="symbol">True</span>表示封闭</span><br><span class="line"><span class="symbol">WindowsName</span> = <span class="string">&#x27;example&#x27;</span></span><br><span class="line">cv2.namedWindow(<span class="symbol">WindowsName</span>)</span><br><span class="line">cv2.imshow(<span class="symbol">WindowsName</span>, img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyWindow(<span class="symbol">WindowsName</span>)</span><br></pre></td></tr></table></figure>
<br><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>openCV</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>python05</title>
    <url>/WestRoute.github.io/2021/11/10/python05/</url>
    <content><![CDATA[<p>使用beautifulSoup实现的网站遍历爬虫</p>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment">#define the variable</span></span><br><span class="line">pages = <span class="built_in">set</span>()</span><br><span class="line">random.seed(datetime.datetime.now())</span><br><span class="line"></span><br><span class="line"><span class="comment">#define the function</span></span><br><span class="line"><span class="comment">#ページ内にあるすべて内部リンクを調べる</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getInternalLinks</span>(<span class="params">bs,includeUrl</span>):</span></span><br><span class="line">    includeUrl = <span class="string">&#x27;&#123;&#125;://&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(urlparse(includeUrl).scheme,</span><br><span class="line">    urlparse(includeUrl).netloc)</span><br><span class="line">    internalLinks = []</span><br><span class="line"></span><br><span class="line">        <span class="comment">#&#x27;^(/|.*&#x27;+includeUrl+&#x27;)&#x27;)はregex記法といいます</span></span><br><span class="line">        <span class="comment">#ここでは「//」から始まるリンクだけ探し出す</span></span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> bs.find_all(<span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">        href=re.<span class="built_in">compile</span>(<span class="string">&#x27;^(/|.*&#x27;</span>+includeUrl+<span class="string">&#x27;)&#x27;</span>)):</span><br><span class="line">        <span class="keyword">if</span> link.attrs[<span class="string">&#x27;href&#x27;</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> link.attrs[<span class="string">&#x27;href&#x27;</span>] <span class="keyword">not</span> <span class="keyword">in</span> internalLinks:</span><br><span class="line">                <span class="keyword">if</span>(link.attrs[<span class="string">&#x27;href&#x27;</span>].startswith(<span class="string">&#x27;/&#x27;</span>)):</span><br><span class="line">                    internalLinks.append(</span><br><span class="line">                    includeUrl+link.attrs[<span class="string">&#x27;href&#x27;</span>])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    internalLinks.append(link.attrs[<span class="string">&#x27;href&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> internalLinks</span><br><span class="line"></span><br><span class="line"><span class="comment">##ページ内にあるすべて外部リンクを調べる</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getExternalLinks</span>(<span class="params">bs,excludeUrl</span>):</span></span><br><span class="line">    externalLinks =[]</span><br><span class="line"></span><br><span class="line">        <span class="comment">#「http」や「www」から始まるかつ、いままで出ていないリンクだけ探し出す</span></span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> bs.find_all(<span class="string">&#x27;a&#x27;</span>,href=re.<span class="built_in">compile</span>(<span class="string">&#x27;^(http|www)((?!&#x27;</span>+excludeUrl+<span class="string">&#x27;).)*$&#x27;</span>)):</span><br><span class="line">        <span class="keyword">if</span> link.attrs[<span class="string">&#x27;href&#x27;</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> link.attrs[<span class="string">&#x27;href&#x27;</span>] <span class="keyword">not</span> <span class="keyword">in</span> externalLinks:</span><br><span class="line">                externalLinks.append(link.attrs[<span class="string">&#x27;href&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> externalLinks</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getRandomExternalLink</span>(<span class="params">startingPage</span>):</span></span><br><span class="line">    html = urlopen(startingPage)</span><br><span class="line">    bs = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    externalLinks = getExternalLinks(bs,</span><br><span class="line">    urlparse(startingPage).netloc)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(externalLinks) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;No external links, looking around the site for one&#x27;</span>)</span><br><span class="line">        domain = <span class="string">&#x27;&#123;&#125;://&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(urlparse(startingPage).scheme,</span><br><span class="line">        urlparse(startingPage).netloc)</span><br><span class="line">        internalLinks = getInternalLinks(bs, domain)</span><br><span class="line">        <span class="keyword">return</span> getRandomExternalLink(internalLinks[random.randint(<span class="number">0</span>,</span><br><span class="line">        <span class="built_in">len</span>(internalLinks)-<span class="number">1</span>)])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> externalLinks[random.randint(<span class="number">0</span>, <span class="built_in">len</span>(externalLinks)-<span class="number">1</span>)]</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">followExternalOnly</span>(<span class="params">startingSite</span>):</span></span><br><span class="line">    externalLink = getRandomExternalLink(startingSite)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Random external link is: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(externalLink))</span><br><span class="line">    followExternalOnly(externalLink)</span><br><span class="line"></span><br><span class="line"><span class="comment">#main:</span></span><br><span class="line">followExternalOnly(<span class="string">&#x27;http://oreilly.com&#x27;</span>)</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>c和c++ 管道通讯</title>
    <url>/WestRoute.github.io/2021/11/09/pipe/</url>
    <content><![CDATA[<p>用来复习和对比</p>
<span id="more"></span>
<details><summary>server.c(可点开查看)</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    HANDLE hPipe = <span class="built_in">CreateFile</span>(<span class="string">&quot;\\\\.\\pipe\\mypipe&quot;</span>,</span><br><span class="line">        GENERIC_READ | GENERIC_WRITE, <span class="number">0</span>, <span class="literal">NULL</span>, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (hPipe == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> szBuff[<span class="number">32</span>];</span><br><span class="line">        DWORD dwBytesWritten;</span><br><span class="line">        <span class="built_in">fgets</span>(szBuff, <span class="built_in"><span class="keyword">sizeof</span></span>(szBuff), stdin);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">WriteFile</span>(hPipe, szBuff, <span class="built_in">strlen</span>(szBuff), &amp;dwBytesWritten, <span class="literal">NULL</span>)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">CloseHandle</span>(hPipe);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<details><summary>client.c(可点开查看)</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    HANDLE hPipe = <span class="built_in">CreateNamedPipe</span>(<span class="string">&quot;\\\\.\\pipe\\mypipe&quot;</span>, <span class="comment">//lpName</span></span><br><span class="line">        PIPE_ACCESS_DUPLEX,             <span class="comment">// dwOpenMode</span></span><br><span class="line">        PIPE_TYPE_BYTE | PIPE_WAIT,     <span class="comment">// dwPipeMode</span></span><br><span class="line">        <span class="number">3</span>,                              <span class="comment">// nMaxInstances</span></span><br><span class="line">        <span class="number">0</span>,                              <span class="comment">// nOutBufferSize</span></span><br><span class="line">        <span class="number">0</span>,                              <span class="comment">// nInBufferSize</span></span><br><span class="line">        <span class="number">100</span>,                            <span class="comment">// nDefaultTimeOut</span></span><br><span class="line">        <span class="literal">NULL</span>);                          <span class="comment">// lpSecurityAttributes</span></span><br><span class="line">    <span class="keyword">if</span> (hPipe == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">ConnectNamedPipe</span>(hPipe, <span class="literal">NULL</span>)) &#123;</span><br><span class="line">        <span class="built_in">CloseHandle</span>(hPipe);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> szBuff[<span class="number">256</span>];</span><br><span class="line">        DWORD dwBytesRead;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">ReadFile</span>(hPipe, szBuff, <span class="built_in"><span class="keyword">sizeof</span></span>(szBuff), &amp;dwBytesRead, <span class="literal">NULL</span>)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        szBuff[dwBytesRead] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;PipeServer: %s&quot;</span>, szBuff);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">FlushFileBuffers</span>(hPipe);</span><br><span class="line">    <span class="built_in">DisconnectNamedPipe</span>(hPipe);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(hPipe);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>

<details><summary>server.cpp(可点开查看)</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;create pipe and connect\n&quot;</span>);</span><br><span class="line">      <span class="keyword">char</span> pStr[<span class="number">255</span>];</span><br><span class="line">	DWORD    dwWrite;</span><br><span class="line">	HANDLE hPipe = <span class="built_in">CreateNamedPipe</span>(<span class="string">&quot;\\\\.\\Pipe\\mypipe&quot;</span>, PIPE_ACCESS_DUPLEX, PIPE_TYPE_MESSAGE | PIPE_READMODE_MESSAGE | PIPE_WAIT</span><br><span class="line">		, PIPE_UNLIMITED_INSTANCES, <span class="number">0</span>, <span class="number">0</span>, NMPWAIT_WAIT_FOREVER, <span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">	<span class="comment">//waiting to be connected</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">ConnectNamedPipe</span>(hPipe, <span class="literal">NULL</span>) != <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;connect successful\n&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;put down the phases.\n&quot;</span>;</span><br><span class="line">		cin&gt;&gt;pStr;</span><br><span class="line">		<span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span> (!<span class="built_in">WriteFile</span>(hPipe, pStr, <span class="built_in">strlen</span>(pStr), &amp;dwWrite, <span class="literal">NULL</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;write failed...&quot;</span> &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(pStr==<span class="string">&quot;q&quot;</span>) <span class="keyword">break</span>;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;data sended: &quot;</span> &lt;&lt; pStr &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">			cout&lt;&lt;<span class="string">&quot;put down the phases again.enter &#x27;q&#x27; to quit.\n&quot;</span>;</span><br><span class="line">			cin&gt;&gt;pStr;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">DisconnectNamedPipe</span>(hPipe);</span><br><span class="line">	<span class="built_in">CloseHandle</span>(hPipe);<span class="comment">//关闭管道</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;close\n&quot;</span>);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>

<details><summary>client.cpp(可点开查看)</summary>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFSIZE 5</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      <span class="keyword">char</span> str[<span class="number">1</span>] ;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;namedpipe:client online\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;P key to connect the pipe\n&quot;</span>);</span><br><span class="line">	cin &gt;&gt; str;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;wait connect\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">WaitNamedPipe</span>(<span class="string">&quot;\\\\.\\Pipe\\mypipe&quot;</span>, NMPWAIT_WAIT_FOREVER) == FALSE)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;open pipe\n&quot;</span>);</span><br><span class="line">	HANDLE hPipe = <span class="built_in">CreateFile</span>(<span class="string">&quot;\\\\.\\Pipe\\mypipe&quot;</span>, GENERIC_READ | GENERIC_WRITE, <span class="number">0</span>,</span><br><span class="line">		<span class="literal">NULL</span>, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, <span class="literal">NULL</span>);</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">if</span> ((<span class="keyword">long</span>)hPipe == <span class="number">-1</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">	BOOL fSuccess = <span class="literal">false</span>;</span><br><span class="line">	DWORD len = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> buffer[BUFSIZE];</span><br><span class="line">	string recvData = <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="keyword">int</span> buffercnt=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		fSuccess = <span class="built_in">ReadFile</span>(hPipe, buffer, BUFSIZE * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>), &amp;len, <span class="literal">NULL</span>);</span><br><span class="line">            <span class="keyword">char</span> buffer2[BUFSIZE + <span class="number">1</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">		<span class="built_in">memcpy</span>(buffer2, buffer, len);</span><br><span class="line">		<span class="comment">//recvData.append(buffer2);</span></span><br><span class="line">		<span class="keyword">if</span> (!fSuccess)&#123;</span><br><span class="line">			<span class="comment">//</span></span><br><span class="line">			cout&lt;&lt;<span class="string">&quot;pipe error\n&quot;</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">//cout &lt;&lt; &quot;recv data form server: &quot; &lt;&lt; recvData.c_str() &lt;&lt; endl &lt;&lt; endl;</span></span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;recv data form server: &quot;</span> &lt;&lt; buffer2 &lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">FlushFileBuffers</span>(hPipe);</span><br><span class="line">	&#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">DisconnectNamedPipe</span>(hPipe);</span><br><span class="line">	<span class="built_in">CloseHandle</span>(hPipe);</span><br><span class="line"> </span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>编程练习</category>
      </categories>
  </entry>
  <entry>
    <title>c++09 String类</title>
    <url>/WestRoute.github.io/2021/11/08/c++09string/</url>
    <content><![CDATA[<h3 id="string类构造函数"><a href="#string类构造函数" class="headerlink" title="string类构造函数"></a>string类构造函数</h3><p>string类其实是基于一个类型模板。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> std &#123;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">charT</span>,</span></span><br><span class="line"><span class="class">            <span class="keyword">class</span> <span class="title">traits</span> =</span> char_traits&lt;charT&gt;,</span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">Allocator</span> =</span> allocator&lt;charT&gt; &gt;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">basic_string</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">using</span> string    = basic_string&lt;<span class="keyword">char</span>&gt;;</span><br><span class="line">  <span class="keyword">using</span> u8string  = basic_string&lt;<span class="keyword">char8_t</span>&gt;;   <span class="comment">// C++20から</span></span><br><span class="line">  <span class="keyword">using</span> u16string = basic_string&lt;<span class="keyword">char16_t</span>&gt;;  <span class="comment">// C++11から</span></span><br><span class="line">  <span class="keyword">using</span> u32string = basic_string&lt;<span class="keyword">char32_t</span>&gt;;  <span class="comment">// C++11から</span></span><br><span class="line">  <span class="keyword">using</span> wstring   = basic_string&lt;<span class="keyword">wchar_t</span>&gt;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">namespace</span> pmr &#123;  <span class="comment">// C++17から</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">charT</span>, <span class="keyword">class</span> <span class="title">traits</span> =</span> char_traits&lt;charT&gt;&gt;</span><br><span class="line">      <span class="keyword">using</span> basic_string =</span><br><span class="line">        std::basic_string&lt;charT, traits, polymorphic_allocator&lt;charT&gt;&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> string    = basic_string&lt;<span class="keyword">char</span>&gt;;</span><br><span class="line">    <span class="keyword">using</span> u8string  = basic_string&lt;<span class="keyword">char8_t</span>&gt;; <span class="comment">// C++20から</span></span><br><span class="line">    <span class="keyword">using</span> u16string = basic_string&lt;<span class="keyword">char16_t</span>&gt;;</span><br><span class="line">    <span class="keyword">using</span> u32string = basic_string&lt;<span class="keyword">char32_t</span>&gt;;</span><br><span class="line">    <span class="keyword">using</span> wstring   = basic_string&lt;<span class="keyword">wchar_t</span>&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>头文件string.h和cstring支持对c-风格字符串进行操纵的c库字符串函数，但不支持string类。</p>
<span id="more"></span>

<table>
<thead>
<tr>
<th>构造函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>string(const char * s)</td>
<td>将string对象初始化为s指向NBTS。NBTS为null-byte-temnated string的缩写，表示以空字符结束的字符串（传统的C字符串）</td>
</tr>
<tr>
<td>string(size_type n,char c)</td>
<td>创建一个包含n个元素的string对象，<br>其中每个元素都被初始化为字符c</td>
</tr>
<tr>
<td>string(const string &amp; str)</td>
<td>复制构造函数</td>
</tr>
<tr>
<td>string()</td>
<td>创建一个的string对象，长度为0</td>
</tr>
<tr>
<td>string(const char * s, size_type n)</td>
<td>将string对象初始化为s指向的NBTS中的前n字符，即使超过了NBTS端</td>
</tr>
<tr>
<td>template<clas Iter> string(Iter begin,Iter end)</td>
<td>将string对象初始化为区间(begin,end)内的字符，其中begin和end的行为就像指针</td>
</tr>
<tr>
<td>string(const string &amp; str,string size_type n = npos)</td>
<td>将string对象初始化为对象str中从位置pos开始到结尾的字符，<br>或从位置pos开始的n个字符</td>
</tr>
<tr>
<td>string(string &amp;&amp; str)noexcept</td>
<td>将string对象初始化为string对象(移动构造函数)</td>
</tr>
<tr>
<td>string(initializer_list<char>il)</td>
<td>将string对象初始化为初始化列表il中的字符</td>
</tr>
</tbody></table>
<p>重载运算符+=,=,&lt;&lt;,[]<br></p>
<p><strong>string(initializer_list<char>il)</strong> 允许一下使用方式</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">string piano_man=&#123;<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;t&#x27;</span>&#125;;</span><br><span class="line">string comp_lang &#123;<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;p&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="string类输入"><a href="#string类输入" class="headerlink" title="string类输入"></a>string类输入</h3><table>
<thead>
<tr>
<th>输入方式</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>c-</td>
<td>char info;<br>cin&gt;&gt;info;<br>cin.getlin(info,100);<br>cin.get(info,100);</td>
</tr>
<tr>
<td>string对象</td>
<td>string stuff;<br>cin &gt;&gt; stuff;<br>getline(cin,stuff);<br></td>
</tr>
</tbody></table>
<p>两个版本都有getline，区别是string对象的getline将自动调整目标string对象的大小。<br>对于c-风格的输入，cin是调用对象，而对于string对象输入，cin是一个函数参数。</p>
<h3 id="string类功能"><a href="#string类功能" class="headerlink" title="string类功能"></a>string类功能</h3><p>find()<br>capacity()<br>reserve()</p>
<p>如果你有string，但需要c-风格字符串。比如open接受c-风格字符串</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">string filename<span class="comment">;</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Enter file name&quot;</span><span class="comment">;</span></span><br><span class="line">cin&gt;&gt; filename<span class="comment">;</span></span><br><span class="line">ofstream fout<span class="comment">;</span></span><br><span class="line">fout.open(filename.c_str())<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h3 id="智能指针模板–delete指针对策"><a href="#智能指针模板–delete指针对策" class="headerlink" title="智能指针模板–delete指针对策"></a>智能指针模板–delete指针对策</h3><p>auto_ptr,unique_ptr,share_ptr可以将new活得的地址付给这些对象，当智能指针过期时(离开代码块时)，其析构函数释放内存。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="function">auto_ptr&lt;<span class="keyword">double</span>&gt; <span class="title">ap</span><span class="params">(<span class="keyword">new</span> <span class="keyword">double</span>)</span></span>;</span><br><span class="line">      *ap=<span class="number">25.5</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意：<br>1.不能指向非堆内存<br>2.两个指针不能指向同一个对象<br>3.使用newp[]时不能用auto_ptr，share_ptr</p>
<h3 id="标准模板库–泛型编程"><a href="#标准模板库–泛型编程" class="headerlink" title="标准模板库–泛型编程"></a>标准模板库–泛型编程</h3><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p>size(),swap(),begin(),engd(),push_back(),erase(),insert()<br>for_each(),random_shuffle(),sort()</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span><span class="constructor">_each(<span class="params">books</span>.<span class="params">begain</span>()</span>,books.<span class="keyword">end</span><span class="literal">()</span>,ShowReveiw)</span><br></pre></td></tr></table></figure>

<p>基于范围的for</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">double</span> prices[<span class="number">5</span>] =&#123;<span class="number">4</span>.<span class="number">99</span>,<span class="number">10</span>.<span class="number">99</span>,<span class="number">6</span>.<span class="number">87</span>,<span class="number">7</span>.<span class="number">99</span>,<span class="number">8</span>.<span class="number">49</span>&#125;;</span><br><span class="line"><span class="attribute">for</span>(double x: prices) cout&lt;&lt; x &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>
<p>基于范围的for修改内容</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">for(<span class="attribute">auto</span> &amp;x: books) <span class="built_in">InflateReview</span>(x);</span><br></pre></td></tr></table></figure>
<br>

<p><strong>16.11 inserts.cpp</strong></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// inserts.cpp -- copy!) and insert iterators </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">const</span> std::string &amp; s)</span> </span>&#123; std::cout &lt;&lt; s &lt;&lt; <span class="string">&quot; &quot;</span>; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">	string s1[<span class="number">4</span>] = &#123; <span class="string">&quot;fine&quot;</span>, <span class="string">&quot;fish&quot;</span>, <span class="string">&quot;fashion&quot;</span>, <span class="string">&quot;fate&quot;</span> &#125;;</span><br><span class="line">	string s2[<span class="number">2</span>] = &#123; <span class="string">&quot;busy&quot;</span>, <span class="string">&quot;bats&quot;</span> &#125;;</span><br><span class="line">	string s3[<span class="number">2</span>] = &#123; <span class="string">&quot;silly&quot;</span>, <span class="string">&quot;singers&quot;</span> &#125;;</span><br><span class="line">	<span class="function">vector&lt;string&gt; <span class="title">words</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line">	<span class="built_in">copy</span>(s1, s1 + <span class="number">4</span>, words.<span class="built_in">begin</span>());</span><br><span class="line">	for_each(words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>(), output);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// construct anonymous back_insert_iterator object</span></span><br><span class="line">	<span class="built_in">copy</span>(s2, s2 + <span class="number">2</span>, back_insert_iterator&lt;vector&lt;string&gt; &gt;(words));</span><br><span class="line">	for_each(words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>(), output);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// construct anonymous insert_iterator object</span></span><br><span class="line">	<span class="built_in">copy</span>(s3, s3 + <span class="number">2</span>, insert_iterator&lt;vector&lt;string&gt; &gt;(words, words.<span class="built_in">begin</span>()));</span><br><span class="line">	for_each(words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>(), output);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>WorseThan()</p>
<h4 id="容器种类"><a href="#容器种类" class="headerlink" title="容器种类"></a>容器种类</h4><h5 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h5><h5 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h5><h5 id="list"><a href="#list" class="headerlink" title="list"></a>list</h5><p>双向链表</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//list.cpp -- using a list</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outint</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; std::cout &lt;&lt; n &lt;&lt; <span class="string">&quot; &quot;</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">	<span class="function">list&lt;<span class="keyword">int</span>&gt; <span class="title">one</span><span class="params">(<span class="number">5</span>, <span class="number">2</span>)</span></span>; <span class="comment">// list of 5 2s </span></span><br><span class="line">	<span class="keyword">int</span> stuff[<span class="number">5</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">6</span> &#125;;</span><br><span class="line">	list&lt;<span class="keyword">int</span>&gt; two;</span><br><span class="line">	two.<span class="built_in">insert</span>(two.<span class="built_in">begin</span>(), stuff, stuff + <span class="number">5</span>);</span><br><span class="line">	<span class="keyword">int</span> more[<span class="number">6</span>] = &#123; <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span> &#125;;</span><br><span class="line">	<span class="function">list&lt;<span class="keyword">int</span>&gt; <span class="title">three</span><span class="params">(two)</span></span>;</span><br><span class="line">	three.<span class="built_in">insert</span>(three.<span class="built_in">end</span>(), more, more + <span class="number">6</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;List one: &quot;</span>;</span><br><span class="line">	for_each(one.<span class="built_in">begin</span>(), one.<span class="built_in">end</span>(), outint);</span><br><span class="line">	cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;List two: &quot;</span>;</span><br><span class="line">	for_each(two.<span class="built_in">begin</span>(), two.<span class="built_in">end</span>(), outint);</span><br><span class="line">	cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;List three: &quot;</span>;</span><br><span class="line">	for_each(three.<span class="built_in">begin</span>(), three.<span class="built_in">end</span>(), outint);</span><br><span class="line">	three.<span class="built_in">remove</span>(<span class="number">2</span>);</span><br><span class="line">	cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;List three minus 2s: &quot;</span>;</span><br><span class="line">	for_each(three.<span class="built_in">begin</span>(), three.<span class="built_in">end</span>(), outint);</span><br><span class="line">	three.<span class="built_in">splice</span>(three.<span class="built_in">begin</span>(), one);</span><br><span class="line">	cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;List three after splice: &quot;</span>;</span><br><span class="line">	for_each(three.<span class="built_in">begin</span>(), three.<span class="built_in">end</span>(), outint);</span><br><span class="line">	cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;List one: &quot;</span>;</span><br><span class="line">	for_each(one.<span class="built_in">begin</span>(), one.<span class="built_in">end</span>(), outint);</span><br><span class="line">	three.<span class="built_in">unique</span>();</span><br><span class="line">	cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;List three after unique: &quot;</span>;</span><br><span class="line">	for_each(three.<span class="built_in">begin</span>(), three.<span class="built_in">end</span>(), outint);</span><br><span class="line">	three.<span class="built_in">sort</span>();</span><br><span class="line">	three.<span class="built_in">unique</span>();</span><br><span class="line">	cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;List three after sort &amp;• unique: &quot;</span>;</span><br><span class="line">	for_each(three.<span class="built_in">begin</span>(), three.<span class="built_in">end</span>(), outint);</span><br><span class="line">	two.<span class="built_in">sort</span>();</span><br><span class="line">	three.<span class="built_in">merge</span>(two);</span><br><span class="line">	cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;Sorted two merged into three: &quot;</span>;</span><br><span class="line">	for_each(three.<span class="built_in">begin</span>(), three.<span class="built_in">end</span>(), outint);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="forward-list"><a href="#forward-list" class="headerlink" title="forward_list"></a>forward_list</h5><h5 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h5><h5 id="prioprity-queue"><a href="#prioprity-queue" class="headerlink" title="prioprity_queue"></a>prioprity_queue</h5><h5 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h5><h5 id="array"><a href="#array" class="headerlink" title="array"></a>array</h5><p>array不是STL容器，无法调节容器的大小，但是copy()，for_each()可以用于array。</p>
<h4 id="关联容器-set-multiset-map-multimap"><a href="#关联容器-set-multiset-map-multimap" class="headerlink" title="关联容器 :set,multiset,map,multimap"></a>关联容器 :set,multiset,map,multimap</h4><p><strong>16.13 setops.cpp</strong></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//setops.cpp -- some set operations</span></span><br><span class="line">#<span class="keyword">include</span> &lt;iostream&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;<span class="built_in">string</span>&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;set&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;algorithm&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;iterator&gt;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">int</span> main<span class="literal">()</span></span><br><span class="line">&#123;</span><br><span class="line">	using namespace std;</span><br><span class="line">	const <span class="built_in">int</span> N = <span class="number">6</span>;</span><br><span class="line">	<span class="built_in">string</span> s1<span class="literal">[N]</span> = &#123; <span class="string">&quot;buffoon&quot;</span>,<span class="string">&quot;thinkers&quot;</span>,<span class="string">&quot;for&quot;</span>,<span class="string">&quot;heavy&quot;</span>,<span class="string">&quot;can&quot;</span>,<span class="string">&quot;for&quot;</span> &#125;;</span><br><span class="line">	<span class="built_in">string</span> s2<span class="literal">[N]</span> = &#123; <span class="string">&quot;metal&quot;</span>, <span class="string">&quot;any&quot;</span>, <span class="string">&quot;food&quot;</span>,<span class="string">&quot;elegant&quot;</span>,<span class="string">&quot;deliver&quot;</span>,<span class="string">&quot;for&quot;</span> &#125;;</span><br><span class="line"> </span><br><span class="line">	set&lt;<span class="built_in">string</span>&gt; <span class="constructor">A(<span class="params">s1</span>, <span class="params">s1</span> + N)</span>;</span><br><span class="line">	set&lt;<span class="built_in">string</span>&gt; <span class="constructor">B(<span class="params">s2</span>, <span class="params">s2</span> + N)</span>;</span><br><span class="line"> </span><br><span class="line">	ostream_iterator&lt;<span class="built_in">string</span>, <span class="built_in">char</span>&gt; out(cout, <span class="string">&quot; &quot;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Set A&quot;</span>;</span><br><span class="line">	copy(<span class="module-access"><span class="module"><span class="identifier">A</span>.</span></span><span class="keyword">begin</span><span class="literal">()</span>, <span class="module-access"><span class="module"><span class="identifier">A</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>, out);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Set B: &quot;</span>;</span><br><span class="line">	copy(<span class="module-access"><span class="module"><span class="identifier">B</span>.</span></span><span class="keyword">begin</span><span class="literal">()</span>, <span class="module-access"><span class="module"><span class="identifier">B</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>, out);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Union of A and B:\n&quot;</span>;</span><br><span class="line">	set<span class="constructor">_union(A.<span class="params">begin</span>()</span> , <span class="module-access"><span class="module"><span class="identifier">A</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>, <span class="module-access"><span class="module"><span class="identifier">B</span>.</span></span><span class="keyword">begin</span><span class="literal">()</span>, <span class="module-access"><span class="module"><span class="identifier">B</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>, out); </span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Intersection of A and B:\n&quot;</span>;</span><br><span class="line">	set<span class="constructor">_intersection(A.<span class="params">begin</span>()</span>, <span class="module-access"><span class="module"><span class="identifier">A</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>, <span class="module-access"><span class="module"><span class="identifier">B</span>.</span></span><span class="keyword">begin</span><span class="literal">()</span>, <span class="module-access"><span class="module"><span class="identifier">B</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>, out); </span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Difference of A and B:\n&quot;</span>;</span><br><span class="line">	set<span class="constructor">_difference(A.<span class="params">begin</span>()</span>, <span class="module-access"><span class="module"><span class="identifier">A</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>, <span class="module-access"><span class="module"><span class="identifier">B</span>.</span></span><span class="keyword">begin</span><span class="literal">()</span>, <span class="module-access"><span class="module"><span class="identifier">B</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>, out);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	set&lt;<span class="built_in">string</span>&gt; C; cout &lt;&lt; <span class="string">&quot;Set C:\n&quot;</span>;</span><br><span class="line">	set<span class="constructor">_union(A.<span class="params">begin</span>()</span>, <span class="module-access"><span class="module"><span class="identifier">A</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>, <span class="module-access"><span class="module"><span class="identifier">B</span>.</span></span><span class="keyword">begin</span><span class="literal">()</span>, <span class="module-access"><span class="module"><span class="identifier">B</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>, insert_iterator&lt;set&lt;<span class="built_in">string</span>&gt; &gt;(C, <span class="module-access"><span class="module"><span class="identifier">C</span>.</span></span><span class="keyword">begin</span><span class="literal">()</span>)); </span><br><span class="line">	copy(<span class="module-access"><span class="module"><span class="identifier">C</span>.</span></span><span class="keyword">begin</span><span class="literal">()</span>, <span class="module-access"><span class="module"><span class="identifier">C</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>, out);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">string</span> s3(<span class="string">&quot;grungy&quot;</span>);</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">C</span>.</span></span>insert(s3);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Set C after insertion:\n&quot;</span>;</span><br><span class="line">	copy(<span class="module-access"><span class="module"><span class="identifier">C</span>.</span></span><span class="keyword">begin</span><span class="literal">()</span>, <span class="module-access"><span class="module"><span class="identifier">C</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>, out);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Showing a range:\n&quot;</span>;</span><br><span class="line">	copy(<span class="module-access"><span class="module"><span class="identifier">C</span>.</span></span>lower<span class="constructor">_bound(<span class="string">&quot;ghost&quot;</span>)</span>, <span class="module-access"><span class="module"><span class="identifier">C</span>.</span></span>upper<span class="constructor">_bound(<span class="string">&quot;spook&quot;</span>)</span>, out);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>16.14 multimap.cpp</strong></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//multmap.cpp -- use a multimap</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> KeyType;</span><br><span class="line"><span class="keyword">typedef</span> std::pair&lt;<span class="keyword">const</span> KeyType, std::string&gt; Pair; </span><br><span class="line"><span class="keyword">typedef</span> std::multimap&lt;KeyType, std::string&gt; MapCode;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> std; MapCode codes;</span><br><span class="line">	codes.<span class="built_in">insert</span>(<span class="built_in">Pair</span>(<span class="number">415</span>, <span class="string">&quot;San Francisco&quot;</span>));</span><br><span class="line">	codes.<span class="built_in">insert</span>(<span class="built_in">Pair</span>(<span class="number">510</span>, <span class="string">&quot;Oakland&quot;</span>));</span><br><span class="line">	codes.<span class="built_in">insert</span>(<span class="built_in">Pair</span>(<span class="number">718</span>, <span class="string">&quot;Brooklyn&quot;</span>));</span><br><span class="line">	codes.<span class="built_in">insert</span>(<span class="built_in">Pair</span>(<span class="number">718</span>, <span class="string">&quot;Staten Island&quot;</span>));</span><br><span class="line">	codes.<span class="built_in">insert</span>(<span class="built_in">Pair</span>(<span class="number">415</span>, <span class="string">&quot;San Rafael&quot;</span>));</span><br><span class="line">	codes.<span class="built_in">insert</span>(<span class="built_in">Pair</span>(<span class="number">510</span>, <span class="string">&quot;Berkeley&quot;</span>));</span><br><span class="line"> </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Number of cities with area code 415: &quot;</span> &lt;&lt; codes.<span class="built_in">count</span>(<span class="number">415</span>) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Number of cities with area code 718: &quot;</span> &lt;&lt; codes.<span class="built_in">count</span>(<span class="number">718</span>) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Number of cities with area code 510: &quot;</span> &lt;&lt; codes.<span class="built_in">count</span>(<span class="number">510</span>) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Area Code City\n&quot;</span>;</span><br><span class="line">	MapCode::iterator it;</span><br><span class="line">	<span class="keyword">for</span> (it = codes.<span class="built_in">begin</span>(); it != codes.<span class="built_in">end</span>(); ++it)</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; (*it).first &lt;&lt; <span class="string">&quot;	&quot;</span> &lt;&lt; (*it).second &lt;&lt; endl;</span><br><span class="line">	pair&lt;MapCode::iterator, MapCode::iterator&gt; range = codes.<span class="built_in">equal_range</span>(<span class="number">718</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Cities with area code 718 :\n&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (it = range.first; it != range.second; ++it)</span><br><span class="line">		cout &lt;&lt; (*it).second &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h4><p>很多STL算法都是用函数对象————也叫做函数符(functor)。<br>函数符是可以以函数方式与()结合使用的任意对象。即定义了函数operator()()的类。<br>可以像这样定义一个类;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Linear</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">      <span class="keyword">double</span> slope;</span><br><span class="line">      <span class="keyword">double</span> y0;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      Linear(<span class="keyword">double</span> s1_=<span class="number">1</span>,<span class="keyword">double</span> y_=<span class="number">0</span>): slope(s1_),y0(y_)&#123;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">double</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;<span class="keyword">return</span> y0 + slope * x;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这样重载()运算符将使得能够像函数那样使用Linear对象:<br>Linear f1;<br>Linear f2(2.5,10.0);<br>double y1 = f1(12.5); //y1=0+1<em>12.5<br>double y2 = f2(0.4);  //y2=10.0+2.5</em>0.4</p>
<h5 id="函数符概念"><a href="#函数符概念" class="headerlink" title="函数符概念"></a>函数符概念</h5><p>生成器是不用参数就可以调用的函数符<br>一元函数是用一个参数就可以调用的函数符<br>二元函数是用两个参数就可以调用的函数符</p>
<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>就地版本和复制版本</p>
<p>la.remove(4);<br>调用该方法后，链表中值为4的元素都会被删除，同时链表的长度也会被改变。<br>remove(lb.begin(),lb.end(),4);<br>这个remove是STL算法，是函数不是成员，不能调整链表长度。</p>
<p><strong>16.18 listrmv.cpp</strong></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// listrmv.cpp -- applying the STL to a string </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show</span><span class="params">(<span class="keyword">int</span>)</span></span>; <span class="keyword">const</span> <span class="keyword">int</span> LIM = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">	<span class="keyword">int</span> ar[LIM] = &#123; <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span> &#125;;</span><br><span class="line">	<span class="function">list&lt;<span class="keyword">int</span>&gt; <span class="title">la</span><span class="params">(ar, ar + LIM)</span></span>;</span><br><span class="line">	<span class="function">list&lt;<span class="keyword">int</span>&gt; <span class="title">lb</span><span class="params">(la)</span></span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Original list contents:\n\t&quot;</span>;</span><br><span class="line">	for_each(la.<span class="built_in">begin</span>(), la.<span class="built_in">end</span>(), Show);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	la.<span class="built_in">remove</span>(<span class="number">4</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;After using the remove() method:\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;la:\t&quot;</span>;</span><br><span class="line">	for_each(la.<span class="built_in">begin</span>(), la.<span class="built_in">end</span>(), Show);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	list&lt;<span class="keyword">int</span>&gt;::iterator last;</span><br><span class="line">	last = <span class="built_in">remove</span>(lb.<span class="built_in">begin</span>(), lb.<span class="built_in">end</span>(), <span class="number">4</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;After using the remove() functionin&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;lb:\t&quot;</span>;</span><br><span class="line">	for_each(lb.<span class="built_in">begin</span>(), lb.<span class="built_in">end</span>(), Show); cout &lt;&lt; endl;</span><br><span class="line">	lb.<span class="built_in">erase</span>(last, lb.<span class="built_in">end</span>());</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;After using the erase!) method:\n&quot;</span>; cout &lt;&lt; <span class="string">&quot;lbAt&quot;</span>;</span><br><span class="line">	for_each(lb.<span class="built_in">begin</span>(), lb.<span class="built_in">end</span>(), Show); cout &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	std::cout &lt;&lt; v &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>
希望得到一个按输入顺序排列的单词列表，一个按字母顺序排列的单词列表。
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">vector&lt;string&gt; words;</span><br><span class="line">string input;</span><br><span class="line"><span class="keyword">while</span> (cin&gt;&gt; input &amp;&amp; input != <span class="string">&quot;quit&quot;</span>)</span><br><span class="line">     <span class="function">words <span class="title">push_back</span><span class="params">(input)</span></span>;</span><br><span class="line"></span><br><span class="line">set&lt;string&gt; wordeset;</span><br><span class="line"><span class="built_in">transform</span>(words.<span class="built_in">begin</span>(),words.<span class="built_in">end</span>(),</span><br><span class="line">	insert_iterator&lt;set&lt;string&gt;&gt;.(wordset,wordset.<span class="built_in">begin</span>()),ToLower);</span><br></pre></td></tr></table></figure>
<br>单词出现计数
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">map&lt;string,<span class="keyword">int</span>&gt;wordmap;</span><br><span class="line">set&lt;string&gt;::iterator si;</span><br><span class="line"><span class="keyword">for</span>(si = wordset.<span class="built_in">begin</span>();si != wordset.<span class="built_in">endd</span>();si++)</span><br><span class="line">  wordmap.<span class="built_in">insert</span>(pair&lt;string,<span class="keyword">int</span>&gt;(*si,<span class="built_in">count</span>(words.<span class="built_in">begin</span>(),words.<span class="built_in">end</span>(),*si)));</span><br></pre></td></tr></table></figure>
wordmap["the"]:word出现过的次数
<details><summary>16.19 usealgo.cpp(可点开查看)</summary>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//usealgo.cpp -- using several STL elements </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span> </span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">toLower</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">tolower</span>(ch);&#125;</span><br><span class="line"><span class="function">string &amp; <span class="title">ToLower</span><span class="params">(string &amp; st)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">const</span> string &amp; s)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;string&gt; words;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Enter words (enter quit to quit):\n&quot;</span>;</span><br><span class="line">	string input;</span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; input &amp;&amp; input != <span class="string">&quot;quit&quot;</span>)</span><br><span class="line">		words.<span class="built_in">push_back</span>(input);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;You entered the following words:\n&quot;</span>;</span><br><span class="line">	for_each(words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>(), display);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// place words in set, converting to lowercase</span></span><br><span class="line">	set&lt;string&gt; wordset;</span><br><span class="line">	<span class="built_in">transform</span>(words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>(), insert_iterator&lt;set&lt;string&gt; &gt;(wordset, wordset.<span class="built_in">begin</span>()), ToLower);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\nAlphabetic list of words:\n&quot;</span>;</span><br><span class="line">	for_each(wordset.<span class="built_in">begin</span>(), wordset.<span class="built_in">end</span>(), display);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// place word and frequency in map </span></span><br><span class="line">	map&lt;string, <span class="keyword">int</span>&gt; wordmap;</span><br><span class="line">	set&lt;string&gt;::iterator si;</span><br><span class="line">	<span class="keyword">for</span> (si = wordset.<span class="built_in">begin</span>(); si != wordset.<span class="built_in">end</span>(); si++)</span><br><span class="line">		wordmap[*si] = <span class="built_in">count</span>(words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>(), *si);</span><br><span class="line">	<span class="comment">// display map contents</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\nWord frequency:\n&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (si = wordset.<span class="built_in">begin</span>();</span><br><span class="line">		si != wordset.<span class="built_in">end</span>(); si++) cout &lt;&lt; *si &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; wordmap[*si] &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//预定tolower是int型，所以需要定义string型</span></span><br><span class="line"><span class="function">string &amp; <span class="title">ToLower</span><span class="params">(string &amp; st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">transform</span>(st.<span class="built_in">begin</span>(), st.<span class="built_in">end</span>(), st.<span class="built_in">begin</span>(), toLower);</span><br><span class="line">	<span class="keyword">return</span> st;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">const</span> string &amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; s &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h4 id="其他库"><a href="#其他库" class="headerlink" title="其他库"></a>其他库</h4><p>Vector模板类是一个容器类和算法系统的一部分，它支持面向容器的操作，如排序，插入，转移容器。<br>valarray类模板面向数值计算的二，不是STL的一部分，没有pushback()和insert()<br>array是为代替内置数组而设计的，有更好、更安全的接口。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">double</span>&gt; ved1(<span class="number">10</span>),ved2(<span class="number">10</span>),ved3(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">array</span>&lt;<span class="type">double</span>,<span class="number">10</span>&gt;vod1,vod2,vod3;</span><br><span class="line">valarray&lt;<span class="type">double</span>&gt; vad1(<span class="number">10</span>),vad2(<span class="number">10</span>),vad(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*将两个数组的第一个元素之和放入第三个数组的第一个元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">//vector</span><br><span class="line"><span class="keyword">transform</span>(ved1.<span class="keyword">begin</span>(),ved1.<span class="keyword">end</span>(),ved2.<span class="keyword">begin</span>(),ved2.<span class="keyword">end</span>(),plus&lt;<span class="type">double</span>&gt;());</span><br><span class="line">//<span class="keyword">array</span></span><br><span class="line"><span class="keyword">transform</span>(vod1.<span class="keyword">begin</span>(),vod1.<span class="keyword">end</span>(),vod2.<span class="keyword">begin</span>(),vod2.<span class="keyword">end</span>(),plus&lt;<span class="type">double</span>&gt;());</span><br><span class="line"></span><br><span class="line">//valarray</span><br><span class="line">vad3=vad1+vad2;   //overload</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*将数组元素扩大2.5倍</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">//STL</span><br><span class="line"><span class="keyword">transform</span>(ved1.<span class="keyword">begin</span>(),ved1.<span class="keyword">end</span>(),ved2.<span class="keyword">begin</span>(),ved2.<span class="keyword">end</span>(),bindlst(multiplies&lt;<span class="type">double</span>&gt;(),<span class="number">2.5</span>));</span><br><span class="line"></span><br><span class="line">//valarray</span><br><span class="line">vad3=<span class="number">2.5</span>*vad3;   //overload</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*自然对数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">//STL</span><br><span class="line"><span class="keyword">transform</span>(ved1.<span class="keyword">begin</span>(),ved1.<span class="keyword">end</span>(),ved2.<span class="keyword">begin</span>(),ved2.<span class="keyword">end</span>(),<span class="keyword">log</span>);</span><br><span class="line"></span><br><span class="line">//valarray</span><br><span class="line">vad3=log(vad3);   //overload</span><br></pre></td></tr></table></figure>
<p>valarray适用预处理数组的循环使用，最大的缺点是无法像STl自动调整长度。<br>c++11提供begin和end<br>sort(begin(vad),end(vad));<br>以下演示先vactor的push_back和自动调整大小来搜集数据，再复制到valarray对象中执行数学运算。</p>
<details><summary>16.20 valvect.cpp(可点开查看)</summary>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// valvect.cpp -- comparing vector and valarray </span><br><span class="line">#<span class="keyword">include</span> &lt;iostream&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;valarray&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;vector&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;algorithm&gt;</span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">	using namespace std;</span><br><span class="line">	vector&lt;<span class="keyword">double</span>&gt; <span class="keyword">data</span>;</span><br><span class="line">	<span class="keyword">double</span> temp;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Enter numbers (&lt;=0 to quit):\n&quot;</span>;</span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; temp &amp;&amp; temp &gt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">data</span>.push_back(temp);</span><br><span class="line">	sort(<span class="keyword">data</span>.begin(), <span class="keyword">data</span>.<span class="keyword">end</span>());</span><br><span class="line">	<span class="built_in">int</span> <span class="built_in">size</span> = <span class="keyword">data</span>.<span class="built_in">size</span>();</span><br><span class="line">	valarray&lt;<span class="keyword">double</span>&gt; numbers(<span class="built_in">size</span>);</span><br><span class="line">	<span class="built_in">int</span> i;</span><br><span class="line">	for (i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++)</span><br><span class="line">		numbers[i] = <span class="keyword">data</span>[i];</span><br><span class="line">	valarray&lt;<span class="keyword">double</span>&gt; sq_rts(<span class="built_in">size</span>);</span><br><span class="line">	sq_rts = <span class="built_in">sqrt</span>(numbers);</span><br><span class="line">	valarray&lt;<span class="keyword">double</span>&gt; results(<span class="built_in">size</span>);</span><br><span class="line">	results = numbers + <span class="number">2.0</span> * sq_rts;</span><br><span class="line">	cout.setf(ios_base::fixed);</span><br><span class="line">	cout.<span class="keyword">precision</span>(<span class="number">4</span>);</span><br><span class="line">	for (i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout.width(<span class="number">8</span>);</span><br><span class="line">		cout &lt;&lt; numbers[i] &lt;&lt; <span class="string">&#x27;: &#x27;</span>;</span><br><span class="line">		cout.width(<span class="number">8</span>);</span><br><span class="line">		cout &lt;&lt; results[i] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;done\n&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<p>slice数组索引：起始索引，索引数和跨距</p>
<details><summary>16.21 vslice.cpp(可点开查看)</summary>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//vslice.cpp -- using valarray slices</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">typedef</span> std::valarray&lt;<span class="keyword">int</span>&gt; vint; <span class="comment">// simplify declarations </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">const</span> vint &amp; v, <span class="keyword">int</span> cols)</span></span>; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> std::slice;	<span class="comment">// from &lt;valarray&gt;</span></span><br><span class="line">	<span class="keyword">using</span> std::cout;</span><br><span class="line">	<span class="function">vint <span class="title">valint</span><span class="params">(SIZE)</span></span>;	<span class="comment">// think of as 4 rows of 3</span></span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; SIZE; ++i)</span><br><span class="line">		valint[i] = std::<span class="built_in">rand</span>() % <span class="number">10</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Original array:\n&quot;</span>;</span><br><span class="line">	<span class="built_in">show</span>(valint, <span class="number">3</span>); <span class="comment">// show in 3 columns</span></span><br><span class="line">	<span class="function">vint <span class="title">vcol</span><span class="params">(valint[slice(<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>)])</span></span>; <span class="comment">// extract 2nd column</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Second column:\n&quot;</span>;</span><br><span class="line">	<span class="built_in">show</span>(vcol, <span class="number">1</span>);<span class="comment">// show in 1 column </span></span><br><span class="line">	<span class="function">vint <span class="title">vrow</span><span class="params">(valint[slice(<span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>)])</span></span>;<span class="comment">// extract 2nd row</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Second row:\n&quot;</span>;</span><br><span class="line">	<span class="built_in">show</span>(vrow, <span class="number">3</span>);</span><br><span class="line">	valint[<span class="built_in">slice</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>)] = <span class="number">10</span>;<span class="comment">// assign to 2nd column</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Set last column to 10:\n&quot;</span>; <span class="built_in">show</span>(valint, <span class="number">3</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Set first column to sum of next two:\n&quot;</span>;</span><br><span class="line">	<span class="comment">// + not defined for slices, so convert to valarray&lt;int&gt;</span></span><br><span class="line">	valint[<span class="built_in">slice</span>(<span class="number">0</span>, <span class="number">4</span>, <span class="number">3</span>)] = <span class="built_in">vint</span>(valint[<span class="built_in">slice</span>(<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>)]) + <span class="built_in">vint</span>(valint[<span class="built_in">slice</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>)]);</span><br><span class="line">	<span class="built_in">show</span>(valint, <span class="number">3</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">const</span> vint &amp; v, <span class="keyword">int</span> cols)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> std::cout;</span><br><span class="line">	<span class="keyword">using</span> std::endl;</span><br><span class="line">	<span class="keyword">int</span> lim = v.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		cout.<span class="built_in">width</span>(<span class="number">3</span>);</span><br><span class="line">		cout &lt;&lt; v[i];</span><br><span class="line">		<span class="keyword">if</span> (i % cols == cols - <span class="number">1</span>)</span><br><span class="line">			cout &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			cout &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (lim % cols != <span class="number">0</span>)</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>

<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>C++PrimerPlus</category>
      </categories>
  </entry>
  <entry>
    <title>c++08 异常处理</title>
    <url>/WestRoute.github.io/2021/11/06/c++08except/</url>
    <content><![CDATA[<p>Throw –&gt;Try –&gt;Catch<br>thorw不会引起异常</p>
<span id="more"></span>
<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>abort()：向标准错误流发送消息 bnormal program terminaton<br>throw “message”：throw是一种跳转，及命令程序跳转到另一条语句。message用来指出异常的特征。<br>try：可能出现error的程序<br>catch：用来捕获throw抛出的异常，{}内是出现error之后的处理(这里是要求输入新数字)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//error3.cpp -- using an exception</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">hmean</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> x, y, z;</span><br><span class="line"> </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Enter two numbers: &quot;</span>;</span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; x &gt;&gt; y)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">try</span><span class="comment">//start of try block</span></span><br><span class="line">		&#123;</span><br><span class="line">			z = <span class="built_in">hmean</span>(x, y);</span><br><span class="line">		&#125;<span class="comment">//end of try block</span></span><br><span class="line">		<span class="built_in"><span class="keyword">catch</span></span> (<span class="keyword">const</span> <span class="keyword">char</span> * s)<span class="comment">//start of exception handler</span></span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Enter a new pair of numbers: &quot;</span>;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;<span class="comment">//end of handler</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Harmonic mean of &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot; and &quot;</span> &lt;&lt; y &lt;&lt; <span class="string">&quot; is &quot;</span> &lt;&lt; z &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Enter next set of numbers &lt;q to quit&gt; : &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Bye!\n&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">hmean</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a == -b)</span><br><span class="line">		<span class="keyword">throw</span> <span class="string">&quot;bad hmean() arguments: a = -b not allowed&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">2.0</span> * a * b / (a + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="将对象用作异常类型"><a href="#将对象用作异常类型" class="headerlink" title="将对象用作异常类型"></a>将对象用作异常类型</h4><p>没看懂<br><br></p>
<h4 id="异常规范"><a href="#异常规范" class="headerlink" title="异常规范"></a>异常规范</h4><p>throw可以在函数体中抛出异常，也可以在函数声明中指明当前函数能抛出的异常。<br>double harm(double a) throw(bad_thing);//throw bad_thing exception<br>double marm(double) throw;//doesnt throw<br>可使用新增的noexcept指出函数不会抛出异常<br>double marm() noexcept;</p>
<h4 id="栈解退"><a href="#栈解退" class="headerlink" title="栈解退"></a>栈解退</h4><p>当引用对引发异常的函数进行调用的函数时，涉及栈解退。<br><img src="/WestRoute.github.io/images/cmemoery.png"><br>程序将函数指令的返回地址存入栈中，当被调用的函数执行完毕后，程序将用该地址来确定从哪里继续执行。<br>在栈中，这些函数被视为自动变量。如果被调用的函数调用了其他函数，则后者的信息也将添加在栈中。<br>假设最顶部的函数由于出现异常而被中止，栈直到找到try的}地址为止一直释放栈，控制权转为块尾的异常处理。<br>栈和函数返回一样，对与栈中的自动类对象，类的析构函数会被调用。<br>然而函数返回仅仅是处理该函数放在栈中的对象，而throw语句则处理try-catch之间整个函数调用序列放在战中的对象。</p>
<details><summary>error5.h(可点开查看)</summary>

<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//error5.cpp -- unwinding the stack</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>	</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;exc_mean.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">demo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	string <span class="keyword">word</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">demo</span>(<span class="keyword">const</span> string &amp; str)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">word</span> = str;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;demo &quot;</span> &lt;&lt; <span class="keyword">word</span> &lt;&lt; <span class="string">&quot; created\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">demo</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;demo &quot;</span> &lt;&lt; <span class="keyword">word</span> &lt;&lt; <span class="string">&quot; destroyed\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;demo &quot;</span> &lt;&lt; <span class="keyword">word</span> &lt;&lt; <span class="string">&quot; lives!\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// function prototypes</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">hmean</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">gmean</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">means</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> std::cout;</span><br><span class="line">	<span class="keyword">using</span> std::cin;</span><br><span class="line">	<span class="keyword">using</span> std::endl;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">double</span> x, y, z;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="function">demo <span class="title">d1</span><span class="params">(<span class="string">&quot;found in block in main() &quot;</span>)</span></span>;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Enter two numbers : &quot;</span>;</span><br><span class="line">		<span class="keyword">while</span> (cin &gt;&gt; x &gt;&gt; y)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">try</span><span class="comment">// stare of try block</span></span><br><span class="line">			&#123;</span><br><span class="line">				z = <span class="built_in">means</span>(x, y);</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;The mean mean of &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot; and &quot;</span> &lt;&lt; y &lt;&lt; <span class="string">&quot;is &quot;</span> &lt;&lt; z &lt;&lt; endl;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;Enter next pair: &quot;</span>;</span><br><span class="line">			&#125; <span class="comment">// end of try block</span></span><br><span class="line"> </span><br><span class="line">			<span class="built_in"><span class="keyword">catch</span></span> (bad_hmean &amp; bg) <span class="comment">// start of catch block</span></span><br><span class="line">			&#123;</span><br><span class="line">				bg.<span class="built_in">mesg</span>();</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;Try again.\n&quot;</span>;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line"> </span><br><span class="line">			<span class="built_in"><span class="keyword">catch</span></span> (bad_gmean &amp; hg)</span><br><span class="line">			&#123;</span><br><span class="line">				cout &lt;&lt; hg.<span class="built_in">mesg</span>();</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;Values used: &quot;</span> &lt;&lt; hg.vl &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; hg.v2 &lt;&lt; endl;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;Sorry, you don&#x27;t get to play any more.\n&quot;</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125; <span class="comment">// end of catch block</span></span><br><span class="line">		&#125;</span><br><span class="line">		d1.<span class="built_in">show</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Bye!\n&quot;</span>;</span><br><span class="line">	cin.<span class="built_in">get</span>(); </span><br><span class="line">	cin.<span class="built_in">get</span>(); </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">hmean</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a == -b)</span><br><span class="line">		<span class="keyword">throw</span> <span class="built_in">bad_hmean</span>(a, b);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">2.0</span> * a * b / (a + b);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">gmean</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a &lt; <span class="number">0</span> || b &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">throw</span> <span class="built_in">bad_gmean</span>(a, b); <span class="keyword">return</span> std::<span class="built_in">sqrt</span>(a * b);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">means</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> am, hm, gm;</span><br><span class="line">	<span class="function">demo <span class="title">d2</span><span class="params">(<span class="string">&quot;found in means&#123;)&quot;</span>)</span></span>;</span><br><span class="line">	am = (a + b) / <span class="number">2.0</span>;	<span class="comment">// arithmetic mean</span></span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		hm = <span class="built_in">hmean</span>(a, b);</span><br><span class="line">		gm = <span class="built_in">gmean</span>(a, b);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in"><span class="keyword">catch</span></span> (bad_hmean &amp; bg) <span class="comment">// start of catch block</span></span><br><span class="line">	&#123;</span><br><span class="line">		bg.<span class="built_in">mesg</span>();</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;Caught in means()\n&quot;</span>;</span><br><span class="line">		<span class="keyword">throw</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	d2.<span class="built_in">show</span>();</span><br><span class="line">	<span class="keyword">return</span> (am + hm + gm) / <span class="number">3.0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h4 id="exception类"><a href="#exception类" class="headerlink" title="exception类"></a>exception类</h4><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">except.h或者exception.h</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>1.stdexcept<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logic_error:可通过编译修改<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;domain_error<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;invaild_argument<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;length_error<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out_of_bounds<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;runtime_error:无可避免的问题<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;range_error<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;overflow_error<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;underflow_error<br>2.bad_alloc和new</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;new&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>在不用异常处理时，当无法分配请求的内存量时，返回空指针。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Trying to get a big block of memory:\n&quot;</span>;</span><br><span class="line">	pb = new Big[<span class="number">10000</span>]; <span class="regexp">//</span> <span class="number">1</span>,<span class="number">600</span>,<span class="number">000</span>,<span class="number">000</span> bytes</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Got past the new request:\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">catch (bad_alloc &amp; ba)</span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Caught the exception!\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; ba.what() &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">exit</span>(EXIT_FAILURE);</span><br></pre></td></tr></table></figure>
<p>也可以不抛出异常</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *pi= <span class="built_in"><span class="keyword">new</span></span> (std::nothrow) <span class="keyword">int</span>;</span><br></pre></td></tr></table></figure>

<h4 id="异常，类和继承"><a href="#异常，类和继承" class="headerlink" title="异常，类和继承"></a>异常，类和继承</h4><p>异常，类和继承以三种方式互相关联。<br>注意，bad_index()在class Sales的公开部分里，这使得外部类的catch块可以使用这个类作为类型。<br>Sales::bad_index()是logic_error类派生来的，能够储存和报告数组索引的超界值(out of bounds values)。</p>
<details><summary>sales.h(可点开查看)</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sales.h -- exceptions and inheritance </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sales</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="class"><span class="keyword">enum</span> &#123;</span> MONTHS = <span class="number">12</span> &#125;;	<span class="comment">// could be a static const  </span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">bad_index</span> :</span> <span class="keyword">public</span> std::logic_error</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="keyword">int</span> bi; <span class="comment">// bad index value </span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">explicit</span> <span class="title">bad_index</span><span class="params">(<span class="keyword">int</span> ix, <span class="keyword">const</span> std::string &amp; s = <span class="string">&quot;Index error in Sales object\n&quot;</span>)</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">int</span> <span class="title">bi_val</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> bi; &#125;</span><br><span class="line">		<span class="keyword">virtual</span> ~<span class="built_in">bad_index</span>() <span class="keyword">throw</span>() &#123;&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="function"><span class="keyword">explicit</span> <span class="title">Sales</span><span class="params">(<span class="keyword">int</span> yy = <span class="number">0</span>)</span></span>;</span><br><span class="line">	<span class="built_in">Sales</span>(<span class="keyword">int</span> yy, <span class="keyword">const</span> <span class="keyword">double</span> * gr, <span class="keyword">int</span> n);</span><br><span class="line">	<span class="keyword">virtual</span> ~<span class="built_in">Sales</span>() &#123; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Year</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> year; &#125;</span><br><span class="line">	<span class="keyword">virtual</span> <span class="keyword">double</span> <span class="keyword">operator</span>[](<span class="keyword">int</span> i) <span class="keyword">const</span>;</span><br><span class="line">	<span class="keyword">virtual</span> <span class="keyword">double</span> &amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> i);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">double</span> gross[MONTHS];</span><br><span class="line">	<span class="keyword">int</span> year;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LabeledSales</span> :</span> <span class="keyword">public</span> Sales</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">nbad_index</span> :</span> <span class="keyword">public</span> Sales::bad_index</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		std::string lbl;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">nbad_index</span>(<span class="keyword">const</span> std::string &amp; lb, <span class="keyword">int</span> ix, <span class="keyword">const</span> std::string &amp; s = <span class="string">&quot;Index error in LabeledSales object\n&quot;</span>);</span><br><span class="line">		<span class="function"><span class="keyword">const</span> std::string &amp; <span class="title">label_val</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> lbl; &#125;</span><br><span class="line">		<span class="keyword">virtual</span> ~<span class="built_in">nbad_index</span>() <span class="keyword">throw</span>() &#123;&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="function"><span class="keyword">explicit</span> <span class="title">LabeledSales</span><span class="params">(<span class="keyword">const</span> std::string &amp; lb = <span class="string">&quot;none&quot;</span>, <span class="keyword">int</span> yy = <span class="number">0</span>)</span></span>;</span><br><span class="line">	<span class="built_in">LabeledSales</span>(<span class="keyword">const</span> std::string &amp; lb, <span class="keyword">int</span> yy, <span class="keyword">const</span> <span class="keyword">double</span> * gr, <span class="keyword">int</span> n);</span><br><span class="line">	<span class="keyword">virtual</span> ~<span class="built_in">LabeledSales</span>() &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">const</span> std::string &amp; <span class="title">Label</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> label; &#125;</span><br><span class="line">	<span class="keyword">virtual</span> <span class="keyword">double</span> <span class="keyword">operator</span>[](<span class="keyword">int</span> i) <span class="keyword">const</span>;</span><br><span class="line">	<span class="keyword">virtual</span> <span class="keyword">double</span> &amp; <span class="keyword">operator</span>[] (<span class="keyword">int</span> i);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	std::string label;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</details>
之所以析构函数virtual ~bad_index() throw() {}使用了异常规范是因为bad_index是继承于C++98的except类，而except类的析构函数就是这样写的。而C++11中，except类的析构函数没有异常规范。
当数组索引超界，operator[]()会引发异常。

<p>带异常规范的函数没有与列表中的一场匹配时会导致问题，默认情况下，未捕获的异常将导致程序终止。<br>set_terminate()函数可以修改terminate()函数不去调用abort()来中止程序。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">void myQuit()&#123;</span><br><span class="line">   cou&lt;&lt;<span class="string">&quot;Terminating due to uncaught exception.\n&quot;</span></span><br><span class="line">   <span class="keyword">exit</span>(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">set_terminate(myQuit);</span><br></pre></td></tr></table></figure>
<p>原则上，异常规范应包含调用函数的其他函数所引发的异常，如果发生意外异常，程序将调用unexcept()函数。<br>在这种情况想捕获所有异常，可以</p>
<figure class="highlight mercury"><table><tr><td class="code"><pre><span class="line">void myUnexcepted()&#123;</span><br><span class="line">	throw std::bad_exception();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">...</span><br><span class="line">set_unexcepted(myUnexcepted);</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">...</span><br><span class="line">double Argh(double, double) throw(out_of_bounds,bad_exception)&#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="built_in">try</span>&#123;</span><br><span class="line">		x<span class="built_in">=</span>Argh(a,b);</span><br><span class="line">	&#125;<span class="built_in">catch</span>(out_of_bounds)&#123;</span><br><span class="line">		...</span><br><span class="line">	&#125;<span class="built_in">catch</span>(bad_exception)&#123;</span><br><span class="line">		...</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序设计时就应该实现设计好异常，因为异常不适合模板和动态分配。</p>
<h4 id="RTTI（Runtime-Type-Identification）RTTI只适合在包含虚函数的类使用"><a href="#RTTI（Runtime-Type-Identification）RTTI只适合在包含虚函数的类使用" class="headerlink" title="RTTI（Runtime Type Identification）RTTI只适合在包含虚函数的类使用"></a>RTTI（Runtime Type Identification）RTTI只适合在包含虚函数的类使用</h4><p>dynamic_cast 使用基类指针生成一个指向派生类的指针（是否可以安全的将对象的地址赋给特定类型的指针），返回0则为空指针。<br>typeid 返回一个指出对象的类型的值<br>type_info 结构储存了特定类型的信息</p>
<details><summary>dynamic_cast的使用(可点开查看)</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//rttil.cpp -- using the RTTI dynamic_cast operator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> std::cout; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grand</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> hold;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Grand</span>(<span class="keyword">int</span> h = <span class="number">0</span>) : <span class="built_in">hold</span>(h) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Speak</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;I am a grand class h\n&quot;</span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">Value</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> hold; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Superb</span> :</span> <span class="keyword">public</span> Grand</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Superb</span>(<span class="keyword">int</span> h = <span class="number">0</span>) : <span class="built_in">Grand</span>(h) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Speak</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;I am a superb class!!\n&quot;</span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Say</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;I hold the superb value of: &quot;</span> &lt;&lt; <span class="built_in">Value</span>() &lt;&lt; <span class="string">&quot;!\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Magnificent</span> :</span> <span class="keyword">public</span> Superb</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Magnificent</span>(<span class="keyword">int</span> h = <span class="number">0</span>, <span class="keyword">char</span> c = <span class="string">&#x27;A&#x27;</span>) : <span class="built_in">Superb</span>(h), <span class="built_in">ch</span>(c) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Speak</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;I am a magnificent class I !!\n&quot;</span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Say</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;I hold the character &quot;</span> &lt;&lt; ch &lt;&lt; <span class="string">&quot; and the integer &quot;</span> &lt;&lt; <span class="built_in">Value</span>() &lt;&lt; <span class="string">&quot;!\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function">Grand * <span class="title">GetOne</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line">	std::<span class="built_in">srand</span>(std::<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">	Grand * pg;</span><br><span class="line">	Superb * ps;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		pg - <span class="built_in">GetOne</span>();</span><br><span class="line">		pg-&gt;<span class="built_in">Speak</span>();</span><br><span class="line">		<span class="keyword">if</span> (ps = <span class="keyword">dynamic_cast</span>&lt;Superb *&gt;(pg))</span><br><span class="line">			ps-&gt;<span class="built_in">Say</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Grand * <span class="title">GetOne</span><span class="params">()</span> <span class="comment">// generate one of three kinds of objects randomly</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">		   Grand * p;</span><br><span class="line">		   <span class="built_in"><span class="keyword">switch</span></span>(std::<span class="built_in">rand</span>() % <span class="number">3</span>)</span><br><span class="line">		   &#123;</span><br><span class="line">		   <span class="keyword">case</span>	<span class="number">0</span>:	p = <span class="keyword">new</span> <span class="built_in">Grand</span>(std::<span class="built_in">rand</span>()  % <span class="number">100</span>);</span><br><span class="line">			   <span class="keyword">break</span>;</span><br><span class="line">		   <span class="keyword">case</span>	<span class="number">1</span>:	p = <span class="keyword">new</span> <span class="built_in">Superb</span>(std::<span class="built_in">rand</span>() % <span class="number">100</span>);</span><br><span class="line">			   <span class="keyword">break</span>;</span><br><span class="line">		   <span class="keyword">case</span>	<span class="number">2</span>:	p = <span class="keyword">new</span> <span class="built_in">Magnificent</span>(std::<span class="built_in">rand</span>() % <span class="number">100</span>, <span class="string">&#x27;A&#x27;</span> + std::<span class="built_in">rand</span>() % <span class="number">26</span>);</span><br><span class="line">			   <span class="keyword">break</span>;</span><br><span class="line">		   &#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h4 id="更严格的类型转换"><a href="#更严格的类型转换" class="headerlink" title="更严格的类型转换"></a>更严格的类型转换</h4><p>dynamic_cast;  向上转换 (Low类和High类是is-a关系)pointerLow=dynamic_cast&lt;Low*&gt;pointerHigh;<br>const_cast;  const–&gt;volatile 可以修改指针，但不能修改 const int等；<br>static_cast;<br>reinterpret_cast;比较危险的转换<br>reinterpret_cast示例</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dat</span>&#123;</span><span class="keyword">short</span> a;<span class="keyword">short</span> b;&#125;;</span><br><span class="line"><span class="keyword">long</span> value _0xA224B118;</span><br><span class="line">dat*pd=<span class="keyword">reinterpret_cast</span>&lt;dat*&gt;(&amp;value);</span><br><span class="line">cout&lt;&lt;hex&lt;&lt;pd-&gt;a;</span><br></pre></td></tr></table></figure>


<p><br><br><br></p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>C++PrimerPlus</category>
      </categories>
  </entry>
  <entry>
    <title>c++07　友元</title>
    <url>/WestRoute.github.io/2021/11/06/c++07friends/</url>
    <content><![CDATA[<h3 id="友元类"><a href="#友元类" class="headerlink" title="友元类"></a>友元类</h3><p>友元类的所有方法可以访问原始类的私有成员和保护成员</p>
<span id="more"></span>
<h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p><strong>或 |</strong><br>运算规则：0|0=0&nbsp;&nbsp;&nbsp;&nbsp;0|1=1&nbsp;&nbsp;&nbsp;&nbsp;1|0=1&nbsp;&nbsp;&nbsp;&nbsp;1|1=1<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3|5即&nbsp;&nbsp;&nbsp;&nbsp;0000 0011| 0000 0101 = 0000 0111，因此，3|5的值得7<br><strong>异或 ^</strong><br>运算规则：0^0=0&nbsp;&nbsp;&nbsp;&nbsp;0^1=1&nbsp;&nbsp;&nbsp;&nbsp;1^0=1&nbsp;&nbsp;&nbsp;&nbsp;1^1=0<br><strong>取反运算符 (~)</strong><br>运算规则：　<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ～1=0<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ～0=1<br><strong>复合赋值运算符</strong><br>&amp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例：a&amp;=b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;相当于&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a=a&amp;b<br>|=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例：a|=b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;相当于&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a=a|b<br>/&gt;&gt;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例：a&gt;&gt;=b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;相当于&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a=a&gt;&gt;b<br>&lt;&lt;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例：a&lt;&lt;=b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;相当于&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a=a&lt;&lt;b<br>^=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例：a^=b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;相当于&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a=a^b</p>
<p><strong>条件运算符</strong></p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">void onoff() &#123;<span class="keyword">state</span> = (<span class="keyword">state</span> == On)? Off :On;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>按位异或和赋值运算符</strong></p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">void onoff() &#123;<span class="keyword">state</span> ^= <span class="number">1</span>;&#125;//true(<span class="number">1</span>) or flase(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h4 id="友元类-1"><a href="#友元类-1" class="headerlink" title="友元类"></a>友元类</h4><p>让Remote::setchan()成为Tv类的友元的方法是，在Tv类声明中将其声明为友元：<br>且<strong>顺序不得改变</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Tvfm.h</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Tv</span></span>; <span class="comment">//forward declartion</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Remote</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setchan</span><span class="params">(Tv &amp;t,<span class="keyword">int</span> c)</span></span>;</span><br><span class="line">    .. </span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Tv</span></span>&#123;</span><br><span class="line">    friend <span class="keyword">void</span> Remote::setchan(Tv &amp;t,<span class="keyword">int</span> c);</span><br><span class="line">    ....</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
<p><br><br></p>
<blockquote><p>在 c/c++ 中，为了解决一些频繁调用的小函数大量消耗栈空间（栈内存）的问题，特别的引入了 inline 修饰符，表示为内联函数。<br>栈空间就是指放置程序的局部数据（也就是函数内数据）的内存空间。<br>在系统下，栈空间是有限的，假如频繁大量的使用就会造成因栈空间不足而导致程序出错的问题，如，函数的死循环递归调用的最终结果就是导致栈内存空间枯竭。</p>
</blockquote>
<br>
有时将函数作为两个类的友元更合理，比如一个测量设备class Probe，和一个分析设备class Analyzer，需要使用能同步的计时器。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Analyzer</span>;</span>  <span class="comment">//forward declartion</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Probe</span>&#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">sync</span><span class="params">(Analyzer &amp;a, <span class="keyword">const</span> Probe &amp;p)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">sync</span><span class="params">(Probe &amp;p,<span class="keyword">const</span> Analyzer &amp;a)</span></span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Analyzer</span>&#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">sync</span><span class="params">(Analyzer &amp;a, <span class="keyword">const</span> Probe &amp;p)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">sync</span><span class="params">(Probe &amp;p,<span class="keyword">const</span> Analyzer &amp;a)</span></span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//define the friend functions</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sync</span><span class="params">(Analyzer &amp;a, <span class="keyword">const</span> Probe &amp;p)</span></span>&#123; ... &#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sync</span><span class="params">(Probe &amp;p,<span class="keyword">const</span> Analyzer &amp;a)</span></span>&#123; ... &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<br>

<h3 id="嵌套类（nested-class）"><a href="#嵌套类（nested-class）" class="headerlink" title="嵌套类（nested class）"></a>嵌套类（nested class）</h3><p><strong>结构体是一种在默认情况下其成员为公有的类</strong>，以下是优化11.10和12.11<br><br></p>
<details><summary>11.10 mytime3.h(可点开查看)</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MYTIME3_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MYTIME3_H_</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Time</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">       <span class="keyword">int</span> hours;</span><br><span class="line">       <span class="keyword">int</span> minutes;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">       <span class="built_in">Time</span>();</span><br><span class="line">       <span class="built_in">Timr</span>(<span class="keyword">int</span> h, <span class="keyword">int</span> m=<span class="number">0</span>);</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">addMin</span><span class="params">(<span class="keyword">int</span> m)</span></span>;</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">addHr</span><span class="params">(<span class="keyword">int</span> h)</span></span>;</span><br><span class="line">       Time <span class="keyword">operator</span>+&#123;<span class="keyword">const</span> Time &amp; t&#125; <span class="keyword">const</span>;</span><br><span class="line">       Time <span class="keyword">operator</span>-&#123;<span class="keyword">const</span> Time &amp; t&#125; <span class="keyword">const</span>;</span><br><span class="line">       Time <span class="keyword">operator</span>*&#123;<span class="keyword">const</span> Time &amp; t&#125; <span class="keyword">const</span>;</span><br><span class="line">       <span class="keyword">friend</span> Time <span class="keyword">operator</span>*(<span class="keyword">double</span> m, <span class="keyword">const</span> Time&amp;t)&#123;</span><br><span class="line">           <span class="keyword">return</span> t *m;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">friend</span> std::ostream &amp; <span class="keyword">operator</span> &lt;&lt;(std::ostream &amp;os, <span class="keyword">const</span> Time &amp;t);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</details>
<details><summary>12.11 queue.cpp(可点开查看)</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//queue.cpp -- Queue and Customer methods</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;queue.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"> </span><br><span class="line">Queue::<span class="built_in">Queue</span>(<span class="keyword">int</span> qs <span class="comment">/* = Q_SIZE */</span>) :<span class="built_in">qsize</span>(qs)</span><br><span class="line">&#123;</span><br><span class="line">	front = rear = <span class="literal">NULL</span>;</span><br><span class="line">	items = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Queue::~<span class="built_in">Queue</span>()</span><br><span class="line">&#123;</span><br><span class="line">	Node * temp;</span><br><span class="line">	<span class="keyword">while</span> (front != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		temp = front;</span><br><span class="line">		front = front-&gt;next;</span><br><span class="line">		<span class="keyword">delete</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Queue::isempty</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> items == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Queue::isfull</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> items == qsize;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Queue::queuecount</span><span class="params">()</span> <span class="keyword">const</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> items;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Queue::enqueue</span><span class="params">(<span class="keyword">const</span> Item &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">isfull</span>())</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	Node * add = <span class="keyword">new</span> Node;</span><br><span class="line">	add-&gt;item = item;</span><br><span class="line">	add-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	items++;</span><br><span class="line">	<span class="keyword">if</span> (front == <span class="literal">NULL</span>)</span><br><span class="line">		front = add;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		rear-&gt;next = add;</span><br><span class="line">	rear = add;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Queue::dequeue</span><span class="params">(Item &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (front == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	item = front-&gt;item;</span><br><span class="line">	items--;</span><br><span class="line">	Node * temp = front;</span><br><span class="line">	front = front-&gt;next;</span><br><span class="line">	<span class="keyword">delete</span> temp;</span><br><span class="line">	<span class="keyword">if</span> (items == <span class="number">0</span>)</span><br><span class="line">		rear = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Customer::set</span><span class="params">(<span class="keyword">long</span> when)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	processtime = std::<span class="built_in">rand</span>() % <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">	arrive = when;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<br><br>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">class Queue&#123;</span><br><span class="line">  class <span class="keyword">Node</span><span class="title">&#123;</span></span><br><span class="line"><span class="title">    public</span>:</span><br><span class="line">        Item item;</span><br><span class="line">        <span class="keyword">Node</span> <span class="title">*next</span>;</span><br><span class="line">        <span class="keyword">Node</span><span class="title">(const</span> Item &amp;i):item(i),next(<span class="number">0</span>)&#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
该构造函数将节点的item成员初始化为i，并将next指针指设置为0（空指针的方法之一）

<blockquote><p>空指针的方法：<br>1.0<br>2.NULL，但是需要写一个NULL的有文件<br>3.nullptr（C::11）</p>
</blockquote>
<p>重新编写enqueue方法</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">bool Queue::enqueue(const Item &amp;item)&#123;</span><br><span class="line">  if(isfull()) return flase;</span><br><span class="line">  <span class="keyword">Node</span><span class="title">* add</span>=new <span class="keyword">Node</span><span class="title">(item</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>
将queue模板转定义为模板
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// queuetp.h -- queue template with a nested class </span></span><br><span class="line">#ifndef QUEUETP_H_</span><br><span class="line">#define QUEUETP_H_</span><br><span class="line"> </span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="symbol">Item</span>&gt;</span><br><span class="line"> </span><br><span class="line"><span class="symbol">class</span> <span class="symbol">QueueTP</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">enum</span> &#123; Q_SIZE = <span class="number">10</span> &#125;;</span><br><span class="line"> </span><br><span class="line">	<span class="comment">// Node is a nested class definition </span></span><br><span class="line">	<span class="keyword">class</span> <span class="symbol">Node</span></span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		Item item;</span><br><span class="line">		Node * next;</span><br><span class="line">		Node(<span class="keyword">const</span> Item &amp; i) :item(i), next(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">	&#125;;</span><br><span class="line"> </span><br><span class="line">	Node * front; <span class="comment">// pointer to front of Queue</span></span><br><span class="line">	Node * rear; <span class="comment">// pointer to rear of Queue</span></span><br><span class="line">	<span class="built_in">int</span> items; <span class="comment">// current number of items in Queue</span></span><br><span class="line">	<span class="keyword">const</span> <span class="built_in">int</span> qsize; <span class="comment">// maximum number of items in Queue</span></span><br><span class="line">	QueueTP(<span class="keyword">const</span> QueueTP &amp; q) : qsize(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">	QueueTP &amp; operator= (<span class="keyword">const</span> QueueTP &amp; q) &#123; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	QueueTP(<span class="built_in">int</span> qs = Q_SIZE);</span><br><span class="line">	~QueueTP();</span><br><span class="line">	<span class="built_in">bool</span> isempty() <span class="keyword">const</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> items == <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="built_in">bool</span> isfull() <span class="keyword">const</span></span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">return</span> items == qsize;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="built_in">int</span> queuecount() <span class="keyword">const</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> items;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="built_in">bool</span> enqueue(<span class="keyword">const</span> Item &amp;item); <span class="comment">// add item to end </span></span><br><span class="line">	<span class="built_in">bool</span> dequeue(Item &amp;item) ;	<span class="comment">// remove item from front</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// QueueTP methods</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="symbol">Item</span>&gt;</span><br><span class="line"><span class="symbol">QueueTP</span>&lt;<span class="symbol">Item</span>&gt;::<span class="symbol">QueueTP</span>(<span class="symbol">int</span> <span class="symbol">qs</span>) : <span class="symbol">qsize</span>(<span class="symbol">qs</span>)</span><br><span class="line">&#123;</span><br><span class="line">	front = rear = <span class="number">0</span>; </span><br><span class="line">	items = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="symbol">Item</span>&gt;</span><br><span class="line"><span class="symbol">QueueTP</span>&lt;<span class="symbol">Item</span>&gt; ::~<span class="symbol">QueueTP</span>()</span><br><span class="line">&#123;</span><br><span class="line">	Node * temp;</span><br><span class="line">	<span class="keyword">while</span> (front != <span class="number">0</span>)	<span class="comment">// while queue is not yet empty</span></span><br><span class="line">	&#123;</span><br><span class="line">		temp = front; <span class="comment">// save address of front item </span></span><br><span class="line">		front = front-&gt;next;<span class="comment">// reset pointer to next item </span></span><br><span class="line">		delete temp; <span class="comment">// delete former front</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Add item to queue</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="symbol">Item</span>&gt;</span><br><span class="line"><span class="symbol">bool</span> <span class="symbol">QueueTP</span>&lt;<span class="symbol">Item</span>&gt;::<span class="symbol">enqueue</span>(<span class="symbol">const</span> <span class="symbol">Item</span> &amp; <span class="symbol">item</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (isfull())</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	Node * add = new Node(item); <span class="comment">// create node // on failure, new throws std::bad_alloc exception </span></span><br><span class="line">	items++;</span><br><span class="line">	<span class="keyword">if</span> (front == <span class="number">0</span>)	<span class="comment">// if queue is empty,</span></span><br><span class="line">		front = add;	<span class="comment">// place item at front</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		rear-&gt;next = add; <span class="comment">// else place at rear</span></span><br><span class="line">	rear = add;<span class="comment">// have rear point to new node</span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// Place front item into item variable and remove from queue </span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="symbol">Item</span>&gt;</span><br><span class="line"><span class="symbol">bool</span> <span class="symbol">QueueTP</span>&lt;<span class="symbol">Item</span>&gt;::<span class="symbol">dequeue</span>(<span class="symbol">Item</span> &amp; <span class="symbol">item</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (front == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">	item = front-&gt;item;<span class="comment">// set item to first item in queue</span></span><br><span class="line">	items--;</span><br><span class="line">	Node * temp = front; <span class="comment">// save location of first item </span></span><br><span class="line">	front = front -&gt; next; <span class="comment">// reset front to next item</span></span><br><span class="line">	delete temp;  <span class="comment">// delete former first item</span></span><br><span class="line">	<span class="keyword">if</span> (items == <span class="number">0</span>)</span><br><span class="line">		rear = <span class="number">0</span>; </span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>
测试
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nested.cpp -- using a queue that has a nested class </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;queuetp.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> std::string;</span><br><span class="line">	<span class="keyword">using</span> std::cin;</span><br><span class="line">	<span class="keyword">using</span> std::cout;</span><br><span class="line"> </span><br><span class="line">	<span class="function">QueueTP&lt;string&gt; <span class="title">cs</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">	string temp;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">while</span> (!cs.<span class="built_in">isfull</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Please enter your name. You will be served in the order of arrival.\nname: &quot;</span>;</span><br><span class="line">		<span class="built_in">getline</span>(cin, temp);</span><br><span class="line">		cs.<span class="built_in">enqueue</span>(temp);</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;The queue is full. Processing begins!\n&quot;</span>;</span><br><span class="line">	<span class="keyword">while</span> (!cs.<span class="built_in">isempty</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		cs.<span class="built_in">dequeue</span>(temp);</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Now processing &quot;</span> &lt;&lt; temp &lt;&lt; <span class="string">&quot;...\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>C++PrimerPlus</category>
      </categories>
  </entry>
  <entry>
    <title>python04 爬虫01</title>
    <url>/WestRoute.github.io/2021/11/03/python04/</url>
    <content><![CDATA[<p>爬虫：Webスクレイピング</p>
<span id="more"></span>
<h3 id="find-all-とselect"><a href="#find-all-とselect" class="headerlink" title="find_all()とselect()"></a>find_all()とselect()</h3><p>find_all(tag,keyword)<br>select(cssSelector)</p>
<h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><p>BeautifulSoup<br>Tag:bs.div.h1<br>NavigableString:用来标识标签里的文字<br>Comment:</p>
<h3 id="子标签与后代标签"><a href="#子标签与后代标签" class="headerlink" title="子标签与后代标签"></a>子标签与后代标签</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">html</span>=urlopen(&#x27;http://www.pythonscraping.com/pages/page3.html&#x27;)</span><br><span class="line">bs= BeautifulSoup(html,<span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> chid <span class="keyword">in</span> bs.<span class="builtin-name">find</span>(<span class="string">&#x27;table&#x27;</span>,&#123;<span class="string">&#x27;id&#x27;</span>:<span class="string">&#x27;giflist&#x27;</span>&#125;).children:</span><br><span class="line">    <span class="builtin-name">print</span>(child)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="兄弟标签"><a href="#兄弟标签" class="headerlink" title="兄弟标签"></a>兄弟标签</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">html</span>=urlopen(&#x27;http://www.pythonscraping.com/pages/page3.html&#x27;)</span><br><span class="line">bs= BeautifulSoup(html,<span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> chid <span class="keyword">in</span> bs.<span class="builtin-name">find</span>(<span class="string">&#x27;table&#x27;</span>,&#123;<span class="string">&#x27;id&#x27;</span>:<span class="string">&#x27;giflist&#x27;</span>&#125;).tr.next_siblings:</span><br><span class="line">    <span class="builtin-name">print</span>(child)</span><br></pre></td></tr></table></figure>

<h3 id="父级标签"><a href="#父级标签" class="headerlink" title="父级标签"></a>父级标签</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">html=urlopen(<span class="string">&#x27;http://www.pythonscraping.com/pages/page3.html&#x27;</span>)</span><br><span class="line">bs= BeautifulSoup(<span class="selector-tag">html</span>,<span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(bs.find(<span class="string">&#x27;img&#x27;</span>,&#123;<span class="string">&#x27;src&#x27;</span>:<span class="string">&#x27;../img/gifts/img1.jpg&#x27;</span>&#125;)</span></span><span class="selector-class">.paarent</span><span class="selector-class">.previus_sibling</span><span class="selector-class">.get_text</span>())</span><br></pre></td></tr></table></figure>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">html=urlopen(&#x27;http:<span class="comment">//www.pythonscraping.com/pages/page3.html&#x27;)</span></span><br><span class="line">bs= <span class="constructor">BeautifulSoup(<span class="params">html</span>,&#x27;<span class="params">html</span>.<span class="params">parser</span>&#x27;)</span></span><br><span class="line"></span><br><span class="line">images = bs.find<span class="constructor">_all(&#x27;<span class="params">img</span>&#x27;,&#123;&#x27;<span class="params">src</span>&#x27;:<span class="params">re</span>.<span class="params">comile</span>(&#x27;\.\.\<span class="operator">/</span><span class="params">img</span>\<span class="operator">/</span><span class="params">gifts</span>\<span class="operator">/</span><span class="params">img</span>.<span class="operator">*</span>\.<span class="params">jpg</span>)</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> images:</span><br><span class="line">    print(image<span class="literal">[&#x27;<span class="identifier">src</span>&#x27;]</span>)</span><br></pre></td></tr></table></figure>

<h3 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h3><p>获取全部属性  myTag.attrs<br>获取图片源位置 myImgTag.attrs[‘src’]</p>
<h3 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">bs.find<span class="constructor">_all(<span class="params">lambda</span> <span class="params">tag</span>: <span class="params">len</span>(<span class="params">tag</span>.<span class="params">attr</span>)</span>==<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>len(tag.attr)==2是作为boolean型的参数传入的</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">bs.find<span class="constructor">_all(<span class="params">lambda</span> <span class="params">tag</span>: <span class="params">tag</span>.<span class="params">get_text</span>()</span>==&#x27;Or maybe he\&#x27;s only resting?&#x27;)</span><br><span class="line"></span><br><span class="line">bs.find<span class="constructor">_all(&#x27;&#x27;,<span class="params">text</span> = &#x27;Or <span class="params">maybe</span> <span class="params">he</span>\&#x27;<span class="params">s</span> <span class="params">only</span> <span class="params">resting</span>?&#x27;)</span></span><br></pre></td></tr></table></figure>

<h3 id="指向其他的链接"><a href="#指向其他的链接" class="headerlink" title="指向其他的链接"></a>指向其他的链接</h3><p>通过使用正则表达式**’^(/wiki/)((?!:).)*$)**来仅获取词条链接，并随机进入其中一个链接。</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">from urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line">from bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">random.seed(datetime.datetime.now())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def getLinks(articleUrl):<span class="type"></span></span><br><span class="line"></span><br><span class="line">    html=urlopen(<span class="string">&#x27;https://en.wikipedia.org/&#123;&#125;&#x27;</span>.format(articleUrl))</span><br><span class="line">    bs=BeautifulSoup(html.read(),<span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> bs.find(<span class="string">&#x27;div&#x27;</span>,&#123;<span class="string">&#x27;id&#x27;</span>:<span class="type"></span>&#x27;bodyContent<span class="string">&#x27;&#125;).find_all(&#x27;</span><span class="string">&#x27;.href=re.compile(&#x27;</span>^(/wiki/)((?!:<span class="type"></span>).)*$))</span><br><span class="line"></span><br><span class="line">links=getLinks(<span class="string">&#x27;/wiki/Kevin_Bacon&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> len(links) &gt; <span class="number">0</span>:<span class="type"></span></span><br><span class="line">    <span class="keyword">new</span><span class="type">Article</span> = links[random.randint(<span class="number">0</span>,len(links)<span class="number">-1</span>)].attrs[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">    print(<span class="keyword">new</span><span class="type">Article</span>)</span><br><span class="line">    links=getLinks(<span class="keyword">new</span><span class="type">Article</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="遍历网站"><a href="#遍历网站" class="headerlink" title="遍历网站"></a>遍历网站</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment">#define the variable</span></span><br><span class="line">pages = <span class="built_in">set</span>()</span><br><span class="line">random.seed(datetime.datetime.now())</span><br><span class="line"></span><br><span class="line"><span class="comment">#define the function</span></span><br><span class="line"><span class="comment">#ページ内にあるすべて内部リンクを調べる</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getInternalLinks</span>(<span class="params">bs,includeUrl</span>):</span></span><br><span class="line">    includeUrl = <span class="string">&#x27;&#123;&#125;://&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(urlparse(includeUrl).scheme,urlparse(includeUrl).netloc)</span><br><span class="line">    internalLinks =[]</span><br><span class="line"></span><br><span class="line">        <span class="comment">#&#x27;^(/|.*&#x27;+includeUrl+&#x27;)&#x27;)はregex記法といいます</span></span><br><span class="line">        <span class="comment">#ここでは「//」から始まるリンクだけ探し出す</span></span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> bs.find_all(<span class="string">&#x27;a&#x27;</span>,href=re.<span class="built_in">compile</span>(<span class="string">&#x27;^(/|.*&#x27;</span>+includeUrl+<span class="string">&#x27;)&#x27;</span>)):</span><br><span class="line">        <span class="keyword">if</span> link.attrs[<span class="string">&#x27;href&#x27;</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> link.attrs[<span class="string">&#x27;href&#x27;</span>] <span class="keyword">not</span> <span class="keyword">in</span> intenalLinks:</span><br><span class="line">                <span class="keyword">if</span>(link.attrs[<span class="string">&#x27;href&#x27;</span>].startswith(<span class="string">&#x27;/&#x27;</span>)):</span><br><span class="line">                    internalLinks.append(includeUrl+link.attrs[<span class="string">&#x27;herf&#x27;</span>])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    internalLinks.append(link.attrs[<span class="string">&#x27;herf&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> internalLinks</span><br><span class="line"></span><br><span class="line"><span class="comment">##ページ内にあるすべて外部リンクを調べる</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getExternalLinks</span>(<span class="params">bs,excludeUrl</span>):</span></span><br><span class="line">    externalLinks =[]</span><br><span class="line"></span><br><span class="line">        <span class="comment">#「http」や「www」から始まるかつ、いままで出ていないリンクだけ探し出す</span></span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> bs.find_all(<span class="string">&#x27;a&#x27;</span>,href=re.<span class="built_in">compile</span>(<span class="string">&#x27;^(http|www)((?!&#x27;</span>;excludeUrl+<span class="string">&#x27;).)*$&#x27;</span>)):</span><br><span class="line">        <span class="keyword">if</span> link.attrs[<span class="string">&#x27;href&#x27;</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> link.attrs[<span class="string">&#x27;href&#x27;</span>] <span class="keyword">not</span> <span class="keyword">in</span> externalLinks:</span><br><span class="line">                <span class="keyword">if</span>(link.attrs[<span class="string">&#x27;href&#x27;</span>].startswith(<span class="string">&#x27;/&#x27;</span>)):</span><br><span class="line">                    externalLinks.append(link.attrs[<span class="string">&#x27;herf&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> externalLinks</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getRandomExternalLink</span>(<span class="params">startingPage</span>):</span></span><br><span class="line">    html = urlopen(startingPage)</span><br><span class="line">    bs=BeautifulSoup(html,<span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    externalLinks = getExternalLinks(bs,urlparse(startingPage).netloc)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(externalLinks) ==<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;No external links,looking around the site foe one&#x27;</span>)</span><br><span class="line">        domain=<span class="string">&#x27;&#123;&#125;://&#123;&#125;&#x27;</span>,<span class="built_in">format</span>(urlparse(startingPage).scheme,urlparse(startingPage).netloc)</span><br><span class="line">        internalLinks=getInternalLink(internalLinks[random.randint(<span class="number">0</span>,<span class="built_in">len</span>(internalLinks)-<span class="number">1</span>)])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> externalLinks[random.randint(<span class="number">0</span>,<span class="built_in">len</span>(externalLinks)-<span class="number">1</span>)]</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">followExternalOnly</span>(<span class="params">startingSite</span>):</span></span><br><span class="line">    externalLink = getRandomExternalLink(startingSite)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Random external link is:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(externalLink))</span><br><span class="line">    followExternalOnly(externalLink)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#main:</span></span><br><span class="line">followExternalOnly(<span class="string">&#x27;http://oreilly.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>［c/c++］递归统计文件</title>
    <url>/WestRoute.github.io/2021/11/03/c%E9%80%92%E5%BD%92%E7%BB%9F%E8%AE%A1%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="C-统计文件大小"><a href="#C-统计文件大小" class="headerlink" title="C-统计文件大小"></a>C-统计文件大小</h3><p>方法：<br>&nbsp;&nbsp;&nbsp;&nbsp;1.将指针调到末尾，返回指针位置<br>&nbsp;&nbsp;&nbsp;&nbsp;2.一个bit一个bit地count<br>&nbsp;&nbsp;&nbsp;&nbsp;3.stat()［非标准函数库］<br>&nbsp;&nbsp;&nbsp;&nbsp;4.filelength()［Windows］<br>&nbsp;&nbsp;&nbsp;&nbsp;5.GetFileSize(),GetFileSizeEX()［Windows］</p>
<span id="more"></span>

<p><strong>fseek()函数</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;函数原型：int fseek（FILE *fp，long offset，int fromwhere）；<br>&nbsp;&nbsp;&nbsp;&nbsp;函数功能：将fp的文件位置指针从fromwhere开始移动offset个字节指示下一个要读取的数据的位置<br>offset是一个偏移量，它告诉文件位置指针要跳过多少字节，offset为正时，向后移动，为负时，向前移动，ANSIC要求位移量offset是长整型数据（常量数据后要加L），<br>&nbsp;&nbsp;&nbsp;&nbsp;这样当文件的长度大于64k时不至于出问题<br>&nbsp;&nbsp;&nbsp;&nbsp;fromwhere用于确定偏移量计算的起始位置，它的可能取值有3种，SEEK_SET或0，代表文件开始处，SEEK_CUR或1，代表文件当前位置，SEEK_END或2，代表文件结尾处，<br>&nbsp;&nbsp;&nbsp;&nbsp;通过指定fromwork和offset的值，可使位置指针移动到文件的任意位置，从而实现文件的随机读取，如果函数fseek（）调用成功，则返回0值，否则返回非0值<br>两种特殊使用方式：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将读写位置移动到文件开头:fseek(FILE *stream,0,SEEK_SET);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将读写位置移动到文件尾:fseek(FILE *stream,0,0SEEK_END);<br><br></p>
<h3 id="C-递归统计文件"><a href="#C-递归统计文件" class="headerlink" title="C-递归统计文件"></a>C-递归统计文件</h3><p>(仅输出文件及文件名称的版本)</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> file_size;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">forDir</span><span class="params">(<span class="keyword">char</span>* pcDirName)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">file_full_a</span><span class="params">(<span class="keyword">char</span>* filename)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">        file_size =<span class="number">0</span>;</span><br><span class="line">        forDir(<span class="string">&quot;C:\\Users\\user\\Desktop\\C\\&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,file_size);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">forDir</span><span class="params">(<span class="keyword">char</span>* pcDirName)</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">file_full_a</span><span class="params">(<span class="keyword">char</span>* filename)</span></span>;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">pstDirent</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">        DIR* pDir =<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">char</span> fold[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">char</span> file_full_name[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pcDirName == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pDir = <span class="built_in">opendir</span>(pcDirName);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(pDir == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((pstDirent = <span class="built_in">readdir</span>(pDir))!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="built_in">strcmp</span>(pstDirent -&gt;d_name,<span class="string">&quot;.&quot;</span>)==<span class="number">0</span>) ||</span><br><span class="line">                      (<span class="built_in">strcmp</span>(pstDirent-&gt;d_name,<span class="string">&quot;..&quot;</span>)==<span class="number">0</span>))&#123;</span><br><span class="line">                          <span class="keyword">continue</span>;</span><br><span class="line">                      &#125;</span><br><span class="line">            <span class="keyword">if</span>(pstDirent -&gt;d_type ==DT_DIR)&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="built_in">memset</span>(fold,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(fold));</span><br><span class="line">             <span class="comment">//   printf(&quot;d_name:%s&quot;,pstDirent-&gt;d_name);</span></span><br><span class="line">                <span class="built_in">sprintf</span>(fold,<span class="string">&quot;%s\%s\n&quot;</span>,pcDirName,pstDirent-&gt;d_name);</span><br><span class="line">             <span class="comment">//   printf(&quot;fold*%s&quot;,fold);</span></span><br><span class="line">                forDir(fold);</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                size = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s\%s\n&quot;</span>,pcDirName,pstDirent-&gt;d_name);</span><br><span class="line">                <span class="built_in">memset</span>(file_full_name,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(file_full_name));</span><br><span class="line">                <span class="built_in">sprintf</span>(file_full_name,<span class="string">&quot;%s\%s&quot;</span>,pcDirName,pstDirent-&gt;d_name);</span><br><span class="line">                size=<span class="built_in">file_full_a</span>(file_full_name);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,size);</span><br><span class="line">                file_size = size + file_size;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,file_size);</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">file_full_a</span><span class="params">(<span class="keyword">char</span>*filename)</span></span>&#123;</span><br><span class="line">         <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">         FILE *fp =<span class="built_in">fopen</span>(filename,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">         <span class="keyword">if</span>(!fp) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">         <span class="built_in">fseek</span>(fp,<span class="number">0L</span>,SEEK_END);</span><br><span class="line">         len=<span class="built_in">ftell</span>(fp);</span><br><span class="line">         <span class="built_in">fclose</span>(fp);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> len;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><br><br></p>
<h3 id="C-统计文件大小-1"><a href="#C-统计文件大小-1" class="headerlink" title="C++统计文件大小"></a>C++统计文件大小</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;filesystem&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fs = std::filesystem;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  &#123;</span><br><span class="line">    std::ofstream file&#123;<span class="string">&quot;regular.txt&quot;</span>, std::ios::binary&#125;;</span><br><span class="line">    std::<span class="keyword">uint32_t</span> value = <span class="number">42</span>;</span><br><span class="line">    file.<span class="built_in">write</span>(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span>*&gt;(&amp;value), <span class="built_in"><span class="keyword">sizeof</span></span>(value));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  std::<span class="keyword">uintmax_t</span> size = fs::<span class="built_in">file_size</span>(<span class="string">&quot;regular.txt&quot;</span>);</span><br><span class="line">  <span class="built_in">assert</span>(size == <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="C-递归统计文件-1"><a href="#C-递归统计文件-1" class="headerlink" title="C++递归统计文件"></a>C++递归统计文件</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;filesystem&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFile</span><span class="params">(<span class="keyword">char</span>* fp)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fileCom</span><span class="params">(<span class="keyword">char</span>* fp)</span></span>;</span><br><span class="line"><span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    std::string fp;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;パスを入力：&quot;</span>;</span><br><span class="line">    std::cin &gt;&gt; fp;</span><br><span class="line">    std::cout &lt;&lt; std::endl;*/</span><br><span class="line"></span><br><span class="line">    fp = <span class="string">&quot;C:\\Users\\USER\\Desktop&quot;</span>;<span class="comment">//ファイルパスを指定</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="built_in">fileCom</span>(<span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>*&gt;(fp.<span class="built_in">c_str</span>()));</span><br><span class="line">    std::cout &lt;&lt; std::endl &lt;&lt; <span class="string">&quot;numberSUM：&quot;</span> &lt;&lt; number &lt;&lt; <span class="string">&quot;  sizeSUM：&quot;</span> &lt;&lt; size &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fileCom</span><span class="params">(<span class="keyword">char</span>* fp)</span></span>&#123;</span><br><span class="line">    DIR *pDir = <span class="built_in">opendir</span>(fp);</span><br><span class="line">    dirent *pDirEnt = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((pDirEnt = <span class="built_in">readdir</span>(pDir)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(pDirEnt-&gt;d_name == std::<span class="built_in">string</span>(<span class="string">&quot;.&quot;</span>) || pDirEnt-&gt;d_name == std::<span class="built_in">string</span>(<span class="string">&quot;..&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//処理なし</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            std::string fp2 = std::<span class="built_in">string</span>(fp)+<span class="string">&quot;\\&quot;</span>+pDirEnt-&gt;d_name;</span><br><span class="line">            <span class="comment">//std::cout &lt;&lt; fp2 &lt;&lt; std::endl;</span></span><br><span class="line">            <span class="keyword">char</span>* fp3 = <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>*&gt;(fp2.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isFile</span>(fp3))&#123;</span><br><span class="line">                number ++;</span><br><span class="line">                size += std::filesystem::<span class="built_in">file_size</span>(fp3);</span><br><span class="line">                <span class="comment">//std::cout &lt;&lt;&quot;No.&quot; &lt;&lt; number &lt;&lt; &quot;  Name：&quot; &lt;&lt; pDirEnt-&gt;d_name &lt;&lt; &quot;  size：&quot; &lt;&lt; std::filesystem::file_size(fp3) &lt;&lt; std::endl;</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">fileCom</span>(fp3);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFile</span><span class="params">(<span class="keyword">char</span>* fp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> isDirectory = std::filesystem::<span class="built_in">is_directory</span>(fp);</span><br><span class="line">    <span class="keyword">if</span>(isDirectory)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>编程练习</category>
      </categories>
  </entry>
  <entry>
    <title>python03 标准库</title>
    <url>/WestRoute.github.io/2021/11/03/python03/</url>
    <content><![CDATA[<h3 id="操作系统接口"><a href="#操作系统接口" class="headerlink" title="操作系统接口"></a>操作系统接口</h3><figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="keyword">import</span> os</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">os.getcwd()      <span class="comment"># 返回当前的工作目录</span></span></span><br><span class="line">&#x27;C:\\Python34&#x27;</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">os.chdir(<span class="string">&#x27;/server/accesslogs&#x27;</span>)   <span class="comment"># 修改当前的工作目录</span></span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">os.system(<span class="string">&#x27;mkdir today&#x27;</span>)   <span class="comment"># 执行系统命令 mkdir </span></span></span><br><span class="line">0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="日常的文件和目录管理任务"><a href="#日常的文件和目录管理任务" class="headerlink" title="日常的文件和目录管理任务"></a>日常的文件和目录管理任务</h3><figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="keyword">import</span> shutil</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">shutil.copyfile(<span class="string">&#x27;data.db&#x27;</span>, <span class="string">&#x27;archive.db&#x27;</span>)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">shutil.move(<span class="string">&#x27;/build/executables&#x27;</span>, <span class="string">&#x27;installdir&#x27;</span>)</span></span><br></pre></td></tr></table></figure>
<h3 id="文件通配符"><a href="#文件通配符" class="headerlink" title="文件通配符"></a>文件通配符</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> glob</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">&#x27;*.py&#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;primes.py&#x27;</span>, <span class="string">&#x27;random.py&#x27;</span>, <span class="string">&#x27;quote.py&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="错误输出重定向和程序终止"><a href="#错误输出重定向和程序终止" class="headerlink" title="错误输出重定向和程序终止"></a>错误输出重定向和程序终止</h3><p>sys 还有 stdin，stdout 和 stderr 属性，即使在 stdout 被重定向时，后者也可以用于显示警告和错误信息。</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; sys.<span class="keyword">stderr</span>.<span class="built_in">write</span>(<span class="string">&#x27;Warning, log file not found starting a new one\n&#x27;</span>)</span><br><span class="line">Warning, <span class="built_in">log</span> <span class="built_in">file</span> <span class="keyword">not</span> found starting <span class="keyword">a</span> <span class="built_in">new</span> <span class="literal">one</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串正则匹配"><a href="#字符串正则匹配" class="headerlink" title="字符串正则匹配"></a>字符串正则匹配</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(<span class="string">r&#x27;\bf[a-z]*&#x27;</span>, <span class="string">&#x27;which foot or hand fell fastest&#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;foot&#x27;</span>, <span class="string">&#x27;fell&#x27;</span>, <span class="string">&#x27;fastest&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.sub(<span class="string">r&#x27;(\b[a-z]+) \1&#x27;</span>, <span class="string">r&#x27;\1&#x27;</span>, <span class="string">&#x27;cat in the the hat&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;cat in the hat&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h3><h3 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h3><figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="keyword">import</span> zlib</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">s = <span class="string">b&#x27;witch which has which witches wrist watch&#x27;</span></span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="built_in">len</span>(s)</span></span><br><span class="line">41</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">t = zlib.compress(s)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="built_in">len</span>(t)</span></span><br><span class="line">37</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">zlib.decompress(t)</span></span><br><span class="line">b&#x27;witch which has which witches wrist watch&#x27;</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">zlib.crc32(s)</span></span><br><span class="line">226805979</span><br></pre></td></tr></table></figure>


<h3 id="性能度量"><a href="#性能度量" class="headerlink" title="性能度量"></a>性能度量</h3><p>例如，使用元组封装和拆封来交换元素看起来要比使用传统的方法要诱人的多,timeit 证明了现代的方法更快一些。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from timeit import Timer</span><br><span class="line">&gt;&gt;&gt; <span class="constructor">Timer(&#x27;<span class="params">t</span>=<span class="params">a</span>; <span class="params">a</span>=<span class="params">b</span>; <span class="params">b</span>=<span class="params">t</span>&#x27;, &#x27;<span class="params">a</span>=1; <span class="params">b</span>=2&#x27;)</span>.timeit<span class="literal">()</span></span><br><span class="line"><span class="number">0.57535828626024577</span></span><br><span class="line">&gt;&gt;&gt; <span class="constructor">Timer(&#x27;<span class="params">a</span>,<span class="params">b</span> = <span class="params">b</span>,<span class="params">a</span>&#x27;, &#x27;<span class="params">a</span>=1; <span class="params">b</span>=2&#x27;)</span>.timeit<span class="literal">()</span></span><br><span class="line"><span class="number">0.54962537085770791</span></span><br></pre></td></tr></table></figure>


<h3 id="测试模块"><a href="#测试模块" class="headerlink" title="测试模块"></a>测试模块</h3><p>doctest模块提供了一个工具，扫描模块并根据程序中内嵌的文档字符串执行测试。<br>测试构造如同简单的将它的输出结果剪切并粘贴到文档字符串中。<br>通过用户提供的例子，它强化了文档，允许 doctest 模块确认代码的结果是否与文档一致:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">average</span>(<span class="params">values</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Computes the arithmetic mean of a list of numbers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(average([20, 30, 70]))</span></span><br><span class="line"><span class="string">    40.0</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(values) / <span class="built_in">len</span>(values)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> doctest</span><br><span class="line">doctest.testmod()   <span class="comment"># 自动验证嵌入测试</span></span><br></pre></td></tr></table></figure>
<p><br><br></p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>每月总结08 (2021/10)</title>
    <url>/WestRoute.github.io/2021/11/02/MonthlyRe08/</url>
    <content><![CDATA[<p>38部电影，7本书。开始打工了很累，有些有心无力，以后工作了又会怎样呢？</p>
<span id="more"></span>
<h3 id="影"><a href="#影" class="headerlink" title="影"></a>影</h3><table>
<thead>
<tr>
<th>电影</th>
<th>日期</th>
<th>顺序</th>
</tr>
</thead>
<tbody><tr>
<td>双峰</td>
<td>2021/10/31</td>
<td>1241</td>
</tr>
<tr>
<td>爱情短片</td>
<td>2021/10/31</td>
<td>1240</td>
</tr>
<tr>
<td>愤怒的葡萄</td>
<td>2021/10/30</td>
<td>1239</td>
</tr>
<tr>
<td>蓝丝绒</td>
<td>2021/10/29</td>
<td>1238</td>
</tr>
<tr>
<td><font color="red">大幻影</font></td>
<td>2021/10/28</td>
<td>1237</td>
</tr>
<tr>
<td><font color="red">战地军魂</font></td>
<td>2021/10/27</td>
<td>1236</td>
</tr>
<tr>
<td><font color="red">影子部队</font></td>
<td>2021/10/26</td>
<td>1235</td>
</tr>
<tr>
<td>维莉蒂安娜</td>
<td>2021/10/25</td>
<td>1234</td>
</tr>
<tr>
<td>资产阶级的审慎魅力</td>
<td>2021/10/25</td>
<td>1233</td>
</tr>
<tr>
<td>通往绞刑架的电梯</td>
<td>2021/10/24</td>
<td>1232</td>
</tr>
<tr>
<td>瑞典女王</td>
<td>2021/10/23</td>
<td>1231</td>
</tr>
<tr>
<td>落水狗</td>
<td>2021/10/23</td>
<td>1230</td>
</tr>
<tr>
<td><font color="red">伊万的童年</font></td>
<td>2021/10/22</td>
<td>1229</td>
</tr>
<tr>
<td><font color="red">冰血长津湖</font></td>
<td>2021/10/21</td>
<td>1228</td>
</tr>
<tr>
<td><font color="red">桂河大桥</font></td>
<td>2021/10/21</td>
<td>1227</td>
</tr>
<tr>
<td>扒手</td>
<td>2021/10/20</td>
<td>1226</td>
</tr>
<tr>
<td>扒手</td>
<td>2021/10/20</td>
<td>1225</td>
</tr>
<tr>
<td>红气球</td>
<td>2021/10/19</td>
<td>1224</td>
</tr>
<tr>
<td><font color="red">你逃我也逃</font></td>
<td>2021/10/18</td>
<td>1223</td>
</tr>
<tr>
<td>青木瓜之味</td>
<td>2021/10/17</td>
<td>1222</td>
</tr>
<tr>
<td>雌雄大盗</td>
<td>2021/10/17</td>
<td>1221</td>
</tr>
<tr>
<td>洞</td>
<td>2021/10/17</td>
<td>1220</td>
</tr>
<tr>
<td><font color="red">高地战</font></td>
<td>2021/10/16</td>
<td>1219</td>
</tr>
<tr>
<td>紫色</td>
<td>2021/10/16</td>
<td>1218</td>
</tr>
<tr>
<td>阿玛柯德</td>
<td>2021/10/15</td>
<td>1217</td>
</tr>
<tr>
<td><font color="red">海与毒药</font></td>
<td>2021/10/15</td>
<td>1216</td>
</tr>
<tr>
<td>野草莓</td>
<td>2021/10/15</td>
<td>1215</td>
</tr>
<tr>
<td>黄金三镖客</td>
<td>2021/10/15</td>
<td>1214</td>
</tr>
<tr>
<td><font color="red">自己去看</font></td>
<td>2021/10/14</td>
<td>1213</td>
</tr>
<tr>
<td>夺魂索</td>
<td>2021/10/13</td>
<td>1212</td>
</tr>
<tr>
<td><font color="red">大独裁者</font></td>
<td>2021/10/12</td>
<td>1211</td>
</tr>
<tr>
<td>莫扎特传</td>
<td>2021/10/11</td>
<td>1210</td>
</tr>
<tr>
<td>佐杜洛夫斯基的沙丘</td>
<td>2021/10/10</td>
<td>1209</td>
</tr>
<tr>
<td><font color="red">邮差</font></td>
<td>2021/10/5</td>
<td>1208</td>
</tr>
<tr>
<td>地球之夜</td>
<td>2021/10/4</td>
<td>1207</td>
</tr>
<tr>
<td>重庆森林</td>
<td>2021/10/3</td>
<td>1206</td>
</tr>
<tr>
<td>罗拉快跑</td>
<td>2021/10/2</td>
<td>1205</td>
</tr>
<tr>
<td><font color="red">英国病人</font></td>
<td>2021/10/1</td>
<td>1204</td>
</tr>
</tbody></table>
<h3 id="书"><a href="#书" class="headerlink" title="书"></a>书</h3><p>这个月看的战争电影比较多，红色标出了。<br>选出三个推荐的是：《海与毒药》《莫扎特传》《黄金三镖客》<br><br><br>同样值得推荐的纪录片是《冰血长津湖》。<br>| 书        | 日期     | 顺序    |<br>|————-|————–|——–|<br>| Oxfords Birds of North American | 2021/10/31 | 164 |<br>| 江户川乱步佳作集                  | 2021/10/31 | 163 |<br>| 索拉里斯星                     | 2021/10/31 | 162 |<br>| 癫狂与文明                     | 2021/10/31 | 161 |<br>| 巴巴罗萨                      | 2021/10/31 | 160 |<br>| 查拉图斯特拉如是说                 | 2021/10/31 | 159 |<br>| 阿特斯拉耸耸肩                   | 2021/10/31 | 158 |<br>| 中国生物多样性地理图集               | 2021/10/31 | 157 |</p>
<h4 id="索拉里斯星"><a href="#索拉里斯星" class="headerlink" title="索拉里斯星"></a>索拉里斯星</h4><p>确实是原作比电影好看多了。<br>《三体》只是幻想的集合，但以人类为中心视觉探索宇宙同时又缺少人类的特点————感性，就像文中的人类没有办法在无边际的宇宙确定人类的位置一样，作者也没有办法对人类这个集合做一个总结，最后得出了最消极的“黑暗森林”定理；<br>《人工智能能梦到电子羊吗？》也是从人类的伦理道德去探讨机器人和人类的区别，但是在《三体》的基础上增加了对人类的自身的反省；<br>《索拉里斯星》讲的是一种超越人类想象的存在，对手不是外星“人”，甚至没有人类的感情，同时又突出描写了人类自身的弱点，是我至今度过最畅快的科幻小说。<br>可能是因为看过电影，每一个场景都十分清晰地浮现在眼前。</p>
<h4 id="江户川乱步佳作集"><a href="#江户川乱步佳作集" class="headerlink" title="江户川乱步佳作集"></a>江户川乱步佳作集</h4><p>不是本格推理，更像初中生的鬼故事会。</p>
<h4 id="癫狂与文明"><a href="#癫狂与文明" class="headerlink" title="癫狂与文明"></a>癫狂与文明</h4><p>太好读了！怎么能写的这么生动有趣？</p>
<h4 id="阿特斯拉耸耸肩"><a href="#阿特斯拉耸耸肩" class="headerlink" title="阿特斯拉耸耸肩"></a>阿特斯拉耸耸肩</h4><blockquote><p>….出版以后，恶评如潮但畅销无比，对美国大众的影响仅次于《圣经》，作者也因该书几乎激怒了整个成人世界：父亲、母亲、左派知识分子、自由主义者和保守主义者。他们贬低她：“只有十几岁的青少年醉心于她的学说。”….</p>
<footer><strong>序</strong></footer></blockquote>
<p>确实让人想起年轻气盛的青少年时期…<br>读的时候对比着从前的梦想，对比着书里不切实际的故事，对比着路人的冷眼旁观，同时在想今后自己到底要过这样的生活。<br><br><br>小说先是选择了一个奇怪的背景————全世界实施共产主义，所有的人的口头禅是“我们必须帮助弱者”、“贫穷不是罪恶，金钱才是罪恶”。之后是他的登场人物，除了部分主角外所有人都是愚蠢而又不知感恩，去剥夺资本家的血汗钱。<br>如果没有读过小说的人一定会疑问，“血汗钱”怎么会和“资本家”连在一起出现呢？<br>在故事里，主人公们十年如一日的努力工作研发出了低价硬度高的合金却因为“合金太优秀了，会伤害到其他企业的自尊心”为由而受到政府的制裁。制裁内容是：主人公合金哪怕质量再好也不可以生产超过其他企业的的平均产量，铁路公司如果买合金买不到那就买脆弱的钢铁吧。<br><br><br>读的时候可能会想：<br>————作者怎么会写这样一篇明显就是恶心人的东西就是为了堵住社会学家的嘴？<br>————就这种幼稚的发泄也能自称哲学？<br><br><br>然而当我们读柏拉图的《理想国》的时候，我们当然知道柏拉图的极端又光怪陆离的乌托邦无法实现、甚至让人难接受，但是它仍作为一颗明星闪烁在人类历史文明的长河中————那么处在公平-自由天平另一极端的《阿特拉斯耸耸肩》怎么就不能同样端坐在人类智慧的殿堂之上呢？<br><br><br></p>
<h4 id="Oxfords-Birds-of-North-American"><a href="#Oxfords-Birds-of-North-American" class="headerlink" title="Oxfords Birds of North American"></a>Oxfords Birds of North American</h4><img src="/WestRoute.github.io/images/book.png">
从小一直想看的书，没想到真的能拿在手上。
<br><br>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>2021/10/31是「initial step in NIJISANJI」演唱会。<br>和朋友一起筹款送花篮，我负责画画。<br><img src="/WestRoute.github.io/images/flowers.JPG"></p>
<p>2021/11/6</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>每月总结</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础2</title>
    <url>/WestRoute.github.io/2021/10/29/python02/</url>
    <content><![CDATA[<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>迭代器有两个基本的方法：<strong>iter()</strong> 和 **next()**。<br>字符串，列表或元组对象都可用于创建迭代器</p>
<span id="more"></span>
<p>可以使用常规for语句进行遍历(<strong>对象</strong>)：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">list</span>=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="attribute">it</span> = iter(list)    # 创建迭代器对象</span><br><span class="line"><span class="attribute">for</span> x in it:</span><br><span class="line">    <span class="attribute">print</span> (x, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以使用 next() 函数：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">import sys         <span class="comment"># 引入 sys 模块</span></span><br><span class="line"> </span><br><span class="line">list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">it = iter(list)    <span class="comment"># 创建迭代器对象</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    try:</span><br><span class="line">        print (<span class="keyword">next</span>(it))</span><br><span class="line">    except StopIteration:</span><br><span class="line">        sys.<span class="keyword">exit</span>()</span><br></pre></td></tr></table></figure>
<br>
StopIteration 异常用于标识迭代的完成

<h3 id="生成器（generator）"><a href="#生成器（generator）" class="headerlink" title="生成器（generator）"></a>生成器（generator）</h3><p>在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line"> </span><br><span class="line">def fibonacci(n): <span class="comment"># 生成器函数 - 斐波那契</span></span><br><span class="line">    a, b, counter = <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        <span class="keyword">if</span> (counter &gt; n): </span><br><span class="line">            return</span><br><span class="line">        yield a</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">f = fibonacci(<span class="number">10</span>) <span class="comment"># f 是一个迭代器，由生成器返回生成</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    try:</span><br><span class="line">        print (<span class="keyword">next</span>(f), end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    except StopIteration:</span><br><span class="line">        sys.<span class="keyword">exit</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出结果如下：<br>0 1 1 2 3 5 8 13 21 34 55</p>
<p><br><br>在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(a))   <span class="comment"># 指向的是同一个对象</span></span><br><span class="line">    a=<span class="number">10</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(a))   <span class="comment"># 一个新对象</span></span><br><span class="line"> </span><br><span class="line">a=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line">change(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出结果如下：<br>2301180864816<br>2301180864816<br><strong>2301180865104</strong><br><strong>2301180864816</strong><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changeme</span>(<span class="params"> mylist </span>):</span></span><br><span class="line">   <span class="string">&quot;修改传入的列表&quot;</span></span><br><span class="line">   mylist.append([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;函数内取值: &quot;</span>, mylist)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#调用changeme函数</span></span><br><span class="line">mylist = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>]</span><br><span class="line">changeme( mylist )</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;函数外取值: &quot;</span>, mylist)</span><br></pre></td></tr></table></figure>
<p>输出结果如下：<br>函数内取值:  [10, 20, 30, [1, 2, 3, 4]]<br>函数外取值:  [10, 20, 30, [1, 2, 3, 4]]</p>
<h3 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h3> <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可写函数说明</span></span><br><span class="line">def printinfo( name, age = 35 ):</span><br><span class="line">   <span class="string">&quot;打印任何传入的字符串&quot;</span></span><br><span class="line">   <span class="builtin-name">print</span> (<span class="string">&quot;名字: &quot;</span>, name)</span><br><span class="line">   <span class="builtin-name">print</span> (<span class="string">&quot;年龄: &quot;</span>, age)</span><br><span class="line">   return</span><br><span class="line"> </span><br><span class="line"><span class="comment">#调用printinfo函数</span></span><br><span class="line">printinfo( <span class="attribute">age</span>=50, <span class="attribute">name</span>=<span class="string">&quot;runoob&quot;</span> )</span><br><span class="line"><span class="builtin-name">print</span> (<span class="string">&quot;------------------------&quot;</span>)</span><br><span class="line">printinfo( <span class="attribute">name</span>=<span class="string">&quot;runoob&quot;</span> )</span><br></pre></td></tr></table></figure>
<br>
加了星号 * 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可写函数说明</span></span><br><span class="line">def printinfo( arg1, *vartuple ):</span><br><span class="line">   <span class="string">&quot;打印任何传入的参数&quot;</span></span><br><span class="line">   <span class="builtin-name">print</span> (<span class="string">&quot;输出: &quot;</span>)</span><br><span class="line">   <span class="builtin-name">print</span> (arg1)</span><br><span class="line">   <span class="builtin-name">print</span> (vartuple)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#调用printinfo 函数</span></span><br><span class="line">printinfo( 70, 60, 50 )</span><br></pre></td></tr></table></figure>
输出结果如下：
70
(60, 50)

<p><br><br>加了两个星号 ** 的参数会以字典的形式导入。<br> / 用来指明函数形参必须使用指定位置参数，不能使用关键字参数的形式。</p>
<h3 id="lambda-函数"><a href="#lambda-函数" class="headerlink" title="lambda 函数"></a>lambda 函数</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sum</span> = lambda arg<span class="number">1</span>, arg<span class="number">2</span>: arg<span class="number">1</span> + arg<span class="number">2</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#调用sum函数</span></span><br><span class="line"><span class="attribute">print</span> (<span class="string">&quot;相加后的值为 : &quot;</span>, sum( <span class="number">10</span>, <span class="number">20</span> ))</span><br><span class="line"><span class="attribute">print</span> (<span class="string">&quot;相加后的值为 : &quot;</span>, sum( <span class="number">20</span>, <span class="number">20</span> ))</span><br></pre></td></tr></table></figure>


<h3 id="模块-import"><a href="#模块-import" class="headerlink" title="模块 import"></a>模块 import</h3><p>每个模块都有一个__name__属性，当其值是’<strong>main</strong>‘时，表明该模块自身在运行，否则是被引入。<br>内置的函数 dir() 可以找到模块内定义的所有名称</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(sys)  </span><br><span class="line">[<span class="string">&#x27;__displayhook__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__excepthook__&#x27;</span>, <span class="string">&#x27;__loader__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;__stderr__&#x27;</span>, <span class="string">&#x27;__stdin__&#x27;</span>, <span class="string">&#x27;__stdout__&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;_clear_type_cache&#x27;</span>, <span class="string">&#x27;_current_frames&#x27;</span>, <span class="string">&#x27;_debugmallocstats&#x27;</span>, <span class="string">&#x27;_getframe&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;_home&#x27;</span>, <span class="string">&#x27;_mercurial&#x27;</span>, <span class="string">&#x27;_xoptions&#x27;</span>, <span class="string">&#x27;abiflags&#x27;</span>, <span class="string">&#x27;api_version&#x27;</span>, <span class="string">&#x27;argv&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;base_exec_prefix&#x27;</span>, <span class="string">&#x27;base_prefix&#x27;</span>, <span class="string">&#x27;builtin_module_names&#x27;</span>, <span class="string">&#x27;byteorder&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;call_tracing&#x27;</span>, <span class="string">&#x27;callstats&#x27;</span>, <span class="string">&#x27;copyright&#x27;</span>, <span class="string">&#x27;displayhook&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;dont_write_bytecode&#x27;</span>, <span class="string">&#x27;exc_info&#x27;</span>, <span class="string">&#x27;excepthook&#x27;</span>, <span class="string">&#x27;exec_prefix&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;executable&#x27;</span>, <span class="string">&#x27;exit&#x27;</span>, <span class="string">&#x27;flags&#x27;</span>, <span class="string">&#x27;float_info&#x27;</span>, <span class="string">&#x27;float_repr_style&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;getcheckinterval&#x27;</span>, <span class="string">&#x27;getdefaultencoding&#x27;</span>, <span class="string">&#x27;getdlopenflags&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;getfilesystemencoding&#x27;</span>, <span class="string">&#x27;getobjects&#x27;</span>, <span class="string">&#x27;getprofile&#x27;</span>, <span class="string">&#x27;getrecursionlimit&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;getrefcount&#x27;</span>, <span class="string">&#x27;getsizeof&#x27;</span>, <span class="string">&#x27;getswitchinterval&#x27;</span>, <span class="string">&#x27;gettotalrefcount&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;gettrace&#x27;</span>, <span class="string">&#x27;hash_info&#x27;</span>, <span class="string">&#x27;hexversion&#x27;</span>, <span class="string">&#x27;implementation&#x27;</span>, <span class="string">&#x27;int_info&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;intern&#x27;</span>, <span class="string">&#x27;maxsize&#x27;</span>, <span class="string">&#x27;maxunicode&#x27;</span>, <span class="string">&#x27;meta_path&#x27;</span>, <span class="string">&#x27;modules&#x27;</span>, <span class="string">&#x27;path&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;path_hooks&#x27;</span>, <span class="string">&#x27;path_importer_cache&#x27;</span>, <span class="string">&#x27;platform&#x27;</span>, <span class="string">&#x27;prefix&#x27;</span>, <span class="string">&#x27;ps1&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;setcheckinterval&#x27;</span>, <span class="string">&#x27;setdlopenflags&#x27;</span>, <span class="string">&#x27;setprofile&#x27;</span>, <span class="string">&#x27;setrecursionlimit&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;setswitchinterval&#x27;</span>, <span class="string">&#x27;settrace&#x27;</span>, <span class="string">&#x27;stderr&#x27;</span>, <span class="string">&#x27;stdin&#x27;</span>, <span class="string">&#x27;stdout&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;thread_info&#x27;</span>, <span class="string">&#x27;version&#x27;</span>, <span class="string">&#x27;version_info&#x27;</span>, <span class="string">&#x27;warnoptions&#x27;</span>]</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<p> <br><br></p>
<h3 id="文件I-O"><a href="#文件I-O" class="headerlink" title="文件I/O"></a>文件I/O</h3><p>这里有两种方式输出一个平方与立方的表:</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">  &gt;&gt;&gt; for x in range(1, 11):</span><br><span class="line">...     print(repr(x).rjust(2), repr(x*x).rjust(3), end=&#x27; &#x27;)</span><br><span class="line">...     <span class="comment"># 注意前一行 &#x27;end&#x27; 的使用  </span></span><br><span class="line">...     print(repr(x*x*x).rjust(4))</span><br><span class="line">...</span><br><span class="line"><span class="number"> 1 </span> <span class="number"> 1 </span>   1</span><br><span class="line"><span class="number"> 2 </span> <span class="number"> 4 </span>   8</span><br><span class="line"><span class="number"> 3 </span> <span class="number"> 9 </span>  27</span><br><span class="line"><span class="number"> 4 </span><span class="number"> 16 </span>  64</span><br><span class="line"><span class="number"> 5 </span><span class="number"> 25 </span> 125</span><br><span class="line"><span class="number"> 6 </span><span class="number"> 36 </span> 216</span><br><span class="line"><span class="number"> 7 </span><span class="number"> 49 </span> 343</span><br><span class="line"><span class="number"> 8 </span><span class="number"> 64 </span> 512</span><br><span class="line"><span class="number"> 9 </span><span class="number"> 81 </span> 729</span><br><span class="line">10<span class="number"> 100 </span>1000</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; for x in range(1, 11):</span><br><span class="line">...     print(&#x27;&#123;0:2d&#125; &#123;1:3d&#125; &#123;2:4d&#125;&#x27;.format(x, x*x, x*x*x))</span><br><span class="line">...</span><br><span class="line"><span class="number"> 1 </span> <span class="number"> 1 </span>   1</span><br><span class="line"><span class="number"> 2 </span> <span class="number"> 4 </span>   8</span><br><span class="line"><span class="number"> 3 </span> <span class="number"> 9 </span>  27</span><br><span class="line"><span class="number"> 4 </span><span class="number"> 16 </span>  64</span><br><span class="line"><span class="number"> 5 </span><span class="number"> 25 </span> 125</span><br><span class="line"><span class="number"> 6 </span><span class="number"> 36 </span> 216</span><br><span class="line"><span class="number"> 7 </span><span class="number"> 49 </span> 343</span><br><span class="line"><span class="number"> 8 </span><span class="number"> 64 </span> 512</span><br><span class="line"><span class="number"> 9 </span><span class="number"> 81 </span> 729</span><br><span class="line">10<span class="number"> 100 </span>1000</span><br></pre></td></tr></table></figure>
<p><br><br>读取键盘输入</p>
<figure class="highlight hsp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">str</span> = <span class="keyword">input</span>(<span class="string">&quot;请输入：&quot;</span>)<span class="comment">;</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;你输入的内容是: &quot;</span>, <span class="keyword">str</span>)</span><br></pre></td></tr></table></figure>
<br>
打开读写文件
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment">#open(filename, mode)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;/tmp/foo.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">f.<span class="built_in">write</span>( <span class="string">&quot;Python 是一个非常好的语言。\n是的，的确非常好!!\n&quot;</span> )</span><br><span class="line"><span class="comment">#关闭打开的文件</span></span><br><span class="line">f.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">f.<span class="keyword">read</span>(<span class="keyword">size</span>)</span><br><span class="line">str = f.readline()</span><br><span class="line">f.<span class="keyword">readlines</span>() 将返回该文件中包含的所有行。</span><br></pre></td></tr></table></figure>

<p><strong>f.tell()</strong><br>f.tell() 返回文件对象当前所处的位置, 它是从文件开头开始算起的字节数。<br><br></p>
<p><strong>f.seek()</strong><br>如果要改变文件当前的位置, 可以使用 f.seek(offset, from_what) 函数。<br>from_what 的值, 如果是 0 表示开头, 如果是 1 表示当前位置, 2 表示文件的结尾，例如：<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;seek(x,0) ： 从起始位置即文件首行首字符开始移动 x 个字符<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;seek(x,1) ： 表示从当前位置往后移动x个字符<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;seek(-x,2)：表示从文件的结尾往前移动x个字符</p>
<h3 id="pickle模块"><a href="#pickle模块" class="headerlink" title="pickle模块"></a>pickle模块</h3><p>python的pickle模块实现了基本的数据序列和反序列化。</p>
<h3 id="OS-文件-目录方法"><a href="#OS-文件-目录方法" class="headerlink" title="OS 文件/目录方法"></a>OS 文件/目录方法</h3><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">arg</span> <span class="keyword">in</span> sys.argv[<span class="number">1</span>:]:</span><br><span class="line">    try:</span><br><span class="line">        f = <span class="built_in">open</span>(<span class="built_in">arg</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    except IOError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;cannot open&#x27;</span>, <span class="built_in">arg</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">arg</span>, <span class="string">&#x27;has&#x27;</span>, <span class="built_in">len</span>(f.readlines()), <span class="string">&#x27;lines&#x27;</span>)</span><br><span class="line">        f.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure>

<h3 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h3><blockquote><p>A namespace is a mapping from names to objects.Most namespaces are currently implemented as Python dictionaries。</p>
</blockquote><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>python基础1</title>
    <url>/WestRoute.github.io/2021/10/28/python01/</url>
    <content><![CDATA[<p>Python 3 源码文件以 UTF-8 编码，所有字符串都是 unicode 字符串</p>
<span id="more"></span>
<h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;缩进不一致，会导致运行错误，反斜杠 \ 来实现多行语句</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">total</span> = <span class="string">item_one + \</span></span><br><span class="line"><span class="string">        item_two + \</span></span><br><span class="line"><span class="string">        item_three</span></span><br></pre></td></tr></table></figure>
<p><br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;在 [], {}, 或 () 中的多行语句，不需要使用反斜杠 <br><br></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">total</span> = [<span class="string">&#x27;item_one&#x27;</span>, <span class="string">&#x27;item_two&#x27;</span>, <span class="string">&#x27;item_three&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;item_four&#x27;</span>, <span class="string">&#x27;item_five&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p><br><br><br></p>
<h3 id="变量和数据类型"><a href="#变量和数据类型" class="headerlink" title="变量和数据类型"></a>变量和数据类型</h3><p>Python3 中有六个标准的数据类型：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>不可变数据（3 个）</strong>：Number（数字）、String（字符串）、Tuple（元组）；<br>&nbsp;&nbsp;&nbsp;&nbsp;<strong>可变数据（3 个）</strong>：List（列表）、Dictionary（字典）、Set（集合）。</p>
<p>不需要声明数据类型，但可以用 isinstance 来判断：</p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a = <span class="number">111</span></span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="built_in">isinstance</span>(a, <span class="built_in">int</span>)</span></span><br><span class="line">True</span><br></pre></td></tr></table></figure>
<p><br><br><br>isinstance 和 type 的区别在于：</p>
<p>type()不会认为子类是一种父类类型。<br>isinstance()会认为子类是一种父类类型。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>注意</strong>：Python3 中，bool 是 int 的子类，True 和 False 可以和数字相加， True==1、False==0 会返回 True，但可以通过 is 来判断类型。</p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="built_in">issubclass</span>(<span class="built_in">bool</span>, <span class="built_in">int</span>) </span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="literal">True</span>==<span class="number">1</span></span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="literal">False</span>==<span class="number">0</span></span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="literal">True</span>+<span class="number">1</span></span></span><br><span class="line">2</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="literal">False</span>+<span class="number">1</span></span></span><br><span class="line">1</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="number">1</span> <span class="keyword">is</span> <span class="literal">True</span></span></span><br><span class="line">False</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="number">0</span> <span class="keyword">is</span> <span class="literal">False</span></span></span><br><span class="line">False</span><br></pre></td></tr></table></figure>
<p><br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;del语句删除单个或多个对象<br><br><br></p>
<h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><p>运算</p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="number">2</span> / <span class="number">4</span>  <span class="comment"># 除法，得到一个浮点数</span></span></span><br><span class="line">0.5</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="number">2</span> // <span class="number">4</span> <span class="comment"># 除法，得到一个整数</span></span></span><br><span class="line">0</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="number">17</span> % <span class="number">3</span> <span class="comment"># 取余</span></span></span><br><span class="line">2</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="number">2</span> ** <span class="number">5</span> <span class="comment"># 乘方</span></span></span><br><span class="line">32</span><br></pre></td></tr></table></figure>

<h4 id="列表（List）"><a href="#列表（List）" class="headerlink" title="列表（List）"></a>列表（List）</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">list = [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, 1997, 2000]</span><br><span class="line"> </span><br><span class="line"><span class="builtin-name">print</span> (<span class="string">&quot;原始列表 : &quot;</span>, list)</span><br><span class="line">del list[2]</span><br><span class="line"><span class="builtin-name">print</span> (<span class="string">&quot;删除第三个元素 : &quot;</span>, list)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="built_in">print</span>(tup[<span class="number">0</span>])</span></span><br><span class="line">1</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="built_in">print</span>(tup[<span class="number">1</span>:<span class="number">5</span>])</span></span><br><span class="line">(2, 3, 4, 5)</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">tup[<span class="number">0</span>] = <span class="number">11</span>  <span class="comment"># 修改元组元素的操作是非法的</span></span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: &#x27;tuple&#x27; object does not support item assignment</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure>
<p>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">tup1</span> = ()    <span class="comment"># 空元组</span></span><br><span class="line"><span class="attr">tup2</span> = (<span class="number">20</span>,) <span class="comment"># 一个元素，需要在元素后添加逗号</span></span><br></pre></td></tr></table></figure>

<h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p>set可以进行集合运算</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line">b = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a - b)     <span class="comment"># a 和 b 的差集</span></span><br><span class="line"><span class="built_in">print</span>(a | b)     <span class="comment"># a 和 b 的并集</span></span><br><span class="line"><span class="built_in">print</span>(a &amp; b)     <span class="comment"># a 和 b 的交集</span></span><br><span class="line"><span class="built_in">print</span>(a ^ b)     <span class="comment"># a 和 b 中不同时存在的元素</span></span><br></pre></td></tr></table></figure>

<h4 id="Dictionary（字典）"><a href="#Dictionary（字典）" class="headerlink" title="Dictionary（字典）"></a>Dictionary（字典）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span> = &#123;&#125;</span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>] = <span class="string">&quot;1 - 菜鸟教程&quot;</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="number">2</span>]     = <span class="string">&quot;2 - 菜鸟工具&quot;</span></span><br><span class="line"></span><br><span class="line">tinydict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;runoob&#x27;</span>,<span class="string">&#x27;code&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;site&#x27;</span>: <span class="string">&#x27;www.runoob.com&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>])       <span class="comment"># 输出键为 &#x27;one&#x27; 的值</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">dict</span>[<span class="number">2</span>])           <span class="comment"># 输出键为 2 的值</span></span><br></pre></td></tr></table></figure>
<p>另外，字典类型也有一些内置的函数，例如clear()、keys()、values()等。</p>
<h3 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h3><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> co<span class="symbol">ndition_1</span>:</span><br><span class="line">    stateme<span class="symbol">nt_block_1</span></span><br><span class="line">elif co<span class="symbol">ndition_2</span>:</span><br><span class="line">    stateme<span class="symbol">nt_block_2</span></span><br><span class="line">else:</span><br><span class="line">    stateme<span class="symbol">nt_block_3</span></span><br></pre></td></tr></table></figure>
<p><br><br></p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件<span class="comment">(condition)</span>：</span><br><span class="line">    执行语句<span class="comment">(statements)</span>……</span><br></pre></td></tr></table></figure>

<p><br>无限循环</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="built_in">var</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">var</span> == <span class="number">1</span> :  <span class="meta"># 表达式永远为 true</span></span><br></pre></td></tr></table></figure>
<br>
**while 循环使用 else 语句**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expr 条件语句为 true 则执行 statement(s) 语句块，如果为 false，则执行 additional_statement(s)。
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">count</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">count</span> &lt; <span class="number">5</span>:</span><br><span class="line">   <span class="keyword">print</span> (<span class="keyword">count</span>, <span class="string">&quot; 小于 5&quot;</span>)</span><br><span class="line">   <span class="keyword">count</span> = <span class="keyword">count</span> + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">print</span> (<span class="keyword">count</span>, <span class="string">&quot; 大于或等于 5&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><br>for语句</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">for <span class="params">&lt;variable&gt;</span> in <span class="params">&lt;sequence&gt;</span>:</span><br><span class="line">    <span class="params">&lt;statements&gt;</span></span><br><span class="line"><span class="symbol">else:</span></span><br><span class="line">    <span class="params">&lt;statements&gt;</span></span><br></pre></td></tr></table></figure>
<p><br><br></p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;languages = [&quot;C&quot;, &quot;C++&quot;, &quot;Perl&quot;, &quot;Python&quot;] </span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="keyword">for</span> x <span class="keyword">in</span> languages:</span></span><br><span class="line"><span class="meta">...</span> <span class="python">    <span class="built_in">print</span> (x)</span></span><br><span class="line"><span class="meta">...</span> </span><br><span class="line">C</span><br><span class="line">C++</span><br><span class="line">Perl</span><br><span class="line">Python</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="range函数"><a href="#range函数" class="headerlink" title="range函数"></a>range函数</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="selector-tag">for</span> <span class="selector-tag">i</span> <span class="selector-tag">in</span> <span class="selector-tag">range</span>(<span class="number">5</span>):</span><br><span class="line">...     <span class="selector-tag">print</span>(i)</span><br></pre></td></tr></table></figure>
<p>结果：0，1，2，3，4<br><br><br><br>也可以使用range指定区间的值：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="selector-tag">for</span> <span class="selector-tag">i</span> <span class="selector-tag">in</span> <span class="selector-tag">range</span>(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">...     <span class="selector-tag">print</span>(i)</span><br></pre></td></tr></table></figure>
<p><br><br>指定等差数列:</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="selector-tag">for</span> <span class="selector-tag">i</span> <span class="selector-tag">in</span> <span class="selector-tag">range</span>(<span class="number">0</span>,<span class="number">10</span>,<span class="number">3</span>):</span><br><span class="line">...     <span class="selector-tag">print</span>(i)</span><br></pre></td></tr></table></figure>

<figure class="highlight less"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="selector-tag">for</span> <span class="selector-tag">i</span> <span class="selector-tag">in</span> <span class="selector-tag">range</span>(-<span class="number">10</span>, -<span class="number">100</span>, -<span class="number">30</span>):</span><br><span class="line">...     <span class="selector-tag">print</span>(i)</span><br></pre></td></tr></table></figure>
<p>结果：-10,-40,-70</p>
<h3 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h3><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">&#x27;Runoob&#x27;</span>:     <span class="meta"># 第一个实例</span></span><br><span class="line">   <span class="keyword">if</span> letter == <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">   <span class="keyword">print</span> (<span class="string">&#x27;当前字母为 :&#x27;</span>, letter)</span><br><span class="line">  </span><br><span class="line"><span class="built_in">var</span> = <span class="number">10</span>                    <span class="meta"># 第二个实例</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">var</span> &gt; <span class="number">0</span>:              </span><br><span class="line">   <span class="keyword">print</span> (<span class="string">&#x27;当前变量值为 :&#x27;</span>, <span class="built_in">var</span>)</span><br><span class="line">   <span class="built_in">var</span> = <span class="built_in">var</span> <span class="number">-1</span></span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">var</span> == <span class="number">5</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (<span class="string">&quot;Good bye!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<br>

<h3 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span>  <span class="comment"># 等待键盘中断 (Ctrl+C)</span></span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>动植物笔记</title>
    <url>/WestRoute.github.io/2021/10/28/%E5%8A%A8%E6%A4%8D%E7%89%A9%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>1.中国生物多样性地理图集<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;中国物种信息服务CSIS<br>2.Oxfords Birds of American</p>
<span id="more"></span>

<h3 id="中国生物多样性地理图集"><a href="#中国生物多样性地理图集" class="headerlink" title="中国生物多样性地理图集"></a>中国生物多样性地理图集</h3><p>EX 灭绝     EW野外灭绝     RE地区灭绝<br>CR极危      EN濒危        VU易危       NT近危       LC无危<br>DD 数据缺乏   NA不予评价   NE未予评估<br><br><br><br><br>中国地形三大阶梯中，西南部物种最丰富<br>！！！！插入 中国物种估计数量<br>！！！！三峡物种<br>！！！！世界鸟类迁移图<br>！！！！中国陆地主要生境类型图</p>
<h4 id="陆生脊椎动物"><a href="#陆生脊椎动物" class="headerlink" title="陆生脊椎动物"></a>陆生脊椎动物</h4><h5 id="陆生动物"><a href="#陆生动物" class="headerlink" title="陆生动物"></a>陆生动物</h5><p>赛加羚羊 EW<br>獐  VU<br>水獭 EN<br>羚牛 CR<br>巢鼠 LC<br>东北鼠兔 LC<br>猪獾  VU<br>雪豹  CR<br>花面狸 NT<br>白颊长臂猿 CR<br>川金丝猴  VU<br>盘羊  EN<br>褐长耳蝠 NT<br>长舌果蝠  VU<br>云南菊头蝠  EN  中国特有<br>喜马拉雅山旱獭  LC<br>豪猪  VU<br><br><br><br></p>
<h5 id="鸟类"><a href="#鸟类" class="headerlink" title="鸟类"></a>鸟类</h5><p>鸡、雁、䴕、佛法僧、鸮、鸽、鹤、鹳、鹰隼、丘鹬、雀、莺、燕雀、鸦、鹟、麻雀<br><br><br><br>灰椋鸟 LC<br>橙胸鹟 LC<br>须浮鸥 Lc<br>棕头鸦雀 LC<br>灰鹡鸟  LC<br>大山雀  LC<br>北红尾鸲（qu）  LC<br>杂色山雀  LC<br>棕头鸥  LC<br>鸡形目鸟类共有63种，仅鹌鹑和日本鹌鹑与迁徙习性<br>翠鸟  LC<br>雪鸮（xiao） LC<br>猎隼（sun）  LC<br>翻石鹬（yu） LC<br>画眉 NT<br>远东树莺  LC<br>棕颈雪雀  LC<br>黄鹡（ji）鸰（ling）  LC<br>红嘴相思鸟  NT<br><br><br><br></p>
<h5 id="陆生爬行"><a href="#陆生爬行" class="headerlink" title="陆生爬行"></a>陆生爬行</h5><p>福建绿叶青蛇 LC<br><br><br><br></p>
<h4 id="陆生无脊椎动物"><a href="#陆生无脊椎动物" class="headerlink" title="陆生无脊椎动物"></a>陆生无脊椎动物</h4><p>窄斑凤尾蛱蝶  LC<br>宽带美凤蝶  LC<br><br><br><br></p>
<h4 id="陆生植物"><a href="#陆生植物" class="headerlink" title="陆生植物"></a>陆生植物</h4><p>西伯利亚云杉  VU<br>宝兴牡丹 VU<br>天南星 NE<br><br><br><br></p>
<h4 id="内陆水生动物"><a href="#内陆水生动物" class="headerlink" title="内陆水生动物"></a>内陆水生动物</h4><p>长须狮子鱼 NE</p>
<h3 id="Oxfords-Birds-of-American"><a href="#Oxfords-Birds-of-American" class="headerlink" title="Oxfords Birds of American"></a>Oxfords Birds of American</h3><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>杂文</category>
        <category>读书笔记</category>
      </categories>
  </entry>
  <entry>
    <title>生活医学~NSAIDsによる蕁麻疹/血管浮腫~</title>
    <url>/WestRoute.github.io/2021/10/18/%E7%94%9F%E6%B4%BB%E5%8C%BB%E5%AD%A6/</url>
    <content><![CDATA[<h3 id="NSAIDsによる蕁麻疹-血管浮腫"><a href="#NSAIDsによる蕁麻疹-血管浮腫" class="headerlink" title="NSAIDsによる蕁麻疹/血管浮腫"></a>NSAIDsによる蕁麻疹/血管浮腫</h3><p><strong>Loxoprofen</strong>　　is a nonsteroidal NSAID in the propionic acid derivatives group, which also includes ibuprofen and naproxen among others. </p>
<span id="more"></span>

<p><strong>NSAIDs</strong>　anti-inflammatory drug 非ステロイド性抗炎症薬。広義にはステロイドではない抗炎症薬すべてを含みます。アセトアミノフェン。</p>
<p><strong>病院で処方される主なNSAIDs</strong>：<br>アスピリン（バファリン®など）<br>ロキソプロフェン（ロキソニン®など）<br>ジクロフェナク（ボルタレン®など）<br>インドメタシン（インダシン®など）<br>メフェナム酸（ポンタール®など）<br>スルピリン(メチロン®など)<br>アセトアミノフェン（アンヒバ®、カロナール®など）<br>その他</p>
<p>基本的に通常の急性喘息発作の対応と同じであるが、アドレナリンが有効であることと、ステロイドの急速静注は禁忌であることを十分に理解しておく。</p>
<p><strong>Glucocorticoid/糖質コルチコイド</strong>　are a class of steroid hormones. Glucocorticoids are corticosteroids that bind to the glucocorticoid receptor[1] that is present in almost every vertebrate animal cell. The name “glucocorticoid” is a portmanteau (glucose + cortex + steroid) and is composed from its role in regulation of glucose metabolism, synthesis in the adrenal cortex, and its steroidal structure (see structure to the right).<br>免疫系 代謝系 発育 覚醒・認知 体液恒常性</p>
<p><strong>steroid</strong>　是醇类的一种，特征是有一个四环的母核。在人类生理及药理上，最重要的甾体是胆固醇、甾体激素、它的前体及代谢物。在血液中，甾体负责运送蛋白质。</p>
<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>
<h3 id="水ぶくれ"><a href="#水ぶくれ" class="headerlink" title="水ぶくれ"></a>水ぶくれ</h3><p><strong>単純疱疹（たんじゅんほうしん）</strong>Herpes simplex virus<br><strong>帯状疱疹（たいじょうほうしん）</strong>Varicella Zoster virus<br><strong>ヘルペスウイルス</strong><br>ヘルペスウイルスは2本鎖DNAをゲノムとするDNAウイルスのうち、T数16のカプシドがエンベロープに包まれ直径200 nm（ナノメートル）程度の球状粒子を形作るものの総称。</p>
<p>qouted from Wikipeida</p>
<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>杂文</category>
      </categories>
  </entry>
  <entry>
    <title>『宇宙飛行士たちの日常』&amp;&amp; カフェギャラリーきのね</title>
    <url>/WestRoute.github.io/2021/10/12/%E5%AE%87%E5%AE%99%E9%A3%9B%E8%A1%8C%E5%A3%AB%E3%81%9F%E3%81%A1%E3%81%AE%E6%97%A5%E5%B8%B8/</url>
    <content><![CDATA[<p>カフェギャラリーきのね ：大阪府大阪市北区中崎3-2-14  的咖啡店。<br>『宇宙飛行士たちの日常』：在推特上上传行走在大阪的宇航员的照片。</p>
<span id="more"></span>
<img src="/WestRoute.github.io/images/utyuiroiro.png" width= "500" height="450">


<p>这周周日上午有一场考试，考试前又在推特上看到出展的消息，就打算考完试顺道去一趟。<br>我关注这个账号很久了，宇宙的电影看了不少，有带着对宇宙美好憧憬的《千钧一发》，也有对人类发出尖锐警告人类的《太空漫游2001》，但都不如单单这一张漫画让我受到的冲击多。</p>
<img src="/WestRoute.github.io/images/sawman.jpg" width= "400" height="600">

<p>其实也可以见到很多《电锯人》漫画粉丝会把宇航员这一情节单独拿出来谈。</p>
<p>这个恐惧刚开始只停留在这个故事中，这部作品不久就迎来了结束。但当我在推特上偶然看到了这个在地球的宇航员时，这张画中的恐惧蔓延到了现实中，而且还是在我居住的城市。</p>
<p><br><br></p>
<p>而这个“宇航员生活在大阪”的系列我几乎每一张都存在了手机里，凝视它仿佛就是凝视死亡。</p>
<p>几乎所有的照片都好看，<b>穿着人类的宇航服走在人类的星球上却让我觉得这里面的人是个地球外生物</b>,即使有些照片并没有散发着恐怖的气息，而是十分俏皮，看到推特上说展会现场有卖相册，我就觉一定要去看（买）。</p>
<p>等我出了中崎站，我发现整个街道都和大阪其他的地方不同，这里有很多看起来适合拍照的咖啡店、手工艺品店、古着店。但同时也有破旧的好像是二战期间留下来的破旧木质建筑，凌乱的电线杆和一片破败的墙。<br><img src="/WestRoute.github.io/images/nakasaki.jpg"><br><img src="/WestRoute.github.io/images/nakasaki2.jpg"></p>
<p>这或许是传说中的文青胜地。可我不看诗集，我不是文青，我没近距离接触过这类人，我开始怀疑和忐忑起来。</p>
<p>在我眼里开来文青是不用考虑自己的作品欢迎程度而自由创作的人。他们人情洋溢、热爱生活、生命力极强、对自己的感情和梦想十分坚定……</p>
<p>我走进了店里。这里是一个咖啡店，店面真的特别小，把二楼租出去当小众创作者的展览会，没有门票，但上二楼坐一坐最好点一杯饮料。<br>我一眼就看到了摆在门口的画集。但是有两个人挡住我了。<br>他们主动搭话<span style="color: grey">“您是来看谁的展出的？”</span></p>
<p><span style="color: grey">“宇宙的…”</p>
<p><span style="color:grey">“哦哦！他本人在二楼！！”</span></p>
<p>我刚考完了一场考试外加再来的路上一直在读福柯，脚上的鞋还不合脚，各种因素都让我有些疲惫，我不是很想开口说话。</p>
<p><span style="color: grey">“我还是不上去了。”</span>我拿了相册准备去付账。</p>
<p>前台特别小，楼梯也特别小，一眼望去感觉特别安静，既然这么安静去看看也无妨，鬼使神差下我付完了钱就走上了二楼。</p>
<p>走上二楼，快到门口时发现说话的声音特别多，走进去一看二楼是也很小，是榻榻米+日式矮桌。矮桌不好坐，几乎没人坐着，所以没人手里拿着饮料。</p>
<p>然后一眼望过去就是那套宇航服和被粉丝众星拱月的作者本人。</p>
<p>我被那套宇航服深深的吸引，身体被刚刚在门口的小姐姐拉过去，推到了作者面前。实在是没有和偶像说话的经验，出乎意料的场景让我紧张的满头大汗，我本来是买本相册就走的怎么会坐在这里？</p>
<img src="/WestRoute.github.io/images/twoshoot.JPG">

<p>原来如此，街上的文青气息和二楼展厅的样子都在说明作者并不是一个航天爱好者，而是和我一样是一个创作者。他确确实实是表演者一个地球人穿宇航服的角色，而不是我通过《电锯人》联想到的地狱与恶魔。手里相册的意义仿佛发生了改变，不再具有敬畏和恐惧。</p>
<p>站在作者面前我实在不知道说什么，我其实只对那套宇航服感兴趣，我仔细观察他的材质因为我也想要一套。旁边还坐着一个很热情又特别会聊天的粉丝大叔，帮了支支吾吾的我不少忙，我不追星实在是很不适应。<br>还问了关于宇航服的制作，在照片里十分逼真，但是近距离接触就发现其实很潦草，作者说原本是想用来拍电影的，然后又笑着说“用来拍电影还是太粗糙了。”</p>
<p>坐着说要拍一张我和宇航服的拍立得送给我，我没想到会拍照，我也没穿好看的衣服来，我拒绝了两次，但作者说每个买了相册的人都送。</p>
<img src="/WestRoute.github.io/images/goods.JPG">

<p>我最后也没说什么马上就灰溜溜的走了，因为照片的意义已经发生了变化。</p>
<p>下楼了之后我想起在二楼坐了就需要点一杯咖啡，在一楼点了个咖啡并要求带走。</p>
<p>店长推荐了“卢旺达女人”。</p>
<p><span style="color:grey">“卢旺达是不是那个……”</span></p>
<p>我觉得“大屠杀”这个词说出口实在太残忍，又一时找不到代替词。</p>
<p>店长说：<span style="color:grey">『Hotel Rwanda』？</span><br>『Hotel Rwanda』，讲述卢旺达大屠杀的电影。透过电影的纱窗，这个血淋淋的历史事件现在找到了比较温和的代替词。</p>
<p>店长：<span style="color:grey">很少有人知道『Hotel Rwanda』</span>。</p>
<p>之后聊了聊咖啡豆的来历————在大屠杀中卢旺达的男性都被杀光了，女人们为了养活自己开始种植咖啡豆，且这个咖啡豆是公平贸易咖啡。</p>
<br>
<br>
<br>
<br>

<p>最后我走的时候特别急，像是逃跑一样。尽管如此这也是我人生第一次参加现代年轻创作家个人展的经历，他们无人赞助，但散发着来自灵魂深处的生命力，我从来都只在网上投稿我的作品，这对我来说是一个陌生而神奇的世界。</p>
<p>我想能让人想去第二次的艺术展就是一个好的艺术展，这样的展会我想来第二次，可能和我的预期有些不同，但毫无疑问，他拍的照片我很喜欢，他的创意我很喜欢，希望还能看到他开展。</p>
<br>
<br><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>每月总结07 (2021/9)</title>
    <url>/WestRoute.github.io/2021/09/29/MonthlyRe07/</url>
    <content><![CDATA[<p>这个月花了10天来建网站，38部电影已经是不错的记录了。<br>书重点读了社会和政治。下个月想看看历史军事类。</p>
<span id="more"></span>

<table>
<thead>
<tr>
<th>电影(38)</th>
<th>标签</th>
<th>日期</th>
</tr>
</thead>
<tbody><tr>
<td>日落大道</td>
<td>1950/美国/比利·怀德</td>
<td>2021/9/30</td>
</tr>
<tr>
<td>迷魂记</td>
<td>1958/美国/阿尔弗雷德·希区柯克</td>
<td>2021/9/29</td>
</tr>
<tr>
<td>愤怒的公牛</td>
<td>1980/美国 /马丁·斯科塞斯</td>
<td>2021/9/28</td>
</tr>
<tr>
<td>第三人</td>
<td>1949/英国/卡罗尔·里德</td>
<td>2021/9/27</td>
</tr>
<tr>
<td>生活多美好</td>
<td>1946/美国</td>
<td>2021/9/26</td>
</tr>
<tr>
<td>秋日奏鸣曲</td>
<td>1978/瑞典/英格玛·伯格曼</td>
<td>2021/9/25</td>
</tr>
<tr>
<td>苔丝</td>
<td>1979/法国/罗曼·波兰斯基</td>
<td>2021/9/24</td>
</tr>
<tr>
<td>安妮霍尔</td>
<td>1977/美国/伍迪·艾伦</td>
<td>2021/9/24</td>
</tr>
<tr>
<td>神圣车行</td>
<td>2012/法国/莱奥·卡拉克斯</td>
<td>2021/9/23</td>
</tr>
<tr>
<td>西北偏北</td>
<td>1959/美国/阿尔弗雷德·希区柯克</td>
<td>2021/9/23</td>
</tr>
<tr>
<td>泯灭天使</td>
<td>1962/墨西哥/路易斯·布努埃尔</td>
<td>2021/9/22</td>
</tr>
<tr>
<td>性爱自修室第三季</td>
<td>2021/英国/本·泰勒</td>
<td>2021/9/21</td>
</tr>
<tr>
<td>处女泉</td>
<td>1960/瑞典/英格玛·伯格曼</td>
<td>2021/9/19</td>
</tr>
<tr>
<td>奇遇</td>
<td>1960/意大利/米开朗基罗·安东尼奥尼</td>
<td>2021/9/19</td>
</tr>
<tr>
<td>让娜·迪尔曼</td>
<td>1975/ 法国/ 香特尔·阿克曼</td>
<td>2021/9/18</td>
</tr>
<tr>
<td>芬妮与压力山大</td>
<td>1982/ 法国 / 格玛·伯格曼</td>
<td>2021/9/18</td>
</tr>
<tr>
<td>丹麦女孩</td>
<td>2015/英国/姆·霍伯</td>
<td>2021/9/17</td>
</tr>
<tr>
<td>女大法官金斯伯格</td>
<td>2018/美国/朱莉·科</td>
<td>2021/9/16</td>
</tr>
<tr>
<td>西力传</td>
<td>1983/美国/伍迪·艾伦</td>
<td>2021/9/15</td>
</tr>
<tr>
<td>消防员舞会</td>
<td>1967/捷克斯洛伐克/</td>
<td>2021/9/14</td>
</tr>
<tr>
<td>红圈</td>
<td>1970/法国/让-皮埃尔·梅尔维尔</td>
<td>2021/9/14</td>
</tr>
<tr>
<td>茶馆</td>
<td>1982/中国/谢添</td>
<td>2021/9/13</td>
</tr>
<tr>
<td>唐人街</td>
<td>1974/美国/罗曼·波兰斯基</td>
<td>2021/9/13</td>
</tr>
<tr>
<td>玫瑰之名</td>
<td>1986/意大利/让-雅克·阿诺</td>
<td>2021/9/12</td>
</tr>
<tr>
<td>群鸟</td>
<td>1963/美国/阿尔弗雷德·希区柯克</td>
<td>2021/9/12</td>
</tr>
<tr>
<td>那个男人来自地球</td>
<td>2007/美国/理查德·沙因克曼</td>
<td>2021/9/12</td>
</tr>
<tr>
<td>欢乐满人间2</td>
<td>2018/美国/罗伯·马歇尔</td>
<td>2021/9/11</td>
</tr>
<tr>
<td>欢乐满人间</td>
<td>1964/美国/罗伯特·斯蒂文森</td>
<td>2021/9/9</td>
</tr>
<tr>
<td>驴子巴特萨</td>
<td>1966/法国/罗伯特·布列松</td>
<td>2021/9/9</td>
</tr>
<tr>
<td>解构爱情狂</td>
<td>1997/美国/伍迪·艾伦</td>
<td>2021/9/8</td>
</tr>
<tr>
<td>圣女贞德蒙难记</td>
<td>1928/法国/卡尔·西奥多·德莱叶</td>
<td>2021/9/7</td>
</tr>
<tr>
<td>Love Live!Superstar</td>
<td>2021/日本/极尚彦</td>
<td>2021/9/6</td>
</tr>
<tr>
<td>彗星美人</td>
<td>1950/美国/约瑟夫·L·曼凯维奇</td>
<td>2021/9/5</td>
</tr>
<tr>
<td>费城故事</td>
<td>1940/美国/乔治·库克 / 凯瑟琳·赫本</td>
<td>2021/9/5</td>
</tr>
<tr>
<td>白色巨塔</td>
<td>2003/日本/西谷弘</td>
<td>2021/9/4</td>
</tr>
<tr>
<td>伊豆的舞女</td>
<td>1974/日/西河克己</td>
<td>2021/9/3</td>
</tr>
<tr>
<td>观鸟大年</td>
<td>2011/美国/大卫·弗兰科尔</td>
<td>2021/9/2</td>
</tr>
<tr>
<td>大都会</td>
<td>1927 / 德国</td>
<td>2021/9/1</td>
</tr>
</tbody></table>
<p>唯一想聊的是罗曼波兰斯基的《唐人街》：</p>
<p>当我看到黑色电影这个词的时候我第一个会想起库布里克的《杀手》，一群人在一盏小灯着凉的黑夜里小声谋密、黑夜漫长、机密策划，等我睡着的时候他们才开始抢劫。</p>
<p>黑色电影好像都是前半段95%的枯燥，只在临近尾声中才打出第一声枪声，那一声枪响响彻云霄，好像是对自己从此断送前途而对命运发出声嘶力竭的质问。</p>
<p>唐人街就是这样的一部电影。虽然是彩色的。当“最后一声枪响”回荡在唐人街上低矮黑暗的夜空中时，波兰斯基对自己妻子的思念、对敌人的痛恨、对自己无力回天的悔恨都留在杰克尼科尔森的眼神里。<br><br><br></p>
<table>
<thead>
<tr>
<th>书(8)</th>
<th>日期</th>
</tr>
</thead>
<tbody><tr>
<td>反对阐释</td>
<td>2021/9/30</td>
</tr>
<tr>
<td>第二性（第1卷）</td>
<td>2021/9/28</td>
</tr>
<tr>
<td>狂人分子</td>
<td>2021/9/29</td>
</tr>
<tr>
<td>克拉拉与太阳</td>
<td>2021/9/27</td>
</tr>
<tr>
<td>坑夫</td>
<td>2021/9/25</td>
</tr>
<tr>
<td>正则表达式必知必会</td>
<td>2021/9/20</td>
</tr>
<tr>
<td>艺术的故事</td>
<td>2021/9/19</td>
</tr>
<tr>
<td>图解社会学</td>
<td>2021/9/19</td>
</tr>
</tbody></table>
<h3 id="坑夫"><a href="#坑夫" class="headerlink" title="坑夫"></a>坑夫</h3><p>我知道这篇在台湾有译本，在大陆没有，所以来聊一聊。<br>非常独特的一部作品，夏目漱石历来的作品都是台词饶舌又精致，用冷酷的洞察力精密地切割出心灵的病灶，这部作品是平铺直叙，青年主人公没有明确的目标，仿佛漫步在迷雾中，没有方向没有目标，甚至没有知觉。</p>
<p>写的是主人公生在东京有钱人家里，和两个女孩子纠缠不清，实在理不清关系就出逃了，跑去挖煤，九死一生之后什么心理描写都没有就回家了，夏目漱石可能是想说青少年的内心就是什么都没有一片混沌吧（全肯定）。</p>
<p>和以往的作品完全不同，过往的主人公看到除了自己以外的人在就要在心里嘀嘀咕咕评判几句，十分八婆，这一次确实是在用青年的角度在叙述。不往深了想，这次可能就是作者为了炫技才写的吧。<br>也不是说真的就什么都没有，主人公想要逃离的过往的心思确实很让人共鸣，觉得自己搞砸了一件事之后家里就一无所有决心赴死的幼稚也很真实。</p>
<p>在值不值得读的问题上，我和过去无数对着不神奇的作品抱否定态度的人一样，觉得除了多认识几个单词以外不推荐读。但是你要是和我一样控制不了好奇心的话，可以读读看，确实和以往不同，起码开头还很有临场感，读起来十分舒服。</p>
<h3 id="图解社会学"><a href="#图解社会学" class="headerlink" title="图解社会学"></a>图解社会学</h3><p>想买实体本</p>
<h3 id="反对阐释"><a href="#反对阐释" class="headerlink" title="反对阐释"></a>反对阐释</h3><blockquote><p>“与贵族时代的社会等级制一样，这种文化也是等级制的，不仅与大众文化和先锋派艺术格格不入，而且排斥和贬低大众文化和先锋派艺术，因为它建立在好与坏、高级与低级、崇高与庸俗等一系列二元对立的价值评判基础上，而在六十年代反文化激进派看来，这一基础本身就成问题。”<br><br>“在现代大多数情形中，阐释无异于庸人们拒绝艺术作品的独立存在。真正的艺术能使我们感到紧张不安。通过把艺术作品消减为作品的内容，然后对内容予以阐释，人们就驯服了艺术作品。阐释使艺术变得可被控制，变得顺从。”<br><br> “例如，卡夫卡的作品一直经受着不下于三拨的阐释者的大规模劫掠。那些把卡夫卡的作品当作社会寓言来读的批评家从中发现了卡夫卡对现代官僚体制的层层阻挠、疯狂及其最终沦为极权国家的案例研究。那些把卡夫卡的作品当作心理分析寓言来读的批评家从中发现了卡夫卡对父亲的恐惧、他的阉割焦虑、他对自己性无能的感觉以及对梦的沉湎的种种绝望的显露。那些把卡夫卡的作品当作宗教寓言来读的批评家则解释说，《城堡》中的K试图获得天国的恩宠，而《审判》中的约瑟夫·K经受着上帝严厉而神秘的法庭的审判……萨缪尔·贝克特的作品也吸引着吸血鬼般的阐释者。贝克特描绘孤立意识——被减缩成彼此分离的一些要素，常以身体呆滞表现出来——的那些细腻的剧本，经常被读解为有关现代人疏离于意义或上帝的表达，或被读解为精神机能障碍的寓言。” 
  </p>
</blockquote>  
<p> <br><br></p>
  <blockquote><p>“在一九六七年左右，即批评文集《反对阐释》（Against Interpretaion and Other Essays，初版于一九六六年，美国版）的英国版出版之时，尽管苏珊·桑塔格（Susan Sontag）女士才发表了一部长篇小说以及若干短篇小说，但她无疑更看重自己作为小说家的才能，因此才会在文集的《自序》中说，这些文章是“从小说创作中漫溢出来而进入批评的那种能量，那种焦虑”。但可能出乎她当初的意料，正是这些在小说创作的间隙写下的批评文字，尤其是收入本文集中的《反对阐释》（一九六四）、《关于“坎普”的札记》（一九六四）、《一种文化与新感受力》（一九六五）等文章，使她在以小说家的身份蜚声文坛前，先以文化批评家的身份广为人知，以至后来任何一个试图写作美国后现代文化史的历史家都不能回避这几篇论文，甚至仅凭这几篇文字，她就可以被《伊甸园之门》（无疑，这是关于六十年代美国文化史的经典之作[…]”}    </p>
<footer><strong>中文版序</strong></footer></blockquote>   

<p><br><br></p>
<p>从中文版序可以看出这是一本批评文集，甚至是随笔文集，也可以说是朋友圈生活感想集。它的定位决定了我们不能对它太过苛刻。</p>
<p>这本书的智慧和我对它的期望并不相符，她反对的阐释仅限于网络上的骂战，不具有普遍性，但是她却起了个吸引眼球的标题，让我还以为她有什么让我惊讶的想法，结果和上一本《摄影之眼》一样很鸡肋。</p>
<p>或许在她那个年代她的想法还是个先见。但在满是先入为主、带有色彩的媒体铺天盖地残害心灵的今天，桑塔格的文字已经蒙上了一种为时已晚的孤独的面纱。</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>每月总结</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>C　PrimerPlus(6) 14私有继承与类模板</title>
    <url>/WestRoute.github.io/2021/09/25/c++06classtemplate/</url>
    <content><![CDATA[<h3 id="私有继承"><a href="#私有继承" class="headerlink" title="私有继承"></a>私有继承</h3><p>实现has-a关系的方法除了包含还有私有继承。<br>推荐使用包含。<br><strong>私有成员永远只能被本类的成员函数访问，或者是友元访问，除此以外，即使是其派生出的子类，也不能直接访问这些私有成员。</strong><br>私有继承也是默认的继承方式，如果没有继承方式的关键字说明，默认为私有继承。</p>
<span id="more"></span>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<br>私有继承-如何定义类</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Student</span> : <span class="symbol">private</span> <span class="symbol">std::<span class="symbol">string</span>,<span class="symbol">private</span></span> <span class="symbol">std::<span class="symbol">valarray</span></span>&lt;<span class="symbol">double</span>&gt;&#123;</span><br><span class="line">    <span class="comment">//上文指出student类是从string类和valarray类派生而来</span></span><br><span class="line">    <span class="comment">//多重继承</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在包含中，人们使用这样的构造函数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Student(const char* str,const double <em>pd,int n):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name(str),scores</em>(pd,n)//use object name<br>在私有继承中，人们使用这样的构造函数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Student(const char* str,const double *pd,int n):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background-color:#ffcccb">std::string(str)</span>,<span style="background-color:#ffcccb">ArrayDB(pd,n)</span>//use class name</p>
<h4 id="访问基类的方法"><a href="#访问基类的方法" class="headerlink" title="访问基类的方法"></a>访问基类的方法</h4><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> Student::Average() const&#123;</span><br><span class="line">    <span class="keyword">if</span> (ArrayDb::<span class="built_in">size</span>()&gt;<span class="number">0</span>) <span class="keyword">return</span> ArrayDb::<span class="built_in">sum</span>()/ArrayDb::<span class="built_in">size</span>();</span><br><span class="line">    //<span class="keyword">use</span> <span class="keyword">class</span> <span class="keyword">name</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="访问基类的对象-—-强制类型转换与-this指针"><a href="#访问基类的对象-—-强制类型转换与-this指针" class="headerlink" title="访问基类的对象 —=强制类型转换与*this指针"></a>访问基类的对象 —=强制类型转换与*this指针</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br></pre></td></tr></table></figure>

<h4 id="访问基类友元函数"><a href="#访问基类友元函数" class="headerlink" title="访问基类友元函数"></a>访问基类友元函数</h4><p>友元函数定义</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; os,<span class="keyword">const</span> Student &amp; stu)&#123;</span><br><span class="line">    os &lt;&lt;<span class="string">&quot;Scores for &quot;</span>&lt;&lt;(<span class="keyword">const</span> string &amp;) stu &lt;&lt; <span class="string">&quot;:\n&quot;</span>;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果plato是Student对象的话，plato指向的是Student &amp; stu，os指向的是cout地引用：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">os&lt;&lt; stu<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>私有继承需要通过显式地转换为基类来调用函数</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">os &lt;&lt;<span class="string">&quot;Scores for &quot;</span>&lt;&lt;(<span class="keyword">const</span> string &amp;) stu &lt;&lt; <span class="string">&quot;:\n&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="保护继承"><a href="#保护继承" class="headerlink" title="保护继承"></a>保护继承</h3><p>保护成员扩大的访问范围表现在：基类的保护成员可以在派生类的成员函数中被访问。<br>| 特征        | 公有继承     | 保护继承   | 私有继承   |<br>|———-|————–|————-|————–|<br>| 公有成员变成| public   | protected   | private   |<br>| 保护成员变成| protected   | protected  | private   |<br>| 私有成员变成| interface   | interfce   | interface   |<br>| 隐式向上转换| True   | True(派生类)   | False   |</p>
<h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><p>多重继承的问题：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.从两个不同的基类继承同名方法<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.继承同一个类的实例<br>解决方法————虚基类，可以从多个类派生出的对象只继承一个基类对象(virtual public的次序无关紧要)。</p>
<figure class="highlight nim"><table><tr><td class="code"><pre><span class="line">class <span class="type">Singer</span>: virtual public <span class="type">Woker</span><span class="meta">&#123;...&#125;</span>;</span><br><span class="line">class <span class="type">Waiter</span>: public virtual <span class="type">Woker</span><span class="meta">&#123;...&#125;</span>;</span><br><span class="line"></span><br><span class="line">class <span class="type">SingerWaiter</span> : public <span class="type">Singer</span>, public <span class="type">Waiter</span>;</span><br></pre></td></tr></table></figure>

<h3 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h3><p>10章的Stack类</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> Item;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">      <span class="class"><span class="keyword">enum</span> &#123;</span>MAX=<span class="number">10</span>&#125;;</span><br><span class="line">      Item items[MAX];</span><br><span class="line">      <span class="keyword">int</span> top;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">Stack</span>();</span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">isempty</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">isfull</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> Item&amp;item)</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">(Item&amp;item)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>替换为stack模板</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//stacktp.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> STACKTP_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACKTP_H_</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">      <span class="class"><span class="keyword">enum</span> &#123;</span>MAX=<span class="number">10</span>&#125;;</span><br><span class="line">      Item items[MAX];</span><br><span class="line">      <span class="keyword">int</span> top;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">Stack</span>();</span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">isempty</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">isfull</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> Item &amp; item)</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">(Item &amp; item)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span> Stack &lt;Type&gt;::<span class="built_in">Stack</span>()&#123;</span><br><span class="line">    top = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span> <span class="keyword">bool</span> Stack&lt;Type&gt;::<span class="built_in">isempty</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> top == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span> <span class="keyword">bool</span> Stack::isfull&#123;</span><br><span class="line">    <span class="keyword">return</span> top == MAX;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span> <span class="function"><span class="keyword">bool</span> <span class="title">Stack::push</span><span class="params">(<span class="keyword">const</span> Item &amp; item)</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span> ( top &lt; MAX )&#123;</span><br><span class="line">        items[top++]=item;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;<span class="keyword">else</span>  <span class="keyword">return</span> flase;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span> <span class="function"><span class="keyword">bool</span> <span class="title">Stack::pop</span><span class="params">(Item &amp; item)</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span> ( top &lt; MAX )&#123;</span><br><span class="line">        items=item[--top];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;<span class="keyword">else</span>  <span class="keyword">return</span> flase;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>泛型识标符、类型参数————Type，赋给他的不是能是数字，只能是类型。<br>与函数模板的区别，需要显示提供所需的类型：<br><strong>Stack<a href="std::String">std::String</a> st;</strong></p>
<h4 id="类模板使用指针"><a href="#类模板使用指针" class="headerlink" title="类模板使用指针"></a>类模板使用指针</h4><p>不推荐<br><br></p>
<h4 id="类模板用作容器————数组模板"><a href="#类模板用作容器————数组模板" class="headerlink" title="类模板用作容器————数组模板"></a>类模板用作容器————数组模板</h4><br>

<h4 id="递归使用模板制作2维数组"><a href="#递归使用模板制作2维数组" class="headerlink" title="递归使用模板制作2维数组"></a>递归使用模板制作2维数组</h4><p>请注意，在模板语法中维的顺序与等价的二维数组相反，即i，j互换。<br><br></p>
<h4 id="默认模板参数类型"><a href="#默认模板参数类型" class="headerlink" title="默认模板参数类型"></a>默认模板参数类型</h4><figure class="highlight nim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;class <span class="type">T1</span>,class <span class="type">T2</span> = <span class="built_in">int</span>&gt; class <span class="type">Topo</span><span class="meta">&#123;...&#125;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">Topo</span>&lt;double,double&gt; m1;</span><br><span class="line"><span class="type">Topo</span>&lt;double&gt;m2;</span><br></pre></td></tr></table></figure>
<br>

<h4 id="模板的具体化"><a href="#模板的具体化" class="headerlink" title="模板的具体化"></a>模板的具体化</h4><p>如果有多个模板，编译器会首先选择具体化最高的模板。</p>
<h5 id="隐式实例化"><a href="#隐式实例化" class="headerlink" title="隐式实例化"></a>隐式实例化</h5><p>目前为止都是隐式实例化,声明对象后指出类型</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Array</span>&lt;<span class="type">double</span>,<span class="number">100</span>&gt; stuff;</span><br></pre></td></tr></table></figure>
<br>

<h5 id="显式实例化"><a href="#显式实例化" class="headerlink" title="显式实例化"></a>显式实例化</h5><p>修饰词用template</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> <span class="class"><span class="keyword">class</span> <span class="title">Array</span>&lt;</span>string,<span class="number">100</span>&gt;;</span><br></pre></td></tr></table></figure>
<br>

<h5 id="显式具体化"><a href="#显式具体化" class="headerlink" title="显式具体化"></a>显式具体化</h5><p>为特殊类型特化，需要对模板进行修改。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">SortedArray</span>&#123;</span></span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>泛式模板的T可以是数值，可以是类(需要定义T::opertor&gt;())，但是T不能是const char*(将会按照单个字符来排列)，这时就需要显式具体化模板<br><br></p>
<h5 id="部分具体化"><a href="#部分具体化" class="headerlink" title="部分具体化"></a>部分具体化</h5><p>即部分限制模板的通用性，比如指定一个具体的类型。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//general template </span></span><br><span class="line">  template &lt;<span class="keyword">class</span> <span class="symbol">T1,<span class="symbol">class</span></span> <span class="symbol">T2,<span class="symbol">class</span></span> <span class="symbol">T3</span>&gt;<span class="symbol">class</span> <span class="symbol">paris</span>&#123;&#125;;</span><br><span class="line"><span class="comment">//specialiazed template </span></span><br><span class="line">  template &lt;<span class="keyword">class</span> <span class="symbol">T1</span> &gt;<span class="symbol">class</span> <span class="symbol">paris</span>&lt;<span class="symbol">T1,<span class="symbol">int</span></span>&gt;&#123;&#125;;</span><br></pre></td></tr></table></figure>
<br>

<h4 id="成员模板"><a href="#成员模板" class="headerlink" title="成员模板"></a>成员模板</h4><p>模板可做结构，类和模板类成员。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tempmemb.cpp--- template members</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cout; </span><br><span class="line"><span class="keyword">using</span> std::endl; </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">beta</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">template</span> &lt;<span class="keyword">typename</span> V&gt; <span class="comment">// nested template class member </span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">hold</span></span></span><br><span class="line"><span class="class">	&#123;</span></span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		V val;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">hold</span>(V v = <span class="number">0</span>) : <span class="built_in">val</span>(v) &#123;&#125;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; cout &lt;&lt; val &lt;&lt; endl; &#125;</span><br><span class="line">		<span class="function">V <span class="title">Value</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> val; &#125;</span><br><span class="line">	&#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">beta</span>(T t, <span class="keyword">int</span> i) : <span class="built_in">q</span>(t), <span class="built_in">n</span>(i) &#123;&#125;</span><br><span class="line">	<span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; <span class="comment">// template method</span></span><br><span class="line">	<span class="function">U <span class="title">blab</span><span class="params">(U u, T t)</span> </span>&#123; <span class="keyword">return</span> (n.<span class="built_in">Value</span>() + q.<span class="built_in">Value</span>()) * u / t &#125;</span><br><span class="line">	<span class="keyword">void</span> <span class="built_in">Show</span>() <span class="keyword">const</span> &#123; q.<span class="built_in">show</span>(); n.<span class="built_in">show</span>(); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">beta&lt;<span class="keyword">double</span>&gt; <span class="title">guy</span><span class="params">(<span class="number">3.5</span>, <span class="number">3</span>)</span></span>; </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;T was set to double\n&quot;</span>; </span><br><span class="line">	guy.<span class="built_in">Show</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;V was set to T, which is-double, then V was set to int\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; guy.<span class="built_in">blab</span>(<span class="number">10</span>, <span class="number">2.3</span>) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;U was set to int\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; guy.<span class="built_in">blab</span>(<span class="number">10.0</span>, <span class="number">2.3</span>) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;U was set to double\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Done\n&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>
**上述定义将T，V和U作为模板参数，因为模板是嵌套的，必须如下声明：**
template<typename T>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;template<typename V>
而不能用这个方法：~~template<typename T，typename V>~~
<br>

<h4 id="模板作为参数"><a href="#模板作为参数" class="headerlink" title="模板作为参数"></a>模板作为参数</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// tempparm.cpp - templates as parameters </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stacktp.h&quot;</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">Thing</span> &gt;</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crab</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	Thing&lt;<span class="keyword">int</span>&gt; s1;</span><br><span class="line">	Thing&lt;<span class="keyword">double</span>&gt; s2; </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Crab</span> () &#123;&#125;;</span><br><span class="line">	<span class="comment">// assumes the thing class has pushd and pop() members</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">double</span> x)</span> </span>&#123; <span class="keyword">return</span> sl.<span class="built_in">push</span>(a) &amp;&amp; s2.<span class="built_in">push</span>(x); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">(<span class="keyword">int</span> &amp; a, <span class="keyword">double</span> &amp; x)</span> </span>&#123; <span class="keyword">return</span> sl.<span class="built_in">pop</span>(a) &amp;&amp; s2.<span class="built_in">pop</span>(x); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> std::cout;</span><br><span class="line">	<span class="keyword">using</span> std::cin;</span><br><span class="line">	<span class="keyword">using</span> std::endl;</span><br><span class="line">	Crab&lt;Stack&gt; nebula;</span><br><span class="line">	<span class="comment">// Stack must match template &lt;typename T&gt; class thing </span></span><br><span class="line">	<span class="keyword">int</span> ni;</span><br><span class="line">	<span class="keyword">double</span> nb;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Enter int double pairs, such as 4 3.5 (0 0 to end):\n&quot;</span>;</span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; ni &gt;&gt; nb &amp;&amp; ni &gt; <span class="number">0</span> &amp;&amp; nb &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!nebula.<span class="built_in">push</span>(ni, nb))</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (nebula.<span class="built_in">pop</span>(ni, nb))</span><br><span class="line">		cout &lt;&lt; ni &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; nb &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Done.\n&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<br>

<h4 id="模板类和友元"><a href="#模板类和友元" class="headerlink" title="模板类和友元"></a>模板类和友元</h4><p>模板的友元分为3类：<br>1.非模板友元<br>2.约束模板友元<br>3.非约束模板友元<br><br><br></p>
<h5 id="非模板友元"><a href="#非模板友元" class="headerlink" title="非模板友元"></a>非模板友元</h5><p>格式如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HasFriend</span>&lt;</span><span class="keyword">int</span>&gt;&#123;</span><br><span class="line">      <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">report</span> <span class="params">(HasFriend&lt;T&gt; &amp;)</span></span>;</span><br><span class="line">      ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h5 id="模板类的约束模板友元"><a href="#模板类的约束模板友元" class="headerlink" title="模板类的约束模板友元"></a>模板类的约束模板友元</h5><p>首先在类定义里声明模板，然后在函数定义里再次声明友元</p>
<p>&lt;&gt;指出这是模板具体化，report可以省略因为可以从参数来判断，<br>counts()没有参数，因此必须使用参数模板语法<TT>来指明其具体化，TT指的是HasFriendT类的参数类型。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">counts</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">report</span><span class="params">(T &amp;)</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">hasfriendT</span>&#123;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">void</span> counts&lt;TT&gt;();</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">void</span> report&lt;&gt;(hasfriendT&lt;TT&gt; &amp;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>假设声明了   HasFriendT<int> squack；<br>编译器将用int代替<TT></p>
<h5 id="非约束模板友元"><a href="#非约束模板友元" class="headerlink" title="非约束模板友元"></a>非约束模板友元</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">manyfriendT</span>&#123;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> C,<span class="keyword">typename</span> D&gt;<span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">(C &amp;,D &amp;)</span></span>;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">void</span> report&lt;&gt;(hasfriendT&lt;T T&gt;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h4 id="模板别名"><a href="#模板别名" class="headerlink" title="模板别名"></a>模板别名</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line">   <span class="keyword">using</span>  arrtype = std::array&lt;T,<span class="number">12</span>&gt;;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>C++PrimerPlus</category>
      </categories>
  </entry>
  <entry>
    <title>C　PrimerPlus(5) 13类继承与接口</title>
    <url>/WestRoute.github.io/2021/09/24/c++05Inherit/</url>
    <content><![CDATA[<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>接口与实现</p>
<blockquote><p>使用公有继承时，类可以继承接口，可能还有实现（基类的纯虚函数提供接口，但不提供实现）\n<br>获得接口是is-a关系的组成部分。\n<br>而使用组合，类可以获得实现，但不能获得接口。不继承接口是has-a关系的组成部分。\n</p>
</blockquote>
<span id="more"></span>
<br>

<p><strong>而使用组合，类可以获得实现，但不能获得接口。</strong>:组合通过object.function()引用。<br><br><br></p>
<h3 id="派生类"><a href="#派生类" class="headerlink" title="派生类"></a>派生类</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Circle</span> ：<span class="symbol">public</span> <span class="symbol">Ellipse</span></span><br></pre></td></tr></table></figure>
<!--more-->
<p>&nbsp;&nbsp;&nbsp;&nbsp;抽象类（ABC，abstract）必须包含一个<strong>纯虚函数</strong>（virtual）。<br>基类指针可以访问派生类对象，但是不能访问仅属于派生类的元素，这时候我们用虚函数来调用子类的这个函数。<br>纯虚函数则是用来实现接口。</p>
<p>虚类，即含有虚函数但不含有纯虚函数的类。<br>抽象类，即含有纯虚函数和非虚函数的类。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;基类使用动态分配内存，并重新定义赋值和复制构造函数，派生类也是用new时必须为派生类定义显示的析构函数、复制构造函数和赋值构造函数。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;派生类</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">hasDMA</span> :<span class="symbol">public</span> <span class="symbol">baseDMA</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">       char* style;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;&nbsp;定义派生类独有的析构函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">baeDMA::~<span class="function"><span class="title">baseDMA</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> []  label;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hase DMA::~<span class="function"><span class="title">hasDMA</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> [] style;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当派生类想要生成基类的temp-copy时无法访问基类数据，派生类的复制构造函数必须<strong>调用</strong>基类的复制构造函数来处理共享的基类数据</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">hasDMA::<span class="built_in">hasDMA</span>(<span class="keyword">const</span> hasDMA &amp;hs): <span class="built_in">baseDMA</span>(hs)&#123;</span><br><span class="line">    style=<span class="keyword">new</span> <span class="keyword">char</span>[std::<span class="built_in">strlen</span>(hs.style)+<span class="number">1</span>];</span><br><span class="line">    std::<span class="built_in">strcpy</span>(style,hs.style);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;派生类赋值构造函数则是需要通过显式调用.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//baseClass</span></span><br><span class="line">baseDMA &amp; baseDMA::<span class="keyword">operator</span>=(<span class="keyword">const</span> baseDMA &amp;rs)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>==&amp;rs) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">delete</span> [] label;</span><br><span class="line">    label=<span class="keyword">new</span> <span class="keyword">char</span>[std::<span class="built_in">strlen</span>(hs.style)+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    std::<span class="built_in">strcpy</span>(label,rs.label);</span><br><span class="line">    rating=rs.rating;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//stance</span></span><br><span class="line">hasDMA &amp; hasDMA::<span class="keyword">operator</span>=(<span class="keyword">const</span> hasDMA &amp;hs)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>==&amp;hs) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    baseDMA::<span class="keyword">operator</span>=(hs);</span><br><span class="line">    <span class="keyword">delete</span> [] label;</span><br><span class="line">    label=<span class="keyword">new</span> <span class="keyword">char</span>[std::<span class="built_in">strlen</span>(hs.style)+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    std::<span class="built_in">strcpy</span>(label,rs.label);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>dma.h</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> DMA_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DMA_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//  Base Class Using DMA</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baseDMA</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span> * label;</span><br><span class="line">    <span class="keyword">int</span> rating;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">baseDMA</span>(<span class="keyword">const</span> <span class="keyword">char</span> * l = <span class="string">&quot;null&quot;</span>, <span class="keyword">int</span> r = <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">baseDMA</span>(<span class="keyword">const</span> baseDMA &amp; rs);</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">baseDMA</span>();</span><br><span class="line">    baseDMA &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> baseDMA &amp; rs);</span><br><span class="line">    <span class="keyword">friend</span> std::ostream &amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream &amp; os, </span><br><span class="line">                                     <span class="keyword">const</span> baseDMA &amp; rs);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// derived class without DMA</span></span><br><span class="line"><span class="comment">// no destructor needed</span></span><br><span class="line"><span class="comment">// uses implicit copy constructor</span></span><br><span class="line"><span class="comment">// uses implicit assignment operator</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lacksDMA</span> :</span><span class="keyword">public</span> baseDMA</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> &#123;</span> COL_LEN = <span class="number">40</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> color[COL_LEN];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">lacksDMA</span>(<span class="keyword">const</span> <span class="keyword">char</span> * c = <span class="string">&quot;blank&quot;</span>, <span class="keyword">const</span> <span class="keyword">char</span> * l = <span class="string">&quot;null&quot;</span>,</span><br><span class="line">              <span class="keyword">int</span> r = <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">lacksDMA</span>(<span class="keyword">const</span> <span class="keyword">char</span> * c, <span class="keyword">const</span> baseDMA &amp; rs);</span><br><span class="line">    <span class="keyword">friend</span> std::ostream &amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream &amp; os, </span><br><span class="line">                                     <span class="keyword">const</span> lacksDMA &amp; rs);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// derived class with DMA</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hasDMA</span> :</span><span class="keyword">public</span> baseDMA</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span> * style;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">hasDMA</span>(<span class="keyword">const</span> <span class="keyword">char</span> * s = <span class="string">&quot;none&quot;</span>, <span class="keyword">const</span> <span class="keyword">char</span> * l = <span class="string">&quot;null&quot;</span>,</span><br><span class="line">              <span class="keyword">int</span> r = <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">hasDMA</span>(<span class="keyword">const</span> <span class="keyword">char</span> * s, <span class="keyword">const</span> baseDMA &amp; rs);</span><br><span class="line">    <span class="built_in">hasDMA</span>(<span class="keyword">const</span> hasDMA &amp; hs);</span><br><span class="line">    ~<span class="built_in">hasDMA</span>();</span><br><span class="line">    hasDMA &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> hasDMA &amp; rs);  </span><br><span class="line">    <span class="keyword">friend</span> std::ostream &amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream &amp; os, </span><br><span class="line">                                     <span class="keyword">const</span> hasDMA &amp; rs);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p><br><br><br>dma.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;dma.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="comment">// baseDMA methods</span></span><br><span class="line">baseDMA::<span class="built_in">baseDMA</span>(<span class="keyword">const</span> <span class="keyword">char</span> * l, <span class="keyword">int</span> r)</span><br><span class="line">&#123;</span><br><span class="line">    label = <span class="keyword">new</span> <span class="keyword">char</span>[std::<span class="built_in">strlen</span>(l) + <span class="number">1</span>];</span><br><span class="line">    std::<span class="built_in">strcpy</span>(label, l);</span><br><span class="line">    rating = r;</span><br><span class="line">&#125;</span><br><span class="line">baseDMA::<span class="built_in">baseDMA</span>(<span class="keyword">const</span> baseDMA &amp; rs)</span><br><span class="line">&#123;</span><br><span class="line">    label = <span class="keyword">new</span> <span class="keyword">char</span>[std::<span class="built_in">strlen</span>(rs.label) + <span class="number">1</span>];</span><br><span class="line">    std::<span class="built_in">strcpy</span>(label, rs.label);</span><br><span class="line">    rating = rs.rating;</span><br><span class="line">&#125;</span><br><span class="line">baseDMA::~<span class="built_in">baseDMA</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> [] label;</span><br><span class="line">&#125;</span><br><span class="line">baseDMA &amp; baseDMA::<span class="keyword">operator</span>=(<span class="keyword">const</span> baseDMA &amp; rs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;rs)</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">delete</span> [] label;</span><br><span class="line">    label = <span class="keyword">new</span> <span class="keyword">char</span>[std::<span class="built_in">strlen</span>(rs.label) + <span class="number">1</span>];</span><br><span class="line">    std::<span class="built_in">strcpy</span>(label, rs.label);</span><br><span class="line">    rating = rs.rating;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream &amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream &amp; os, <span class="keyword">const</span> baseDMA &amp; rs)</span><br><span class="line">&#123;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;Label: &quot;</span> &lt;&lt; rs.label &lt;&lt; std::endl;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;Rating: &quot;</span> &lt;&lt; rs.rating &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// lacksDMA methods</span></span><br><span class="line">lacksDMA::<span class="built_in">lacksDMA</span>(<span class="keyword">const</span> <span class="keyword">char</span> * c, <span class="keyword">const</span> <span class="keyword">char</span> * l, <span class="keyword">int</span> r)</span><br><span class="line">    : <span class="built_in">baseDMA</span>(l, r)</span><br><span class="line">&#123;</span><br><span class="line">    std::<span class="built_in">strncpy</span>(color, c, <span class="number">39</span>);</span><br><span class="line">    color[<span class="number">39</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">lacksDMA::<span class="built_in">lacksDMA</span>(<span class="keyword">const</span> <span class="keyword">char</span> * c, <span class="keyword">const</span> baseDMA &amp; rs)</span><br><span class="line">    : <span class="built_in">baseDMA</span>(rs)</span><br><span class="line">&#123;</span><br><span class="line">    std::<span class="built_in">strncpy</span>(color, c, COL_LEN - <span class="number">1</span>);</span><br><span class="line">    color[COL_LEN - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::ostream &amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream &amp; os, <span class="keyword">const</span> lacksDMA &amp; ls)</span><br><span class="line">&#123;</span><br><span class="line">    os &lt;&lt; (<span class="keyword">const</span> baseDMA &amp;) ls;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;Color: &quot;</span> &lt;&lt; ls.color &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// hasDMA methods</span></span><br><span class="line">hasDMA::<span class="built_in">hasDMA</span>(<span class="keyword">const</span> <span class="keyword">char</span> * s, <span class="keyword">const</span> <span class="keyword">char</span> * l, <span class="keyword">int</span> r)</span><br><span class="line">         : <span class="built_in">baseDMA</span>(l, r)</span><br><span class="line">&#123;</span><br><span class="line">    style = <span class="keyword">new</span> <span class="keyword">char</span>[std::<span class="built_in">strlen</span>(s) + <span class="number">1</span>];</span><br><span class="line">    std::<span class="built_in">strcpy</span>(style, s);</span><br><span class="line">&#125;</span><br><span class="line">hasDMA::<span class="built_in">hasDMA</span>(<span class="keyword">const</span> <span class="keyword">char</span> * s, <span class="keyword">const</span> baseDMA &amp; rs)</span><br><span class="line">         : <span class="built_in">baseDMA</span>(rs)</span><br><span class="line">&#123;</span><br><span class="line">    style = <span class="keyword">new</span> <span class="keyword">char</span>[std::<span class="built_in">strlen</span>(s) + <span class="number">1</span>];</span><br><span class="line">    std::<span class="built_in">strcpy</span>(style, s);</span><br><span class="line">&#125;</span><br><span class="line">hasDMA::<span class="built_in">hasDMA</span>(<span class="keyword">const</span> hasDMA &amp; hs)</span><br><span class="line">         : <span class="built_in">baseDMA</span>(hs)  <span class="comment">// invoke base class copy constructor</span></span><br><span class="line">&#123;</span><br><span class="line">    style = <span class="keyword">new</span> <span class="keyword">char</span>[std::<span class="built_in">strlen</span>(hs.style) + <span class="number">1</span>];</span><br><span class="line">    std::<span class="built_in">strcpy</span>(style, hs.style);</span><br><span class="line">&#125;</span><br><span class="line">hasDMA::~<span class="built_in">hasDMA</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> [] style;</span><br><span class="line">&#125;</span><br><span class="line">hasDMA &amp; hasDMA::<span class="keyword">operator</span>=(<span class="keyword">const</span> hasDMA &amp; hs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;hs)</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    baseDMA::<span class="keyword">operator</span>=(hs);  <span class="comment">// copy base portion</span></span><br><span class="line">    <span class="keyword">delete</span> [] style;         <span class="comment">// prepare for new style</span></span><br><span class="line">    style = <span class="keyword">new</span> <span class="keyword">char</span>[std::<span class="built_in">strlen</span>(hs.style) + <span class="number">1</span>];</span><br><span class="line">    std::<span class="built_in">strcpy</span>(style, hs.style);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream &amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream &amp; os, <span class="keyword">const</span> hasDMA &amp; hs)</span><br><span class="line">&#123;</span><br><span class="line">    os &lt;&lt; (<span class="keyword">const</span> baseDMA &amp;) hs;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;Style: &quot;</span> &lt;&lt; hs.style &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><br><br></p>
<h3 id="const的位置与用法"><a href="#const的位置与用法" class="headerlink" title="const的位置与用法"></a>const的位置与用法</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;保证<span style="background-color:#ffcccb">参数</span>不被修改</p>
<figure class="highlight nim"><table><tr><td class="code"><pre><span class="line"><span class="type">Star</span>::star(<span class="keyword">const</span> <span class="built_in">char</span> *s)<span class="meta">&#123;...&#125;</span></span><br><span class="line">//即使时数组指针也无法修改</span><br></pre></td></tr></table></figure>
<p><br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;保证<span style="background-color:#ffcccb">调用对象</span>不被修改</p>
<figure class="highlight nim"><table><tr><td class="code"><pre><span class="line"><span class="built_in">void</span> <span class="type">Star</span>::show() <span class="keyword">const</span> <span class="meta">&#123;...&#125;</span></span><br><span class="line">//即this.的所有参数无法修改</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;也可以放于返回值之前，意味着可以初始化返回对象中的变量，但无法修改返回对象的数据</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>C++PrimerPlus</category>
      </categories>
  </entry>
  <entry>
    <title>C　PrimerPlus(4) 11使用类12类的动态内存</title>
    <url>/WestRoute.github.io/2021/09/23/c++04objectAndClass/</url>
    <content><![CDATA[<h3 id="重载运算符"><a href="#重载运算符" class="headerlink" title="重载运算符"></a>重载运算符</h3><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Time</span> <span class="keyword">Time</span>::operator+(const <span class="keyword">Time</span> &amp;t)const&#123;</span><br><span class="line">    <span class="keyword">Time</span> <span class="built_in">sum</span>;</span><br><span class="line">    <span class="built_in">sum</span>.minutes = minutes + t.minutes;</span><br><span class="line">    <span class="built_in">sum</span>.hours = hours + t.hours+su.minutes/<span class="number">60</span>;</span><br><span class="line">    <span class="built_in">sum</span>.minutes %= <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h3><p>通过让函数称为类的友元，可以赋予该函数与类的成员函数相同的访问权限<br>符号重载实现B<em>2.78， 友元的符号重载实现2.78</em>B<br>&nbsp;&nbsp;&nbsp;&nbsp;1.将友元函数的声明放入类声明中   2.不要再定义函数时加上friend</p>
<figure class="highlight nim"><table><tr><td class="code"><pre><span class="line"><span class="type">Time</span> operator:(double m,<span class="keyword">const</span> <span class="type">Time</span> &amp;t)&#123;</span><br><span class="line">    <span class="type">Time</span> <span class="literal">result</span>;</span><br><span class="line">    long totalminutes = t.hours*m*<span class="number">60</span>  +  t.minutes*m</span><br><span class="line">    <span class="literal">result</span>.minutes = totalminutes%<span class="number">60</span>;</span><br><span class="line">    <span class="literal">result</span>.hours = totalminutes/<span class="number">60</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><br><br><br><br></p>
<h3 id="类的动态内存"><a href="#类的动态内存" class="headerlink" title="类的动态内存"></a>类的动态内存</h3><p> &nbsp;&nbsp;&nbsp;&nbsp;<strong>类对象作为函数参数调用时，将会产生对象的副本，而这个个副本是调用类中的拷贝构造函数实现的，如果类中没有自定义拷贝构造，编译器会自动生成一个缺省的函数，该函数有以下特点：</strong><br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、对于基本类型的成员变量，按字节复制<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、对于类类型的成员变量，将自动调用相应类的拷贝函数来初始化<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3、指针只是简单的赋值，而不会自动分配内存<br><br><br> &nbsp;&nbsp;&nbsp;&nbsp;当退出该函数时，副本将调用析构函数，删除该指针，指针所指向内存也已被释放。将原始对象只保留一个指针值。当该类再次调用析构函数时会出现double free的错误。<br> 解决方法：<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、自定义拷贝函数<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、将对象作为引用传递</p>
<p><br><br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;特殊成员函数：默认构造函数，默认析构函数，复制构造函数，赋值运算函数，地址运算函数<br><br></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;复制构造函数：创建一个新对象并将其初始化一个 <strong>现有对象</strong>，参数为指向类对象的常量。<strong>按值进行复制</strong></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;NULL是表示空指针的C语言宏。</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>C++PrimerPlus</category>
      </categories>
  </entry>
  <entry>
    <title>C PrimerPlus(3) 函数与命名空间</title>
    <url>/WestRoute.github.io/2021/09/22/c++03funcAndNamespace/</url>
    <content><![CDATA[<h3 id="8-5显式具体化"><a href="#8-5显式具体化" class="headerlink" title="8.5显式具体化"></a>8.5显式具体化</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;显式具体化：可以提供具体化函数定义。</p>
<span id="more"></span>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// non template function prototype</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(job&amp;,job&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//template prototype</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(T &amp;,T &amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//explicit specialization for the job type</span></span><br><span class="line"><span class="comment">//程序选择时，显式具体化优先于第二个模板生成</span></span><br><span class="line"><span class="keyword">template</span> &lt;&gt; <span class="keyword">void</span> Swap&lt;job&gt;(job &amp;,job &amp;);</span><br></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;&nbsp;习题8.8：操作string，输入字符转成大写。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="9-1内存模型和名称空间"><a href="#9-1内存模型和名称空间" class="headerlink" title="9.1内存模型和名称空间"></a>9.1内存模型和名称空间</h3><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>C++PrimerPlus</category>
      </categories>
  </entry>
  <entry>
    <title>C PrimerPlus(2) string与char[]、char*</title>
    <url>/WestRoute.github.io/2021/09/21/c++02string/</url>
    <content><![CDATA[<h3 id="c语言"><a href="#c语言" class="headerlink" title="c语言"></a>c语言</h3><p>printf只能用char*型，所以需要转换成string型。<br><code>str.c_str()</code></p>
<span id="more"></span>
<h4 id="string-h-函数库"><a href="#string-h-函数库" class="headerlink" title="string.h 函数库"></a>string.h 函数库</h4><p><strong>连接文字符</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;char *strcat(char *s, chat *a);<br>&nbsp;&nbsp;&nbsp;&nbsp;char *strncat(char *s, chat *a, int n);<br><strong>比较</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;int strcmp(char *s, chat *t);<br>&nbsp;&nbsp;&nbsp;&nbsp;int strncmp(char *s, chat *t, int n);<br><strong>复制</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;char *strcpy(char *d, chat *s);<br>&nbsp;&nbsp;&nbsp;&nbsp;char *strncpy(char *d, chat *s, int n);<br><strong>求长</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;int strlen(chat *s);<br><strong>位置</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;char *strchr(chat *s, int c);<br>&nbsp;&nbsp;&nbsp;&nbsp;char *strrchr(chat *s, int c);<br>&nbsp;&nbsp;&nbsp;&nbsp;char *strstr(chat *s, char *ss);    </p>
<h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><p>方便程度：  char[] &gt; char* &gt; string</p>
<h4 id="使用-char-注意-‘-0’"><a href="#使用-char-注意-‘-0’" class="headerlink" title="使用 char[] 注意 ‘\0’"></a>使用 char[] 注意 ‘\0’</h4><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str1[] = <span class="string">&quot;DNA&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> str2[] = &#123;<span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="char-转换成-string"><a href="#char-转换成-string" class="headerlink" title="char[] 转换成 string"></a>char[] 转换成 string</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> arr[] = <span class="string">&quot;CGTCAAACGG&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::string <span class="title">dna_seq</span><span class="params">(arr, <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]))</span></span>;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; dna_seq &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// CGTCAAACGG</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="char-转换成-string-1"><a href="#char-转换成-string-1" class="headerlink" title="char* 转换成 string"></a>char* 转换成 string</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* char_ptr = <span class="string">&quot;CGTCAAACGG&quot;</span>;</span><br><span class="line"></span><br><span class="line">    std::string dna_seq = std::<span class="built_in">string</span>(char_ptr);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; dna_seq &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// CGTCAAACGG</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="string可以用-0-来访问"><a href="#string可以用-0-来访问" class="headerlink" title="string可以用 [0] 来访问"></a>string可以用 [0] 来访问</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function">string <span class="title">change</span><span class="params">(string &amp;str)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter a string (q to quit): &quot;</span>;</span><br><span class="line">    string str;</span><br><span class="line">    <span class="built_in">getline</span>(cin, str);</span><br><span class="line">    <span class="keyword">while</span> (str != <span class="string">&quot;q&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        str = <span class="built_in">change</span>(str);</span><br><span class="line">        cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Next string (q to quit): &quot;</span>;</span><br><span class="line">        <span class="built_in">getline</span>(cin, str);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Bye.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">string <span class="title">change</span><span class="params">(string &amp;str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; str[i]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        str[i] = <span class="built_in">toupper</span>(str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>C++PrimerPlus</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>C PrimerPlus(1) 对象与类</title>
    <url>/WestRoute.github.io/2021/09/20/c++01class/</url>
    <content><![CDATA[<h3 id="对象与类"><a href="#对象与类" class="headerlink" title="对象与类"></a>对象与类</h3><p>需要同时编译两个文件，即：</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">g</span>++ <span class="comment">bank</span><span class="string">.</span><span class="comment">cpp</span> <span class="comment">usebank</span><span class="string">.</span><span class="comment">cpp</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>成员函数</p>
<p><strong>内联</strong> 内联函数是代码被插入到调用者代码处的函数。在C++中，在类的内部定义了函数体的函数，被默认为是内联函数。而不管你是否有inline关键字。 </p>
<p><strong>私有成员函数</strong>  在类定义文件中定义。</p>
<p><strong>构造函数</strong>  类的构造函数是类的一种特殊的成员函数，它会在每次创建类的新对象时执行。构造函数的名称与类的名称是完全相同的，并且不会返回任何类型，也不会返回 void。构造函数可用于为某些成员变量设置初始值。</p>
<p><strong>析构函数</strong>  在每次删除所创建的对象时执行。析构函数的名称与类的名称是完全相同的，只是在前面加了个波浪号（~）作为前缀，它不会返回任何值，也不能带有任何参数。析构函数有助于在跳出程序（比如关闭文件、释放内存等）前释放资源。</p>
<h4 id="编程练习题第6问"><a href="#编程练习题第6问" class="headerlink" title="编程练习题第6问"></a>编程练习题第6问</h4><!--more-->

<p>six.h</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SIX_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIX_H_</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Move</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> x;</span><br><span class="line">    <span class="keyword">double</span> y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Move</span>(<span class="keyword">double</span> a = <span class="number">0.0</span>, <span class="keyword">double</span> b = <span class="number">0.0</span>);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showmove</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">Move <span class="title">add</span><span class="params">(<span class="keyword">const</span> Move &amp;m)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">(<span class="keyword">double</span> a = <span class="number">0.0</span>, <span class="keyword">double</span> b = <span class="number">0.0</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>six.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;six.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Move::<span class="built_in">Move</span>(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span><br><span class="line">&#123;</span><br><span class="line">    x = a;</span><br><span class="line">    y = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Move::showmove</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; x &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;y = &quot;</span> &lt;&lt; y &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Move <span class="title">Move::add</span><span class="params">(<span class="keyword">const</span> Move &amp;m)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Move temp;</span><br><span class="line">    temp.x = m.x + <span class="keyword">this</span>-&gt;x; <span class="comment">//加上调用对象的x值;</span></span><br><span class="line">    temp.y = m.y + <span class="keyword">this</span>-&gt;y; <span class="comment">//加上调用对象的y值;</span></span><br><span class="line">    <span class="keyword">return</span> temp;            <span class="comment">//返回值为一个新对象;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Move::reset</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = a;</span><br><span class="line">    y = b;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>testSix.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;six.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> std::cout;</span><br><span class="line">    <span class="keyword">using</span> std::endl;</span><br><span class="line">    Move temp;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Starting values:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    temp.<span class="built_in">showmove</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;After x + 2, y + 5:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    temp.<span class="built_in">reset</span>(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">    temp.<span class="built_in">showmove</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;After adding new object value:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    temp = temp.<span class="built_in">add</span>(temp); <span class="comment">//对象赋值;</span></span><br><span class="line">    temp.<span class="built_in">showmove</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="编程练习题第8问"><a href="#编程练习题第8问" class="headerlink" title="编程练习题第8问"></a>编程练习题第8问</h4><p>eight.h</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> EIGHT_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EIGHT_H_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Item;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">10</span>;</span><br><span class="line">    Item items[MAX];</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">List</span>();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add_data</span><span class="params">(Item item)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_empty</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_full</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(<span class="keyword">void</span> (*pf)(Item &amp;))</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>



<p>eight.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;eight.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">List::<span class="built_in">List</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;index = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">List::add_data</span><span class="params">(Item item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;items[index++] = item;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">List::is_empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> == index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">List::is_full</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> MAX == index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">List::visit</span><span class="params">(<span class="keyword">void</span> (*pf)(Item &amp;))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;index; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        (*pf)(<span class="keyword">this</span>-&gt;items[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>testEight.cpp</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;eight.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(Item &amp;item)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    Item temp;</span><br><span class="line">    List mylist;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The list include following functions:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a to add an number.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v to visit every number.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;q to exit the menu.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Please enter your choice: &quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; ch &amp;&amp; <span class="built_in">tolower</span>(ch) != <span class="string">&#x27;q&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (cin.<span class="built_in">get</span>() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">tolower</span>(ch) != <span class="string">&#x27;a&#x27;</span> &amp;&amp; <span class="built_in">tolower</span>(ch) != <span class="string">&#x27;v&#x27;</span>) <span class="comment">//处理错误选择;</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Please enter a, v or q: &quot;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (<span class="built_in">tolower</span>(ch))</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Please enter an number: &quot;</span>;</span><br><span class="line">            <span class="keyword">while</span> (!(cin &gt;&gt; temp)) <span class="comment">//处理错误非数值输入;</span></span><br><span class="line">            &#123;</span><br><span class="line">                cin.<span class="built_in">clear</span>();</span><br><span class="line">                <span class="keyword">while</span> (cin.<span class="built_in">get</span>() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Please enter an number again: &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mylist.<span class="built_in">is_full</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;The list is full. Can&#x27;t add new number.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                mylist.<span class="built_in">add_data</span>(temp);</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Add number &quot;</span> &lt;&lt; temp &lt;&lt; <span class="string">&quot; successfully.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;v&#x27;</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (mylist.<span class="built_in">is_empty</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;No number.\n&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Visit every number:&quot;</span> &lt;&lt; endl;</span><br><span class="line">                mylist.<span class="built_in">visit</span>(traverse);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\n\n\n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;The list include following functions:&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a to add an number.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;v to visit every number.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;q to exit the menu.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Please enter your choice: &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Bye.&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(Item &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; item &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h3 id="10-1对象与类"><a href="#10-1对象与类" class="headerlink" title="10.1对象与类"></a>10.1对象与类</h3><p>抽象方法 设计抽象类（通常称为 ABC）的目的，是为了给其他类提供一个可以继承的适当的基类。抽象类不能被用于实例化对象，它只能作为接口使用。如果试图实例化一个抽象类的对象，会导致编译错误。</p>
<p>虚方法</p>
<p>抽象方法和虚方法的区别<br>1.虚方法必须有实现部分，抽象方法没有提供实现部分，抽象方法是一种强制派生类覆盖的方法，否则派生类将不能被实例化。<br>2.抽象方法只能在抽象类中声明，虚方法不是。如果类包含抽象方法，那么该类也是抽象的，也必须声明类是抽象的。<br>3.抽象方法必须在派生类中重写，这一点和接口类似，虚方法不需要再派生类中重写。</p>
<p>静态联编 在编译时期完成的联编</p>
<p>动态联编 编译器生成能够在程序运行时选择的正确的虚方法的代码</p>
<p><br><br><br><br><br><br><br><br></p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>软件编程</category>
        <category>C++PrimerPlus</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>《哲学的故事》笔记</title>
    <url>/WestRoute.github.io/2021/09/01/%E5%93%B2%E5%AD%A6%E7%9A%84%E6%95%85%E4%BA%8B/</url>
    <content><![CDATA[<p>（美）杜兰特著；蒋剑峰，张程程译. —杭州：浙江大学出版社</p>
<span id="more"></span>
<h3 id="第一章-柏拉图"><a href="#第一章-柏拉图" class="headerlink" title="第一章 柏拉图"></a>第一章 柏拉图</h3><p>古希腊第一批天文学家<br>起初哲学是物理性质的</p>
<p> 并将民主贬斥为无能的虚伪 。从某种意义上当时的雅典几乎谈不上民主。奴隶。<br>伯罗奔尼撒战争（前431-前404） 赛提亚反对民主</p>
<p>苏格拉底<br>一个人只要不违法1妨碍他去做任何他想做的事情便是毫无理由的。这种离散式的个人主义大大削弱了雅典人民的个性。<br>《苏格拉底自辩篇》<br>1.伦理学<br>《理想国》摘录<br>正义是强者的利益<br>非正义受到谴责是因为谴责他的人怕自己吃苦头，而并非真的出于任何道德上的顾虑<br>按照自身的利益来展开赞扬和谴责，这样的正义是属于愚民的奴隶式道德。一个人的正正的美德是勇气和智慧。<br>雅典对外政策的帝国主义发展<br>2政治学问题<br>人口控制，素食主义，回归自然 犬儒派第欧根尼 圣西门，傅里叶，威廉莫里斯以及托尔斯泰<br>民主制度的可怕<br>3.心理学问题<br>政治心理学问题<br>每个人心中都潜藏着兽性<br>贪婪易妒好斗好色<br>我们必须有宗教<br>脱离家庭式个体主义</p>
<p>耶稣说道德是善待弱者<br>你才说道德是强者的英勇<br>柏拉图说道德是全体的有效和谐</p>
<p>俄共和柏拉图的理想国 责任稀释</p>
<p>柏拉图最欠缺的或许是赫拉克利特的变化意识：他过于焦急的想将这个和世界凝固成一幅静止的图画</p>
<h3 id="第二章-亚里士多德和希腊科学"><a href="#第二章-亚里士多德和希腊科学" class="headerlink" title="第二章  亚里士多德和希腊科学"></a>第二章  亚里士多德和希腊科学</h3><p>反柏拉图<br>【摘抄】<br>马其顿国王菲利普坚持要让自己的儿子接受最优质的教育，因为他已在其他各个方面为儿子设计了不可限量的前程。他于公元前356年征服了色雷斯，控制了当地的金矿，由此生产出的金子十倍于当时日渐衰败的劳里恩银矿运到雅典的银两；他的臣民是勤劳的农民和勇敢的战士，尚未被城市的浮华俘虏：这里将是数百个弱小城邦结合、形成政治上统一的大希腊的希望之地。菲利普对擅长艺术和学术创作的希腊人没有丝毫的同情，并将她的社会秩序一举击破；在这些零散城邦的首都中，他看到的不是令人窒息的文明或无与伦比的艺术，而是处处显露的商业腐败和政治混乱；他看到贪婪的商人和银行家将国家的重要资产据为己有，无能的政治家和善于诡辩的说客将自顾不暇的民众引向一个又一个灾难般的阴谋和战争，政党分裂阶级，阶级又聚变成森严的社会等级：这不是一个国家，菲利普说，而是一群鱼龙混杂、良莠不齐的个体——天才和奴隶。他要给这片混乱的土地带来秩序，将全希腊团结起来，将其建成强大的世界政治中心和根基。他在底比斯的幼年时期曾投到著名的伊巴密浓达[4]门下学习军事策略和市政管理；现在凭借无比的勇气和远大的志向，他将所学到的东西发挥得出神入化。公元前338年，他在克罗尼亚大败雅典人，并最终用锁链成功建立起统一的希腊。然而，正当高踞胜利宝座的他谋划着如何和儿子一起实施统治世界的下一步时，他被刺杀了。</p>
<p>逻辑学的创立</p>
<p>科学学派<br>希腊之前：天文学<br>赫拉克利特<br>亚里士多德和希腊科学 唯物主义决定论的原子学说<br>博学家 物理学家 生物学胚胎学 形而上学和上帝的本质————无为之王，什么都不做，英国女王<br>心理学（意志的自由和灵魂的不灭）和艺术的本质</p>
<p>政治学<br>共产主义和保守主义<br>婚姻和教育<br>民主制和贵族制<br>  民主制整体上仍旧不如贵族制，因为它建立在一个虚假的平等基础上<br>  立宪政府提供了可惜的结合<br>不以物喜亚里士多德<br>伦理学和幸福的本质<br>亚里士多德观察收集数据并分类，却得不出研究结果<br>亚里士多德认为理想化的生活就是正规的三段论，不可取</p>
<h3 id="第三章-弗朗西斯培根"><a href="#第三章-弗朗西斯培根" class="headerlink" title="第三章 弗朗西斯培根"></a>第三章 弗朗西斯培根</h3><p>从亚里士多德到文艺复兴<br>斯多葛学说 和 伊壁鸠鲁学说（崇尚克制，悲观主义者）<br>一个坦然接受失败 一个在快乐的怀抱中忘掉失败<br>两者都是关于征服与被奴役之下如何求得幸福的理论<br>恰好就像十九世纪，持有悲观的东方斯多葛主义的叔本华和持有消极的伊壁鸠鲁主义的勒南，象征着一败涂地的法国大革命与支离破碎的法国<br>叔本华认为个人意志无法战胜宇宙意志<br>对于一个敏感的人来说，无论是做主人还是做仆人都是困难重重<br>罗马哲学 无论是皇帝马可奥勒留还是努力爱比克泰斯，大多都属于芝诺学派</p>
<p>《论说文集》<br>知识不运用于行动便只是苍白无力的学术虚荣而已<br>手工业者讨厌学问，头脑简单之人敬仰学问，而真正的智慧之刃运用学问<br>创造新学科 社会心理学<br>培根爱的是哲学 不是科学。科学本身必须体验组织性。<br>【个人想法】我们大多数人都是更热爱哲学而非科学</p>
<p>《新工具》<br>谬误 种族偶像 洞穴偶像 市场偶像 剧场偶像<br>怀疑<br>单纯经验<br>假设，演绎和实验<br>评价<br>培根并没有超越前人<br>歌德说“一个人的短处来自于他的时代，一个人的优点来自他的自身”</p>
<h3 id="第四章-斯宾诺莎"><a href="#第四章-斯宾诺莎" class="headerlink" title="第四章 斯宾诺莎"></a>第四章 斯宾诺莎</h3><p>研究神学<br>他觉得《迷途指津》中更多的是迷途，鲜少有指津<br>莱布尼茨，洛克，贝克莱，休谟和康德发起的三百年的哲学战争<br>开除教籍<br>《神学政治论》<br>《知性改进论》<br>《伦理学》<br>斯宾诺莎体系三大关键词 实体属性和样式<br>【咚咚锵】你应该来编程<br>自然和上帝 物质和精神 理智和道德<br>他从把幸福快乐作为各种行为的目标开始，将快乐非常简单地界定为愉悦的存在和伤痛的消除。但是愉悦和痛是相关的，不是绝对的，它们不是既成的状态，而是转换的过程。“愉悦是人从一个相对不完美的状态”（完美也就是指圆满或者满足）“转换至一个更加完美的状态的过程”。“这其中包含着快乐，一个人的力量也因此得到增强。”[95]“伤痛则是一个人从比较完美的状态转至不那么完美的状态。我之所以说是转换，因为愉悦本身并不完美。如果一个人生来就拥有完美，那么他也将没有……愉悦的感觉。与之相反的情况就更显而易见了。”[96]所有的激情都是过客，所有的感情都会改变，它们或者更加接近或者更加远离圆满和力量。</p>
<p>尼采和斯宾诺莎 不支持谦卑</p>
<p>集大成者《政治论》</p>
<h3 id="第五章-伏尔泰和法国启蒙运动"><a href="#第五章-伏尔泰和法国启蒙运动" class="headerlink" title="第五章 伏尔泰和法国启蒙运动"></a>第五章 伏尔泰和法国启蒙运动</h3><p>哲学小说</p>
<h3 id="第六章-伊曼努尔康德和德国唯心主义"><a href="#第六章-伊曼努尔康德和德国唯心主义" class="headerlink" title="第六章 伊曼努尔康德和德国唯心主义"></a>第六章 伊曼努尔康德和德国唯心主义</h3><p>康德《纯粹理性批判》<br>休谟《人性论》<br>休谟认为，他已经证明了心灵不存在，科学亦不存在；心灵只是观念的排列和联结；我们认为的必然其实只是随时可能被推翻的偶然。康德认为，休谟的这些结论都是错误的，因为前提就已经错了。他反驳休谟说：假设所有的认识都来源于“独立的、不同的”感觉，那认识就不存在必然性，也不可能给予我们不变的确定结果；如此一来，你肯定不能指望“看到”你的心灵，即使是用内在感觉的双眼也不行。如果所有的认识都来自感官，来自独立的外部世界，这个世界又是不稳定的，那认识的绝对可靠性就是不可能的。但是如果有些认识是独立于感官经验之外的呢？比如有些知识的可靠性先于我们的经验——即先验。这样的话，绝对真理和绝对科学就是可能的，难道不是吗？存在这样的绝对知识吗？这就是《纯粹理性批判》讨论的问题。</p>
<p>先验感性论<br>《实践理性批判》</p>
<p>论宗教和理性《判断力批判》《纯粹理性范围内的宗教》<br>论政治与持久和平《论联系全宇宙政治史观念的政治秩序的自然原则》</p>
<p>评论<br>英国的皮尔逊，德国的马赫，法国的亨利庞加莱等一些人的研究都更赞同休谟而非康德</p>
<p>黑格尔</p>
<h3 id="第七章-叔本华"><a href="#第七章-叔本华" class="headerlink" title="第七章 叔本华"></a>第七章 叔本华</h3><p>《作为意志和表象的世界》<br>理性会疲劳，意志永远不会<br>意志是人的本质</p>
<p>卢梭之后 理智主义开始衰落，康德之后半死不活，叔本华之后理智主义彻底告别了世界</p>
<h3 id="第八章-赫伯特斯宾塞"><a href="#第八章-赫伯特斯宾塞" class="headerlink" title="第八章 赫伯特斯宾塞"></a>第八章 赫伯特斯宾塞</h3><p>孕育出实证主义运动的奠基人<br>哲学并非异于科学，哲学以提升人生为目的，是对一切科学的协助，综合<br>根据培根的思想传统，思想的对象是事物，而心灵的对象是物质；霍布斯的唯物论、洛克的感觉论、休谟的怀疑论、边沁[1]的功利主义，都是同一主题的不同变奏，这个主题就是现实而又忙碌的生活。</p>
<p>十七世纪，数学主宰哲学，于是出现了笛卡尔、霍布斯、斯宾诺莎、莱布尼茨、帕斯卡[12]；随着心理学的兴起，哲学界出现了贝克莱、休谟、孔狄亚克、康德；十九世纪，谢林、叔本华、斯宾塞、尼采、柏格森等哲学家扮演着主要角色，此时的哲学思想以生物学为背景。在这些时代里，影响最为深远的思想都是思想家成果的零碎片断，或多或少都有些晦涩；但是，每一种具有影响力的思想都与整理、阐述它们的思想家密不可分，正如“新大陆”以亚美利哥·韦斯普奇命名，因为亚美利哥绘制了一幅地图。赫伯特·斯宾塞是达尔文时代的韦斯普奇，从某种程度上来说，也许还是达尔文时代的哥伦布。</p>
<p>《综合哲学》《第一原理》 不可知论<br>《社会静力学》《社会学原理》<br>社会主义是军事国家和封建国家的产物<br>《伦理学原理》</p>
<p>批评<br>我们必须记住，斯宾塞是在两个时代的夹缝中生活的：他的政治思想形成于自由放任政策时代，并深受亚当·斯密的影响；而在他的晚年，英国正绞尽脑汁通过社会控制来纠正其对工业政权的滥用。斯宾塞不厌其烦地重申其反对国家干涉的立场，他反对任何由政府资助的教育，反对政府在金融诈骗方面对公民进行保护。[164]有一次他甚至还主张，对战争的运筹也应是私人的事，而不应是国家的事。[165]斯宾塞所希望的，用威尔斯[166]的话说就是，“提升公众的懒散性，通过国家政策使这种懒散受到尊重”。斯宾塞亲自将手稿送到印刷厂，他不敢把稿子交给邮局，因为他对政府机构不抱任何信心。[167]他是一个个性极为强烈的人，无论何种情况都坚持独处，否则便会大发雷霆。在他看说，每一项新法案都是对个人自由的侵犯。</p>
<h3 id="第九章-弗里德里希尼采"><a href="#第九章-弗里德里希尼采" class="headerlink" title="第九章 弗里德里希尼采"></a>第九章 弗里德里希尼采</h3><p>崇拜叔本华</p>
<p>在罗马人（哪怕是一个普通民众）看来，所谓的美德便是男人气概、勇气、冒险和胆量。但在亚洲，尤其是在犹太人的脑海中，却孕育了另一种道德标准：遭受政治压迫的人们变得谦逊、无助、无私。实际上，这是在求助。在庶民道德的笼罩下，人们热爱安定与和平，厌恶冒险和权力；人们不再追求力量，他们乐于狡诈，人与人之间的报复不再公开，而是变得隐秘；怜悯代替了严厉，模仿代替了创新，人们不再因享有殊荣而自豪，而是无情地谴责自己的良心，因为荣誉只属于异教徒、罗马人、封建主和贵族，良心才属于犹太人、基督徒、资产阶级和大众。[74]从阿摩司[75]到耶稣，一大批能说会道的先知将奴隶阶层的思想发扬光大，使之几乎成为普世伦理观。于是，“俗世”和“肉体”成为罪恶的代名词，贫穷成了道德的象征。[76]</p>
<p>而耶稣则将这种价值标准推至顶峰。在他看来，人人都拥有平等的价值，享有平等的权利。</p>
<p>后来，耶稣的教义又发展出民主思想、功利主义、社会主义。于是，人们开始根据庶民哲学、渐进的平等化和庸俗化、颓废和堕落的生活来定义进步。[77]颓废生活的最后一幕便是对怜悯慈悲、自我牺牲的赞美，对罪大恶极者不理性的安慰，以及“人类社会排泄功能的丧失”。积极的同情是可取的，而怜悯则是一种麻痹心灵的奢侈品，对那些无可救药、昏庸无能、穷凶极恶的废物，那些满是缺陷、活该害病、违法犯罪的畜生来说，怜悯则是浪费感情。怜悯隐含着粗俗，是一种侵犯，比如，“‘探望病人’是想到邻居无助之时，心生的一种类似性高潮的优越感”</p>
<p>颓废<br>因此，贵族是通往超人的必由之路。民主——“这种热衷于清点人数的制度”——必须尽早铲除。对所有高贵的人而言，废除民主的第一步便是毁灭基督教。民主始于基督的胜利；“第一位基督徒，在其本能最深处，是一位反对任何特权的叛逆者，他为了‘平等的权利’生活，并为了‘平等的权利’不懈斗争，要是在现代，他早就被流放到西伯利亚去了”。“如果他是你们当中最伟大的人，就让他成为你们的仆人吧”——这是一切政治智慧、一切健全头脑爱玩的颠覆游戏。的确，一个人在阅读《福音书》的时候，会感觉自己像是沉浸在俄国小说的氛围中；原来，《福音书》是对陀思妥耶夫斯基的剽窃。</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>杂文</category>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>每月总结06 (2021/8)</title>
    <url>/WestRoute.github.io/2021/09/01/MonthlyRe06/</url>
    <content><![CDATA[<h1 id="八月总结"><a href="#八月总结" class="headerlink" title="八月总结"></a>八月总结</h1><p>最后一年暑假，阅片41部，读书13本</p>
<span id="more"></span>
<h3 id="影片"><a href="#影片" class="headerlink" title="影片"></a>影片</h3><table>
<thead>
<tr>
<th align="left">电影(41)</th>
<th align="left">观看日期</th>
<th align="center">评分(10)</th>
</tr>
</thead>
<tbody><tr>
<td align="left">史密斯游美京</td>
<td align="left">2021/8/1</td>
<td align="center">5</td>
</tr>
<tr>
<td align="left">魔术师</td>
<td align="left">2021/8/2</td>
<td align="center">4</td>
</tr>
<tr>
<td align="left">杰罗德游戏</td>
<td align="left">2021/8/3</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">象人</td>
<td align="left">2021/8/4</td>
<td align="center">5</td>
</tr>
<tr>
<td align="left">切尔诺贝利</td>
<td align="left">2021/8/5</td>
<td align="center">4</td>
</tr>
<tr>
<td align="left">左拉传</td>
<td align="left">2021/8/6</td>
<td align="center">5</td>
</tr>
<tr>
<td align="left">狂人皮埃罗</td>
<td align="left">2021/8/6</td>
<td align="center">5</td>
</tr>
<tr>
<td align="left">假面</td>
<td align="left">2021/8/8</td>
<td align="center">5</td>
</tr>
<tr>
<td align="left">后窗</td>
<td align="left">2021/8/8</td>
<td align="center">5</td>
</tr>
<tr>
<td align="left">回忆三部曲</td>
<td align="left">2021/8/9</td>
<td align="center">5</td>
</tr>
<tr>
<td align="left">第九道门</td>
<td align="left">2021/8/9</td>
<td align="center">4</td>
</tr>
<tr>
<td align="left">蜘蛛巢城</td>
<td align="left">2021/8/9</td>
<td align="center">4</td>
</tr>
<tr>
<td align="left">游戏规则</td>
<td align="left">2021/8/9</td>
<td align="center">5</td>
</tr>
<tr>
<td align="left">薇塔与弗吉尼亚</td>
<td align="left">2021/8/10</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">鱿鱼鲸</td>
<td align="left">2021/8/11</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">弗里达</td>
<td align="left">2021/8/12</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">邪不压正</td>
<td align="left">2021/8/13</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">大人物拿破仑</td>
<td align="left">2021/8/14</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">罗斯玛丽的婴儿</td>
<td align="left">2021/8/15</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">超人归来</td>
<td align="left">2021/8/16</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">一步之遥</td>
<td align="left">2021/8/16</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">自杀小队2</td>
<td align="left">2021/8/17</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">爱丽丝城市漫游记</td>
<td align="left">2021/8/18</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">机械师</td>
<td align="left">2021/8/18</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">末路狂花</td>
<td align="left">2021/8/18</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">赌博默示录</td>
<td align="left">2021/8/19</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">犹在镜中</td>
<td align="left">2021/8/19</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">四百击</td>
<td align="left">2021/8/20</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">异形</td>
<td align="left">2021/8/21</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">畸形人</td>
<td align="left">2021/8/22</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">战舰波将金号</td>
<td align="left">2021/8/23</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">恐惧吞噬灵魂</td>
<td align="left">2021/8/24</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">亚特兰大号</td>
<td align="left">2021/8/25</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">阿基尔，上帝的愤怒</td>
<td align="left">2021/8/26</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">现代启示录</td>
<td align="left">2021/8/27</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">体热</td>
<td align="left">2021/8/28</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">科学怪人的新娘</td>
<td align="left">2021/8/29</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">初吻</td>
<td align="left">2021/8/30</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">西部世界</td>
<td align="left">2021/8/30</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">东城梦魇</td>
<td align="left">2021/8/30</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">不良少女莫妮卡</td>
<td align="left">2021/8/31</td>
<td align="center">-</td>
</tr>
</tbody></table>
<h5 id="象人-畸形人："><a href="#象人-畸形人：" class="headerlink" title="象人/畸形人："></a>象人/畸形人：</h5><p>默片时期的演员要求表演动作夸张，演员出身马戏团的几率很大，所以早期经常会出现以马戏团的演员们为故事主角的电影，描写他们的背井离乡、贫穷、被人嘲弄的可怜样子。畸形人也是马戏团的一大成员。当故事中有人对这些异类们伸出慈爱的手的时候，这份温暖就穿过时间的河流，逆流而上，安慰了电脑前孤独的心灵。</p>
<p>从那个迷信、贫穷又愚昧的时代开始人类真的逐渐走向幸福了吗？<br>我觉得仅仅是一部分人富裕了，人类整体并没有进步。</p>
<h5 id="切尔诺贝利（HBO连续剧）："><a href="#切尔诺贝利（HBO连续剧）：" class="headerlink" title="切尔诺贝利（HBO连续剧）："></a>切尔诺贝利（HBO连续剧）：</h5><p>缓慢而恐惧。剧中科普核电站的知识，剧外，豆瓣上有很好的长评详细地罗列了剧中又体现但是没有文字写明的灾难现象。这才是一个好的电视剧该做的。        </p>
<p>无知者无畏，我从来不知道福岛核泄漏可怕在哪里，直到这次如此直观地用影向我展示了放射性物质的恐怖。</p>
<p>在剧集中灾难发生时，苏高层想瞒天过海，声称灾害不严重不允许居民离开切尔诺贝利。<br>这里出现了地狱和天堂。一边紧张又绝望的灾难处理工作，一边是居民们日常生活而不知死亡窥伺已久。<br>这个对比在剪辑上没有明显的切换，产生了一种眩晕感和失重感。</p>
<p>不好的地方是:<br>能闻到洗白的味道。美国的文化传播霸权们竟然为苏联洗白，也是出于对伟大的牺牲表示尊敬吧,瑕不掩瑜。</p>
<h5 id="左拉传："><a href="#左拉传：" class="headerlink" title="左拉传："></a>左拉传：</h5><p>人间值得。    </p>
<h5 id="狂人皮埃罗（让-吕克・达戈尔）："><a href="#狂人皮埃罗（让-吕克・达戈尔）：" class="headerlink" title="狂人皮埃罗（让-吕克・达戈尔）："></a>狂人皮埃罗（让-吕克・达戈尔）：</h5><p>太喜欢了，我真的太喜欢了。一切都是骗局，而我明白了我是个傻子。<br>还会再看，取代了《新桥恋人》成为了我的爱情片榜首。</p>
<h5 id="假面-犹在镜中-不良少女莫妮卡-英格玛・伯格曼-："><a href="#假面-犹在镜中-不良少女莫妮卡-英格玛・伯格曼-：" class="headerlink" title="假面/犹在镜中/不良少女莫妮卡    (英格玛・伯格曼)："></a>假面/犹在镜中/不良少女莫妮卡    (英格玛・伯格曼)：</h5><p>终于理解为什么说“电影导演的电影是拍给观众的，英格玛・伯格曼的电影是拍给电影导演的”这一句话了：<br>英格玛・伯格曼所表现的是人类共同的忧郁与绝望，当我们想要完成一件大事时除了会出现跃跃欲试的积极情绪外，我们也会对自己产生怀疑：我是谁？我真的能完成吗？就算完成了我真的会成功吗？会得到认可吗？这就像是一个人分裂成两个人在不断对话。<br>而《沉默》/《假面》中就是用两个完全不同的女性代表人的极端的两面进行摩擦与对峙。这不仅安抚了创业者/创作者的心灵，还成了未来导演的骗观众的摇钱树。</p>
<p>《犹在镜中》更是如此，父亲是作家，他观察日渐消瘦饱受折磨的女儿想以此完成自己的作品，并相信必是自己最伟大的作品，借此讨论了文艺作品和道德之间的关系。<br>当然英格玛・伯格曼并没有给出答案，到底哪一个更重要。事实上大多数伟大的哲学家/文学家/各路创作者都是只提问而不回答，太可气了。<br>除了冷漠的作家父亲外，相信科学认为妻子是精神病的丈夫，被孤立的妻子，青春期有些不安和攻击性的弟弟都是对各种人各种人生阶段的特写。</p>
<p>《不良少女莫妮卡》当一个不入正途，好吃懒做的人怀揣着对美好生活向往的时候，我也不清楚我该怎么对待她，我觉得不应该是100%的看不起。</p>
<p>英格玛・伯格曼的电影太多了，暂时不会担心看不完。</p>
<h5 id="后窗（希区柯克）："><a href="#后窗（希区柯克）：" class="headerlink" title="后窗（希区柯克）："></a>后窗（希区柯克）：</h5><p>久闻《后窗》大名，听说是从窗户偷窥邻居生活的电影，以为气氛和音乐比是十分阴暗恐怖，没想到主角几人是这样有正义感又很可爱。</p>
<h5 id="回忆三部曲（大友克洋）-："><a href="#回忆三部曲（大友克洋）-：" class="headerlink" title="回忆三部曲（大友克洋）    ："></a>回忆三部曲（大友克洋）    ：</h5><p>看看作画就行。</p>
<h5 id="第九道门-罗斯玛丽的婴儿-罗曼・波兰斯基"><a href="#第九道门-罗斯玛丽的婴儿-罗曼・波兰斯基" class="headerlink" title="第九道门/罗斯玛丽的婴儿    (罗曼・波兰斯基) :"></a>第九道门/罗斯玛丽的婴儿    (罗曼・波兰斯基) :</h5><p>波兰斯基这个名字，一听就是拍上句台词下句台词毫无链接文艺片的导演。我看的第一部《苦月亮》是有种云里雾里那个味道，但是《第九道门》《罗丝玛丽的婴儿》是切切实实的商业（？）片，门槛儿不高，很容易看，甚至这两部只看了开头就能猜到结尾。<br>《九道门》给我的感觉是街景特别美，街景不是被忽略的背景，这一点和别处不同。<br>《罗丝玛丽的婴儿》则是十分压迫，大有《煤气灯下》的意思。</p>
<h5 id="弗里达："><a href="#弗里达：" class="headerlink" title="弗里达："></a>弗里达：</h5><p>探索艺术有两个方向：一个是在技术上登峰造极，一个是挖掘人生的苦。<br>但是挖掘人生的苦必须满足一个条件————你亲身经历过，不然就是无病呻吟、矫情。<br>这是一部简单又伟大的人物传，当然归于弗里达本人十分伟大，天生资质和命运悲惨从来没如此鲜明地摆在荧幕上。</p>
<h5 id="大人物拿破仑："><a href="#大人物拿破仑：" class="headerlink" title="大人物拿破仑："></a>大人物拿破仑：</h5><p>太好笑了。很喜欢。和日本冷笑话一样，不看不知道。</p>
<h5 id="四百击（弗朗索瓦·特吕弗）："><a href="#四百击（弗朗索瓦·特吕弗）：" class="headerlink" title="四百击（弗朗索瓦·特吕弗）："></a>四百击（弗朗索瓦·特吕弗）：</h5><p>在法语中有一个谚语是小孩子要打四百下才能变乖，由此来的片名。<br>但我觉得，片中因为偷东西被送进少年管教所的少年安托万，缺的并不是毒打，而是父母的爱。</p>
<blockquote>
<p>“我要求一部影片或表现电影创作之乐，或表现电影创作之苦。我对介于两者之间的状态丝毫不感兴趣。<br>     ——弗朗索瓦·特吕弗”</p>
</blockquote>
<h5 id="异形："><a href="#异形：" class="headerlink" title="异形："></a>异形：</h5><p><del>我本以为太空电影的全盛时期是在苏美军备竞赛那一段时间，但是世界上最伟大的太空片（2001太空漫游）却又是出现在人类进入太空之前。</del><br><del>所以库布里克其实是外星人。</del></p>
<p>队员都太蠢了，很有娱乐性，一点也不哈人。<br>他们身穿宇航服的样子让人想起《海底两万里》中“我们”在海底森林里打猎一样。</p>
<h5 id="战舰波将金号："><a href="#战舰波将金号：" class="headerlink" title="战舰波将金号："></a>战舰波将金号：</h5><p>一部带着政治意识的片子看了竟不会反感，演员人数很多，大制作了。</p>
<h5 id="恐惧吞噬灵魂："><a href="#恐惧吞噬灵魂：" class="headerlink" title="恐惧吞噬灵魂："></a>恐惧吞噬灵魂：</h5><p>这个片子我觉得可以和《海边的曼彻斯特》《超脱》平齐，一部描写被排挤的少数人的片子。<br>片中的60岁奶奶和40岁外国打工男想要组成了家庭，听说这件事的邻居百般刁难、儿子踢破电视想要和母亲断绝关系、甚至楼下百货店的老板都不愿意再卖东西给女主。<br>两人决定出远门去放松心情，仅仅出去完了几天，回来之后所有人的态度都发生转变，所有人都急着和女主重归于好————虽说节奏快了点但我觉得这是想表达排挤是有多不讲理又无奈。<br>其中穿插着两人跨年龄、跨语言、跨文化的爱情，无比曲折又真挚。</p>
<p>是我看过最心动的爱情片了。</p>
<h5 id="亚特兰大号："><a href="#亚特兰大号：" class="headerlink" title="亚特兰大号："></a>亚特兰大号：</h5><p>引用豆瓣上的一句短评：</p>
<blockquote>
<p>大多数的人的生活就是这样不如意，男人无能，女人虚荣。</p>
</blockquote>
<p>等我到了踏入婚姻的阶段时我会不会想起这部电影？</p>
<h5 id="阿基尔，上帝的愤怒："><a href="#阿基尔，上帝的愤怒：" class="headerlink" title="阿基尔，上帝的愤怒："></a>阿基尔，上帝的愤怒：</h5><p>世上竟有如此神片？前半段几乎感受不到“摄影之眼”的存在。难以复制。</p>
<h5 id="现代启示录："><a href="#现代启示录：" class="headerlink" title="现代启示录："></a>现代启示录：</h5><p>在小船一路走向上游的时，虽然你看到画面感到愤怒恶心惊讶不适  但你的道德底线确实在不断地降低。<br>无法处理的谜题塞满大脑，缓慢的过程不断麻醉神经，让你不再思考，最终我们放佛淡出了文明社会一样。</p>
<p>迷幻的烟雾、轻贱的生命、漫长的时间、残留的冤魂、横死的尸体，魔鬼慢慢揭露真实面孔。<br>随着电影的继续你也放弃思考逐渐失去自我，只有你关掉电影出门散步时冷静才想起战争片是反战的，这一部也不例外，才发现哦自己上当了，自己又被电影欺骗了。</p>
<h5 id="科学怪人的新娘："><a href="#科学怪人的新娘：" class="headerlink" title="科学怪人的新娘："></a>科学怪人的新娘：</h5><p>很有舞台剧既视感的电影。这样《狗镇》就不是什么创新的了哈。</p>
<h5 id="西部世界-东城梦魇（HBO连续剧）："><a href="#西部世界-东城梦魇（HBO连续剧）：" class="headerlink" title="西部世界/东城梦魇（HBO连续剧）："></a>西部世界/东城梦魇（HBO连续剧）：</h5><p>都是HBO电视剧就分在了一起，不好看也不难看。<br>这两部还有一个共同点就是，男人都坏透了。<br>《西部世界》里机器人觉醒都是从女性机器人开始的，不能忽略，这确实是时代印记。</p>
<h3 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h3><table>
<thead>
<tr>
<th align="left">书(9)</th>
<th align="left">阅读日期</th>
<th align="center">评分(10)</th>
</tr>
</thead>
<tbody><tr>
<td align="left">海底两万里</td>
<td align="left">2021/8/5</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">规训与惩罚</td>
<td align="left">2021/8/10</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">manifesto of the communist party</td>
<td align="left">2021/8/15</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">电子工作入门</td>
<td align="left">2021/8/17</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">活下去的理由</td>
<td align="left">2021/8/18</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">沉思录</td>
<td align="left">2021/8/19</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">俄国新经济政策</td>
<td align="left">2021/8/21</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">銀河英雄伝説 2 野望篇</td>
<td align="left">2021/8/23</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">小径分叉的花园</td>
<td align="left">2021/8/24</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">银河系漫游指南</td>
<td align="left">2021/8/25</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">墙上的斑点</td>
<td align="left">2021/8/26</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">航空航天导论</td>
<td align="left">2021/8/27</td>
<td align="center">-</td>
</tr>
</tbody></table>
<h5 id="manifesto-of-the-communist-party："><a href="#manifesto-of-the-communist-party：" class="headerlink" title="manifesto of the communist party："></a>manifesto of the communist party：</h5><p>书捧在手上的时候那个激动————共产主义果然是个好东西！什么都没共产主义好！<br>冷静下来一想，在我有生之年是不会见到的了。</p>
<h5 id="俄国新经济政策："><a href="#俄国新经济政策：" class="headerlink" title="俄国新经济政策："></a>俄国新经济政策：</h5><p>亏你们能把这种高中课本上的三言两语解释好的知识写成400页来卖。<br>看到苏联政府为了钱开始把教会的财物宝物抢走时，还是会忍不住思考一些人与现代社会与信仰的问题。</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>每月总结</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>每月总结05 (2021/7)</title>
    <url>/WestRoute.github.io/2021/07/31/MonthlyRe05/</url>
    <content><![CDATA[<h1 id="七月总结"><a href="#七月总结" class="headerlink" title="七月总结"></a>七月总结</h1><p>电影 24 部，书 9 本 </p>
<p>脱离豆瓣的第一个月，没什么心思看电影，也没完成了最低限度的观影计划，算是假期了吧，8月份明显看的比7月多。</p>
<span id="more"></span>
<table>
<thead>
<tr>
<th align="left">电影(24)</th>
<th align="left">观看日期</th>
<th align="center">评分(10)</th>
</tr>
</thead>
<tbody><tr>
<td align="left">姿三四郎</td>
<td align="left">2021/07/01</td>
<td align="center">5</td>
</tr>
<tr>
<td align="left">泳池情杀案</td>
<td align="left">2021/07/02</td>
<td align="center">5</td>
</tr>
<tr>
<td align="left">新桥恋人</td>
<td align="left">2021/07/02</td>
<td align="center">8</td>
</tr>
<tr>
<td align="left">打开心世界</td>
<td align="left">2021/07/02</td>
<td align="center">7+</td>
</tr>
<tr>
<td align="left">致允熙</td>
<td align="left">2021/07/03</td>
<td align="center">7</td>
</tr>
<tr>
<td align="left">至暗时刻</td>
<td align="left">2021/07/03</td>
<td align="center">6</td>
</tr>
<tr>
<td align="left">银翼杀手</td>
<td align="left">2021/07/04</td>
<td align="center">7</td>
</tr>
<tr>
<td align="left">银翼杀手2049</td>
<td align="left">2021/07/04</td>
<td align="center">7</td>
</tr>
<tr>
<td align="left">小鬼当家</td>
<td align="left">2021/07/04</td>
<td align="center">6</td>
</tr>
<tr>
<td align="left">万物理论</td>
<td align="left">2021/07/05</td>
<td align="center">7</td>
</tr>
<tr>
<td align="left">一代宗师</td>
<td align="left">2021/07/06</td>
<td align="center">7</td>
</tr>
<tr>
<td align="left">萨利机长</td>
<td align="left">2021/07/07</td>
<td align="center">7</td>
</tr>
<tr>
<td align="left">E.T. 外星人</td>
<td align="left">2021/07/08</td>
<td align="center">5</td>
</tr>
<tr>
<td align="left">红胡子</td>
<td align="left">2021/07/09</td>
<td align="center">7.8</td>
</tr>
<tr>
<td align="left">破浪</td>
<td align="left">2021/07/10</td>
<td align="center">5</td>
</tr>
<tr>
<td align="left">第九区</td>
<td align="left">2021/07/11</td>
<td align="center">6</td>
</tr>
<tr>
<td align="left">心理学导论</td>
<td align="left">2021/07/12</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">公民凯恩</td>
<td align="left">2021/07/13</td>
<td align="center">7</td>
</tr>
<tr>
<td align="left">毕业生</td>
<td align="left">2021/07/14</td>
<td align="center">7-</td>
</tr>
<tr>
<td align="left">π</td>
<td align="left">2021/07/15</td>
<td align="center">7</td>
</tr>
<tr>
<td align="left">雾码头</td>
<td align="left">2021/07/16</td>
<td align="center">7+</td>
</tr>
<tr>
<td align="left">奇巧计程车</td>
<td align="left">2021/07/17</td>
<td align="center">6+</td>
</tr>
<tr>
<td align="left">马耳他之鹰</td>
<td align="left">2021/07/18</td>
<td align="center">6</td>
</tr>
<tr>
<td align="left">二战的指挥官</td>
<td align="left">2021/07/19</td>
<td align="center">8</td>
</tr>
</tbody></table>
<p>这个月重点看了黑泽明，但是我真的不怎么喜欢他的电影，还是我的等级太低看不懂，虽然看了一大堆除了被镜头之美震慑住以外但是并无什么想法。<br>我不喜欢完全依赖于剧本的电影，但我也不喜欢完全依赖于镜头的电影。<br>当然，黑泽明的伟大不会因为我的看法而失去光泽。</p>
<h5 id="新桥恋人"><a href="#新桥恋人" class="headerlink" title="新桥恋人"></a>新桥恋人</h5><p>特别长的电影，看完之后不太懂，之后的50多天里反复出现在脑海里。<br>很神奇的电影。<br>本应该是讲的是爱情，但不是一般人的爱情，讲的是处境极惨的两个人的相遇，当本是千金大小姐得知自己的病并打算回去治疗的时候，流浪汉疯狂制止甚至被捕入狱。<br>当我代入千金时，我猜测千金其实并不爱流浪汉，她爱的是那个抛弃她的音乐家，但是为何片尾千金又回来找流浪汉一起远走高飞了呢？<br>当我代入流浪汉的时候，我又不懂为什么流浪汉会那么拼命地阻止千金回去治疗眼疾。我的独占欲也很强，但最终都不会采取任何行动而是烂在胃里，对于流浪汉的行为也是无解。<br>我反复想起这部电影，但还是不明白，或许我不懂爱情吧。</p>
<h5 id="万物理论"><a href="#万物理论" class="headerlink" title="万物理论"></a>万物理论</h5><p>虽然人物传记总是有很多美化，但多看些人物传记我觉得是好的。</p>
<h5 id="萨利机长"><a href="#萨利机长" class="headerlink" title="萨利机长"></a>萨利机长</h5><p>我们都说外国办事效率差，一个案子反反复复要申个好几遍，看完之后也不得不长舒一口气，这一个电影会让人们对复杂冗长的法律办事风格造成的不变改观吗？一部当然不够，最好还要看十二怒汉。</p>
<h5 id="Π"><a href="#Π" class="headerlink" title="Π"></a>Π</h5><p>是我喜欢的类型的电影，太帅了。喜欢科幻的或者追求癫狂特效的人十分推荐。</p>
<h5 id="毕业生"><a href="#毕业生" class="headerlink" title="毕业生"></a>毕业生</h5><p>每次当你以为主角要做出正确的决定，或者主角自己以为自己终于要做出正确的决定之后<br>他都选择诚哥路线</p>
<h5 id="破浪"><a href="#破浪" class="headerlink" title="破浪"></a>破浪</h5><p>看不懂看不懂，不喜欢。但是不喜欢的话就正中导演下怀了。</p>
<h5 id="二战的指挥官"><a href="#二战的指挥官" class="headerlink" title="二战的指挥官"></a>二战的指挥官</h5><p>挺有趣，下饭</p>
<table>
<thead>
<tr>
<th align="left">书(9)</th>
<th align="left">观看日期</th>
<th align="center">评分(10)</th>
</tr>
</thead>
<tbody><tr>
<td align="left">銀河英雄伝説 1 黎明編</td>
<td align="left">2021/07/01</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">Operating System Concepts 10th edition</td>
<td align="left">2021/07/02</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">亲密关系</td>
<td align="left">2021/07/05</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">Intimate Relationships</td>
<td align="left">2021/07/06</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">Linux Basics for Hackers</td>
<td align="left">2021/07/6</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">Wireshark网络分析就这么简单</td>
<td align="left">2021/07/07</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">哲学的故事</td>
<td align="left">2021/07/31</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">猫</td>
<td align="left">2021/07/31</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">理想国</td>
<td align="left">2021/07/31</td>
<td align="center">-</td>
</tr>
</tbody></table>
<p>总体看，技术书偏多。</p>
<h5 id="银英1："><a href="#银英1：" class="headerlink" title="银英1："></a>银英1：</h5><p>很好看。</p>
<h5 id="亲密关系："><a href="#亲密关系：" class="headerlink" title="亲密关系："></a>亲密关系：</h5><p>写的很全，一次包罗所有感情烦恼。当我发现我的思维和一些书中的大男子主义符合时还是有点难过的。<br>早就应该看的书之一。</p>
<h5 id="Wireshark："><a href="#Wireshark：" class="headerlink" title="Wireshark："></a>Wireshark：</h5><p>这本书打开了我的计算机学习的新世界。</p>
<h5 id="哲学的故事："><a href="#哲学的故事：" class="headerlink" title="哲学的故事："></a>哲学的故事：</h5><p>这本书写得太差了，哲学入门应该从耶鲁死亡公开课开始看，视频很下饭。</p>
<h5 id="猫："><a href="#猫：" class="headerlink" title="猫："></a>猫：</h5><p>好长啊好长啊，对于现代人过于枯燥，但是对于那个时代人来说很幽默。当我和字幕组的人交流时大家都一致认为日文是写不出真正的幽默的，总是文绉绉的。</p>
<h5 id="理想国："><a href="#理想国：" class="headerlink" title="理想国："></a>理想国：</h5><p>对话形式，十分好读，很轻松。<br>从什么是正义入手，讨论了个人的正义（正义只有在需要的时候才是正义），再到什么是正义的政府，发现这个问题实在太大了难以讨论，于是讨论如何从村庄建成一个庞大的帝国开始模拟环境，不断提出问题然后解决，最后柏拉图得出的结论是：国家该由哲学家统治；统治阶层和防卫国家的战士应该共享财产，妻子，后嗣；男人女人平等地参加工作；良好的基因应该和良好的基因产下后代，到底谁是良好的基因这种隐私和交配决策全由哲学家管理。<br>结论上来说确实有些难以接受，但从中可以窥探些实用的方法论。</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>每月总结</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>每月总结04 (2021/6)</title>
    <url>/WestRoute.github.io/2021/07/02/MonthlyRe04/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c9308f1858439e343fca80b48c2f8180d792aec273a06d64ca4dea47dcdfe27f">ddcb92ca3505b02d4d9056cce2d4f9b4666c74a466842a190723c2dd4baa2b54da2b06babec5bc3d262a530161183b7cf0348c68879dad3bf3bdb2ce972a18b016fe27ec27f16cef56f1bfc98b9e014f58a274039dcecd99c219fb1ee342848e229ac1f379641b0dfc562104cd9facd8831eb5303014d8f2fe1c003b3dc859e5905bb840eb2edceb7e060b0d41bd42c0351f518e18abf748395267b2a898c824b9709fa793d4bec3226cc47464ff396f921e6efae0c6e9bb7e4e0b8872f28f5b91dbaae22777db26b4e66d2e013d9104a1757b331a3b2f027ea50cc740f5a850142155deddc9b81b88f744261ef512db778f66e6e93c3b97140eada743e7903bb36c445251b221e87922e2fd2e80ba28e9418d0a3afedc01718b42373dd9e01e3c223d412d6e4e2d8b512542e772230c1a2f90f786deca44955ce4010d477c7561089cb343bf0db877ed94592927889316d368508c42eac074b111938e6be86e927c30c3b5c22eaa2eb297296b1b746ff1154acccb87df322dfcc46b4381ef74869a3f5f426017f4dd07fd964285dd2e3a2b7d591926ea3e0d687d62b32e1698e0c842854862e89bbc1098f2a83868693c4f957b553a1901a81ac3e621885450055ac0e948df4b6966fb040f0c3195c4269c08fe4ff05f18e299e80ccf2897436554acd73d610a465b29a27b4a38ac610a353c28e43c27db263683aac9349c11368f5ed34f43af701101a0c975cbb7a5ea1d7220d1189c8ee5aad7f74cf3354399749d7fae98b5cb0824af16359cabd49bc46ecad5cdaf0e4a104bad7dfdad31eef77c60e862c7ff8b41bcf7d2e2de3eb3bb277dbbbf04a443df2194e41760573f1085e16e708c7efd796e4ce94eb948b438c405b272af273c0eb14668e1e6da4f1ae8e56a9e6c97dd5a9fcdc0da9f43c754780c76c2371aa221da988fbc8d42d6fb3a02c3ecc894d5f14d5794bb8068466330487581852e9ee733ba9cae22f6223e3f2a3cc03a86bd811825b263c6a5d9760053d5567e3a53ef28ec1e73e769d3a1afba445576b7eb5afebaf217ffd3a443b97ca86ba545447ae7c557813807550cc9c26d25658aa9e4438c99b56a994e28c970b345282393868dff72b9d174f75b75c86347cc86df94b05a08d97337cb25101319130128004026ef94b028a53ad2c4e9913141d6232f259436e5f2853fd3c22aadbfb56bc18b083e1ed99f7ca887d71aad0b2528c7e1194dd4d244db6c10c3165786f256a9266e3ae498080668687df585d1da3cf0733ffc04ffd66594e21f80bd9a5791e201bb96bce8cd12</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">继续阅读需要输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/WestRoute.github.io/lib/hbe.js"></script><link href="/WestRoute.github.io/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>每月总结</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>2021年6月疫情下的影院记录</title>
    <url>/WestRoute.github.io/2021/06/08/June-2021-%E7%94%B5%E5%BD%B1%E9%99%A2/</url>
    <content><![CDATA[<img src="/WestRoute.github.io/images/1.png">

<p>尽管电影院解封而已学校上课还是remote上课，等我在家里接受完考试出门才十二点半。</p>
<span id="more"></span>
<p>第一场是 《少女与战车 最终章 第3话》 。</p>
<p>这部动画讲的是在在以“战车道”（开坦克）作为女子修养的世界里，各个学校的女学生们驾驶坦克参加演习比赛的故事。剧场版侧重于表现作战临场感与紧张感，甚至很多时候是坐在坦克上的第一视角。除去独树一帜的临场感，主角队的作战策略也是这部动画的魅力之处。<br>在第二话前半部上演的是迷宫里的包围战术，主角队（ 大洗 ）一气呵成地绝地反击十分畅快。可到了后半部则是在丛林中上演了拉锯战。在第二场比赛里，主角队没有占据优势，这场比赛延长到第三话开头部分。水岛努在第三话前半展现的是隐蔽性极高的丛林游击战术+夜战+长时间作战这样艰难的战场，也对主角队（ 大洗 ）过于依赖西住的指挥这一缺点进行讨论。<br>我个人觉得和第二场超长续航作战没有第一场对凡尔赛来的有娱乐性。我想水岛努是想展现各种地理环境各种艰难局面下不同的作战吧，不能说不好，但确实不那么吸引人了。<br>除了故事之外，坦克的炮声也是特意来电影院看这部电影的原因。听留学生们说，国内影院的imax比日本imax更要响亮，如果可以还是希望国内也能上映。 </p>
<img src="/WestRoute.github.io/images/2.png">
第二场是 《少女☆歌剧 Revue Starlight 剧场版》 。

<p>没吃午饭<br>其实我是非常讨厌少女歌剧tv版的，而这次是个全新的故事于是我就去了。<br>这部动画讲的是为歌剧舞台挥洒汗水的少女们的故事。<br>先说说我为什么讨厌这部动画。这部动画的监督 古川知宏是我最喜欢的动画监督之一 几原邦邦彦（《少女革命》）的徒弟。我喜欢几原邦彦喜欢到认为他是我的再生父母。</p>
<p>《少女☆歌剧 Revue Starlight 剧场版》<br>少女歌剧的tv动画过度模仿（同样是决斗，同样是舞台，同样的反复播放换衣变身画面）但《少女歌剧》的舞台又没有《少女革命》那样宏大、多态、深刻。说是让主角们挖掘内心的欲望，但角色的形象却十分脸谱化，单一。<br>于是我给《少女歌剧》tv动画打了1星。<br>这次我还是去看了剧场版。刚入场，观众男女比例是男3女7让我受到冲击。（之前我看过的百合动画基本都是男性观众）难道。。。来的女观众都是女同？<br>等我看完了这部剧场版之后我对古川知宏态度180°大转弯————剧场版的人物刻画更加鲜明生动，作画也更加自由，短短两小时（也不短）塞进了6场打戏，诚意十足，配乐十分精彩，最重要的是画面也能感觉到古川的实力————不是对师傅的照搬模仿，而是真正的活学活用，展现了十分精彩有感染力的画面。<br>我觉得tv版只能算是一点点开胃菜，剧场版讲故事进行升华和总结。感谢古川这次让我看到了这个月最华丽的舞台。从各方面来讲这次的剧场版我都会打5星。<br>（剧中几对组合互相告白，旁边的妹子竟然哇哇在哭，所以你们果然都是女同对吧）<br>周五打算去看电影《闪光的哈撒韦》，《希德尼娅骑士 剧场版》，很期待。也希望能有时间三刷eva。晚安。</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
  </entry>
  <entry>
    <title>每月总结03 (2021/5)</title>
    <url>/WestRoute.github.io/2021/06/02/MonthlyRe03/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="5e60d77008f555e68439fd8ed78e40c126c2c2a2731b348a40765f5babfb5cc6">ddcb92ca3505b02d4d9056cce2d4f9b4ccacdc5b68e03a9fd4a4bf07591312dcfcaa18ba4c034ac8d2ef1400f94709bf865e119071cc76661aeae11ee329994f72bebcfd88bafd447d3e63796ff4f53c583076de83655b275338177a58c5ee9200d2c889ccfc6aa478644be6aa8eec714989f632970421c0c88522bdecf9a3a1dd0df0e33cefd9818200cd17090207f4c49b21b93d570c689f975885def7e12c03564374388cde189571afc93de4cc500a85c44c8348265fd769b90c875dad049221a5c17d292afc4c89bc8d4b5a20e82743bd762ada76673a49ebc6cd2e22560872f80189d2be1ca0b7bef4258e03d433e36ef7baa9db823360c644a1d82f8ff9dc327768e94f8721efb17f18140361094b41438bdf57ff113a238dc84622650a2cf7b0162d08cf4e26d63f65ae9d6d773ed6356e51402895fe633deff8b7bd8b7ce98051b63db7d8ccdbe0fc23778fb7a743709d076ebc2500197c6120fc48f8f11ba6cbad0bacde2dfa1ae2997f29efa4274d8e49bb7b8229407bf7a54249cf79a8347ba2bf11fa924769406d4f059cade29ef4307b83df99be24f12df0dc4b358dc660aa3d94d9bfc1f1d96fc263b7b5abeae5204b31b6ac9d9ccbf8d36e310496eb4ad4515fc8f3b617e89b1c3d2a855ee1f0559ed47ef75713d796ff171a1a18fc035c001d798b31526ff27b0d081a387a0b72721d718ef4f8f8346ec662aaffb233db5284b4aec1d303c0964022bacf40931e769f8061c9a4c4be3193b3ca60be1f6fcae0b02249cbf69d31ecb4f8ba0fd45ae5f8ce122475701e8c66c2e1652a9e9d70a67a29e4708e2155f5a8465e084a8ea17f370a111d4b3a159e2553798e99b79b6fe6e237adb3e7b811d24f101255d2e44b58674d243a386c62e26ba0ad9ebb4c10061bb7044c3e47d4f4a9d7613f0c4a79a4b009009278e0f1de726fb912613133596c09066a3283c74057503d90f151ba98afd8f20d7ba3e77a9a67c2042b6ab144e1830a7a8ab3f42762e3088362c57e018868cf4d347303ad9b7087da3c63965edcaa4ed0ce8bf732106e16580e5f4a3041b0d2641bb812849157f7930c46d46659c29805321e4e0e55712feb969a6056d3084549fb2f29128cef1257bf66fabf48272aa3d617f47197ac5174d99a483ac9f953f50d970aca57c1ee9cec7dde22edac67fe9b7ad11775af62b54c8cfa977364148b34b2dc865846c271e6acb50c5fa4e368711fff583e502e9bb8e983dbca3cbb87c1b8cf6d319df43a1a7a68551d7cfaa222f2b977a8d1a30f6c59ebfb849abd8b782eace5288ef58812f8a4de1b9a9254fd07b67708692525abd99881b722a1165206ed042bc2786be569d08fedd460690543bc48f1e63f4602c7b6943c33cf9a49388aa5ef6461d66f662522bb9678637bee399fd0e848c6267a5c13b68de097e01dd6433e33e8ff9fb111e690bb4388e5f77e269890a87f16e7797ec6e57561002fc4cf763e3c8f7543266834f17396c9e570e79bb5b17c28a59c475e026d34664a8a1836d4c6592a146463bc23d4124515cebcb4b409191a9a5def27d3c9f4653817027390e14557d08fb5cc5c639a989bd545c7b0310d46a4d56d38b76f281a3a5f11ed89843c007991f3a40a65852b61b62bdc4e6adfb53827b159426515e700bfca9065d5c46082af52a03346e6cdab977fa021ae38c0eac0d9d49d5ccbbf26ca867542318497e72897310606a3643c608133589f2cc208ca13ecf989d41cb7ae9dde026e745dc21b146c7cc3d9e2cc53a4e7f0159ae0121dbd63047648fdfb3e90f0173645cde9fcf100cca8964b9227c47742f09f4330e325589807a08df82b417363421aacfeee7c7ee397f700e53b4d6eec6bf87381e29c971b7a4a880ef74b8583aeac8b4b72d747a8316c984e0596cd263936db8e8b048a5cad9818a0c561a9cab1bc72183f26a0a3f1658c07b2205306eaece2600029cfcb8361c45997d5ffcfe324cb1f497a0c8aafc995d8cb690e8dd182469b46d3c72a03c67a68d73d9b77b2be8ade04416722db5d6fd53c6b60eb91d87eb1eb84184ea07138b812d0c4097cbea60296b30331461d719af8094ba58ab35bd8be254d01943421468c9481d9b980a473872218ada687bafb8db7af3ba4475f9e63744e8977cb1c44c923f2169ee25146b28d036a71a2a1d91d3b647a4db04dc7bfe57c9d6fce0d95721ce9d1a2b138cf7ebdc0a9c2b90d2c8d1737e850709da0317c5e2d7d59e32dc8288db03bf78ab067a64da186469d4a31205acb31d32a2a4be92d34cce5fe4214e3b69705e7bc6bb32007e248bba3740c667ce5b98f987a1f313f12e21ab9a3d458eea1645ef9cd3681a4ce52e306be7783e2f6e593432c71b2d10db2cc7cd0dbdc140fac92bc208edbe11742d07f14ab278b4804462714fccef98efc12b2f83dc75e4b3b0897649b90afc0ebd65b5dbcade7a971a60e0ede0bfdf33797780e43e823a01051d2a9d51b0836c605a3223cbcd59a407eb8820bf3ef01f5c3b1ef333f94878525e94708d98ceee642fe5bc87ce72f90b9bab7bdbde653d607b907aef989ae4203f111a125afa0509601c6e58ba51d28b6baa6a498f45bd7d0b4bb907f41c26f524d388da855b1725ff2b1b961b7b617405522ba9be7fa1be5dd87aad85fde039372cedf4401a590c2468fb2d926f70e72caf02d34fff090e656a98f6c54a74c5278c0480ce8fa113088559fcdff3981d9d85fedfbe9ca8976bc8452e2df2b5a5d5a88ca346be5524140d87a73c3f044803d6a0807a9fce6b88c881f0a45e1d02391cd3206557a45e8e24cc3ddd4bad32c5581f57d3db0da95bbf64bff0634df08fbd894064a7671807c241218417f66b34dbdc6968d44faf380847d2466786d0c39ff9ba5320e86396360a15337e696382e2dfb3e97806629abd537c2257e67b0f1d4eca7488b9c460c47f79e4b8f1ecb3d35951d942a8f2c02919f0faffed6a15ea1ddb4271e9b33cff7e01dcc4a75124fd5170d54c6a33ee7142d4f43c04de66a295c29a7611b0f697a0897f0d6cc142e01a368591e98e23a59e58edffcdb4a2e02787056fc1d4f7729b30595e7f64c385312a7fcad0d46f141da67e12b07dda79cc388e5fe02dec388227006cc42f67aac9037c4f4daa7f2f4555951bc585e9d3d968dcfd27a608b35290cc5797775c5357931d04dbdb9ac4895afd2f57c3c5f8c8baac79d64edf8f978a5f039cb6b16fea2ce951ecd625c6897cbc3b676f94b53799838f2d17acf36ba5a449c3a1673b89951a5e760cf0e8ca7520994aaeb9e7ede34ad321c971149094994e23716352734824fd15f404a973f05b57ff5972d21e479faa7a6cb2a26f5f3377cd9d2d94402334223c0953ed7dac2052232cc599808ee6cd8a7d46fe9d777fdbcd00f24944e77c6ff9b2da3a46f8ae8e96ab4684511a3383334795363f6c035fd01dc0e55401fcf5bee4a05a286c52b75d4cfd5f5695fde64bb81629709649f13ae633e885678e06c9f2d2083300e2e3ee882186639f7ee2babe1395600d4b10fd706b179de0ad138103b96e45021c7dc3a2969bc42e3f8f9395416467dff9cb2df7d35b2efc140f1847e630e284dbd106f224a3c79996fca36046b1fed2753b39b22c9f0aa304611bee7f218e05a1220341973f027df621c6a592e32e55c714dcd1d4548a0234e89839eb5dcb9bd4687497e4ce94d07149a5a28b8f730e00dcab07fd9eae097d1603f178a9279675cdcc3122814c9e63e374102e961168e16810b1c9f296ca9cfd01637ac1ec439c0d33320d10a8866894bb25d0d8ee791db315db1394ee89e6ad141ab8ea6b3a7f67623050c09e23a37c573d9cbe1ba40b146cab8e93e90a57aced101b2877301fac3c0c5cf3b599bb409f65e37b306469ba62b94150df60e3912f68c878c8fdf3118e7d6eb1a4a59c5eb6ce4820d41c6cd164bf2cc5c78d2324f6ce6baa4475a6e1dbfb7edb7285fa4aba5e21ac536c8d2b5819e4b19b41dcccbb552bdc956bfd30916f84cc5e58859cb193f5d81a279067201dfb1d7930b414df36aba0537d68d96b2326268a72cafbc2571a8ae351ff7be96622c708e4bd2a79e232ad81a89b2de71a702f94fcd6a4decfa372cf725af5759aed57a430ba873f31a6ee5f7e9e77953af0cf0e751de2895e06e43070eb7d3a2ffa85ab1ddf111e6fbd1d9551611c847bf679e8f37d2f1fcc21d028cf1aa2cdd5e6a5af7504d7f97d44f50680d749212e19803816feb29dc22b47694c435084413aced9e8aac3f13e1efac77258ab23f1a894be95300483af006100a4adedce4c273f365311f8127c22e4ea94ed143bdd1677e3790bfbb2afc6806dfae7ecd55d402a6f7595e87d5ddc050987312bd862722048e23fe930f63169429912601697f34bef0d42dc8ad797cd759e309b1dbe8b38b16bdc093bebd31b8e673a895a7a3184a70083a7d5eb8499a7f1fec9b8876494faba5c70c2589a0f5bfdd3861a259edd35dc6634704e70c14a1422dfe8d4ec9f2342220b3ff202e7467d187fa66145070539c9ceafd8b682c2c142cf3266f29c4fcefd9d34cf2410399855cb806cfc197a11c68912a5dff2bcdbcddb8a7efbec0e3bc373efd6e89bf5892f427523f22575413d487389a238c4b2ba895028c3306730d9a4bc3742c3c406b4820f91abe022f132feb75c3e75a03e3e272e59f3b040c9b888dd9bc103bb0f46ffe490ffc18b490a111203bb40b8687a89ab6616cf0e6c09a8b09bd967e49475ce0b921648c079b7aea01069ec4c7dcac1d3b0d910fd6a824e9fe3ad87b7b80303315498bd7ebb1c8eeef4b5d7999c0c6b2a71749e0caef1189e87f6bedad44010a35602f2486cb5fdda90e1562175b0f06223ce68577a3c92b7a426aba77a76f50d6f495a0459668a231938c1b5f086cb134f2f531761b9999be1b989fa917ec7411aa7bbc81de6bdbe2953dc3b6ef32130405dfa096a208929d8c4c26b266aca336c6205ed3e055fccb0a1cf2c02180f633280bf54274f741aa4efd54eef6e28b8b7b6a72c9c3268f63a54a1cb94b37cf7b35dc868d10ef559669d0f3cb0047ff2e57cc5442fc4472271b1bddda5242ec74c9682c8b752a60a12840c5b4c1dd1c124e046f0d18b680f8ca5eec3a31e3009c0e69c1d85c98d1cbcd62751f788c4de7b302f2492ef1895bd4b56a9bdb63ecff2498315cd75a6baaeddfcec5d123a9b82eaa2c0e253efe39d8a4b1aa03cf7a6ebf9dae93b9e7b8a77c4875551683bb2df9161ae84a9362545fbc5dc6925a8e1784ee49f10f540122ae0cdbc99c4d973838f0380beb09ec477e0fa5b89c7a5436edc81009527852037638356b8842da20a3ba5b345f65510a666c955a936e2d84ca74b83b8c9b1ab9333d77b4fdca08170156dbd77097f0f837b549a248957dbb4402b95d9b08032e0c6f5873dd1fd21c6f3d58f9c7edf2af69475d718df974128cc4cc7721a7926c15d83dfa</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">继续阅读需要输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/WestRoute.github.io/lib/hbe.js"></script><link href="/WestRoute.github.io/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>每月总结</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>每月总结02 (2021/4)</title>
    <url>/WestRoute.github.io/2021/05/02/MonthlyRe02/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="69dcdf91e7f71c997edab389a4de394b403865a9452808ca808b998e89278daa">ddcb92ca3505b02d4d9056cce2d4f9b46818d8b633af996e579accbfa8345f66cc5679563ec90b0c68cf1970cd1ad65a6f3cc1fa55e43969c3c53977c2f20b7b07ffc159f3eeaef8d22e528771079e8eebd1122c2c51d8dfcfe43b63fe9304eb25a8cca06ab3ce112275fd889a96188cef62349f38c12bd798b7eb5d33288bd7761ed80c09412401bb6d73800b007555911a3e34630f1312ebab7435afca6d8f19a1c09cfea50fcefb39f482bf51c529559f50fe61389d1b4c10979175d3129f45d115aeb887ce8b401bf044ca8187197366ead5bcbd2007fa585ba2cf230bdf5e736961c0162d6a4da0230e98739fb6c54196cadd4a13b22fd512df3a6884cdfbeebbb47d44b8facfc446fa55e779357e5e12396e0945eed9ac5d100c751047b1908f8bdeae332885e45267404ebcbddac56e6ef95f7bb216084101294aa2c2</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">继续阅读需要输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/WestRoute.github.io/lib/hbe.js"></script><link href="/WestRoute.github.io/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>每月总结</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>每月总结01 (2021/3)</title>
    <url>/WestRoute.github.io/2021/04/02/MonthlyRe01/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7b7f0c96497d875efd329d5e9219b842aa6a827705ee9e5b145c4e6ef9a47ab2"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">继续阅读需要输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/WestRoute.github.io/lib/hbe.js"></script><link href="/WestRoute.github.io/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>每月总结</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>吉他英雄_凉篇</title>
    <url>/WestRoute.github.io/2012/12/13/%E5%90%89%E4%BB%96%E8%8B%B1%E9%9B%843_%E5%87%89%E7%AF%87/</url>
    <content><![CDATA[<p>凉，高二，第二学期，11月</p>
<span id="more"></span>

<p>凉半夜在床上被冻醒。早上5点，睡不睡回笼觉都可以的时间。</p>
<p>被窝冰冷让人睡不着，凉索性起床，加热了一杯胶囊咖啡，穿上校服的外套，走到庭院的木椅上发呆。本来不擅长喝咖啡，但每日都在一丝不苟地练习喝一小口，就算最后还是喝不了，想着以后要是能优雅地泡出一手「好喝的」胶囊咖啡给虹夏尝尝也不错。</p>
<p>回想起刚刚做的梦，是离开之前那个团体时发生的事。因为不喜欢乐队改变原本的方向时凉提出了离开。</p>
<p>「并不是每个人都像你们这群纨绔子弟无忧无虑啊！我们热爱音乐但我们也要吃饭啊！」</p>
<p>自己从来没想过自己和别人有什么区别，当曾经的队友投向仇恨的目光时凉觉得自己很委屈，但自己无法反驳。凉从来没有关心过队友的生活状况，也从要没有要了解他们。凉的借口是自己太过于热衷于自己的音乐了。</p>
<p>小时候选择摇滚是为了「反抗」父母的溺爱，但自己一直接受父母的恩惠，在衣食住行上与其他人的差距是显而易见的。凉无法解决其中的矛盾，尽管知道如此凉只愿承认自己只是不会关心人而已，但绝对不是他们口中的纨绔子弟。虽然暂时找不到有力的证据，当然也不知道去哪里寻找答案。</p>
<p>那之后虽然没有特意避开他们但也再没见过他们，仿佛是仅仅相交一次的两条直线越来越远。</p>
<p>回想过去不知不觉天已经快亮了，凉被父母叫回屋子，准备吃饭上学。</p>
<p>在餐桌上母亲问起了虹夏最近的情况。父母一直很高兴自己和虹夏同一高中，不然自己也早就走上高中肄业的道路了。和平常一样。凉有一句没一句地回着。</p>
<p>其实乐队解散之前已经认识了虹夏。</p>
<p>最开始的印象只是某个live house的店长的妹妹，不错的鼓手，和朋友组建过一段时间翻唱热门歌曲的乐队，不久就解散了，之后某个出演乐队需要临时鼓手时偶尔会出现在台上。</p>
<p>「你好厉害啊！你看起来和我一个年纪，家住在这附近吗？」凉记得是虹夏先来搭话的，带着服务业千锤百练出来的阳光笑容。</p>
<p>那之后过了多久了呢？现在那样好看的笑容依旧挂在虹夏脸上，但是凉觉得上了高中虹夏成熟的太快了，离自己越来越远了。</p>
<p>虽然上一次因为自己平时对什么事都很玩世不恭、无所谓的态度让本来普通的离开变成当事人们都不愿意回首的争吵，但这次凉还是不由自主地和虹夏保持着一点也不深入的友情。<br>哪怕每天夜里放下耳机时偶尔会写一些带有关于虹夏的想象的歌曲，但从来没在对方面提起过，全都随便夹在随便哪一本cd里了。</p>
<p>无论如何凉也做不到去触碰虹夏，因为主动接近别人一点也不「摇滚」。</p>
<p>凉一直觉得仅仅只是在旁边支持虹夏就可以了。</p>
<p>直到第一次live后庆功宴上，凉从厕所出来发现虹夏不在座位上好奇去寻找时。<br>————『我想让starry出名。』<br>————『…那我的愿望是和结束乐队的大家一起出名！』</p>
<p>看到的是两位队友的「互诉衷肠」。</p>
<p>果然是自己不对吗？果然自己缺少某种人类该有的感情吗？不然为什么虹夏没有对我说过这些？虽然自己早就隐约发现了虹夏的梦想—— 不，并没有发现，全都是不甘心的自欺欺人—— 自己从来都是站在最远的距离来守望着虹夏。</p>
<p>那一晚之后像关于前乐队伙伴的梦变得经常出现。</p>
<p>眨眼已经两个多月过去了，现在凉明白了自己完全不会对波奇酱产生什么嫉妒之情，因为就算出现的不是波奇酱，也一定会有什么人出现的吧，不如说是波奇酱倒让凉更没有危机感了。</p>
<p>虽然「噩梦」还会偶尔出现，但是凉已经感觉好多了。</p>
<p>大概今后自己也不会去尝试「靠近」虹夏吧。</p>
<p>或许自己没有爱别人的能力吧，或许自己是个自我中心的纨绔子弟吧，或许凉就是不会爱任何一个人胜过爱自己吧。</p>
<p>9月的某个周末夜里凉给虹夏发出的line，现在仍没有回复。但凉对此全都不在意。</p>
<p>毕竟没什么比让自己活得更像自己更重要了，不是吗？</p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
  </entry>
</search>
